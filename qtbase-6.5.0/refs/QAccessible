<def f='qtbase-6.5.0/src/gui/accessible/qaccessible_base.h' l='25' ll='403'/>
<size>1</size>
<smbr r='QAccessible::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZN11QAccessible26qt_check_for_QGADGET_macroEv'/>
<fun r='_ZN11QAccessible18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN11QAccessible14installFactoryEPFP20QAccessibleInterfaceRK7QStringP7QObjectE'/>
<fun r='_ZN11QAccessible13removeFactoryEPFP20QAccessibleInterfaceRK7QStringP7QObjectE'/>
<fun r='_ZN11QAccessible20installUpdateHandlerEPFvP16QAccessibleEventE'/>
<fun r='_ZN11QAccessible24installRootObjectHandlerEPFvP7QObjectE'/>
<fun r='_ZN11QAccessible25installActivationObserverEPNS_18ActivationObserverE'/>
<fun r='_ZN11QAccessible24removeActivationObserverEPNS_18ActivationObserverE'/>
<fun r='_ZN11QAccessible24queryAccessibleInterfaceEP7QObject'/>
<fun r='_ZN11QAccessible8uniqueIdEP20QAccessibleInterface'/>
<fun r='_ZN11QAccessible19accessibleInterfaceEj'/>
<fun r='_ZN11QAccessible27registerAccessibleInterfaceEP20QAccessibleInterface'/>
<fun r='_ZN11QAccessible25deleteAccessibleInterfaceEj'/>
<fun r='_ZN11QAccessible19updateAccessibilityEP16QAccessibleEvent'/>
<fun r='_ZN11QAccessible8isActiveEv'/>
<fun r='_ZN11QAccessible9setActiveEb'/>
<fun r='_ZN11QAccessible13setRootObjectEP7QObject'/>
<fun r='_ZN11QAccessible7cleanupEv'/>
<fun r='_ZN11QAccessible29qAccessibleTextBoundaryHelperERK11QTextCursorNS_16TextBoundaryTypeE'/>
<smbr r='QAccessible::updateHandler' t='QAccessible::UpdateHandler'/>
<smbr r='QAccessible::rootObjectHandler' t='QAccessible::RootObjectHandler'/>
<fun r='_ZN11QAccessibleC1Ev'/>
<use f='qtbase-6.5.0/src/gui/accessible/qaccessiblecache_p.h' l='64'/>
<size>1</size>
<doc f='qtbase-6.5.0/src/gui/accessible/qaccessible.cpp' l='31'>/*!
    \class QAccessible
    \brief The QAccessible class provides enums and static functions
    related to accessibility.

    \ingroup accessibility
    \inmodule QtGui

    This class is part of \l {Accessibility for QWidget Applications}.

    Accessible applications can be used by people who are not able to
    use applications by conventional means.

    The functions in this class are used for communication between
    accessible applications (also called AT Servers) and
    accessibility tools (AT Clients), such as screen readers and
    braille displays. Clients and servers communicate in the following way:

    \list
    \li  \e{AT Servers} notify the clients about events through calls to the
        updateAccessibility() function.

    \li  \e{AT Clients} request information about the objects in the server.
        The QAccessibleInterface class is the core interface, and encapsulates
        this information in a pure virtual API. Implementations of the interface
        are provided by Qt through the queryAccessibleInterface() API.
    \endlist

    The communication between servers and clients is initialized by
    the setRootObject() function. Function pointers can be installed
    to replace or extend the default behavior of the static functions
    in QAccessible.

    Qt supports Microsoft Active Accessibility (MSAA), \macos
    Accessibility, and the Unix/X11 AT-SPI standard. Other backends
    can be supported using QAccessibleBridge.

    In the Unix/X11 AT-SPI implementation, applications become accessible
    when two conditions are met:
    \list
    \li org.a11y.Status.IsEnabled DBus property is true
    \li org.a11y.Status.ScreenReaderEnabled DBus property is true
    \endlist
    An alternative to setting the DBus AT-SPI properties is to set
    the QT_LINUX_ACCESSIBILITY_ALWAYS_ON environment variable.

    In addition to QAccessible&apos;s static functions, Qt offers one
    generic interface, QAccessibleInterface, that can be used to wrap
    all widgets and objects (e.g., QPushButton). This single
    interface provides all the metadata necessary for the assistive
    technologies. Qt provides implementations of this interface for
    its built-in widgets as plugins.

    When you develop custom widgets, you can create custom subclasses
    of QAccessibleInterface and distribute them as plugins (using
    QAccessiblePlugin) or compile them into the application.
    Likewise, Qt&apos;s predefined accessibility support can be built as
    plugin (the default) or directly into the Qt library. The main
    advantage of using plugins is that the accessibility classes are
    only loaded into memory if they are actually used; they don&apos;t
    slow down the common case where no assistive technology is being
    used.

    Qt also includes two convenience classes, QAccessibleObject and
    QAccessibleWidget, that inherit from QAccessibleInterface and
    provide the lowest common denominator of metadata (e.g., widget
    geometry, window title, basic help text). You can use them as
    base classes when wrapping your custom QObject or QWidget
    subclasses.

    \sa QAccessibleInterface
*/</doc>
<smbr r='QAccessible::updateHandler' t='QAccessible::UpdateHandler'/>
<smbr r='QAccessible::rootObjectHandler' t='QAccessible::RootObjectHandler'/>
<fun r='_ZN11QAccessible7cleanupEv'/>
<fun r='_ZN11QAccessible14installFactoryEPFP20QAccessibleInterfaceRK7QStringP7QObjectE'/>
<fun r='_ZN11QAccessible13removeFactoryEPFP20QAccessibleInterfaceRK7QStringP7QObjectE'/>
<fun r='_ZN11QAccessible20installUpdateHandlerEPFvP16QAccessibleEventE'/>
<fun r='_ZN11QAccessible24installRootObjectHandlerEPFvP7QObjectE'/>
<fun r='_ZN11QAccessible25installActivationObserverEPNS_18ActivationObserverE'/>
<fun r='_ZN11QAccessible24removeActivationObserverEPNS_18ActivationObserverE'/>
<fun r='_ZN11QAccessible24queryAccessibleInterfaceEP7QObject'/>
<fun r='_ZN11QAccessible27registerAccessibleInterfaceEP20QAccessibleInterface'/>
<fun r='_ZN11QAccessible25deleteAccessibleInterfaceEj'/>
<fun r='_ZN11QAccessible8uniqueIdEP20QAccessibleInterface'/>
<fun r='_ZN11QAccessible19accessibleInterfaceEj'/>
<fun r='_ZN11QAccessible8isActiveEv'/>
<fun r='_ZN11QAccessible9setActiveEb'/>
<fun r='_ZN11QAccessible13setRootObjectEP7QObject'/>
<fun r='_ZN11QAccessible19updateAccessibilityEP16QAccessibleEvent'/>
<fun r='_ZN11QAccessible29qAccessibleTextBoundaryHelperERK11QTextCursorNS_16TextBoundaryTypeE'/>
