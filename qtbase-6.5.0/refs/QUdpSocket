<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='70'/>
<inh f='qtbase-6.5.0/src/network/socket/qabstractsocket.h' l='30' c='QAbstractSocket'/>
<def f='qtbase-6.5.0/src/network/socket/qudpsocket.h' l='20' ll='59'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.h' l='57' c='_ZN10QUdpSocketC1ERKS_'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.h' l='57' c='_ZN10QUdpSocketaSERKS_'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.h' l='57' c='_ZN10QUdpSocketaSERKS_'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.h' l='57' c='_ZN10QUdpSocketC1EOS_'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.h' l='57' c='_ZN10QUdpSocketaSEOS_'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.h' l='57' c='_ZN10QUdpSocketaSEOS_'/>
<use f='qtbase-6.5.0/src/network/socket/qsocks5socketengine.cpp' l='272'/>
<use f='qtbase-6.5.0/src/network/socket/qsocks5socketengine.cpp' l='505' c='_ZN26QSocks5SocketEnginePrivate10initializeENS_10Socks5ModeE'/>
<size>16</size>
<smbr r='QUdpSocket::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK10QUdpSocket10metaObjectEv'/>
<fun r='_ZN10QUdpSocket11qt_metacastEPKc'/>
<fun r='_ZN10QUdpSocket11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN10QUdpSocket2trEPKcS1_i'/>
<fun r='_ZN10QUdpSocket18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN10QUdpSocketC1EP7QObject'/>
<fun r='_ZN10QUdpSocketD1Ev'/>
<fun r='_ZN10QUdpSocket4bindEN12QHostAddress14SpecialAddressEt6QFlagsIN15QAbstractSocket8BindFlagEE'/>
<fun r='_ZN10QUdpSocket18joinMulticastGroupERK12QHostAddress'/>
<fun r='_ZN10QUdpSocket18joinMulticastGroupERK12QHostAddressRK17QNetworkInterface'/>
<fun r='_ZN10QUdpSocket19leaveMulticastGroupERK12QHostAddress'/>
<fun r='_ZN10QUdpSocket19leaveMulticastGroupERK12QHostAddressRK17QNetworkInterface'/>
<fun r='_ZNK10QUdpSocket18multicastInterfaceEv'/>
<fun r='_ZN10QUdpSocket21setMulticastInterfaceERK17QNetworkInterface'/>
<fun r='_ZNK10QUdpSocket19hasPendingDatagramsEv'/>
<fun r='_ZNK10QUdpSocket19pendingDatagramSizeEv'/>
<fun r='_ZN10QUdpSocket15receiveDatagramEx'/>
<fun r='_ZN10QUdpSocket12readDatagramEPcxP12QHostAddressPt'/>
<fun r='_ZN10QUdpSocket13writeDatagramERK16QNetworkDatagram'/>
<fun r='_ZN10QUdpSocket13writeDatagramEPKcxRK12QHostAddresst'/>
<fun r='_ZN10QUdpSocket13writeDatagramERK10QByteArrayRK12QHostAddresst'/>
<fun r='_ZN10QUdpSocketC1ERKS_'/>
<fun r='_ZN10QUdpSocketC1EOS_'/>
<fun r='_ZN10QUdpSocket6d_funcEv'/>
<fun r='_ZNK10QUdpSocket6d_funcEv'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='82' c='_ZN17QUdpSocketPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='82' c='_ZN17QUdpSocketPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='82' c='_ZNK17QUdpSocketPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='82' c='_ZNK17QUdpSocketPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='82'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='7'>/*! \class QUdpSocket

    \reentrant
    \brief The QUdpSocket class provides a UDP socket.

    \ingroup network
    \inmodule QtNetwork

    UDP (User Datagram Protocol) is a lightweight, unreliable,
    datagram-oriented, connectionless protocol. It can be used when
    reliability isn&apos;t important. QUdpSocket is a subclass of
    QAbstractSocket that allows you to send and receive UDP
    datagrams.

    The most common way to use this class is to bind to an address and port
    using bind(), then call writeDatagram() and readDatagram() /
    receiveDatagram() to transfer data. If you want to use the standard
    QIODevice functions read(), readLine(), write(), etc., you must first
    connect the socket directly to a peer by calling connectToHost().

    The socket emits the bytesWritten() signal every time a datagram
    is written to the network. If you just want to send datagrams,
    you don&apos;t need to call bind().

    The readyRead() signal is emitted whenever datagrams arrive. In
    that case, hasPendingDatagrams() returns \c true. Call
    pendingDatagramSize() to obtain the size of the first pending
    datagram, and readDatagram() or receiveDatagram() to read it.

    \note An incoming datagram should be read when you receive the readyRead()
    signal, otherwise this signal will not be emitted for the next datagram.

    Example:

    \snippet code/src_network_socket_qudpsocket.cpp 0

    QUdpSocket also supports UDP multicast. Use joinMulticastGroup() and
    leaveMulticastGroup() to control group membership, and
    QAbstractSocket::MulticastTtlOption and
    QAbstractSocket::MulticastLoopbackOption to set the TTL and loopback socket
    options. Use setMulticastInterface() to control the outgoing interface for
    multicast datagrams, and multicastInterface() to query it.

    With QUdpSocket, you can also establish a virtual connection to a
    UDP server using connectToHost() and then use read() and write()
    to exchange datagrams without specifying the receiver for each
    datagram.

    The \l{broadcastsender}{Broadcast Sender},
    \l{broadcastreceiver}{Broadcast Receiver},
    \l{multicastsender}{Multicast Sender}, and
    \l{multicastreceiver}{Multicast Receiver} examples illustrate how
    to use QUdpSocket in applications.

    \sa QTcpSocket, QNetworkDatagram
*/</doc>
<fun r='_ZN10QUdpSocketC1EP7QObject'/>
<fun r='_ZN10QUdpSocketD1Ev'/>
<fun r='_ZN10QUdpSocket18joinMulticastGroupERK12QHostAddress'/>
<fun r='_ZN10QUdpSocket18joinMulticastGroupERK12QHostAddressRK17QNetworkInterface'/>
<fun r='_ZN10QUdpSocket19leaveMulticastGroupERK12QHostAddress'/>
<fun r='_ZN10QUdpSocket19leaveMulticastGroupERK12QHostAddressRK17QNetworkInterface'/>
<fun r='_ZNK10QUdpSocket18multicastInterfaceEv'/>
<fun r='_ZN10QUdpSocket21setMulticastInterfaceERK17QNetworkInterface'/>
<fun r='_ZNK10QUdpSocket19hasPendingDatagramsEv'/>
<fun r='_ZNK10QUdpSocket19pendingDatagramSizeEv'/>
<fun r='_ZN10QUdpSocket13writeDatagramEPKcxRK12QHostAddresst'/>
<fun r='_ZN10QUdpSocket13writeDatagramERK16QNetworkDatagram'/>
<fun r='_ZN10QUdpSocket15receiveDatagramEx'/>
<fun r='_ZN10QUdpSocket12readDatagramEPcxP12QHostAddressPt'/>
<use f='qtbase-6.5.0/src/plugins/generic/tuiotouch/qtuiohandler_p.h' l='48'/>
<size>16</size>
