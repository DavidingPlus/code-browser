<dec f='qtbase-6.5.0/src/corelib/kernel/qmetatype.h' l='463' type='QPartialOrdering QMetaType::compare(const void * lhs, const void * rhs) const'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.h' l='680' u='c' c='_ZN9QMetaType7compareEPKvS1_iPi'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='768' ll='786' type='QPartialOrdering QMetaType::compare(const void * lhs, const void * rhs) const'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='742'>/*!
    Compares the objects at \a lhs and \a rhs for ordering.

    Returns QPartialOrdering::Unordered if comparison is not supported
    or the values are unordered. Otherwise, returns
    QPartialOrdering::Less, QPartialOrdering::Equivalent or
    QPartialOrdering::Greater if \a lhs is less than, equivalent
    to or greater than \a rhs, respectively.

    Both objects must be of the type described by this metatype. If either \a lhs
    or \a rhs is \nullptr, the values are unordered. Comparison is only supported
    if the type&apos;s less than operator was visible to the metatype declaration.

    If the type&apos;s equality operator was also visible, values will only compare equal if the
    equality operator says they are. In the absence of an equality operator, when neither
    value is less than the other, values are considered equal; if equality is also available
    and two such values are not equal, they are considered unordered, just as NaN (not a
    number) values of a floating point type lie outside its ordering.

    \note If no less than operator was visible to the metatype declaration, values are
    unordered even if an equality operator visible to the declaration considers them equal:
    \c{compare() == 0} only agrees with equals() if the less than operator was visible.

    \since 6.0
    \sa equals(), isOrdered()
*/</doc>
<doc f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='2609'>/*!
    \fn bool QMetaType::compare(const void *lhs, const void *rhs, int typeId, int* result)
    \deprecated Use the non-static compare method instead

    Compares the objects at \a lhs and \a rhs. Both objects need to be of type \a typeId.
    \a result is set to less than, equal to or greater than zero, if \a lhs is less than, equal to
    or greater than \a rhs. Returns \c true, if the comparison succeeded, otherwise \c false.
*/</doc>
<use f='qtbase-6.5.0/src/corelib/kernel/qvariant.cpp' l='2394' u='c' c='_ZN8QVariant7compareERKS_S1_'/>
