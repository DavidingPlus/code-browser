<dec f='qtbase-6.5.0/src/corelib/global/qtrace_p.h' l='230'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qcoreapplication.cpp' l='814' u='c'/>
<doc f='qtbase-6.5.0/src/corelib/global/qtrace_p.h' l='152'>/*
 * The Qt tracepoints can also be defined directly in the source files using
 * the following macros. If using these macros, the tracepoints file is automatically
 * generated using the tracepointgen tool. The tool scans the input files for
 * these macros. These macros are ignored during compile time. Both automatic
 * generation and manually specifying tracepoints in a file can&apos;t be done at the same
 * time for the same provider.
 *
 *     - Q_TRACE_INSTRUMENT(provider)
 *       Generate entry/exit tracepoints for a function. For example, member function
 *
 *       void SomeClass::method(int param1, float param2)
 *       {
 *          ...
 *       }
 *
 *       converted to use tracepoints:
 *
 *       void Q_TRACE_INSTRUMENT(provider) SomeClass::method(int param1, float param2)
 *       {
 *           Q_TRACE_SCOPE(SomeClass_method, param1, param2);
 *           ...
 *       }
 *
 *       generates following tracepoints in provider.tracepoints file:
 *
 *       SomeClass_method_entry(int param1, float param2)
 *       SomeClass_method_exit()
 *
 *     - Q_TRACE_PARAM_REPLACE(in, out)
 *       Can be used with Q_TRACE_INSTRUMENT to replace parameter type in with type out.
 *       If a parameter type is not supported by the tracegen tool, one can use this to
 *       change it to another supported type.
 *
 *       void Q_TRACE_INSTRUMENT(provider) SomeClass::method(int param1, UserType param2)
 *       {
 *           Q_TRACE_PARAM_REPLACE(UserType, QString);
 *           Q_TRACE_SCOPE(SomeClass_method, param1, param2.toQString());
 *       }
 *
 *     - Q_TRACE_POINT(provider, tracepoint, ...)
 *       Manually specify tracepoint for the provider. &apos;tracepoint&apos; is the full name
 *       of the tracepoint and ... can be zero or more parameters.
 *
 *       Q_TRACE_POINT(provider, SomeClass_function_entry, int param1, int param2);
 *
 *       generates following tracepoint:
 *
 *       SomeClass_function_entry(int param1, int param2)
 *
 *     - Q_TRACE_PREFIX(provider, prefix)
 *       Provide prefix for the tracepoint. Multiple prefixes can be specified for the same
 *       provider in different files, they are all concatenated into one in the
 *       provider.tracepoints file.
 *
 *       Q_TRACE_PREFIX(provider,
 *                      &quot;QT_BEGIN_NAMESPACE&quot; \
 *                      &quot;class QEvent;&quot;      \
 *                      &quot;QT_END_NAMESPACE&quot;)
 *
 *     - Q_TRACE_METADATA(provider, metadata)
 *       Provides metadata for the tracepoint provider.
 *
 *       Q_TRACE_METADATA(qtgui,
 *                       &quot;ENUM {&quot; \
 *                       &quot;Format_Invalid,&quot; \
 *                       &quot;Format_Mono,&quot; \
 *                       &quot;Format_MonoLSB,&quot; \
 *                       &quot;Format_Indexed8,&quot; \
 *                        ...
 *                       &quot;} QImage::Format;&quot; \
 *                       );
 *
 *       If the content of enum is empty or contains keyword AUTO, then the tracepointgen tool
 *       tries to find the enumeration from header files.
 *
 *       Q_TRACE_METADATA(qtcore, &quot;ENUM { AUTO, RANGE User ... MaxUser } QEvent::Type;&quot;);
 */</doc>
<use f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='109' u='c'/>
<use f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='1197' u='c'/>
<use f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='2995' u='c'/>
<use f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='3032' u='c'/>
<use f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='3062' u='c'/>
<use f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='3095' u='c'/>
<use f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='3547' u='c'/>
<use f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='4780' u='c'/>
<use f='qtbase-6.5.0/src/gui/image/qpixmap.cpp' l='1038' u='c'/>
<use f='qtbase-6.5.0/src/gui/image/qpixmap.cpp' l='1076' u='c'/>
<use f='qtbase-6.5.0/src/gui/image/qpixmap.cpp' l='1106' u='c'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='1532' u='c'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='2019' u='c'/>
<use f='qtbase-6.5.0/src/opengl/qopenglframebufferobject.cpp' l='464' u='c'/>
<use f='qtbase-6.5.0/src/opengl/qopenglpaintengine.cpp' l='609' u='c'/>
