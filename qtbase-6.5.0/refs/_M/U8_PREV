<dec f='include/unicode/utf8.h' l='725'/>
<doc f='include/unicode/utf8.h' l='705'>/**
 * Move the string offset from one code point boundary to the previous one
 * and get the code point between them.
 * (Pre-decrementing backward iteration.)
 * &quot;Safe&quot; macro, checks for illegal sequences and for string boundaries.
 *
 * The input offset may be the same as the string length.
 * If the offset is behind a multi-byte sequence, then the macro will read
 * the whole sequence.
 * If the offset is behind a lead byte, then that itself
 * will be returned as the code point.
 * If the offset is behind an illegal UTF-8 sequence, then c is set to a negative value.
 *
 * @param s const uint8_t * string
 * @param start int32_t starting string offset (usually 0)
 * @param i int32_t string offset, must be start&lt;i
 * @param c output UChar32 variable, set to &lt;0 in case of an error
 * @see U8_PREV_UNSAFE
 * @stable ICU 2.4
 */</doc>
