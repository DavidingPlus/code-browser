<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='8390'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='8323'>/*
** CAPI3REF: Status Parameters
** KEYWORDS: {status parameters}
**
** These integer constants designate various run-time status parameters
** that can be returned by [sqlite3_status()].
**
** &lt;dl&gt;
** [[SQLITE_STATUS_MEMORY_USED]] ^(&lt;dt&gt;SQLITE_STATUS_MEMORY_USED&lt;/dt&gt;
** &lt;dd&gt;This parameter is the current amount of memory checked out
** using [sqlite3_malloc()], either directly or indirectly.  The
** figure includes calls made to [sqlite3_malloc()] by the application
** and internal memory usage by the SQLite library.  Auxiliary page-cache
** memory controlled by [SQLITE_CONFIG_PAGECACHE] is not included in
** this parameter.  The amount returned is the sum of the allocation
** sizes as reported by the xSize method in [sqlite3_mem_methods].&lt;/dd&gt;)^
**
** [[SQLITE_STATUS_MALLOC_SIZE]] ^(&lt;dt&gt;SQLITE_STATUS_MALLOC_SIZE&lt;/dt&gt;
** &lt;dd&gt;This parameter records the largest memory allocation request
** handed to [sqlite3_malloc()] or [sqlite3_realloc()] (or their
** internal equivalents).  Only the value returned in the
** *pHighwater parameter to [sqlite3_status()] is of interest.
** The value written into the *pCurrent parameter is undefined.&lt;/dd&gt;)^
**
** [[SQLITE_STATUS_MALLOC_COUNT]] ^(&lt;dt&gt;SQLITE_STATUS_MALLOC_COUNT&lt;/dt&gt;
** &lt;dd&gt;This parameter records the number of separate memory allocations
** currently checked out.&lt;/dd&gt;)^
**
** [[SQLITE_STATUS_PAGECACHE_USED]] ^(&lt;dt&gt;SQLITE_STATUS_PAGECACHE_USED&lt;/dt&gt;
** &lt;dd&gt;This parameter returns the number of pages used out of the
** [pagecache memory allocator] that was configured using
** [SQLITE_CONFIG_PAGECACHE].  The
** value returned is in pages, not in bytes.&lt;/dd&gt;)^
**
** [[SQLITE_STATUS_PAGECACHE_OVERFLOW]]
** ^(&lt;dt&gt;SQLITE_STATUS_PAGECACHE_OVERFLOW&lt;/dt&gt;
** &lt;dd&gt;This parameter returns the number of bytes of page cache
** allocation which could not be satisfied by the [SQLITE_CONFIG_PAGECACHE]
** buffer and where forced to overflow to [sqlite3_malloc()].  The
** returned value includes allocations that overflowed because they
** where too large (they were larger than the &quot;sz&quot; parameter to
** [SQLITE_CONFIG_PAGECACHE]) and allocations that overflowed because
** no space was left in the page cache.&lt;/dd&gt;)^
**
** [[SQLITE_STATUS_PAGECACHE_SIZE]] ^(&lt;dt&gt;SQLITE_STATUS_PAGECACHE_SIZE&lt;/dt&gt;
** &lt;dd&gt;This parameter records the largest memory allocation request
** handed to the [pagecache memory allocator].  Only the value returned in the
** *pHighwater parameter to [sqlite3_status()] is of interest.
** The value written into the *pCurrent parameter is undefined.&lt;/dd&gt;)^
**
** [[SQLITE_STATUS_SCRATCH_USED]] &lt;dt&gt;SQLITE_STATUS_SCRATCH_USED&lt;/dt&gt;
** &lt;dd&gt;No longer used.&lt;/dd&gt;
**
** [[SQLITE_STATUS_SCRATCH_OVERFLOW]] ^(&lt;dt&gt;SQLITE_STATUS_SCRATCH_OVERFLOW&lt;/dt&gt;
** &lt;dd&gt;No longer used.&lt;/dd&gt;
**
** [[SQLITE_STATUS_SCRATCH_SIZE]] &lt;dt&gt;SQLITE_STATUS_SCRATCH_SIZE&lt;/dt&gt;
** &lt;dd&gt;No longer used.&lt;/dd&gt;
**
** [[SQLITE_STATUS_PARSER_STACK]] ^(&lt;dt&gt;SQLITE_STATUS_PARSER_STACK&lt;/dt&gt;
** &lt;dd&gt;The *pHighwater parameter records the deepest parser stack.
** The *pCurrent value is undefined.  The *pHighwater value is only
** meaningful if SQLite is compiled with [YYTRACKMAXSTACKDEPTH].&lt;/dd&gt;)^
** &lt;/dl&gt;
**
** New status parameters may be added from time to time.
*/</doc>
