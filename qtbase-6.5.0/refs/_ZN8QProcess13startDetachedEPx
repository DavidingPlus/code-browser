<dec f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='128' type='bool QProcess::startDetached(qint64 * pid = nullptr)'/>
<def f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='2125' ll='2137' type='bool QProcess::startDetached(qint64 * pid = nullptr)'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='2438' u='c' c='_ZN8QProcess13startDetachedERK7QStringRK5QListIS0_ES2_Px'/>
<doc f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='2075'>/*!
    \since 5.10

    Starts the program set by setProgram() with arguments set by setArguments()
    in a new process, and detaches from it. Returns \c true on success;
    otherwise returns \c false. If the calling process exits, the
    detached process will continue to run unaffected.

    \b{Unix:} The started process will run in its own session and act
    like a daemon.

    The process will be started in the directory set by setWorkingDirectory().
    If workingDirectory() is empty, the working directory is inherited
    from the calling process.

    \note On QNX, this may cause all application threads to
    temporarily freeze.

    If the function is successful then *\a pid is set to the process identifier
    of the started process; otherwise, it&apos;s set to -1. Note that the child
    process may exit and the PID may become invalid without notice.
    Furthermore, after the child process exits, the same PID may be recycled
    and used by a completely different process. User code should be careful
    when using this variable, especially if one intends to forcibly terminate
    the process by operating system means.

    Only the following property setters are supported by startDetached():
    \list
    \li setArguments()
    \li setCreateProcessArgumentsModifier()
    \li setNativeArguments()
    \li setProcessEnvironment()
    \li setProgram()
    \li setStandardErrorFile()
    \li setStandardInputFile()
    \li setStandardOutputFile()
    \li setProcessChannelMode(QProcess::MergedChannels)
    \li setStandardOutputProcess()
    \li setWorkingDirectory()
    \endlist
    All other properties of the QProcess object are ignored.

    \note The called process inherits the console window of the calling
    process. To suppress console output, redirect standard/error output to
    QProcess::nullDevice().

    \sa start()
    \sa startDetached(const QString &amp;program, const QStringList &amp;arguments,
                      const QString &amp;workingDirectory, qint64 *pid)
*/</doc>
