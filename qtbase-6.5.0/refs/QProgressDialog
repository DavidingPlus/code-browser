<inh f='qtbase-6.5.0/src/widgets/dialogs/qdialog.h' l='18' c='QDialog'/>
<def f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.h' l='21' ll='92'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.h' l='89' c='_ZN15QProgressDialogC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.h' l='89' c='_ZN15QProgressDialogaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.h' l='89' c='_ZN15QProgressDialogaSERKS_'/>
<size>40</size>
<smbr r='QProgressDialog::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK15QProgressDialog10metaObjectEv'/>
<fun r='_ZN15QProgressDialog11qt_metacastEPKc'/>
<fun r='_ZN15QProgressDialog11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN15QProgressDialog2trEPKcS1_i'/>
<fun r='_ZN15QProgressDialog18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN15QProgressDialog6d_funcEv'/>
<fun r='_ZNK15QProgressDialog6d_funcEv'/>
<fun r='_ZN15QProgressDialogC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE'/>
<fun r='_ZN15QProgressDialogC1ERK7QStringS2_iiP7QWidget6QFlagsIN2Qt10WindowTypeEE'/>
<fun r='_ZN15QProgressDialogD1Ev'/>
<fun r='_ZN15QProgressDialog8setLabelEP6QLabel'/>
<fun r='_ZN15QProgressDialog15setCancelButtonEP11QPushButton'/>
<fun r='_ZN15QProgressDialog6setBarEP12QProgressBar'/>
<fun r='_ZNK15QProgressDialog11wasCanceledEv'/>
<fun r='_ZNK15QProgressDialog7minimumEv'/>
<fun r='_ZNK15QProgressDialog7maximumEv'/>
<fun r='_ZNK15QProgressDialog5valueEv'/>
<fun r='_ZNK15QProgressDialog8sizeHintEv'/>
<fun r='_ZNK15QProgressDialog9labelTextEv'/>
<fun r='_ZNK15QProgressDialog15minimumDurationEv'/>
<fun r='_ZN15QProgressDialog12setAutoResetEb'/>
<fun r='_ZNK15QProgressDialog9autoResetEv'/>
<fun r='_ZN15QProgressDialog12setAutoCloseEb'/>
<fun r='_ZNK15QProgressDialog9autoCloseEv'/>
<fun r='_ZN15QProgressDialog4openEP7QObjectPKc'/>
<fun r='_ZN15QProgressDialog6cancelEv'/>
<fun r='_ZN15QProgressDialog5resetEv'/>
<fun r='_ZN15QProgressDialog10setMaximumEi'/>
<fun r='_ZN15QProgressDialog10setMinimumEi'/>
<fun r='_ZN15QProgressDialog8setRangeEii'/>
<fun r='_ZN15QProgressDialog8setValueEi'/>
<fun r='_ZN15QProgressDialog12setLabelTextERK7QString'/>
<fun r='_ZN15QProgressDialog19setCancelButtonTextERK7QString'/>
<fun r='_ZN15QProgressDialog18setMinimumDurationEi'/>
<fun r='_ZN15QProgressDialog8canceledEv'/>
<fun r='_ZN15QProgressDialog11resizeEventEP12QResizeEvent'/>
<fun r='_ZN15QProgressDialog10closeEventEP11QCloseEvent'/>
<fun r='_ZN15QProgressDialog11changeEventEP6QEvent'/>
<fun r='_ZN15QProgressDialog9showEventEP10QShowEvent'/>
<fun r='_ZN15QProgressDialog9forceShowEv'/>
<fun r='_ZN15QProgressDialogC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='32' c='_ZN22QProgressDialogPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='32' c='_ZN22QProgressDialogPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='32' c='_ZNK22QProgressDialogPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='32' c='_ZNK22QProgressDialogPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='32'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='69' c='_ZN22QProgressDialogPrivate4initERK7QStringS2_ii'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='89' c='_ZN22QProgressDialogPrivate6layoutEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='142' c='_ZN22QProgressDialogPrivate20_q_disconnectOnCloseEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='397' c='_ZN22QProgressDialogPrivate19setCancelButtonTextERK7QString'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='442' c='_ZN22QProgressDialogPrivate16adoptChildWidgetEP7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='459' c='_ZN22QProgressDialogPrivate27ensureSizeIsAtLeastSizeHintEv'/>
<size>40</size>
<doc f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='151'>/*!
  \class QProgressDialog
  \brief The QProgressDialog class provides feedback on the progress of a slow operation.
  \ingroup standard-dialogs
  \inmodule QtWidgets


  A progress dialog is used to give the user an indication of how long
  an operation is going to take, and to demonstrate that the
  application has not frozen. It can also give the user an opportunity
  to abort the operation.

  A common problem with progress dialogs is that it is difficult to know
  when to use them; operations take different amounts of time on different
  hardware.  QProgressDialog offers a solution to this problem:
  it estimates the time the operation will take (based on time for
  steps), and only shows itself if that estimate is beyond minimumDuration()
  (4 seconds by default).

  Use setMinimum() and setMaximum() or the constructor to set the number of
  &quot;steps&quot; in the operation and call setValue() as the operation
  progresses. The number of steps can be chosen arbitrarily. It can be the
  number of files copied, the number of bytes received, the number of
  iterations through the main loop of your algorithm, or some other
  suitable unit. Progress starts at the value set by setMinimum(),
  and the progress dialog shows that the operation has finished when
  you call setValue() with the value set by setMaximum() as its argument.

  The dialog automatically resets and hides itself at the end of the
  operation.  Use setAutoReset() and setAutoClose() to change this
  behavior. Note that if you set a new maximum (using setMaximum() or
  setRange()) that equals your current value(), the dialog will not
  close regardless.

  There are two ways of using QProgressDialog: modal and modeless.

  Compared to a modeless QProgressDialog, a modal QProgressDialog is simpler
  to use for the programmer. Do the operation in a loop, call \l setValue() at
  intervals, and check for cancellation with wasCanceled(). For example:

  \snippet dialogs/dialogs.cpp 3

  A modeless progress dialog is suitable for operations that take
  place in the background, where the user is able to interact with the
  application. Such operations are typically based on QTimer (or
  QObject::timerEvent()) or QSocketNotifier; or performed
  in a separate thread. A QProgressBar in the status bar of your main window
  is often an alternative to a modeless progress dialog.

  You need to have an event loop to be running, connect the
  canceled() signal to a slot that stops the operation, and call \l
  setValue() at intervals. For example:

  \snippet dialogs/dialogs.cpp 4
  \codeline
  \snippet dialogs/dialogs.cpp 5
  \codeline
  \snippet dialogs/dialogs.cpp 6

  In both modes the progress dialog may be customized by
  replacing the child widgets with custom widgets by using setLabel(),
  setBar(), and setCancelButton().
  The functions setLabelText() and setCancelButtonText()
  set the texts shown.

  \image fusion-progressdialog.png A progress dialog shown in the Fusion widget style.

  \sa QDialog, QProgressBar, {Pixelator Example}
*/</doc>
<fun r='_ZN15QProgressDialogC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE'/>
<fun r='_ZN15QProgressDialogC1ERK7QStringS2_iiP7QWidget6QFlagsIN2Qt10WindowTypeEE'/>
<fun r='_ZN15QProgressDialogD1Ev'/>
<fun r='_ZN15QProgressDialog8setLabelEP6QLabel'/>
<fun r='_ZNK15QProgressDialog9labelTextEv'/>
<fun r='_ZN15QProgressDialog12setLabelTextERK7QString'/>
<fun r='_ZN15QProgressDialog15setCancelButtonEP11QPushButton'/>
<fun r='_ZN15QProgressDialog19setCancelButtonTextERK7QString'/>
<fun r='_ZN15QProgressDialog6setBarEP12QProgressBar'/>
<fun r='_ZNK15QProgressDialog11wasCanceledEv'/>
<fun r='_ZNK15QProgressDialog7maximumEv'/>
<fun r='_ZN15QProgressDialog10setMaximumEi'/>
<fun r='_ZNK15QProgressDialog7minimumEv'/>
<fun r='_ZN15QProgressDialog10setMinimumEi'/>
<fun r='_ZN15QProgressDialog8setRangeEii'/>
<fun r='_ZN15QProgressDialog5resetEv'/>
<fun r='_ZN15QProgressDialog6cancelEv'/>
<fun r='_ZNK15QProgressDialog5valueEv'/>
<fun r='_ZN15QProgressDialog8setValueEi'/>
<fun r='_ZNK15QProgressDialog8sizeHintEv'/>
<fun r='_ZN15QProgressDialog11resizeEventEP12QResizeEvent'/>
<fun r='_ZN15QProgressDialog11changeEventEP6QEvent'/>
<fun r='_ZN15QProgressDialog18setMinimumDurationEi'/>
<fun r='_ZNK15QProgressDialog15minimumDurationEv'/>
<fun r='_ZN15QProgressDialog10closeEventEP11QCloseEvent'/>
<fun r='_ZN15QProgressDialog12setAutoResetEb'/>
<fun r='_ZNK15QProgressDialog9autoResetEv'/>
<fun r='_ZN15QProgressDialog12setAutoCloseEb'/>
<fun r='_ZNK15QProgressDialog9autoCloseEv'/>
<fun r='_ZN15QProgressDialog9showEventEP10QShowEvent'/>
<fun r='_ZN15QProgressDialog9forceShowEv'/>
<fun r='_ZN15QProgressDialog4openEP7QObjectPKc'/>
