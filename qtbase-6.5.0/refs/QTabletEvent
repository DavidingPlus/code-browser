<inh f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='107' c='QSinglePointEvent'/>
<def f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='317' ll='365'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='319' c='_ZN12QTabletEventC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='319' c='_ZN12QTabletEventC1EOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='319' c='_ZN12QTabletEventaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='319' c='_ZN12QTabletEventaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='319' c='_ZN12QTabletEventaSEOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='319' c='_ZN12QTabletEventaSEOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='319' c='_ZNK12QTabletEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qwindow.h' l='347' c='_ZN7QWindow11tabletEventEP12QTabletEvent'/>
<size>96</size>
<fun r='_ZN12QTabletEventC1ERKS_'/>
<fun r='_ZN12QTabletEventC1EOS_'/>
<fun r='_ZNK12QTabletEvent5cloneEv'/>
<fun r='_ZN12QTabletEventC1EN6QEvent4TypeEPK15QPointingDeviceRK7QPointFS7_dfffdf6QFlagsIN2Qt16KeyboardModifierEENS9_11MouseButtonES8_ISC_E'/>
<fun r='_ZNK12QTabletEvent3posEv'/>
<fun r='_ZNK12QTabletEvent9globalPosEv'/>
<fun r='_ZNK12QTabletEvent4posFEv'/>
<fun r='_ZNK12QTabletEvent10globalPosFEv'/>
<fun r='_ZNK12QTabletEvent1xEv'/>
<fun r='_ZNK12QTabletEvent1yEv'/>
<fun r='_ZNK12QTabletEvent7globalXEv'/>
<fun r='_ZNK12QTabletEvent7globalYEv'/>
<fun r='_ZNK12QTabletEvent12hiResGlobalXEv'/>
<fun r='_ZNK12QTabletEvent12hiResGlobalYEv'/>
<fun r='_ZNK12QTabletEvent8uniqueIdEv'/>
<fun r='_ZNK12QTabletEvent8pressureEv'/>
<fun r='_ZNK12QTabletEvent8rotationEv'/>
<fun r='_ZNK12QTabletEvent1zEv'/>
<fun r='_ZNK12QTabletEvent18tangentialPressureEv'/>
<fun r='_ZNK12QTabletEvent5xTiltEv'/>
<fun r='_ZNK12QTabletEvent5yTiltEv'/>
<mbr r='QTabletEvent::m_tangential' o='640' t='float'/>
<mbr r='QTabletEvent::m_xTilt' o='672' t='float'/>
<mbr r='QTabletEvent::m_yTilt' o='704' t='float'/>
<mbr r='QTabletEvent::m_z' o='736' t='float'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidget.h' l='682' c='_ZN7QWidget11tabletEventEP12QTabletEvent'/>
<size>96</size>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='2513' c='_ZN12QTabletEventC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='2513' c='_ZNK12QTabletEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='2513' c='_ZNK12QTabletEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='3961' c='_ZL17formatTabletEvent6QDebugPK12QTabletEvent'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4212' c='_Zls6QDebugPK6QEvent'/>
<size>96</size>
<doc f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='2391'>/*!
    \class QTabletEvent
    \brief The QTabletEvent class contains parameters that describe a Tablet event.
    \inmodule QtGui

    \ingroup events

    \e{Tablet events} are generated from tablet peripherals such as Wacom
    tablets and various other brands, and electromagnetic stylus devices
    included with some types of tablet computers. (It is not the same as
    \l QTouchEvent which a touchscreen generates, even when a passive stylus is
    used on a touchscreen.)

    Tablet events are similar to mouse events; for example, the \l x(), \l y(),
    \l pos(), \l globalX(), \l globalY(), and \l globalPos() accessors provide
    the cursor position, and you can see which \l buttons() are pressed
    (pressing the stylus tip against the tablet surface is equivalent to a left
    mouse button). But tablet events also pass through some extra information
    that the tablet device driver provides; for example, you might want to do
    subpixel rendering with higher resolution coordinates (\l globalPosF()),
    adjust color brightness based on the \l pressure() of the tool against the
    tablet surface, use different brushes depending on the type of tool in use
    (\l deviceType()), modulate the brush shape in some way according to the
    X-axis and Y-axis tilt of the tool with respect to the tablet surface
    (\l xTilt() and \l yTilt()), and use a virtual eraser instead of a brush if
    the user switches to the other end of a double-ended stylus
    (\l pointerType()).

    Every event contains an accept flag that indicates whether the receiver
    wants the event. You should call QTabletEvent::accept() if you handle the
    tablet event; otherwise it will be sent to the parent widget. The exception
    are TabletEnterProximity and TabletLeaveProximity events: these are only
    sent to QApplication and do not check whether or not they are accepted.

    The QWidget::setEnabled() function can be used to enable or disable
    mouse, tablet and keyboard events for a widget.

    The event handler QWidget::tabletEvent() receives TabletPress,
    TabletRelease and TabletMove events. Qt will first send a
    tablet event, then if it is not accepted by any widget, it will send a
    mouse event. This allows users of applications that are not designed for
    tablets to use a tablet like a mouse. However high-resolution drawing
    applications should handle the tablet events, because they can occur at a
    higher frequency, which is a benefit for smooth and accurate drawing.
    If the tablet events are rejected, the synthetic mouse events may be
    compressed for efficiency.

    Note that pressing the stylus button while the stylus hovers over the
    tablet will generate a button press on some types of tablets, while on
    other types it will be necessary to press the stylus against the tablet
    surface in order to register the simultaneous stylus button press.

    \section1 Notes for X11 Users

    If the tablet is configured in xorg.conf to use the Wacom driver, there
    will be separate XInput &quot;devices&quot; for the stylus, eraser, and (optionally)
    cursor and touchpad. Qt recognizes these by their names. Otherwise, if the
    tablet is configured to use the evdev driver, there will be only one device
    and applications may not be able to distinguish the stylus from the eraser.

    \section1 Notes for Windows Users

    Tablet support currently requires the WACOM windows driver providing the DLL
    \c{wintab32.dll} to be installed. It is contained in older packages,
    for example \c{pentablet_5.3.5-3.exe}.

*/</doc>
<fun r='_ZN12QTabletEventC1EN6QEvent4TypeEPK15QPointingDeviceRK7QPointFS7_dfffdf6QFlagsIN2Qt16KeyboardModifierEENS9_11MouseButtonES8_ISC_E'/>
<fun r='_ZN12QTabletEventC1ERKS_'/>
<fun r='_ZNK12QTabletEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='2767' c='_ZN22QGuiApplicationPrivate18processTabletEventEPN29QWindowSystemInterfacePrivate11TabletEventE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='2803' c='_ZN22QGuiApplicationPrivate32processTabletEnterProximityEventEPN29QWindowSystemInterfacePrivate25TabletEnterProximityEventE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='2817' c='_ZN22QGuiApplicationPrivate32processTabletLeaveProximityEventEPN29QWindowSystemInterfacePrivate25TabletLeaveProximityEventE'/>
<size>96</size>
<use f='qtbase-6.5.0/src/gui/kernel/qwindow.cpp' l='2513' c='_ZN7QWindow5eventEP6QEvent'/>
<use f='qtbase-6.5.0/src/gui/kernel/qwindow.cpp' l='2709' c='_ZN7QWindow11tabletEventEP12QTabletEvent'/>
<size>96</size>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidgetwindow_p.h' l='73' c='_ZN13QWidgetWindow17handleTabletEventEP12QTabletEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication.cpp' l='2933' c='_ZN12QApplication6notifyEP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication.cpp' l='2933' c='_ZN12QApplication6notifyEP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication.cpp' l='2937' c='_ZN12QApplication6notifyEP7QObjectP6QEvent'/>
<size>96</size>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='8919' c='_ZN7QWidget5eventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='8924' c='_ZN7QWidget5eventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='9559' c='_ZN7QWidget11tabletEventEP12QTabletEvent'/>
<size>96</size>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidgetwindow.cpp' l='306' c='_ZN13QWidgetWindow5eventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidgetwindow.cpp' l='1048' c='_ZN13QWidgetWindow17handleTabletEventEP12QTabletEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidgetwindow.cpp' l='1065' c='_ZN13QWidgetWindow17handleTabletEventEP12QTabletEvent'/>
<size>96</size>
