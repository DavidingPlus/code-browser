<use f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='199' u='c' c='_ZN8QCborMap4takeEx'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='207' u='c' c='_ZN8QCborMap6removeEx'/>
<dec f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='261' type='QCborMap::const_iterator QCborMap::constFind(qint64 key) const'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='265' u='c' c='_ZNK8QCborMap4findEx'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcbormap.cpp' l='793' u='c' c='_ZN8QCborMap4findEx'/>
<def f='qtbase-6.5.0/src/corelib/serialization/qcbormap.cpp' l='888' ll='891' type='QCborMap::const_iterator QCborMap::constFind(qint64 key) const'/>
<doc f='qtbase-6.5.0/src/corelib/serialization/qcbormap.cpp' l='872'>/*!
    Returns a map iterator to the key-value pair whose key is \a key, if the
    map contains such a pair. If it doesn&apos;t, this function returns constEnd().

    CBOR recommends using integer keys, since they occupy less
    space and are simpler to encode and decode.

    If the map contains more than one key equal to \a key, it is undefined
    which one this function will find. QCborMap does not allow inserting
    duplicate keys, but it is possible to create such a map by decoding a CBOR
    stream with them. They are usually not permitted and having duplicate keys
    is usually an indication of a problem in the sender.

    \sa value(qint64), operator[](qint64), find(qint64), remove(qint64), contains(qint64),
        value(QLatin1StringView), value(const QString &amp;), value(const QCborValue &amp;)
 */</doc>
