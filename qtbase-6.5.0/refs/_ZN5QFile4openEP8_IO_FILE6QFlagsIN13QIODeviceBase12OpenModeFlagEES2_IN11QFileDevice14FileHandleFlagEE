<dec f='qtbase-6.5.0/src/corelib/io/qfile.h' l='259' type='bool QFile::open(FILE * f, QIODeviceBase::OpenMode ioFlags, QFileDevice::FileHandleFlags handleFlags = DontCloseHandle)'/>
<use f='qtbase-6.5.0/qmake/generators/metamakefile.cpp' l='143' u='c' c='_ZN27BuildsMetaMakefileGenerator5writeEv'/>
<use f='qtbase-6.5.0/qmake/library/qmakebuiltins.cpp' l='1057' u='c' c='_ZN14QMakeEvaluator21evaluateBuiltinExpandERKN13QMakeInternal12QMakeBuiltinERK6ProKeyRK13ProStringListRS7_'/>
<def f='qtbase-6.5.0/src/corelib/io/qfile.cpp' l='996' ll='1023' type='bool QFile::open(FILE * fh, QIODeviceBase::OpenMode mode, QFileDevice::FileHandleFlags handleFlags = DontCloseHandle)'/>
<doc f='qtbase-6.5.0/src/corelib/io/qfile.cpp' l='954'>/*!
    \overload

    Opens the existing file handle \a fh in the given \a mode.
    \a handleFlags may be used to specify additional options.
    Returns \c true if successful; otherwise returns \c false.

    Example:
    \snippet code/src_corelib_io_qfile.cpp 3

    When a QFile is opened using this function, behaviour of close() is
    controlled by the AutoCloseHandle flag.
    If AutoCloseHandle is specified, and this function succeeds,
    then calling close() closes the adopted handle.
    Otherwise, close() does not actually close the file, but only flushes it.

    \b{Warning:}
    \list 1
        \li If \a fh does not refer to a regular file, e.g., it is \c stdin,
           \c stdout, or \c stderr, you may not be able to seek(). size()
           returns \c 0 in those cases. See QIODevice::isSequential() for
           more information.
        \li Since this function opens the file without specifying the file name,
           you cannot use this QFile with a QFileInfo.
    \endlist

    \sa close()

    \b{Note for the Windows Platform}

    \a fh must be opened in binary mode (i.e., the mode string must contain
    &apos;b&apos;, as in &quot;rb&quot; or &quot;wb&quot;) when accessing files and other random-access
    devices. Qt will translate the end-of-line characters if you pass
    QIODevice::Text to \a mode. Sequential devices, such as stdin and stdout,
    are unaffected by this limitation.

    You need to enable support for console applications in order to use the
    stdin, stdout and stderr streams at the console. To do this, add the
    following declaration to your application&apos;s project file:

    \snippet code/src_corelib_io_qfile.cpp 4
*/</doc>
<use f='qtbase-6.5.0/src/corelib/serialization/qtextstream.cpp' l='1002' u='c' c='_ZN11QTextStreamC1EP8_IO_FILE6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<use f='qtbase-6.5.0/src/testlib/qbenchmarkvalgrind.cpp' l='48' u='c' c='_ZL10dumpOutputRK10QByteArrayP8_IO_FILE'/>
<use f='qtbase-6.5.0/src/tools/moc/collectjson.cpp' l='35' u='c' c='_Z11collectJsonRK5QListI7QStringERKS0_b'/>
<use f='qtbase-6.5.0/src/tools/moc/collectjson.cpp' l='50' u='c' c='_Z11collectJsonRK5QListI7QStringERKS0_b'/>
<use f='qtbase-6.5.0/src/tools/moc/main.cpp' l='452' u='c' c='_Z6runMociPPc'/>
<use f='qtbase-6.5.0/src/tools/qdbuscpp2xml/qdbuscpp2xml.cpp' l='467' u='c' c='main'/>
<use f='qtbase-6.5.0/src/tools/qdbusxml2cpp/qdbusxml2cpp.cpp' l='58' u='c' c='_ZL9readInputv'/>
<use f='qtbase-6.5.0/src/tools/qdbusxml2cpp/qdbusxml2cpp.cpp' l='448' u='c' c='_ZL8openFileRK7QStringR5QFile'/>
<use f='qtbase-6.5.0/src/tools/rcc/main.cpp' l='54' u='c' c='_Z13createProjectRK7QString'/>
<use f='qtbase-6.5.0/src/tools/rcc/main.cpp' l='306' u='c' c='_Z6runRcciPPc'/>
<use f='qtbase-6.5.0/src/tools/rcc/main.cpp' l='344' u='c' c='_Z6runRcciPPc'/>
<use f='qtbase-6.5.0/src/tools/rcc/rcc.cpp' l='768' u='c' c='_ZN18RCCResourceLibrary9readFilesEbR9QIODevice'/>
<use f='qtbase-6.5.0/src/tools/uic/driver.cpp' l='249' u='c' c='_ZN6Driver3uicERK7QStringP11QTextStream'/>
<use f='qtbase-6.5.0/src/tools/uic/uic.cpp' l='42' u='c' c='_ZN3Uic17printDependenciesEv'/>
