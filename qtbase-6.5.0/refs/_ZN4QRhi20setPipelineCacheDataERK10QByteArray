<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1818' type='void QRhi::setPipelineCacheData(const QByteArray &amp; data)'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='7199' ll='7202' type='void QRhi::setPipelineCacheData(const QByteArray &amp; data)'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='7150'>/*!
    Loads \a data into the pipeline cache, when applicable.

    When the PipelineCacheDataLoadSave is reported as unsupported, the function
    is safe to call, but has no effect.

    The blob returned by pipelineCacheData() is always specific to the Qt
    version, the QRhi backend, and, in some cases, also to the graphics device,
    and a given version of the graphics driver. QRhi takes care of adding the
    appropriate header and safeguards that ensure that the data can always be
    passed safely to this function. If there is a mismatch, e.g. because the
    driver has been upgraded to a newer version, or because the data was
    generated from a different QRhi backend, a warning is printed and \a data
    is safely ignored.

    With Vulkan, this maps directly to VkPipelineCache. Calling this function
    creates a new Vulkan pipeline cache object, with its initial data sourced
    from \a data. The pipeline cache object is then used by all subsequently
    created QRhiGraphicsPipeline and QRhiComputePipeline objects, thus
    accelerating, potentially, the pipeline creation.

    With other APIs there is no real pipeline cache, but they may provide a
    cache with bytecode from shader compilations (D3D) or program binaries
    (OpenGL). In applications that perform a lot of shader compilation from
    source at run time this can provide a significant boost in subsequent runs
    if the &quot;pipeline cache&quot; is pre-seeded from an earlier run using this
    function.

    \note QRhi cannot give any guarantees that \a data has an effect on the
    pipeline and shader creation performance. With APIs like Vulkan, it is up
    to the driver to decide if \a data is used for some purpose, or if it is
    ignored.

    See EnablePipelineCacheDataSave for further details about this feature.

    \note This mechanism offered by QRhi is independent of the drivers&apos; own
    internal caching mechanism, if any. This means that, depending on the
    graphics API and its implementation, the exact effects of retrieving and
    then reloading \a data are not predictable. Improved performance may not be
    visible at all in case other caching mechanisms outside of Qt&apos;s control are
    already active.

    \note Minimize the number of calls to this function. Loading the blob is
    not always a cheap operation, and therefore this function should only be
    called at a low frequency, ideally only once e.g. when starting the
    application.

    \sa pipelineCacheData(), isFeatureSupported()
 */</doc>
