<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/corelib/tools/qtimeline.h' l='18' ll='99'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.h' l='97' c='_ZN9QTimeLineC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.h' l='97' c='_ZN9QTimeLineaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.h' l='97' c='_ZN9QTimeLineaSERKS_'/>
<size>16</size>
<smbr r='QTimeLine::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK9QTimeLine10metaObjectEv'/>
<fun r='_ZN9QTimeLine11qt_metacastEPKc'/>
<fun r='_ZN9QTimeLine11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN9QTimeLine2trEPKcS1_i'/>
<fun r='_ZN9QTimeLine18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN9QTimeLineC1EiP7QObject'/>
<fun r='_ZN9QTimeLineD1Ev'/>
<fun r='_ZNK9QTimeLine5stateEv'/>
<fun r='_ZNK9QTimeLine9loopCountEv'/>
<fun r='_ZN9QTimeLine12setLoopCountEi'/>
<fun r='_ZN9QTimeLine17bindableLoopCountEv'/>
<fun r='_ZNK9QTimeLine9directionEv'/>
<fun r='_ZN9QTimeLine12setDirectionENS_9DirectionE'/>
<fun r='_ZN9QTimeLine17bindableDirectionEv'/>
<fun r='_ZNK9QTimeLine8durationEv'/>
<fun r='_ZN9QTimeLine11setDurationEi'/>
<fun r='_ZN9QTimeLine16bindableDurationEv'/>
<fun r='_ZNK9QTimeLine10startFrameEv'/>
<fun r='_ZN9QTimeLine13setStartFrameEi'/>
<fun r='_ZNK9QTimeLine8endFrameEv'/>
<fun r='_ZN9QTimeLine11setEndFrameEi'/>
<fun r='_ZN9QTimeLine13setFrameRangeEii'/>
<fun r='_ZNK9QTimeLine14updateIntervalEv'/>
<fun r='_ZN9QTimeLine17setUpdateIntervalEi'/>
<fun r='_ZN9QTimeLine22bindableUpdateIntervalEv'/>
<fun r='_ZNK9QTimeLine11easingCurveEv'/>
<fun r='_ZN9QTimeLine14setEasingCurveERK12QEasingCurve'/>
<fun r='_ZN9QTimeLine19bindableEasingCurveEv'/>
<fun r='_ZNK9QTimeLine11currentTimeEv'/>
<fun r='_ZN9QTimeLine19bindableCurrentTimeEv'/>
<fun r='_ZNK9QTimeLine12currentFrameEv'/>
<fun r='_ZNK9QTimeLine12currentValueEv'/>
<fun r='_ZNK9QTimeLine12frameForTimeEi'/>
<fun r='_ZNK9QTimeLine12valueForTimeEi'/>
<fun r='_ZN9QTimeLine5startEv'/>
<fun r='_ZN9QTimeLine6resumeEv'/>
<fun r='_ZN9QTimeLine4stopEv'/>
<fun r='_ZN9QTimeLine9setPausedEb'/>
<fun r='_ZN9QTimeLine14setCurrentTimeEi'/>
<fun r='_ZN9QTimeLine15toggleDirectionEv'/>
<fun r='_ZN9QTimeLine12valueChangedEdNS_14QPrivateSignalE'/>
<fun r='_ZN9QTimeLine12frameChangedEiNS_14QPrivateSignalE'/>
<fun r='_ZN9QTimeLine12stateChangedENS_5StateENS_14QPrivateSignalE'/>
<fun r='_ZN9QTimeLine8finishedENS_14QPrivateSignalE'/>
<fun r='_ZN9QTimeLine10timerEventEP11QTimerEvent'/>
<fun r='_ZN9QTimeLineC1ERKS_'/>
<fun r='_ZN9QTimeLine6d_funcEv'/>
<fun r='_ZNK9QTimeLine6d_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitemanimation.h' l='30' c='_ZNK22QGraphicsItemAnimation8timeLineEv'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitemanimation.h' l='31' c='_ZN22QGraphicsItemAnimation11setTimeLineEP9QTimeLine'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='16' c='_ZN16QTimeLinePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='16' c='_ZN16QTimeLinePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='16' c='_ZNK16QTimeLinePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='16' c='_ZNK16QTimeLinePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='16'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='43' c='_ZN16QTimeLinePrivate8setStateEN9QTimeLine5StateE'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='56' c='_ZN16QTimeLinePrivate14setCurrentTimeEi'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='135'>/*!
    \class QTimeLine
    \inmodule QtCore
    \brief The QTimeLine class provides a timeline for controlling animations.
    \since 4.2
    \ingroup animation

    It&apos;s most commonly used to animate a GUI control by calling a slot
    periodically. You can construct a timeline by passing its duration in
    milliseconds to QTimeLine&apos;s constructor. The timeline&apos;s duration describes
    for how long the animation will run. Then you set a suitable frame range
    by calling setFrameRange(). Finally connect the frameChanged() signal to a
    suitable slot in the widget you wish to animate (for example, \l {QProgressBar::}{setValue()}
    in QProgressBar). When you proceed to calling start(), QTimeLine will enter
    Running state, and start emitting frameChanged() at regular intervals,
    causing your widget&apos;s connected property&apos;s value to grow from the lower
    end to the upper and of your frame range, at a steady rate. You can
    specify the update interval by calling setUpdateInterval(). When done,
    QTimeLine enters NotRunning state, and emits finished().

    Example:

    \snippet code/src_corelib_tools_qtimeline.cpp 0

    By default the timeline runs once, from its beginning to its end,
    upon which you must call start() again to restart from the beginning. To
    make the timeline loop, you can call setLoopCount(), passing the number of
    times the timeline should run before finishing. The direction can also be
    changed, causing the timeline to run backward, by calling
    setDirection(). You can also pause and unpause the timeline while it&apos;s
    running by calling setPaused(). For interactive control, the
    setCurrentTime() function is provided, which sets the time position of the
    time line directly. Although most useful in NotRunning state (e.g.,
    connected to a valueChanged() signal in a QSlider), this function can be
    called at any time.

    The frame interface is useful for standard widgets, but QTimeLine can be
    used to control any type of animation. The heart of QTimeLine lies in the
    valueForTime() function, which generates a \e value between 0 and 1 for a
    given time. This value is typically used to describe the steps of an
    animation, where 0 is the first step of an animation, and 1 is the last
    step. When running, QTimeLine generates values between 0 and 1 by calling
    valueForTime() and emitting valueChanged(). By default, valueForTime()
    applies an interpolation algorithm to generate these value. You can choose
    from a set of predefined timeline algorithms by calling setEasingCurve().

    Note that, by default, QTimeLine uses QEasingCurve::InOutSine, which
    provides a value that grows slowly, then grows steadily, and finally grows
    slowly. For a custom timeline, you can reimplement valueForTime(), in which
    case QTimeLine&apos;s easingCurve property is ignored.

    \sa QProgressBar, QProgressDialog
*/</doc>
<fun r='_ZN9QTimeLine19bindableCurrentTimeEv'/>
<fun r='_ZN9QTimeLineC1EiP7QObject'/>
<fun r='_ZN9QTimeLineD1Ev'/>
<fun r='_ZNK9QTimeLine5stateEv'/>
<fun r='_ZNK9QTimeLine9loopCountEv'/>
<fun r='_ZN9QTimeLine12setLoopCountEi'/>
<fun r='_ZN9QTimeLine17bindableLoopCountEv'/>
<fun r='_ZNK9QTimeLine9directionEv'/>
<fun r='_ZN9QTimeLine12setDirectionENS_9DirectionE'/>
<fun r='_ZN9QTimeLine17bindableDirectionEv'/>
<fun r='_ZNK9QTimeLine8durationEv'/>
<fun r='_ZN9QTimeLine11setDurationEi'/>
<fun r='_ZN9QTimeLine16bindableDurationEv'/>
<fun r='_ZNK9QTimeLine10startFrameEv'/>
<fun r='_ZN9QTimeLine13setStartFrameEi'/>
<fun r='_ZNK9QTimeLine8endFrameEv'/>
<fun r='_ZN9QTimeLine11setEndFrameEi'/>
<fun r='_ZN9QTimeLine13setFrameRangeEii'/>
<fun r='_ZNK9QTimeLine14updateIntervalEv'/>
<fun r='_ZN9QTimeLine17setUpdateIntervalEi'/>
<fun r='_ZN9QTimeLine22bindableUpdateIntervalEv'/>
<fun r='_ZNK9QTimeLine11easingCurveEv'/>
<fun r='_ZN9QTimeLine14setEasingCurveERK12QEasingCurve'/>
<fun r='_ZN9QTimeLine19bindableEasingCurveEv'/>
<fun r='_ZNK9QTimeLine11currentTimeEv'/>
<fun r='_ZN9QTimeLine14setCurrentTimeEi'/>
<fun r='_ZNK9QTimeLine12currentFrameEv'/>
<fun r='_ZNK9QTimeLine12currentValueEv'/>
<fun r='_ZNK9QTimeLine12frameForTimeEi'/>
<fun r='_ZNK9QTimeLine12valueForTimeEi'/>
<fun r='_ZN9QTimeLine5startEv'/>
<fun r='_ZN9QTimeLine6resumeEv'/>
<fun r='_ZN9QTimeLine4stopEv'/>
<fun r='_ZN9QTimeLine9setPausedEb'/>
<fun r='_ZN9QTimeLine15toggleDirectionEv'/>
<fun r='_ZN9QTimeLine10timerEventEP11QTimerEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitemanimation.cpp' l='77'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitemanimation.cpp' l='198' c='_ZNK22QGraphicsItemAnimation8timeLineEv'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitemanimation.cpp' l='209' c='_ZN22QGraphicsItemAnimation11setTimeLineEP9QTimeLine'/>
<size>16</size>
