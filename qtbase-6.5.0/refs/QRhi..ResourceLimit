<def f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1699' ll='1714'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1806' c='_ZNK4QRhi13resourceLimitENS_13ResourceLimitE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p_p.h' l='132' c='_ZNK18QRhiImplementation13resourceLimitEN4QRhi13ResourceLimitE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull_p_p.h' l='273' c='_ZNK8QRhiNull13resourceLimitEN4QRhi13ResourceLimitE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='818' c='_ZNK9QRhiGles213resourceLimitEN4QRhi13ResourceLimitE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='6996' c='_ZNK4QRhi13resourceLimitENS_13ResourceLimitE'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='758'>/*!
    \enum QRhi::ResourceLimit
    Describes the resource limit to query.

    \value TextureSizeMin Minimum texture width and height. This is typically
    1. The minimum texture size is handled gracefully, meaning attempting to
    create a texture with an empty size will instead create a texture with the
    minimum size.

    \value TextureSizeMax Maximum texture width and height. This depends on the
    graphics API and sometimes the platform or implementation as well.
    Typically the value is in the range 4096 - 16384. Attempting to create
    textures larger than this is expected to fail.

    \value MaxColorAttachments The maximum number of color attachments for a
    QRhiTextureRenderTarget, in case multiple render targets are supported. When
    MRT is not supported, the value is 1. Otherwise this is typically 8, but
    watch out for the fact that OpenGL only mandates 4 as the minimum, and that
    is what some OpenGL ES implementations provide.

    \value FramesInFlight The number of frames the backend may keep &quot;in
    flight&quot;: with backends like Vulkan or Metal, it is the responsibility of
    QRhi to block whenever starting a new frame and finding the CPU is already
    \c{N - 1} frames ahead of the GPU (because the command buffer submitted in
    frame no. \c{current} - \c{N} has not yet completed). The value N is what
    is returned from here, and is typically 2. This can be relevant to
    applications that integrate rendering done directly with the graphics API,
    as such rendering code may want to perform double (if the value is 2)
    buffering for resources, such as, buffers, similarly to the QRhi backends
    themselves. The current frame slot index (a value running 0, 1, .., N-1,
    then wrapping around) is retrievable from QRhi::currentFrameSlot(). The
    value is 1 for backends where the graphics API offers no such low level
    control over the command submission process. Note that pipelining may still
    happen even when this value is 1 (some backends, such as D3D11, are
    designed to attempt to enable this, for instance, by using an update
    strategy for uniform buffers that does not stall the pipeline), but that is
    then not controlled by QRhi and so not reflected here in the API.

    \value MaxAsyncReadbackFrames The number of \l{QRhi::endFrame()}{submitted}
    frames (including the one that contains the readback) after which an
    asynchronous texture or buffer readback is guaranteed to complete upon
    \l{QRhi::beginFrame()}{starting a new frame}.

    \value MaxThreadGroupsPerDimension The maximum number of compute
    work/thread groups that can be dispatched. Effectively the maximum value
    for the arguments of QRhiCommandBuffer::dispatch(). Typically 65535.

    \value MaxThreadsPerThreadGroup The maximum number of invocations in a
    single local work group, or in other terminology, the maximum number of
    threads in a thread group. Effectively the maximum value for the product of
    \c local_size_x, \c local_size_y, and \c local_size_z in the compute
    shader. Typical values are 128, 256, 512, 1024, or 1536. Watch out that
    both OpenGL ES and Vulkan specify only 128 as the minimum required limit
    for implementations. While uncommon for Vulkan, some OpenGL ES 3.1
    implementations for mobile/embedded devices only support the spec-mandated
    minimum value.

    \value MaxThreadGroupX The maximum size of a work/thread group in the X
    dimension. Effectively the maximum value of \c local_size_x in the compute
    shader. Typically 256 or 1024.

    \value MaxThreadGroupY The maximum size of a work/thread group in the Y
    dimension. Effectively the maximum value of \c local_size_y in the compute
    shader. Typically 256 or 1024.

    \value MaxThreadGroupZ The maximum size of a work/thread group in the Z
    dimension. Effectively the maximum value of \c local_size_z in the compute
    shader. Typically 64 or 256.

    \value TextureArraySizeMax Maximum texture array size. Typically in range
    256 - 2048. Attempting to \l{QRhi::newTextureArray()}{create a texture
    array} with more elements will likely fail.

    \value MaxUniformBufferRange The number of bytes that can be exposed from a
    uniform buffer to the shaders at once. On OpenGL ES 2.0 and 3.0
    implementations this may be as low as 3584 bytes (224 four component, 32
    bits per component vectors). Elsewhere the value is typically 16384 (1024
    vec4s) or 65536 (4096 vec4s).

    \value MaxVertexInputs The number of input attributes to the vertex shader.
    The location in a QRhiVertexInputAttribute must be in range \c{[0,
    MaxVertexInputs-1]}. The value may be as low as 8 with OpenGL ES 2.0.
    Elsewhere, typical values are 16, 31, or 32.

    \value MaxVertexOutputs The maximum number of outputs (4 component vector
    \c out variables) from the vertex shader. The value may be as low as 8 with
    OpenGL ES 2.0, and 15 with OpenGL ES 3.0 and some Metal devices. Elsewhere,
    a typical value is 32.
 */</doc>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='1324' c='_ZNK9QRhiGles213resourceLimitEN4QRhi13ResourceLimitE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull.cpp' l='105' c='_ZNK8QRhiNull13resourceLimitEN4QRhi13ResourceLimitE'/>
