<dec f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.h' l='25' type='bool QReadWriteLock::tryLockForRead()'/>
<def f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.cpp' l='167' ll='170' type='bool QReadWriteLock::tryLockForRead()'/>
<doc f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.cpp' l='151'>/*!
    Attempts to lock for reading. If the lock was obtained, this
    function returns \c true, otherwise it returns \c false instead of
    waiting for the lock to become available, i.e. it does not block.

    The lock attempt will fail if another thread has locked for
    writing.

    If the lock was obtained, the lock must be unlocked with unlock()
    before another thread can successfully lock it for writing.

    It is not possible to lock for read if the thread already has
    locked for write.

    \sa unlock(), lockForRead()
*/</doc>
