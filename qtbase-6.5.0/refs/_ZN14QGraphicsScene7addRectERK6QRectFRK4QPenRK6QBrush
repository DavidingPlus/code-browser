<dec f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene.h' l='139' type='QGraphicsRectItem * QGraphicsScene::addRect(const QRectF &amp; rect, const QPen &amp; pen = QPen(), const QBrush &amp; brush = QBrush())'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene.h' l='148' u='c' c='_ZN14QGraphicsScene7addRectEddddRK4QPenRK6QBrush'/>
<def f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene.cpp' l='2720' ll='2727' type='QGraphicsRectItem * QGraphicsScene::addRect(const QRectF &amp; rect, const QPen &amp; pen = QPen(), const QBrush &amp; brush = QBrush())'/>
<doc f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene.cpp' l='2703'>/*!
    Creates and adds a rectangle item to the scene, and returns the item
    pointer. The geometry of the rectangle is defined by \a rect, and its pen
    and brush are initialized to \a pen and \a brush.

    Note that the item&apos;s geometry is provided in item coordinates, and its
    position is initialized to (0, 0). For example, if a QRect(50, 50, 100,
    100) is added, its top-left corner will be at (50, 50) relative to the
    origin in the item&apos;s coordinate system.

    If the item is visible (i.e., QGraphicsItem::isVisible() returns \c true),
    QGraphicsScene will emit changed() once control goes back to the event
    loop.

    \sa addEllipse(), addLine(), addPixmap(), addPixmap(), addText(),
    addItem(), addWidget()
*/</doc>
