<dec f='qtbase-6.5.0/src/corelib/kernel/qsystemsemaphore.h' l='41' type='void QSystemSemaphore::QSystemSemaphore(const QString &amp; key, int initialValue = 0, QSystemSemaphore::AccessMode mode = Open)'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory_p.h' l='92' u='c'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qsystemsemaphore.cpp' l='137' ll='141' type='void QSystemSemaphore::QSystemSemaphore(const QString &amp; key, int initialValue = 0, QSystemSemaphore::AccessMode mode = Open)'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qsystemsemaphore.cpp' l='101'>/*!
  Requests a system semaphore for the specified \a key. The parameters
  \a initialValue and \a mode are used according to the following
  rules, which are system dependent.

  In Unix, if the \a mode is \l {QSystemSemaphore::} {Open} and the
  system already has a semaphore identified by \a key, that semaphore
  is used, and the semaphore&apos;s resource count is not changed, i.e., \a
  initialValue is ignored. But if the system does not already have a
  semaphore identified by \a key, it creates a new semaphore for that
  key and sets its resource count to \a initialValue.

  In Unix, if the \a mode is \l {QSystemSemaphore::} {Create} and the
  system already has a semaphore identified by \a key, that semaphore
  is used, and its resource count is set to \a initialValue. If the
  system does not already have a semaphore identified by \a key, it
  creates a new semaphore for that key and sets its resource count to
  \a initialValue.

  In Windows, \a mode is ignored, and the system always tries to
  create a semaphore for the specified \a key. If the system does not
  already have a semaphore identified as \a key, it creates the
  semaphore and sets its resource count to \a initialValue. But if the
  system already has a semaphore identified as \a key it uses that
  semaphore and ignores \a initialValue.

  The \l {QSystemSemaphore::AccessMode} {mode} parameter is only used
  in Unix systems to handle the case where a semaphore survives a
  process crash. In that case, the next process to allocate a
  semaphore with the same \a key will get the semaphore that survived
  the crash, and unless \a mode is \l {QSystemSemaphore::} {Create},
  the resource count will not be reset to \a initialValue but will
  retain the initial value it had been given by the crashed process.

  \sa acquire(), key()
 */</doc>
<use f='qtbase-6.5.0/src/tools/androidtestrunner/main.cpp' l='481' u='c'/>
