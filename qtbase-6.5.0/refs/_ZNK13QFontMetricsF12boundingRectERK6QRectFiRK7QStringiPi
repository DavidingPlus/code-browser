<dec f='qtbase-6.5.0/src/gui/text/qfontmetrics.h' l='131' type='QRectF QFontMetricsF::boundingRect(const QRectF &amp; r, int flags, const QString &amp; string, int tabstops = 0, int * tabarray = nullptr) const'/>
<def f='qtbase-6.5.0/src/gui/text/qfontmetrics.cpp' l='1674' ll='1686' type='QRectF QFontMetricsF::boundingRect(const QRectF &amp; rect, int flags, const QString &amp; text, int tabStops = 0, int * tabArray = nullptr) const'/>
<use f='qtbase-6.5.0/src/gui/text/qfontmetrics.cpp' l='1718' u='c' c='_ZNK13QFontMetricsF4sizeEiRK7QStringiPi'/>
<doc f='qtbase-6.5.0/src/gui/text/qfontmetrics.cpp' l='1613'>/*!
    \overload

    Returns the bounding rectangle of the characters in the given \a text.
    This is the set of pixels the text would cover if drawn when constrained
    to the bounding rectangle specified by \a rect. If \a rect is a reference
    to a \nullptr object, e.g. when passing a default constructed QRectF, the
    bounding rectangle will not constrain itself to the size.

    The \a flags argument is the bitwise OR of the following flags:
    \list
    \li Qt::AlignLeft aligns to the left border, except for
          Arabic and Hebrew where it aligns to the right.
    \li Qt::AlignRight aligns to the right border, except for
          Arabic and Hebrew where it aligns to the left.
    \li Qt::AlignJustify produces justified text.
    \li Qt::AlignHCenter aligns horizontally centered.
    \li Qt::AlignTop aligns to the top border.
    \li Qt::AlignBottom aligns to the bottom border.
    \li Qt::AlignVCenter aligns vertically centered
    \li Qt::AlignCenter (== \c{Qt::AlignHCenter | Qt::AlignVCenter})
    \li Qt::TextSingleLine ignores newline characters in the text.
    \li Qt::TextExpandTabs expands tabs (see below)
    \li Qt::TextShowMnemonic interprets &quot;&amp;x&quot; as \underline{x}; i.e., underlined.
    \li Qt::TextWordWrap breaks the text to fit the rectangle.
    \endlist

    Qt::Horizontal alignment defaults to Qt::AlignLeft and vertical
    alignment defaults to Qt::AlignTop.

    If several of the horizontal or several of the vertical alignment
    flags are set, the resulting alignment is undefined.

    These flags are defined in \l{Qt::AlignmentFlag}.

    If Qt::TextExpandTabs is set in \a flags, the following behavior is
    used to interpret tab characters in the text:
    \list
    \li If \a tabArray is non-null, it specifies a 0-terminated sequence of
       pixel-positions for tabs in the text.
    \li If \a tabStops is non-zero, it is used as the tab spacing (in pixels).
    \endlist

    Note that the bounding rectangle may extend to the left of (0, 0),
    e.g. for italicized fonts.

    Newline characters are processed as line breaks.

    Despite the different actual character heights, the heights of the
    bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the same.

    The bounding rectangle returned by this function is somewhat larger
    than that calculated by the simpler boundingRect() function. This
    function uses the \l{minLeftBearing()}{maximum left} and
    \l{minRightBearing()}{right} font bearings as is
    necessary for multi-line text to align correctly. Also,
    fontHeight() and lineSpacing() are used to calculate the height,
    rather than individual character heights.

    \sa horizontalAdvance(), QPainter::boundingRect(), Qt::Alignment
*/</doc>
