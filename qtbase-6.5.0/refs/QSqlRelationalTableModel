<inh f='qtbase-6.5.0/src/sql/models/qsqltablemodel.h' l='21' c='QSqlTableModel'/>
<def f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.h' l='47' ll='85'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='107' c='_ZN9QRelation4initEP24QSqlRelationalTableModelRK12QSqlRelation'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='123'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='141' c='_ZN9QRelation4initEP24QSqlRelationalTableModelRK12QSqlRelation'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='235' c='_ZN31QSqlRelationalTableModelPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='235' c='_ZN31QSqlRelationalTableModelPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='235' c='_ZNK31QSqlRelationalTableModelPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='235' c='_ZNK31QSqlRelationalTableModelPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='235'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='286'>/*!
    \class QSqlRelationalTableModel
    \brief The QSqlRelationalTableModel class provides an editable
    data model for a single database table, with foreign key support.

    \ingroup database
    \inmodule QtSql

    QSqlRelationalTableModel acts like QSqlTableModel, but allows
    columns to be set as foreign keys into other database tables.

    \table
    \row \li \inlineimage noforeignkeys.png
         \li \inlineimage foreignkeys.png
    \endtable

    The screenshot on the left shows a plain QSqlTableModel in a
    QTableView. Foreign keys (\c city and \c country) aren&apos;t resolved
    to human-readable values. The screenshot on the right shows a
    QSqlRelationalTableModel, with foreign keys resolved into
    human-readable text strings.

    The following code snippet shows how the QSqlRelationalTableModel
    was set up:

    \snippet relationaltablemodel/relationaltablemodel.cpp 0
    \codeline
    \snippet relationaltablemodel/relationaltablemodel.cpp 1
    \snippet relationaltablemodel/relationaltablemodel.cpp 2

    The setRelation() function calls establish a relationship between
    two tables. The first call specifies that column 2 in table \c
    employee is a foreign key that maps with field \c id of table \c
    city, and that the view should present the \c{city}&apos;s \c name
    field to the user. The second call does something similar with
    column 3.

    If you use a read-write QSqlRelationalTableModel, you probably
    want to use QSqlRelationalDelegate on the view. Unlike the default
    delegate, QSqlRelationalDelegate provides a combobox for fields
    that are foreign keys into other tables. To use the class, simply
    call QAbstractItemView::setItemDelegate() on the view with an
    instance of QSqlRelationalDelegate:

    \snippet relationaltablemodel/relationaltablemodel.cpp 4

    The \l{relationaltablemodel} example illustrates how to use
    QSqlRelationalTableModel in conjunction with
    QSqlRelationalDelegate to provide tables with foreign key
    support.

    \image relationaltable.png

    Notes:

    \list
    \li The table must have a primary key declared.
    \li The table&apos;s primary key may not contain a relation to
       another table.
    \li If a relational table contains keys that refer to non-existent
       rows in the referenced table, the rows containing the invalid
       keys will not be exposed through the model. The user or the
       database is responsible for keeping referential integrity.
    \li If a relation&apos;s display column name is also used as a column
       name in the relational table, or if it is used as display column
       name in more than one relation it will be aliased. The alias is
       the relation&apos;s table name, display column name and a unique id
       joined by an underscore (e.g. tablename_columnname_id).
       QSqlRecord::fieldName() will return the aliased column name.
       All occurrences of the duplicate display column name are aliased when
       duplication is detected, but no aliasing is done to the column
       names in the main table. The aliasing doesn&apos;t affect
       QSqlRelation, so QSqlRelation::displayColumn() will return the
       original display column name.
    \li The reference table name is aliased. The alias is the word &quot;relTblAl&quot;
       and the relationed column index joined by an underscore
       (e.g. relTblAl_2). The alias can be used to filter the table
       (For example, setFilter(&quot;relTblAl_2=&apos;Oslo&apos; OR
       relTblAl_3=&apos;USA&apos;&quot;)).
    \li When using setData() the role should always be Qt::EditRole,
       and when using data() the role should always be Qt::DisplayRole.
    \endlist

    \sa QSqlRelation, QSqlRelationalDelegate,
        {Relational Table Model Example}
*/</doc>
<smbr r='QSqlRelationalTableModel::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK24QSqlRelationalTableModel10metaObjectEv'/>
<fun r='_ZN24QSqlRelationalTableModel11qt_metacastEPKc'/>
<fun r='_ZN24QSqlRelationalTableModel11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN24QSqlRelationalTableModel2trEPKcS1_i'/>
<fun r='_ZN24QSqlRelationalTableModel18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN24QSqlRelationalTableModelC1EP7QObjectRK12QSqlDatabase'/>
<fun r='_ZN24QSqlRelationalTableModelD1Ev'/>
<fun r='_ZNK24QSqlRelationalTableModel4dataERK11QModelIndexi'/>
<fun r='_ZN24QSqlRelationalTableModel7setDataERK11QModelIndexRK8QVarianti'/>
<fun r='_ZN24QSqlRelationalTableModel13removeColumnsEiiRK11QModelIndex'/>
<fun r='_ZN24QSqlRelationalTableModel5clearEv'/>
<fun r='_ZN24QSqlRelationalTableModel6selectEv'/>
<fun r='_ZN24QSqlRelationalTableModel8setTableERK7QString'/>
<fun r='_ZN24QSqlRelationalTableModel11setRelationEiRK12QSqlRelation'/>
<fun r='_ZNK24QSqlRelationalTableModel8relationEi'/>
<fun r='_ZNK24QSqlRelationalTableModel13relationModelEi'/>
<fun r='_ZN24QSqlRelationalTableModel11setJoinModeENS_8JoinModeE'/>
<fun r='_ZN24QSqlRelationalTableModel9revertRowEi'/>
<fun r='_ZNK24QSqlRelationalTableModel15selectStatementEv'/>
<fun r='_ZN24QSqlRelationalTableModel16updateRowInTableEiRK10QSqlRecord'/>
<fun r='_ZN24QSqlRelationalTableModel18insertRowIntoTableERK10QSqlRecord'/>
<fun r='_ZNK24QSqlRelationalTableModel13orderByClauseEv'/>
<fun r='_ZN24QSqlRelationalTableModel6d_funcEv'/>
<fun r='_ZNK24QSqlRelationalTableModel6d_funcEv'/>
<fun r='_ZN24QSqlRelationalTableModelC1EP7QObjectRK12QSqlDatabase'/>
<fun r='_ZN24QSqlRelationalTableModelD1Ev'/>
<fun r='_ZNK24QSqlRelationalTableModel4dataERK11QModelIndexi'/>
<fun r='_ZN24QSqlRelationalTableModel7setDataERK11QModelIndexRK8QVarianti'/>
<fun r='_ZN24QSqlRelationalTableModel11setRelationEiRK12QSqlRelation'/>
<fun r='_ZNK24QSqlRelationalTableModel8relationEi'/>
<fun r='_ZNK24QSqlRelationalTableModel15selectStatementEv'/>
<fun r='_ZNK24QSqlRelationalTableModel13relationModelEi'/>
<fun r='_ZN24QSqlRelationalTableModel9revertRowEi'/>
<fun r='_ZN24QSqlRelationalTableModel5clearEv'/>
<fun r='_ZN24QSqlRelationalTableModel11setJoinModeENS_8JoinModeE'/>
<fun r='_ZN24QSqlRelationalTableModel6selectEv'/>
<fun r='_ZN24QSqlRelationalTableModel8setTableERK7QString'/>
<fun r='_ZN24QSqlRelationalTableModel16updateRowInTableEiRK10QSqlRecord'/>
<fun r='_ZN24QSqlRelationalTableModel18insertRowIntoTableERK10QSqlRecord'/>
<fun r='_ZNK24QSqlRelationalTableModel13orderByClauseEv'/>
<fun r='_ZN24QSqlRelationalTableModel13removeColumnsEiiRK11QModelIndex'/>
