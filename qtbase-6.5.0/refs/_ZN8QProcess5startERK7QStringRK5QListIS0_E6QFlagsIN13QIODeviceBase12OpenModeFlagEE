<dec f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='125' type='void QProcess::start(const QString &amp; program, const QStringList &amp; arguments = {}, QIODeviceBase::OpenMode mode = ReadWrite)'/>
<use f='qtbase-6.5.0/qmake/library/qmakebuiltins.cpp' l='478' u='c' c='_ZNK14QMakeEvaluator10runProcessEP8QProcessRK7QString'/>
<def f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='1992' ll='2008' type='void QProcess::start(const QString &amp; program, const QStringList &amp; arguments = {}, QIODeviceBase::OpenMode mode = ReadWrite)'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='2072' u='c' c='_ZN8QProcess12startCommandERK7QString6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='2404' u='c' c='_ZN8QProcess7executeERK7QStringRK5QListIS0_E'/>
<doc f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='1961'>/*!
    Starts the given \a program in a new process, passing the command line
    arguments in \a arguments. See setProgram() for information about how
    QProcess searches for the executable to be run.

    The QProcess object will immediately enter the Starting state. If the
    process starts successfully, QProcess will emit started(); otherwise,
    errorOccurred() will be emitted.

    \note Processes are started asynchronously, which means the started()
    and errorOccurred() signals may be delayed. Call waitForStarted() to make
    sure the process has started (or has failed to start) and those signals
    have been emitted.

    \note No further splitting of the arguments is performed.

    \b{Windows:} The arguments are quoted and joined into a command line
    that is compatible with the \c CommandLineToArgvW() Windows function.
    For programs that have different command line quoting requirements,
    you need to use setNativeArguments(). One notable program that does
    not follow the \c CommandLineToArgvW() rules is cmd.exe and, by
    consequence, all batch scripts.

    The OpenMode is set to \a mode.

    If the QProcess object is already running a process, a warning may be
    printed at the console, and the existing process will continue running
    unaffected.

    \sa processId(), started(), waitForStarted(), setNativeArguments()
*/</doc>
<use f='qtbase-6.5.0/src/testlib/qbenchmarkvalgrind.cpp' l='29' u='c' c='_ZN23QBenchmarkValgrindUtils12haveValgrindEv'/>
<use f='qtbase-6.5.0/src/testlib/qbenchmarkvalgrind.cpp' l='155' u='c' c='_ZN23QBenchmarkValgrindUtils22runCallgrindSubProcessERK5QListI7QStringERi'/>
