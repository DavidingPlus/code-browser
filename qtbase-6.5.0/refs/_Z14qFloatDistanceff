<dec f='qtbase-6.5.0/src/corelib/global/qnumeric.h' l='72' type='quint32 qFloatDistance(float a, float b)'/>
<def f='qtbase-6.5.0/src/corelib/global/qnumeric.cpp' l='139' ll='172' type='quint32 qFloatDistance(float a, float b)'/>
<use f='qtbase-6.5.0/src/corelib/global/qnumeric.cpp' l='156' u='c' c='_Z14qFloatDistanceff'/>
<use f='qtbase-6.5.0/src/corelib/global/qnumeric.cpp' l='156' u='c' c='_Z14qFloatDistanceff'/>
<doc f='qtbase-6.5.0/src/corelib/global/qnumeric.cpp' l='112'>/*!
    Returns the number of representable floating-point numbers between \a a and \a b.

    This function provides an alternative way of doing approximated comparisons of floating-point
    numbers similar to qFuzzyCompare(). However, it returns the distance between two numbers, which
    gives the caller a possibility to choose the accepted error. Errors are relative, so for
    instance the distance between 1.0E-5 and 1.00001E-5 will give 110, while the distance between
    1.0E36 and 1.00001E36 will give 127.

    This function is useful if a floating point comparison requires a certain precision.
    Therefore, if \a a and \a b are equal it will return 0. The maximum value it will return for 32-bit
    floating point numbers is 4,278,190,078. This is the distance between \c{-FLT_MAX} and
    \c{+FLT_MAX}.

    The function does not give meaningful results if any of the arguments are \c Infinite or \c NaN.
    You can check for this by calling qIsFinite().

    The return value can be considered as the &quot;error&quot;, so if you for instance want to compare
    two 32-bit floating point numbers and all you need is an approximated 24-bit precision, you can
    use this function like this:

    \snippet code/src_corelib_global_qnumeric.cpp 0

    \sa qFuzzyCompare()
    \since 5.2
    \relates &lt;QtNumeric&gt;
*/</doc>
