<def f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='122' ll='128' type='static QTimeZone QTimeZone::fromDurationAheadOfUtc(std::chrono::seconds offset)'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='131' u='c' c='_ZN9QTimeZone21fromSecondsAheadOfUtcEi'/>
<doc f='qtbase-6.5.0/src/corelib/time/qtimezone.cpp' l='598'>/*!
    \since 6.5
    \fn QTimeZone::fromSecondsAheadOfUtc(int offset)
    \fn QTimeZone::fromDurationAheadOfUtc(std::chrono::seconds offset)

    Returns a time representation at a fixed \a offset, in seconds, ahead of
    UTC.

    The \a offset from UTC must be in the range -14 hours to +14 hours otherwise an
    invalid time zone will be returned. The returned QTimeZone is a lightweight
    time representation, not a time zone (backed by system-supplied or standard
    data).

    If the offset is 0, the \l timeSpec() of the returned instance will be
    Qt::UTC. Otherwise, if \a offset is valid, timeSpec() is
    Qt::OffsetFromUTC. An invalid time zone, when returned, has Qt::TimeZone as
    its timeSpec().

    \sa QTimeZone(int), asBackendZone(), fixedSecondsAheadOfUtc()
*/</doc>
