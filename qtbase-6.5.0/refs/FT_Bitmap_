<def f='include/freetype2/freetype/ftimage.h' l='261' ll='272'/>
<use f='include/freetype2/freetype/ftimage.h' l='261'/>
<size>40</size>
<doc f='include/freetype2/freetype/ftimage.h' l='206'>/**************************************************************************
   *
   * @struct:
   *   FT_Bitmap
   *
   * @description:
   *   A structure used to describe a bitmap or pixmap to the raster.  Note
   *   that we now manage pixmaps of various depths through the `pixel_mode`
   *   field.
   *
   * @fields:
   *   rows ::
   *     The number of bitmap rows.
   *
   *   width ::
   *     The number of pixels in bitmap row.
   *
   *   pitch ::
   *     The pitch&apos;s absolute value is the number of bytes taken by one
   *     bitmap row, including padding.  However, the pitch is positive when
   *     the bitmap has a &apos;down&apos; flow, and negative when it has an &apos;up&apos; flow.
   *     In all cases, the pitch is an offset to add to a bitmap pointer in
   *     order to go down one row.
   *
   *     Note that &apos;padding&apos; means the alignment of a bitmap to a byte
   *     border, and FreeType functions normally align to the smallest
   *     possible integer value.
   *
   *     For the B/W rasterizer, `pitch` is always an even number.
   *
   *     To change the pitch of a bitmap (say, to make it a multiple of 4),
   *     use @FT_Bitmap_Convert.  Alternatively, you might use callback
   *     functions to directly render to the application&apos;s surface; see the
   *     file `example2.cpp` in the tutorial for a demonstration.
   *
   *   buffer ::
   *     A typeless pointer to the bitmap buffer.  This value should be
   *     aligned on 32-bit boundaries in most cases.
   *
   *   num_grays ::
   *     This field is only used with @FT_PIXEL_MODE_GRAY; it gives the
   *     number of gray levels used in the bitmap.
   *
   *   pixel_mode ::
   *     The pixel mode, i.e., how pixel bits are stored.  See @FT_Pixel_Mode
   *     for possible values.
   *
   *   palette_mode ::
   *     This field is intended for paletted pixel modes; it indicates how
   *     the palette is stored.  Not used currently.
   *
   *   palette ::
   *     A typeless pointer to the bitmap palette; this field is intended for
   *     paletted pixel modes.  Not used currently.
   */</doc>
<mbr r='FT_Bitmap_::rows' o='0' t='unsigned int'/>
<mbr r='FT_Bitmap_::width' o='32' t='unsigned int'/>
<mbr r='FT_Bitmap_::pitch' o='64' t='int'/>
<mbr r='FT_Bitmap_::buffer' o='128' t='unsigned char *'/>
<mbr r='FT_Bitmap_::num_grays' o='192' t='unsigned short'/>
<mbr r='FT_Bitmap_::pixel_mode' o='208' t='unsigned char'/>
<mbr r='FT_Bitmap_::palette_mode' o='216' t='unsigned char'/>
<mbr r='FT_Bitmap_::palette' o='256' t='void *'/>
