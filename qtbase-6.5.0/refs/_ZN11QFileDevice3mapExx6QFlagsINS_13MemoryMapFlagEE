<dec f='qtbase-6.5.0/src/corelib/io/qfiledevice.h' l='91' type='uchar * QFileDevice::map(qint64 offset, qint64 size, QFileDevice::MemoryMapFlags flags = NoOptions)'/>
<def f='qtbase-6.5.0/src/corelib/io/qfiledevice.cpp' l='671' ll='683' type='uchar * QFileDevice::map(qint64 offset, qint64 size, QFileDevice::MemoryMapFlags flags = NoOptions)'/>
<doc f='qtbase-6.5.0/src/corelib/io/qfiledevice.cpp' l='654'>/*!
    Maps \a size bytes of the file into memory starting at \a offset.  A file
    should be open for a map to succeed but the file does not need to stay
    open after the memory has been mapped.  When the QFile is destroyed
    or a new file is opened with this object, any maps that have not been
    unmapped will automatically be unmapped.

    The mapping will have the same open mode as the file (read and/or write),
    except when using MapPrivateOption, in which case it is always possible
    to write to the mapped memory.

    Any mapping options can be passed through \a flags.

    Returns a pointer to the memory or \nullptr if there is an error.

    \sa unmap()
 */</doc>
<use f='qtbase-6.5.0/src/corelib/mimetypes/qmimeprovider.cpp' l='107' u='c' c='_ZN19QMimeBinaryProvider9CacheFile4loadEv'/>
<use f='qtbase-6.5.0/src/corelib/plugin/qlibrary.cpp' l='230' u='c' c='_ZL19findPatternUnloadedRK7QStringP15QLibraryPrivate'/>
<use f='qtbase-6.5.0/src/gui/image/qiconloader.cpp' l='224' u='c' c='_ZN19QIconCacheGtkReaderC1ERK7QString'/>
<use f='qtbase-6.5.0/src/network/kernel/qtldurl.cpp' l='137' u='c' c='_ZN21QPublicSuffixDatabase8loadFileERK7QString'/>
<use f='qtbase-6.5.0/src/tools/moc/preprocessor.cpp' l='959' u='c' c='_ZL13readOrMapFileP5QFile'/>
