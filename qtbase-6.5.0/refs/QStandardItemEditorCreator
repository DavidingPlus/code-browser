<inh f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='19' c='QItemEditorCreatorBase'/>
<def f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='41' ll='52'/>
<fun r='_ZN26QStandardItemEditorCreatorC1Ev'/>
<fun r='_ZNK26QStandardItemEditorCreator12createWidgetEP7QWidget'/>
<fun r='_ZNK26QStandardItemEditorCreator17valuePropertyNameEv'/>
<mbr r='QStandardItemEditorCreator::propertyName' t='QByteArray'/>
<doc f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.cpp' l='460'>/*!
    \class QStandardItemEditorCreator

    \brief The QStandardItemEditorCreator class provides the
    possibility to register widgets without having to subclass
    QItemEditorCreatorBase.

    \since 4.2
    \ingroup model-view
    \inmodule QtWidgets

    This convenience template class makes it possible to register widgets without
    having to subclass QItemEditorCreatorBase.

    Example:

    \snippet code/src_gui_itemviews_qitemeditorfactory.cpp 2

    Setting the \c editorFactory created above in an item delegate via
    QStyledItemDelegate::setItemEditorFactory() makes sure that all values of type
    QMetaType::QDateTime will be edited in \c{MyFancyDateTimeEdit}.

    The editor must provide a user property that will contain the
    editing data. The property is used by \l{QStyledItemDelegate}s to set
    and retrieve the data (using Qt&apos;s \l{Meta-Object
    System}{meta-object system}). You set the user property with
    the USER keyword:

    \snippet code/src_gui_itemviews_qitemeditorfactory.cpp 3

    \sa QItemEditorCreatorBase, QItemEditorCreator,
        QItemEditorFactory, QStyledItemDelegate, {Color Editor Factory Example}
*/</doc>
