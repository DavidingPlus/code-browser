<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='212' c='_ZN4QUrl8setQueryERK9QUrlQuery'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='270'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='16' c='_Z5qHashRK9QUrlQuerym'/>
<def f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='19' ll='78'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='26' c='_ZN9QUrlQueryC1ESt16initializer_listISt4pairI7QStringS2_EE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='32' c='_ZN9QUrlQueryC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='33' c='_ZN9QUrlQueryC1EOS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='34' c='_ZN9QUrlQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='34' c='_ZN9QUrlQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='35' c='_ZN9QUrlQueryaSEOS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='35' c='_ZN9QUrlQueryaSEOS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='38' c='_ZNK9QUrlQueryeqERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='39' c='_ZNK9QUrlQueryneERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='42' c='_ZN9QUrlQuery4swapERS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='72' c='_Z5qHashRK9QUrlQuerym'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='80'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='80'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='80'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='80'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='80'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='80' c='_Z4swapR9QUrlQueryS0_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='80' c='_Z4swapR9QUrlQueryS0_'/>
<size>8</size>
<fun r='_ZN9QUrlQueryC1Ev'/>
<fun r='_ZN9QUrlQueryC1ERK4QUrl'/>
<fun r='_ZN9QUrlQueryC1ERK7QString'/>
<fun r='_ZN9QUrlQueryC1ESt16initializer_listISt4pairI7QStringS2_EE'/>
<fun r='_ZN9QUrlQueryC1ERKS_'/>
<fun r='_ZN9QUrlQueryC1EOS_'/>
<fun r='_ZN9QUrlQueryaSERKS_'/>
<fun r='_ZN9QUrlQueryD1Ev'/>
<fun r='_ZNK9QUrlQueryeqERKS_'/>
<fun r='_ZNK9QUrlQueryneERKS_'/>
<fun r='_ZN9QUrlQuery4swapERS_'/>
<fun r='_ZNK9QUrlQuery7isEmptyEv'/>
<fun r='_ZNK9QUrlQuery10isDetachedEv'/>
<fun r='_ZN9QUrlQuery5clearEv'/>
<fun r='_ZNK9QUrlQuery5queryE6QFlagsIN4QUrl25ComponentFormattingOptionEE'/>
<fun r='_ZN9QUrlQuery8setQueryERK7QString'/>
<fun r='_ZNK9QUrlQuery8toStringE6QFlagsIN4QUrl25ComponentFormattingOptionEE'/>
<fun r='_ZN9QUrlQuery18setQueryDelimitersE5QCharS0_'/>
<fun r='_ZNK9QUrlQuery19queryValueDelimiterEv'/>
<fun r='_ZNK9QUrlQuery18queryPairDelimiterEv'/>
<fun r='_ZN9QUrlQuery13setQueryItemsERK5QListISt4pairI7QStringS2_EE'/>
<fun r='_ZNK9QUrlQuery10queryItemsE6QFlagsIN4QUrl25ComponentFormattingOptionEE'/>
<fun r='_ZNK9QUrlQuery12hasQueryItemERK7QString'/>
<fun r='_ZN9QUrlQuery12addQueryItemERK7QStringS2_'/>
<fun r='_ZN9QUrlQuery15removeQueryItemERK7QString'/>
<fun r='_ZNK9QUrlQuery14queryItemValueERK7QString6QFlagsIN4QUrl25ComponentFormattingOptionEE'/>
<fun r='_ZNK9QUrlQuery18allQueryItemValuesERK7QString6QFlagsIN4QUrl25ComponentFormattingOptionEE'/>
<fun r='_ZN9QUrlQuery19removeAllQueryItemsERK7QString'/>
<fun r='_ZN9QUrlQuery26defaultQueryValueDelimiterEv'/>
<fun r='_ZN9QUrlQuery25defaultQueryPairDelimiterEv'/>
<mbr r='QUrlQuery::d' o='0' t='QSharedDataPointer&lt;QUrlQueryPrivate&gt;'/>
<fun r='_ZN9QUrlQuery8data_ptrEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2579' c='_ZN4QUrl8setQueryERK9QUrlQuery'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.cpp' l='361' c='_ZN9QUrlQueryC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.cpp' l='371' c='_ZN9QUrlQueryC1EOS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.cpp' l='380' c='_ZN9QUrlQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.cpp' l='380' c='_ZN9QUrlQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.cpp' l='405' c='_ZNK9QUrlQueryeqERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.cpp' l='428' c='_Z5qHashRK9QUrlQuerym'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/corelib/io/qurlquery.cpp' l='14'>/*!
  \class QUrlQuery
  \inmodule QtCore
  \since 5.0

  \brief The QUrlQuery class provides a way to manipulate a key-value pairs in
  a URL&apos;s query.

  \reentrant
  \ingroup io
  \ingroup network
  \ingroup shared

  It is used to parse the query strings found in URLs like the following:

  \image qurl-querystring.png

  Query strings like the above are used to transmit options in the URL and are
  usually decoded into multiple key-value pairs. The one above would contain
  two entries in its list, with keys &quot;type&quot; and &quot;color&quot;. QUrlQuery can also be
  used to create a query string suitable for use in QUrl::setQuery() from the
  individual components of the query.

  The most common way of parsing a query string is to initialize it in the
  constructor by passing it the query string. Otherwise, the setQuery() method
  can be used to set the query to be parsed. That method can also be used to
  parse a query with non-standard delimiters, after having set them using the
  setQueryDelimiters() function.

  The encoded query string can be obtained again using query(). This will take
  all the internally-stored items and encode the string using the delimiters.

  \section1 Encoding

  All of the getter methods in QUrlQuery support an optional parameter of type
  QUrl::ComponentFormattingOptions, including query(), which dictate how to
  encode the data in question. Except for QUrl::FullyDecoded, the returned value must
  still be considered a percent-encoded string, as there are certain values
  which cannot be expressed in decoded form (like control characters, byte
  sequences not decodable to UTF-8). For that reason, the percent character is
  always represented by the string &quot;%25&quot;.

  All of the setter methods and the query methods like hasQueryItem() in
  QUrlQuery take encoded forms only. Unlike in QUrl, there&apos;s no optional
  parameter to specify that the strings being passed are decoded. If
  improperly-encoded strings are passed to the setter or query methods,
  QUrlQuery will attempt to recover instead of failing. That is to say, all
  functions in this class parse their string arguments as if the
  QUrl::TolerantMode decoding mode was specified.

  Application code should strive to always ensure proper encoding and not rely
  on TolerantMode parsing fixing the strings. Notably, all user input must be
  first percent-encoded using QUrl::toPercentEncoding() or similar functions
  before being passed to the functions in this class.

  \section2 Handling of spaces and plus (&quot;+&quot;)

  Web browsers usually encode spaces found in HTML FORM elements to a plus sign
  (&quot;+&quot;) and plus signs to its percent-encoded form (%2B). However, the Internet
  specifications governing URLs do not consider spaces and the plus character
  equivalent.

  For that reason, QUrlQuery never encodes the space character to &quot;+&quot; and will
  never decode &quot;+&quot; to a space character. Instead, space characters will be
  rendered &quot;%20&quot; in encoded form.

  To support encoding like that of HTML forms, QUrlQuery also never decodes the
  &quot;%2B&quot; sequence to a plus sign nor encode a plus sign. In fact, any &quot;%2B&quot; or
  &quot;+&quot; sequences found in the keys, values, or query string are left exactly
  like written (except for the uppercasing of &quot;%2b&quot; to &quot;%2B&quot;).

  \section2 Full decoding

  With QUrl::FullyDecoded formatting, all percent-encoded sequences will be
  decoded fully and the &apos;%&apos; character is used to represent itself.
  QUrl::FullyDecoded should be used with care, since it may cause data loss.
  See the documentation of QUrl::FullyDecoded for information on what data may
  be lost.

  This formatting mode should be used only when dealing with text presented to
  the user in contexts where percent-encoding is not desired. Note that
  QUrlQuery setters and query methods do not support the counterpart
  QUrl::DecodedMode parsing, so using QUrl::FullyDecoded to obtain a listing of
  keys may result in keys not found in the object.

  \section1 Non-standard delimiters

  By default, QUrlQuery uses an equal sign (&quot;=&quot;) to separate a key from its
  value, and an ampersand (&quot;&amp;&quot;) to separate key-value pairs from each other. It
  is possible to change the delimiters that QUrlQuery uses for parsing and for
  reconstructing the query by calling setQueryDelimiters().

  Non-standard delimiters should be chosen from among what RFC 3986 calls
  &quot;sub-delimiters&quot;. They are:

  \snippet code/src_corelib_io_qurlquery.cpp 0

  Use of other characters is not supported and may result in unexpected
  behaviour. QUrlQuery does not verify that you passed a valid delimiter.

  \sa QUrl
*/</doc>
<fun r='_ZN9QUrlQueryC1Ev'/>
<fun r='_ZN9QUrlQueryC1ERK7QString'/>
<fun r='_ZN9QUrlQueryC1ERK4QUrl'/>
<fun r='_ZN9QUrlQueryC1ERKS_'/>
<fun r='_ZN9QUrlQueryC1EOS_'/>
<fun r='_ZN9QUrlQueryaSERKS_'/>
<fun r='_ZN9QUrlQueryD1Ev'/>
<fun r='_ZNK9QUrlQueryeqERKS_'/>
<fun r='_ZNK9QUrlQuery7isEmptyEv'/>
<fun r='_ZNK9QUrlQuery10isDetachedEv'/>
<fun r='_ZN9QUrlQuery5clearEv'/>
<fun r='_ZN9QUrlQuery8setQueryERK7QString'/>
<fun r='_ZNK9QUrlQuery5queryE6QFlagsIN4QUrl25ComponentFormattingOptionEE'/>
<fun r='_ZN9QUrlQuery18setQueryDelimitersE5QCharS0_'/>
<fun r='_ZNK9QUrlQuery19queryValueDelimiterEv'/>
<fun r='_ZNK9QUrlQuery18queryPairDelimiterEv'/>
<fun r='_ZN9QUrlQuery13setQueryItemsERK5QListISt4pairI7QStringS2_EE'/>
<fun r='_ZNK9QUrlQuery10queryItemsE6QFlagsIN4QUrl25ComponentFormattingOptionEE'/>
<fun r='_ZNK9QUrlQuery12hasQueryItemERK7QString'/>
<fun r='_ZN9QUrlQuery12addQueryItemERK7QStringS2_'/>
<fun r='_ZNK9QUrlQuery14queryItemValueERK7QString6QFlagsIN4QUrl25ComponentFormattingOptionEE'/>
<fun r='_ZNK9QUrlQuery18allQueryItemValuesERK7QString6QFlagsIN4QUrl25ComponentFormattingOptionEE'/>
<fun r='_ZN9QUrlQuery15removeQueryItemERK7QString'/>
<fun r='_ZN9QUrlQuery19removeAllQueryItemsERK7QString'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixservices.cpp' l='253' c='_ZL25xdgDesktopPortalSendEmailRK4QUrlRK7QStringS4_'/>
<size>8</size>
