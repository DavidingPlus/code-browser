<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend_p.h' l='142' ll='151'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend_p.h' l='154' c='_Z21qobject_interface_iidv'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend_p.h' l='154' c='_Z12qobject_castP7QObject'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend_p.h' l='154' c='_Z12qobject_castP7QObject'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend_p.h' l='154' c='_Z12qobject_castP7QObject'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend_p.h' l='154' c='_Z12qobject_castPK7QObject'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend_p.h' l='154' c='_Z12qobject_castPK7QObject'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend_p.h' l='154' c='_Z12qobject_castPK7QObject'/>
<size>16</size>
<smbr r='QNetworkAccessBackendFactory::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK28QNetworkAccessBackendFactory10metaObjectEv'/>
<fun r='_ZN28QNetworkAccessBackendFactory11qt_metacastEPKc'/>
<fun r='_ZN28QNetworkAccessBackendFactory11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN28QNetworkAccessBackendFactory2trEPKcS1_i'/>
<fun r='_ZN28QNetworkAccessBackendFactory18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN28QNetworkAccessBackendFactoryC1Ev'/>
<fun r='_ZN28QNetworkAccessBackendFactoryD1Ev'/>
<fun r='_ZNK28QNetworkAccessBackendFactory16supportedSchemesEv'/>
<fun r='_ZNK28QNetworkAccessBackendFactory6createEN21QNetworkAccessManager9OperationERK15QNetworkRequest'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend.cpp' l='21'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend.cpp' l='92'>/*!
    \class QNetworkAccessBackendFactory
    \brief QNetworkAccessBackendFactory is the base class to inherit
    from for Qt to instantiate and query your QNetworkAccessBackend
    plugin.
    \since 6.0
    \internal

//! [semi-private-notice]
    The class is considered semi-private and as such requires linking
    to &quot;NetworkPrivate&quot; to access the header. Furthermore it means
    the class is not under the same binary compatibility restrictions
    as the rest of Qt. While we still try to avoid breakage it may
    still occur. The class is primarily meant to be used by plugins
    which would be recompiled every time Qt is updated.
//! [semi-private-notice]

    This class acts as the primary interface to the plugin and must
    be derived from. It deals with both querying supported schemes
    and the creation of QNetworkAccessBackend

    Since they are both abstract function you are required to
    implement supportedSchemes() and create().
*/</doc>
<fun r='_ZN28QNetworkAccessBackendFactoryC1Ev'/>
<fun r='_ZN28QNetworkAccessBackendFactoryD1Ev'/>
<ovr f='qtbase-6.5.0/src/network/access/qnetworkaccessfilebackend_p.h' l='49' c='QNetworkAccessFileBackendFactory'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessfilebackend_p.h' l='49'/>
<size>16</size>
