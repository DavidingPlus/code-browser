<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='207' u='c' c='_ZNK5QTime8toStringERK7QString'/>
<dec f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='208' type='QString QTime::toString(QStringView format) const'/>
<def f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='2051' ll='2054' type='QString QTime::toString(QStringView format) const'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='5582' u='c' c='_Zls6QDebug5QTime'/>
<doc f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='1948'>/*!
    \fn QString QTime::toString(const QString &amp;format) const
    \fn QString QTime::toString(QStringView format) const

    Returns the time as a string. The \a format parameter determines
    the format of the result string.

    These expressions may be used:

    \table
    \header \li Expression \li Output
    \row \li h
         \li The hour without a leading zero (0 to 23 or 1 to 12 if AM/PM display)
    \row \li hh
         \li The hour with a leading zero (00 to 23 or 01 to 12 if AM/PM display)
    \row \li H
         \li The hour without a leading zero (0 to 23, even with AM/PM display)
    \row \li HH
         \li The hour with a leading zero (00 to 23, even with AM/PM display)
    \row \li m \li The minute without a leading zero (0 to 59)
    \row \li mm \li The minute with a leading zero (00 to 59)
    \row \li s \li The whole second, without any leading zero (0 to 59)
    \row \li ss \li The whole second, with a leading zero where applicable (00 to 59)
    \row \li z or zz
         \li The fractional part of the second, to go after a decimal point,
             without trailing zeroes. Thus \c{&quot;s.z&quot;} reports the seconds to full
             available (millisecond) precision without trailing zeroes (0 to
             999). For example, \c{&quot;s.z&quot;} would produce \c{&quot;0.25&quot;} for a time a
             quarter second into a minute.
    \row \li zzz
         \li The fractional part of the second, to millisecond precision,
             including trailing zeroes where applicable (000 to 999). For
             example, \c{&quot;ss.zzz&quot;} would produce \c{&quot;00.250&quot;} for a time a
             quarter second into a minute.
    \row \li AP or A
         \li Use AM/PM display. \c A/AP will be replaced by &apos;AM&apos; or &apos;PM&apos;. In
             localized forms (only relevant to \l{QLocale::toString()}), the
             locale-appropriate text is converted to upper-case.
    \row \li ap or a
         \li Use am/pm display. \c a/ap will be replaced by &apos;am&apos; or &apos;pm&apos;. In
             localized forms (only relevant to \l{QLocale::toString()}), the
             locale-appropriate text is converted to lower-case.
    \row \li aP or Ap
         \li Use AM/PM display (since 6.3). \c aP/Ap will be replaced by &apos;AM&apos; or
             &apos;PM&apos;. In localized forms (only relevant to
             \l{QLocale::toString()}), the locale-appropriate text (returned by
             \l{QLocale::amText()} or \l{QLocale::pmText()}) is used without
             change of case.
    \row \li t
         \li The timezone abbreviation (for example &quot;CEST&quot;). Note that time zone
             abbreviations are not unique. In particular, \l toString() cannot
             parse this.
    \row \li tt
         \li The timezone&apos;s offset from UTC with no colon between the hours and
             minutes (for example &quot;+0200&quot;).
    \row \li ttt
         \li The timezone&apos;s offset from UTC with a colon between the hours and
             minutes (for example &quot;+02:00&quot;).
    \row \li tttt
         \li The timezone name (for example &quot;Europe/Berlin&quot;). Note that this
             gives no indication of whether the datetime was in daylight-saving
             time or standard time, which may lead to ambiguity if the datetime
             falls in an hour repeated by a transition between the two. The name
             used is the one provided by \l QTimeZone::displayName() with the \l
             QTimeZone::LongName type. This may depend on the operating system
             in use.
    \endtable

    Any non-empty sequence of characters enclosed in single quotes will be
    included verbatim in the output string (stripped of the quotes), even if it
    contains formatting characters. Two consecutive single quotes (&quot;&apos;&apos;&quot;) are
    replaced by a single quote in the output. All other characters in the format
    string are included verbatim in the output string.

    Formats without separators (e.g. &quot;ddMM&quot;) are supported but must be used with
    care, as the resulting strings aren&apos;t always reliably readable (e.g. if &quot;dM&quot;
    produces &quot;212&quot; it could mean either the 2nd of December or the 21st of
    February).

    Example format strings (assuming that the QTime is 14:13:09.042)

    \table
    \header \li Format \li Result
    \row \li hh:mm:ss.zzz \li 14:13:09.042
    \row \li h:m:s ap     \li 2:13:9 pm
    \row \li H:m:s a      \li 14:13:9 pm
    \endtable

    If the time is invalid, an empty string will be returned.

    \note To get localized forms of AM or PM (the AP, ap, A, a, aP or Ap
    formats), use QLocale::system().toString().

    \note If a format character is repeated more times than the longest
    expression in the table above using it, this part of the format will be read
    as several expressions with no separator between them; the longest above,
    possibly repeated as many times as there are copies of it, ending with a
    residue that may be a shorter expression. Thus \c{&apos;HHHHH&apos;} for the time
    08:00 will contribute \c{&quot;08088&quot;} to the output.

    \sa fromString(), QDate::toString(), QDateTime::toString(), QLocale::toString()
*/
// ### Qt 7 The &apos;t&apos; format specifiers should be specific to QDateTime (compare fromString).</doc>
<use f='qtbase-6.5.0/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp' l='498' u='c' c='_ZN13QSQLiteResult4execEv'/>
<use f='qtbase-6.5.0/src/testlib/qtest.h' l='85' u='c' c='_ZN5QTest8toStringERKT_'/>
