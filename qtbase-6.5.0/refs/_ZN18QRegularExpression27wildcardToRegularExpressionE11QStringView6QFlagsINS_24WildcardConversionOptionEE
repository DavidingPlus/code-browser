<use f='qtbase-6.5.0/src/corelib/text/qregularexpression.h' l='145' u='c' c='_ZN18QRegularExpression27wildcardToRegularExpressionERK7QString6QFlagsINS_24WildcardConversionOptionEE'/>
<dec f='qtbase-6.5.0/src/corelib/text/qregularexpression.h' l='154' type='static QString QRegularExpression::wildcardToRegularExpression(QStringView str, QRegularExpression::WildcardConversionOptions options = DefaultWildcardConversion)'/>
<def f='qtbase-6.5.0/src/corelib/text/qregularexpression.cpp' l='1912' ll='1991' type='static QString QRegularExpression::wildcardToRegularExpression(QStringView pattern, QRegularExpression::WildcardConversionOptions options = DefaultWildcardConversion)'/>
<use f='qtbase-6.5.0/src/corelib/text/qregularexpression.cpp' l='2011' u='c' c='_ZN18QRegularExpression12fromWildcardE11QStringViewN2Qt15CaseSensitivityE6QFlagsINS_24WildcardConversionOptionEE'/>
<doc f='qtbase-6.5.0/src/corelib/text/qregularexpression.cpp' l='1861'>/*!
    \since 5.15

    Returns a regular expression representation of the given glob \a pattern.
    The transformation is targeting file path globbing, which means in particular
    that path separators receive special treatment. This implies that it is not
    just a basic translation from &quot;*&quot; to &quot;.*&quot;.

    \snippet code/src_corelib_text_qregularexpression.cpp 31

    By default, the returned regular expression is fully anchored. In other
    words, there is no need of calling anchoredPattern() again on the
    result. To get a regular expression that is not anchored, pass
    UnanchoredWildcardConversion as the conversion \a options.

    This implementation follows closely the definition
    of wildcard for glob patterns:
    \table
    \row \li \b{c}
         \li Any character represents itself apart from those mentioned
         below. Thus \b{c} matches the character \e c.
    \row \li \b{?}
         \li Matches any single character. It is the same as
         \b{.} in full regexps.
    \row \li \b{*}
         \li Matches zero or more of any characters. It is the
         same as \b{.*} in full regexps.
    \row \li \b{[abc]}
         \li Matches one character given in the bracket.
    \row \li \b{[a-c]}
         \li Matches one character from the range given in the bracket.
    \row \li \b{[!abc]}
         \li Matches one character that is not given in the bracket. It is the
         same as \b{[^abc]} in full regexp.
    \row \li \b{[!a-c]}
         \li Matches one character that is not from the range given in the
         bracket. It is the same as \b{[^a-c]} in full regexp.
    \endtable

    \note The backslash (\\) character is \e not an escape char in this context.
    In order to match one of the special characters, place it in square brackets
    (for example, \c{[?]}).

    More information about the implementation can be found in:
    \list
    \li \l {https://en.wikipedia.org/wiki/Glob_(programming)} {The Wikipedia Glob article}
    \li \c {man 7 glob}
    \endlist

    \sa escape()
*/</doc>
