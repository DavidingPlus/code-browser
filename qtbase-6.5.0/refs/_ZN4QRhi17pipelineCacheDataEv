<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1817' type='QByteArray QRhi::pipelineCacheData()'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='7145' ll='7148' type='QByteArray QRhi::pipelineCacheData()'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='7106'>/*!
    \return a binary \a data blob with data collected from the
    QRhiGraphicsPipeline and QRhiComputePipeline successfully created during
    the lifetime of this QRhi.

    By saving and then, in subsequent runs of the same application, reloading
    the cache data, pipeline and shader creation times can potentially be
    reduced. What exactly the cache and its serialized version includes is not
    specified, is always specific to the backend used, and in some cases also
    dependent on the particular implementation of the graphics API.

    When the PipelineCacheDataLoadSave is reported as unsupported, the returned
    QByteArray is empty.

    When the EnablePipelineCacheDataSave flag was not specified when calling
    create(), the returned QByteArray may be empty, even when the
    PipelineCacheDataLoadSave feature is supported.

    When the returned data is non-empty, it is always specific to the Qt
    version and QRhi backend. In addition, in some cases there is a strong
    dependency to the graphics device and the exact driver version used. QRhi
    takes care of adding the appropriate header and safeguards that ensure that
    the data can always be passed safely to setPipelineCacheData(), therefore
    attempting to load data from a run on another version of a driver will be
    handled safely and gracefully.

    \note Calling releaseCachedResources() may, depending on the backend, clear
    the pipeline data collected. A subsequent call to this function may then
    not return any data.

    See EnablePipelineCacheDataSave for further details about this feature.

    \note Minimize the number of calls to this function. Retrieving the blob is
    not always a cheap operation, and therefore this function should only be
    called at a low frequency, ideally only once e.g. when closing the
    application.

    \sa setPipelineCacheData(), create(), isFeatureSupported()
 */</doc>
