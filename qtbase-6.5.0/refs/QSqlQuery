<use f='qtbase-6.5.0/src/sql/kernel/qsqldatabase.h' l='51' c='_ZNK12QSqlDatabase4execERK7QString'/>
<def f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='22' ll='99'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='31' c='_ZN9QSqlQueryC1ERKS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='33' c='_ZN9QSqlQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='33' c='_ZN9QSqlQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='39' c='_ZN9QSqlQueryC1EOS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='42' c='_ZN9QSqlQueryaSEOS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='42' c='_ZN9QSqlQueryaSEOS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='42' c='_ZN9QSqlQueryaSEOS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='46' c='_ZN9QSqlQuery4swapERS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlresult.h' l='27'/>
<use f='qtbase-6.5.0/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp' l='807' c='_ZN13QSQLiteDriver16beginTransactionEv'/>
<use f='qtbase-6.5.0/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp' l='822' c='_ZN13QSQLiteDriver17commitTransactionEv'/>
<use f='qtbase-6.5.0/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp' l='837' c='_ZN13QSQLiteDriver19rollbackTransactionEv'/>
<use f='qtbase-6.5.0/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp' l='853' c='_ZNK13QSQLiteDriver6tablesEN4QSql9TableTypeE'/>
<use f='qtbase-6.5.0/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp' l='880' c='_ZL13qGetTableInfoR9QSqlQueryRK7QStringb'/>
<use f='qtbase-6.5.0/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp' l='936' c='_ZNK13QSQLiteDriver12primaryIndexERK7QString'/>
<use f='qtbase-6.5.0/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp' l='950' c='_ZNK13QSQLiteDriver6recordERK7QString'/>
<size>8</size>
<fun r='_ZN9QSqlQueryC1EP10QSqlResult'/>
<fun r='_ZN9QSqlQueryC1ERK7QStringRK12QSqlDatabase'/>
<fun r='_ZN9QSqlQueryC1ERK12QSqlDatabase'/>
<fun r='_ZN9QSqlQueryC1ERKS_'/>
<fun r='_ZN9QSqlQueryaSERKS_'/>
<fun r='_ZN9QSqlQueryC1EOS_'/>
<fun r='_ZN9QSqlQueryD1Ev'/>
<fun r='_ZN9QSqlQuery4swapERS_'/>
<fun r='_ZNK9QSqlQuery7isValidEv'/>
<fun r='_ZNK9QSqlQuery8isActiveEv'/>
<fun r='_ZNK9QSqlQuery6isNullEi'/>
<fun r='_ZNK9QSqlQuery6isNullERK7QString'/>
<fun r='_ZNK9QSqlQuery2atEv'/>
<fun r='_ZNK9QSqlQuery9lastQueryEv'/>
<fun r='_ZNK9QSqlQuery15numRowsAffectedEv'/>
<fun r='_ZNK9QSqlQuery9lastErrorEv'/>
<fun r='_ZNK9QSqlQuery8isSelectEv'/>
<fun r='_ZNK9QSqlQuery4sizeEv'/>
<fun r='_ZNK9QSqlQuery6driverEv'/>
<fun r='_ZNK9QSqlQuery6resultEv'/>
<fun r='_ZNK9QSqlQuery13isForwardOnlyEv'/>
<fun r='_ZNK9QSqlQuery6recordEv'/>
<fun r='_ZN9QSqlQuery14setForwardOnlyEb'/>
<fun r='_ZN9QSqlQuery4execERK7QString'/>
<fun r='_ZNK9QSqlQuery5valueEi'/>
<fun r='_ZNK9QSqlQuery5valueERK7QString'/>
<fun r='_ZN9QSqlQuery27setNumericalPrecisionPolicyEN4QSql24NumericalPrecisionPolicyE'/>
<fun r='_ZNK9QSqlQuery24numericalPrecisionPolicyEv'/>
<fun r='_ZN9QSqlQuery4seekEib'/>
<fun r='_ZN9QSqlQuery4nextEv'/>
<fun r='_ZN9QSqlQuery8previousEv'/>
<fun r='_ZN9QSqlQuery5firstEv'/>
<fun r='_ZN9QSqlQuery4lastEv'/>
<fun r='_ZN9QSqlQuery5clearEv'/>
<fun r='_ZN9QSqlQuery4execEv'/>
<fun r='_ZN9QSqlQuery9execBatchENS_18BatchExecutionModeE'/>
<fun r='_ZN9QSqlQuery7prepareERK7QString'/>
<fun r='_ZN9QSqlQuery9bindValueERK7QStringRK8QVariant6QFlagsIN4QSql13ParamTypeFlagEE'/>
<fun r='_ZN9QSqlQuery9bindValueEiRK8QVariant6QFlagsIN4QSql13ParamTypeFlagEE'/>
<fun r='_ZN9QSqlQuery12addBindValueERK8QVariant6QFlagsIN4QSql13ParamTypeFlagEE'/>
<fun r='_ZNK9QSqlQuery10boundValueERK7QString'/>
<fun r='_ZNK9QSqlQuery10boundValueEi'/>
<fun r='_ZNK9QSqlQuery11boundValuesEv'/>
<fun r='_ZNK9QSqlQuery13executedQueryEv'/>
<fun r='_ZNK9QSqlQuery12lastInsertIdEv'/>
<fun r='_ZN9QSqlQuery6finishEv'/>
<fun r='_ZN9QSqlQuery10nextResultEv'/>
<mbr r='QSqlQuery::d' o='0' t='QSqlQueryPrivate *'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.h' l='45' c='_ZN14QSqlQueryModel8setQueryERK9QSqlQuery'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.h' l='47' c='_ZN14QSqlQueryModel8setQueryEO9QSqlQuery'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.h' l='50' c='_ZNK14QSqlQueryModel5queryEv'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.h' l='52' c='_ZNK14QSqlQueryModel5queryEN2Qt15Disambiguated_tE'/>
<use f='qtbase-6.5.0/src/sql/compat/removed_api.cpp' l='25' c='_ZNK14QSqlQueryModel5queryEv'/>
<use f='qtbase-6.5.0/src/sql/models/qsqltablemodel.h' l='103' c='_ZN14QSqlTableModel8setQueryERK9QSqlQuery'/>
<use f='qtbase-6.5.0/src/sql/compat/removed_api.cpp' l='32' c='_ZN14QSqlTableModel8setQueryERK9QSqlQuery'/>
<size>8</size>
<use f='qtbase-6.5.0/src/sql/kernel/qsqldatabase.cpp' l='700' c='_ZNK12QSqlDatabase4execERK7QString'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqldatabase.cpp' l='702' c='_ZNK12QSqlDatabase4execERK7QString'/>
<size>8</size>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='224' c='_ZN9QSqlQueryC1ERKS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='239' c='_ZN9QSqlQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='239' c='_ZN9QSqlQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='268' c='_ZL5qInitP9QSqlQueryRK7QStringRK12QSqlDatabase'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='276' c='_ZL5qInitP9QSqlQueryRK7QStringRK12QSqlDatabase'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='381' c='_ZN9QSqlQuery4execERK7QString'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='934' c='_ZN9QSqlQuery5clearEv'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='967' c='_ZN9QSqlQuery7prepareERK7QString'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='60'>/*!
    \class QSqlQuery
    \brief The QSqlQuery class provides a means of executing and
    manipulating SQL statements.

    \ingroup database
    \ingroup shared

    \inmodule QtSql

    QSqlQuery encapsulates the functionality involved in creating,
    navigating and retrieving data from SQL queries which are
    executed on a \l QSqlDatabase. It can be used to execute DML
    (data manipulation language) statements, such as \c SELECT, \c
    INSERT, \c UPDATE and \c DELETE, as well as DDL (data definition
    language) statements, such as \c{CREATE} \c{TABLE}. It can also
    be used to execute database-specific commands which are not
    standard SQL (e.g. \c{SET DATESTYLE=ISO} for PostgreSQL).

    Successfully executed SQL statements set the query&apos;s state to
    active so that isActive() returns \c true. Otherwise the query&apos;s
    state is set to inactive. In either case, when executing a new SQL
    statement, the query is positioned on an invalid record. An active
    query must be navigated to a valid record (so that isValid()
    returns \c true) before values can be retrieved.

    For some databases, if an active query that is a \c{SELECT}
    statement exists when you call \l{QSqlDatabase::}{commit()} or
    \l{QSqlDatabase::}{rollback()}, the commit or rollback will
    fail. See isActive() for details.

    \target QSqlQuery examples

    Navigating records is performed with the following functions:

    \list
    \li next()
    \li previous()
    \li first()
    \li last()
    \li seek()
    \endlist

    These functions allow the programmer to move forward, backward
    or arbitrarily through the records returned by the query. If you
    only need to move forward through the results (e.g., by using
    next()), you can use setForwardOnly(), which will save a
    significant amount of memory overhead and improve performance on
    some databases. Once an active query is positioned on a valid
    record, data can be retrieved using value(). All data is
    transferred from the SQL backend using QVariants.

    For example:

    \snippet sqldatabase/sqldatabase.cpp 7

    To access the data returned by a query, use value(int). Each
    field in the data returned by a \c SELECT statement is accessed
    by passing the field&apos;s position in the statement, starting from
    0. This makes using \c{SELECT *} queries inadvisable because the
    order of the fields returned is indeterminate.

    For the sake of efficiency, there are no functions to access a
    field by name (unless you use prepared queries with names, as
    explained below). To convert a field name into an index, use
    record().\l{QSqlRecord::indexOf()}{indexOf()}, for example:

    \snippet sqldatabase/sqldatabase.cpp 8

    QSqlQuery supports prepared query execution and the binding of
    parameter values to placeholders. Some databases don&apos;t support
    these features, so for those, Qt emulates the required
    functionality. For example, the Oracle and ODBC drivers have
    proper prepared query support, and Qt makes use of it; but for
    databases that don&apos;t have this support, Qt implements the feature
    itself, e.g. by replacing placeholders with actual values when a
    query is executed. Use numRowsAffected() to find out how many rows
    were affected by a non-\c SELECT query, and size() to find how
    many were retrieved by a \c SELECT.

    Oracle databases identify placeholders by using a colon-name
    syntax, e.g \c{:name}. ODBC simply uses \c ? characters. Qt
    supports both syntaxes, with the restriction that you can&apos;t mix
    them in the same query.

    You can retrieve the values of all the fields in a single variable
    using boundValues().

    \note Not all SQL operations support binding values. Refer to your database
    system&apos;s documentation to check their availability.

    \section1 Approaches to Binding Values

    Below we present the same example using each of the four
    different binding approaches, as well as one example of binding
    values to a stored procedure.

    \b{Named binding using named placeholders:}

    \snippet sqldatabase/sqldatabase.cpp 9

    \b{Positional binding using named placeholders:}

    \snippet sqldatabase/sqldatabase.cpp 10

    \b{Binding values using positional placeholders (version 1):}

    \snippet sqldatabase/sqldatabase.cpp 11

    \b{Binding values using positional placeholders (version 2):}

    \snippet sqldatabase/sqldatabase.cpp 12

    \b{Binding values to a stored procedure:}

    This code calls a stored procedure called \c AsciiToInt(), passing
    it a character through its in parameter, and taking its result in
    the out parameter.

    \snippet sqldatabase/sqldatabase.cpp 13

    Note that unbound parameters will retain their values.

    Stored procedures that uses the return statement to return values,
    or return multiple result sets, are not fully supported. For specific
    details see \l{SQL Database Drivers}.

    \warning You must load the SQL driver and open the connection before a
    QSqlQuery is created. Also, the connection must remain open while the
    query exists; otherwise, the behavior of QSqlQuery is undefined.

    \sa QSqlDatabase, QSqlQueryModel, QSqlTableModel, QVariant
*/</doc>
<fun r='_ZN9QSqlQueryC1EP10QSqlResult'/>
<fun r='_ZN9QSqlQueryD1Ev'/>
<fun r='_ZN9QSqlQueryC1ERKS_'/>
<fun r='_ZN9QSqlQueryaSERKS_'/>
<fun r='_ZN9QSqlQueryC1ERK7QStringRK12QSqlDatabase'/>
<fun r='_ZN9QSqlQueryC1ERK12QSqlDatabase'/>
<fun r='_ZNK9QSqlQuery6isNullEi'/>
<fun r='_ZNK9QSqlQuery6isNullERK7QString'/>
<fun r='_ZN9QSqlQuery4execERK7QString'/>
<fun r='_ZNK9QSqlQuery5valueEi'/>
<fun r='_ZNK9QSqlQuery5valueERK7QString'/>
<fun r='_ZNK9QSqlQuery2atEv'/>
<fun r='_ZNK9QSqlQuery9lastQueryEv'/>
<fun r='_ZNK9QSqlQuery6driverEv'/>
<fun r='_ZNK9QSqlQuery6resultEv'/>
<fun r='_ZN9QSqlQuery4seekEib'/>
<fun r='_ZN9QSqlQuery4nextEv'/>
<fun r='_ZN9QSqlQuery8previousEv'/>
<fun r='_ZN9QSqlQuery5firstEv'/>
<fun r='_ZN9QSqlQuery4lastEv'/>
<fun r='_ZNK9QSqlQuery4sizeEv'/>
<fun r='_ZNK9QSqlQuery15numRowsAffectedEv'/>
<fun r='_ZNK9QSqlQuery9lastErrorEv'/>
<fun r='_ZNK9QSqlQuery7isValidEv'/>
<fun r='_ZNK9QSqlQuery8isActiveEv'/>
<fun r='_ZNK9QSqlQuery8isSelectEv'/>
<fun r='_ZNK9QSqlQuery13isForwardOnlyEv'/>
<fun r='_ZN9QSqlQuery14setForwardOnlyEb'/>
<fun r='_ZNK9QSqlQuery6recordEv'/>
<fun r='_ZN9QSqlQuery5clearEv'/>
<fun r='_ZN9QSqlQuery7prepareERK7QString'/>
<fun r='_ZN9QSqlQuery4execEv'/>
<fun r='_ZN9QSqlQuery9execBatchENS_18BatchExecutionModeE'/>
<fun r='_ZN9QSqlQuery9bindValueERK7QStringRK8QVariant6QFlagsIN4QSql13ParamTypeFlagEE'/>
<fun r='_ZN9QSqlQuery9bindValueEiRK8QVariant6QFlagsIN4QSql13ParamTypeFlagEE'/>
<fun r='_ZN9QSqlQuery12addBindValueERK8QVariant6QFlagsIN4QSql13ParamTypeFlagEE'/>
<fun r='_ZNK9QSqlQuery10boundValueERK7QString'/>
<fun r='_ZNK9QSqlQuery10boundValueEi'/>
<fun r='_ZNK9QSqlQuery11boundValuesEv'/>
<fun r='_ZNK9QSqlQuery13executedQueryEv'/>
<fun r='_ZNK9QSqlQuery12lastInsertIdEv'/>
<fun r='_ZN9QSqlQuery27setNumericalPrecisionPolicyEN4QSql24NumericalPrecisionPolicyE'/>
<fun r='_ZNK9QSqlQuery24numericalPrecisionPolicyEv'/>
<fun r='_ZN9QSqlQuery6finishEv'/>
<fun r='_ZN9QSqlQuery10nextResultEv'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel_p.h' l='42'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel_p.h' l='42'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.cpp' l='394' c='_ZN14QSqlQueryModel8setQueryERK9QSqlQuery'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.cpp' l='396' c='_ZN14QSqlQueryModel8setQueryERK9QSqlQuery'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.cpp' l='415' c='_ZN14QSqlQueryModel8setQueryEO9QSqlQuery'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.cpp' l='476' c='_ZN14QSqlQueryModel8setQueryERK7QStringRK12QSqlDatabase'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.cpp' l='529' c='_ZNK14QSqlQueryModel5queryEN2Qt15Disambiguated_tE'/>
<size>8</size>
<use f='qtbase-6.5.0/src/sql/models/qsqltablemodel_p.h' l='60'/>
<use f='qtbase-6.5.0/src/sql/models/qsqltablemodel_p.h' l='60'/>
<size>8</size>
<use f='qtbase-6.5.0/src/sql/models/qsqltablemodel.cpp' l='132' c='_ZN21QSqlTableModelPrivate4execERK7QStringbRK10QSqlRecordS5_'/>
<use f='qtbase-6.5.0/src/sql/models/qsqltablemodel.cpp' l='401' c='_ZN14QSqlTableModel9selectRowEi'/>
<size>8</size>
