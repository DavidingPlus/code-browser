<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='8505' type='sqlite3_str * sqlite3_str_new(sqlite3 * )'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='31137' ll='31146' type='sqlite3_str * sqlite3_str_new(sqlite3 * db)'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='133181'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='205014' u='c' c='rtreeSqlInit'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='205078' u='c' c='rtreeSqlInit'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='205256' u='c' c='rtreeInit'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='205359' u='c' c='rtreenode'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='206266' u='c' c='geopolyJsonFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='206294' u='c' c='geopolySvgFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='207157' u='c' c='geopolyInit'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='8480'>/*
** CAPI3REF: Create A New Dynamic String Object
** CONSTRUCTOR: sqlite3_str
**
** ^The [sqlite3_str_new(D)] interface allocates and initializes
** a new [sqlite3_str] object.  To avoid memory leaks, the object returned by
** [sqlite3_str_new()] must be freed by a subsequent call to
** [sqlite3_str_finish(X)].
**
** ^The [sqlite3_str_new(D)] interface always returns a pointer to a
** valid [sqlite3_str] object, though in the event of an out-of-memory
** error the returned object might be a special singleton that will
** silently reject new text, always return SQLITE_NOMEM from
** [sqlite3_str_errcode()], always return 0 for
** [sqlite3_str_length()], and always return NULL from
** [sqlite3_str_finish(X)].  It is always safe to use the value
** returned by [sqlite3_str_new(D)] as the sqlite3_str parameter
** to any of the other [sqlite3_str] methods.
**
** The D parameter to [sqlite3_str_new(D)] may be NULL.  If the
** D parameter in [sqlite3_str_new(D)] is not NULL, then the maximum
** length of the string contained in the [sqlite3_str] object will be
** the value set for [sqlite3_limit](D,[SQLITE_LIMIT_LENGTH]) instead
** of [SQLITE_MAX_LENGTH].
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='31136'>/* Allocate and initialize a new dynamic string object */</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='8199' type='sqlite3_str * sqlite3_str_new(sqlite3 * )'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='8174'>/*
** CAPI3REF: Create A New Dynamic String Object
** CONSTRUCTOR: sqlite3_str
**
** ^The [sqlite3_str_new(D)] interface allocates and initializes
** a new [sqlite3_str] object.  To avoid memory leaks, the object returned by
** [sqlite3_str_new()] must be freed by a subsequent call to
** [sqlite3_str_finish(X)].
**
** ^The [sqlite3_str_new(D)] interface always returns a pointer to a
** valid [sqlite3_str] object, though in the event of an out-of-memory
** error the returned object might be a special singleton that will
** silently reject new text, always return SQLITE_NOMEM from
** [sqlite3_str_errcode()], always return 0 for
** [sqlite3_str_length()], and always return NULL from
** [sqlite3_str_finish(X)].  It is always safe to use the value
** returned by [sqlite3_str_new(D)] as the sqlite3_str parameter
** to any of the other [sqlite3_str] methods.
**
** The D parameter to [sqlite3_str_new(D)] may be NULL.  If the
** D parameter in [sqlite3_str_new(D)] is not NULL, then the maximum
** length of the string contained in the [sqlite3_str] object will be
** the value set for [sqlite3_limit](D,[SQLITE_LIMIT_LENGTH]) instead
** of [SQLITE_MAX_LENGTH].
*/</doc>
