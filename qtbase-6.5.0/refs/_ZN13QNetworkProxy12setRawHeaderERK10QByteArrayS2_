<dec f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='146' type='void QNetworkProxy::setRawHeader(const QByteArray &amp; headerName, const QByteArray &amp; value)'/>
<use f='qtbase-6.5.0/src/network/access/qhttpnetworkconnectionchannel.cpp' l='357' u='c' c='_ZN29QHttpNetworkConnectionChannel16ensureConnectionEv'/>
<def f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='864' ll='868' type='void QNetworkProxy::setRawHeader(const QByteArray &amp; headerName, const QByteArray &amp; headerValue)'/>
<doc f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='841'>/*!
    \since 5.0
    Sets the header \a headerName to be of value \a headerValue. If \a
    headerName corresponds to a known header (see
    QNetworkRequest::KnownHeaders), the raw format will be parsed and
    the corresponding &quot;cooked&quot; header will be set as well.

    For example:
    \snippet code/src_network_access_qnetworkrequest.cpp 0

    will also set the known header LastModifiedHeader to be the
    QDateTime object of the parsed date.

    \note Setting the same header twice overrides the previous
    setting. To accomplish the behaviour of multiple HTTP headers of
    the same name, you should concatenate the two values, separating
    them with a comma (&quot;,&quot;) and set one single raw header.

    If the proxy is not of type HttpProxy or HttpCachingProxy this has no
    effect.

    \sa QNetworkRequest::KnownHeaders, setHeader(), hasRawHeader(), rawHeader()
*/</doc>
