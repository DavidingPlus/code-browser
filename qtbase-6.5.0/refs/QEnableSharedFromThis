<use f='qtbase-6.5.0/src/corelib/tools/qsharedpointer_impl.h' l='452' c='_ZN14QSharedPointer20enableSharedFromThisEPK21QEnableSharedFromThisITL0__E'/>
<def f='qtbase-6.5.0/src/corelib/tools/qsharedpointer_impl.h' l='704' ll='724'/>
<fun r='_ZN21QEnableSharedFromThisC1Ev'/>
<fun r='_ZN21QEnableSharedFromThisC1ERK21QEnableSharedFromThisIT_E'/>
<fun r='_ZN21QEnableSharedFromThisaSERK21QEnableSharedFromThisIT_E'/>
<fun r='_ZN21QEnableSharedFromThis14sharedFromThisEv'/>
<fun r='_ZNK21QEnableSharedFromThis14sharedFromThisEv'/>
<fun r='_ZNK21QEnableSharedFromThis27initializeFromSharedPointerERK14QSharedPointerITL0__E'/>
<mbr r='QEnableSharedFromThis::weakPointer' t='QWeakPointer&lt;T&gt;'/>
<doc f='qtbase-6.5.0/src/corelib/tools/qsharedpointer.cpp' l='337'>/*!
    \class QEnableSharedFromThis
    \inmodule QtCore
    \brief A base class that allows obtaining a QSharedPointer for an object already managed by a shared pointer.
    \since 5.4

    You can inherit this class when you need to create a QSharedPointer
    from any instance of a class; for instance, from within the
    object itself. The key point is that the technique of
    just returning QSharedPointer&lt;T&gt;(this) cannot be used, because
    this winds up creating multiple distinct QSharedPointer objects
    with separate reference counts. For this reason you must never
    create more than one QSharedPointer from the same raw pointer.

    QEnableSharedFromThis defines two member functions called
    sharedFromThis() that return a QSharedPointer&lt;T&gt; and
    QSharedPointer&lt;const T&gt;, depending on constness, to \c this:

    \snippet code/src_corelib_tools_qsharedpointer.cpp 0

    It is also possible to get a shared pointer from an object outside of
    the class itself. This is especially useful in code that provides an
    interface to scripts, where it is currently not possible to use shared
    pointers. For example:

    \snippet code/src_corelib_tools_qsharedpointer.cpp 1
*/</doc>
