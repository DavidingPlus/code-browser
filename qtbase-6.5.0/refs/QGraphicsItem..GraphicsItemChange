<def f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitem.h' l='74' ll='108'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitem.h' l='389' c='_ZN13QGraphicsItem10itemChangeENS_18GraphicsItemChangeERK8QVariant'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitem.h' l='989' c='_Zls6QDebugN13QGraphicsItem18GraphicsItemChangeE'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicswidget.h' l='156' c='_ZN15QGraphicsWidget10itemChangeEN13QGraphicsItem18GraphicsItemChangeERK8QVariant'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsproxywidget.h' l='40' c='_ZN20QGraphicsProxyWidget10itemChangeEN13QGraphicsItem18GraphicsItemChangeERK8QVariant'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicssceneindex_p.h' l='70' c='_ZN19QGraphicsSceneIndex10itemChangeEPK13QGraphicsItemNS0_18GraphicsItemChangeEPKv'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscenebsptreeindex_p.h' l='62' c='_ZN26QGraphicsSceneBspTreeIndex10itemChangeEPK13QGraphicsItemNS0_18GraphicsItemChangeEPKv'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitem.cpp' l='7364' c='_ZN13QGraphicsItem10itemChangeENS_18GraphicsItemChangeERK8QVariant'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitem.cpp' l='11270' c='_Zls6QDebugN13QGraphicsItem18GraphicsItemChangeE'/>
<doc f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitem.cpp' l='466'>/*!
    \enum QGraphicsItem::GraphicsItemChange

    This enum describes the state changes that are notified by
    QGraphicsItem::itemChange(). The notifications are sent as the state
    changes, and in some cases, adjustments can be made (see the documentation
    for each change for details).

    Note: Be careful with calling functions on the QGraphicsItem itself inside
    itemChange(), as certain function calls can lead to unwanted
    recursion. For example, you cannot call setPos() in itemChange() on an
    ItemPositionChange notification, as the setPos() function will again call
    itemChange(ItemPositionChange). Instead, you can return the new, adjusted
    position from itemChange().

    \value ItemEnabledChange The item&apos;s enabled state changes. If the item is
    presently enabled, it will become disabled, and vice verca. The value
    argument is the new enabled state (i.e., true or false). Do not call
    setEnabled() in itemChange() as this notification is delivered. Instead,
    you can return the new state from itemChange().

    \value ItemEnabledHasChanged The item&apos;s enabled state has changed. The
    value argument is the new enabled state (i.e., true or false). Do not call
    setEnabled() in itemChange() as this notification is delivered. The return
    value is ignored.

    \value ItemPositionChange The item&apos;s position changes. This notification
    is sent if the ItemSendsGeometryChanges flag is enabled, and when the
    item&apos;s local position changes, relative to its parent (i.e., as a result
    of calling setPos() or moveBy()). The value argument is the new position
    (i.e., a QPointF).  You can call pos() to get the original position. Do
    not call setPos() or moveBy() in itemChange() as this notification is
    delivered; instead, you can return the new, adjusted position from
    itemChange(). After this notification, QGraphicsItem immediately sends the
    ItemPositionHasChanged notification if the position changed.

    \value ItemPositionHasChanged The item&apos;s position has changed. This
    notification is sent if the ItemSendsGeometryChanges flag is enabled, and
    after the item&apos;s local position, relative to its parent, has changed. The
    value argument is the new position (the same as pos()), and QGraphicsItem
    ignores the return value for this notification (i.e., a read-only
    notification).

    \value ItemTransformChange The item&apos;s transformation matrix changes. This
    notification is sent if the ItemSendsGeometryChanges flag is enabled, and
    when the item&apos;s local transformation matrix changes (i.e., as a result of
    calling setTransform(). The value argument is the new matrix (i.e., a
    QTransform); to get the old matrix, call transform(). Do not call
    setTransform() or set any of the transformation properties in itemChange()
    as this notification is delivered; instead, you can return the new matrix
    from itemChange().  This notification is not sent if you change the
    transformation properties.

    \value ItemTransformHasChanged The item&apos;s transformation matrix has
    changed either because setTransform is called, or one of the
    transformation properties is changed. This notification is sent if the
    ItemSendsGeometryChanges flag is enabled, and after the item&apos;s local
    transformation matrix has changed. The value argument is the new matrix
    (same as transform()), and QGraphicsItem ignores the return value for this
    notification (i.e., a read-only notification).

    \value ItemRotationChange The item&apos;s rotation property changes. This
    notification is sent if the ItemSendsGeometryChanges flag is enabled, and
    when the item&apos;s rotation property changes (i.e., as a result of calling
    setRotation()). The value argument is the new rotation (i.e., a double);
    to get the old rotation, call rotation(). Do not call setRotation() in
    itemChange() as this notification is delivered; instead, you can return
    the new rotation from itemChange().

    \value ItemRotationHasChanged The item&apos;s rotation property has changed.
    This notification is sent if the ItemSendsGeometryChanges flag is enabled,
    and after the item&apos;s rotation property has changed. The value argument is
    the new rotation (i.e., a double), and QGraphicsItem ignores the return
    value for this notification (i.e., a read-only notification). Do not call
    setRotation() in itemChange() as this notification is delivered.

    \value ItemScaleChange The item&apos;s scale property changes. This notification
    is sent if the ItemSendsGeometryChanges flag is enabled, and when the item&apos;s
    scale property changes (i.e., as a result of calling setScale()). The value
    argument is the new scale (i.e., a double); to get the old scale, call
    scale(). Do not call setScale() in itemChange() as this notification is
    delivered; instead, you can return the new scale from itemChange().

    \value ItemScaleHasChanged The item&apos;s scale property has changed. This
    notification is sent if the ItemSendsGeometryChanges flag is enabled, and
    after the item&apos;s scale property has changed. The value argument is the new
    scale (i.e., a double), and QGraphicsItem ignores the return value for this
    notification (i.e., a read-only notification). Do not call setScale() in
    itemChange() as this notification is delivered.

    \value ItemTransformOriginPointChange The item&apos;s transform origin point
    property changes. This notification is sent if the ItemSendsGeometryChanges
    flag is enabled, and when the item&apos;s transform origin point property changes
    (i.e., as a result of calling setTransformOriginPoint()). The value argument
    is the new origin point (i.e., a QPointF); to get the old origin point, call
    transformOriginPoint(). Do not call setTransformOriginPoint() in itemChange()
    as this notification is delivered; instead, you can return the new transform
    origin point from itemChange().

    \value ItemTransformOriginPointHasChanged The item&apos;s transform origin point
    property has changed. This notification is sent if the ItemSendsGeometryChanges
    flag is enabled, and after the item&apos;s transform origin point property has
    changed. The value argument is the new origin point (i.e., a QPointF), and
    QGraphicsItem ignores the return value for this notification (i.e., a read-only
    notification). Do not call setTransformOriginPoint() in itemChange() as this
    notification is delivered.

    \value ItemSelectedChange The item&apos;s selected state changes. If the item is
    presently selected, it will become unselected, and vice verca. The value
    argument is the new selected state (i.e., true or false). Do not call
    setSelected() in itemChange() as this notification is delivered; instead, you
    can return the new selected state from itemChange().

    \value ItemSelectedHasChanged The item&apos;s selected state has changed. The
    value argument is the new selected state (i.e., true or false). Do not
    call setSelected() in itemChange() as this notification is delivered. The
    return value is ignored.

    \value ItemVisibleChange The item&apos;s visible state changes. If the item is
    presently visible, it will become invisible, and vice verca. The value
    argument is the new visible state (i.e., true or false). Do not call
    setVisible() in itemChange() as this notification is delivered; instead,
    you can return the new visible state from itemChange().

    \value ItemVisibleHasChanged The item&apos;s visible state has changed. The
    value argument is the new visible state (i.e., true or false). Do not call
    setVisible() in itemChange() as this notification is delivered. The return
    value is ignored.

    \value ItemParentChange The item&apos;s parent changes. The value argument is
    the new parent item (i.e., a QGraphicsItem pointer).  Do not call
    setParentItem() in itemChange() as this notification is delivered;
    instead, you can return the new parent from itemChange().

    \value ItemParentHasChanged The item&apos;s parent has changed. The value
    argument is the new parent (i.e., a pointer to a QGraphicsItem). Do not
    call setParentItem() in itemChange() as this notification is
    delivered. The return value is ignored.

    \value ItemChildAddedChange A child is added to this item. The value
    argument is the new child item (i.e., a QGraphicsItem pointer). Do not
    pass this item to any item&apos;s setParentItem() function as this notification
    is delivered. The return value is unused; you cannot adjust anything in
    this notification. Note that the new child might not be fully constructed
    when this notification is sent; calling pure virtual functions on
    the child can lead to a crash.

    \value ItemChildRemovedChange A child is removed from this item. The value
    argument is the child item that is about to be removed (i.e., a
    QGraphicsItem pointer). The return value is unused; you cannot adjust
    anything in this notification.

    \value ItemSceneChange The item is moved to a new scene. This notification is
    also sent when the item is added to its initial scene, and when it is removed.
    The item&apos;s scene() is the old scene, or \nullptr if the item has not been added
    to a scene yet. The value argument is the new scene (i.e., a QGraphicsScene
    pointer), or \nullptr if the item is removed from a scene. Do not
    override this change by passing this item to QGraphicsScene::addItem() as this
    notification is delivered; instead, you can return the new scene from
    itemChange(). Use this feature with caution; objecting to a scene change can
    quickly lead to unwanted recursion.

    \value ItemSceneHasChanged The item&apos;s scene has changed. The item&apos;s scene() is
    the new scene. This notification is also sent when the item is added to its
    initial scene, and when it is removed.The value argument is the new scene
    (i.e., a pointer to a QGraphicsScene). Do not call setScene() in itemChange()
    as this notification is delivered. The return value is ignored.

    \value ItemCursorChange The item&apos;s cursor changes. The value argument is
    the new cursor (i.e., a QCursor). Do not call setCursor() in itemChange()
    as this notification is delivered. Instead, you can return a new cursor
    from itemChange().

    \value ItemCursorHasChanged The item&apos;s cursor has changed. The value
    argument is the new cursor (i.e., a QCursor). Do not call setCursor() as
    this notification is delivered. The return value is ignored.

    \value ItemToolTipChange The item&apos;s tooltip changes. The value argument is
    the new tooltip (i.e., a QToolTip). Do not call setToolTip() in
    itemChange() as this notification is delivered. Instead, you can return a
    new tooltip from itemChange().

    \value ItemToolTipHasChanged The item&apos;s tooltip has changed. The value
    argument is the new tooltip (i.e., a QToolTip). Do not call setToolTip()
    as this notification is delivered. The return value is ignored.

    \value ItemFlagsChange The item&apos;s flags change. The value argument is the
    new flags (i.e., a quint32). Do not call setFlags() in itemChange() as
    this notification is delivered. Instead, you can return the new flags from
    itemChange().

    \value ItemFlagsHaveChanged The item&apos;s flags have changed. The value
    argument is the new flags (i.e., a quint32). Do not call setFlags() in
    itemChange() as this notification is delivered. The return value is
    ignored.

    \value ItemZValueChange The item&apos;s Z-value changes. The value argument is
    the new Z-value (i.e., a double). Do not call setZValue() in itemChange()
    as this notification is delivered. Instead, you can return a new Z-value
    from itemChange().

    \value ItemZValueHasChanged The item&apos;s Z-value has changed. The value
    argument is the new Z-value (i.e., a double). Do not call setZValue() as
    this notification is delivered. The return value is ignored.

    \value ItemOpacityChange The item&apos;s opacity changes. The value argument is
    the new opacity (i.e., a double). Do not call setOpacity() in itemChange()
    as this notification is delivered. Instead, you can return a new opacity
    from itemChange().

    \value ItemOpacityHasChanged The item&apos;s opacity has changed. The value
    argument is the new opacity (i.e., a double). Do not call setOpacity() as
    this notification is delivered. The return value is ignored.

    \value ItemScenePositionHasChanged The item&apos;s scene position has changed.
    This notification is sent if the ItemSendsScenePositionChanges flag is
    enabled, and after the item&apos;s scene position has changed (i.e., the
    position or transformation of the item itself or the position or
    transformation of any ancestor has changed). The value argument is the
    new scene position (the same as scenePos()), and QGraphicsItem ignores
    the return value for this notification (i.e., a read-only notification).
*/</doc>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsproxywidget.cpp' l='744' c='_ZN20QGraphicsProxyWidget10itemChangeEN13QGraphicsItem18GraphicsItemChangeERK8QVariant'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscenebsptreeindex.cpp' l='595' c='_ZN26QGraphicsSceneBspTreeIndex10itemChangeEPK13QGraphicsItemNS0_18GraphicsItemChangeEPKv'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicssceneindex.cpp' l='573' c='_ZN19QGraphicsSceneIndex10itemChangeEPK13QGraphicsItemNS0_18GraphicsItemChangeEPKv'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicswidget.cpp' l='1086' c='_ZN15QGraphicsWidget10itemChangeEN13QGraphicsItem18GraphicsItemChangeERK8QVariant'/>
