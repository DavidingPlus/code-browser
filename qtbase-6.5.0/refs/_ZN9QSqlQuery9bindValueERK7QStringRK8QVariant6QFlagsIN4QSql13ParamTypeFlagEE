<dec f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='85' type='void QSqlQuery::bindValue(const QString &amp; placeholder, const QVariant &amp; val, QSql::ParamType type = QSql::In)'/>
<def f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='1092' ll='1097' type='void QSqlQuery::bindValue(const QString &amp; placeholder, const QVariant &amp; val, QSql::ParamType paramType = QSql::In)'/>
<doc f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='1078'>/*!
  Set the placeholder \a placeholder to be bound to value \a val in
  the prepared statement. Note that the placeholder mark (e.g \c{:})
  must be included when specifying the placeholder name. If \a
  paramType is QSql::Out or QSql::InOut, the placeholder will be
  overwritten with data from the database after the exec() call.
  In this case, sufficient space must be pre-allocated to store
  the result into.

  To bind a NULL value, use a null QVariant; for example, use
  \c {QVariant(QMetaType::fromType&lt;QString&gt;())} if you are binding a string.

  \sa addBindValue(), prepare(), exec(), boundValue(), boundValues()
*/</doc>
