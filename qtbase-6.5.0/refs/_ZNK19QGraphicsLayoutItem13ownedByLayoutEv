<dec f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslayoutitem.h' l='67' type='bool QGraphicsLayoutItem::ownedByLayout() const'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsanchorlayout.cpp' l='196' u='c' c='_ZN21QGraphicsAnchorLayoutD1Ev'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsgridlayout.cpp' l='108' u='c' c='_ZN19QGraphicsGridLayoutD1Ev'/>
<def f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslayoutitem.cpp' l='872' ll='875' type='bool QGraphicsLayoutItem::ownedByLayout() const'/>
<doc f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslayoutitem.cpp' l='848'>/*!
    \since 4.6

    Returns whether a layout should delete this item in its destructor.
    If its true, then the layout will delete it. If its false, then it is
    assumed that another object has the ownership of it, and the layout won&apos;t
    delete this item.

    If the item inherits both QGraphicsItem and QGraphicsLayoutItem (such
    as QGraphicsWidget does) the item is really part of two ownership
    hierarchies. This property informs what the layout should do with its
    child items when it is destructed. In the case of QGraphicsWidget, it
    is preferred that when the layout is deleted it won&apos;t delete its children
    (since they are also part of the graphics item hierarchy).

    By default this value is initialized to false in QGraphicsLayoutItem,
    but it is overridden by QGraphicsLayout to return true. This is because
    QGraphicsLayout is not normally part of the QGraphicsItem hierarchy, so the
    parent layout should delete it.
    Subclasses might override this default behaviour by calling
    setOwnedByLayout(true).

    \sa setOwnedByLayout()
*/</doc>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslinearlayout.cpp' l='183' u='c' c='_ZN21QGraphicsLinearLayoutD1Ev'/>
