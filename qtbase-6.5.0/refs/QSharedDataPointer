<def f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='34' ll='121'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='210' c='_ZN18QSharedDataPointer5cloneEv'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='216' c='_ZN18QSharedDataPointer13detach_helperEv'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='242' c='_Z4swapR18QSharedDataPointerIT_ES2_'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='242' c='_Z4swapR18QSharedDataPointerIT_ES2_'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='250' c='_Z5qHashRK18QSharedDataPointerIT_Em'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='260'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='260'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='260'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='260'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='260'/>
<use f='qtbase-6.5.0/src/corelib/tools/qshareddata.h' l='260'/>
<fun r='_ZN18QSharedDataPointer6detachEv'/>
<fun r='_ZN18QSharedDataPointerdeEv'/>
<fun r='_ZNK18QSharedDataPointerdeEv'/>
<fun r='_ZN18QSharedDataPointerptEv'/>
<fun r='_ZNK18QSharedDataPointerptEv'/>
<fun r='_ZN18QSharedDataPointercvPT_Ev'/>
<fun r='_ZNK18QSharedDataPointercvPKT_Ev'/>
<fun r='_ZN18QSharedDataPointer4dataEv'/>
<fun r='_ZN18QSharedDataPointer3getEv'/>
<fun r='_ZNK18QSharedDataPointer4dataEv'/>
<fun r='_ZNK18QSharedDataPointer3getEv'/>
<fun r='_ZNK18QSharedDataPointer9constDataEv'/>
<fun r='_ZN18QSharedDataPointer4takeEv'/>
<fun r='_ZN18QSharedDataPointerC1Ev'/>
<fun r='_ZN18QSharedDataPointerD1Ev'/>
<fun r='_ZN18QSharedDataPointerC1EPT_'/>
<fun r='_ZN18QSharedDataPointerC1EPT_19QAdoptSharedDataTag'/>
<fun r='_ZN18QSharedDataPointerC1ERK18QSharedDataPointerIT_E'/>
<fun r='_ZN18QSharedDataPointer5resetEPT_'/>
<fun r='_ZN18QSharedDataPointeraSERK18QSharedDataPointerIT_E'/>
<fun r='_ZN18QSharedDataPointeraSEPT_'/>
<fun r='_ZN18QSharedDataPointerC1EO18QSharedDataPointerIT_E'/>
<fun r='_ZNK18QSharedDataPointercvbEv'/>
<fun r='_ZNK18QSharedDataPointerntEv'/>
<fun r='_ZN18QSharedDataPointer4swapER18QSharedDataPointerIT_E'/>
<fun r='_ZN18QSharedDataPointer5cloneEv'/>
<fun r='_ZN18QSharedDataPointer13detach_helperEv'/>
<mbr r='QSharedDataPointer::d' t='T *'/>
<fun r='_ZN18QSharedDataPointer5cloneEv'/>
<fun r='_ZN18QSharedDataPointer13detach_helperEv'/>
<use f='qtbase-6.5.0/src/corelib/text/qlocale.h' l='1135'/>
<use f='qtbase-6.5.0/src/corelib/tools/qcommandlineoption.h' l='60'/>
<use f='qtbase-6.5.0/src/corelib/io/qfileinfo.h' l='160'/>
<use f='qtbase-6.5.0/src/corelib/io/qdir.h' l='237'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='67'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qproperty.h' l='143'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='73'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.h' l='76'/>
<use f='qtbase-6.5.0/src/gui/text/qtextformat.h' l='364'/>
<use f='qtbase-6.5.0/src/gui/text/qtextcursor.h' l='196'/>
<use f='qtbase-6.5.0/src/gui/painting/qpagesize.h' l='260'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.h' l='102'/>
<use f='qtbase-6.5.0/src/opengl/qopenglpixeltransferoptions.h' l='54'/>
<use f='qtbase-6.5.0/src/corelib/text/qlocale_p.h' l='420' c='_ZN18QSharedDataPointer5cloneEv'/>
<fun r='_ZN18QSharedDataPointer5cloneEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_p.h' l='177' c='_ZN18QSharedDataPointer6detachEv'/>
<fun r='_ZN18QSharedDataPointer6detachEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.cpp' l='167' c='_ZN18QSharedDataPointer6detachEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qurlquery.cpp' l='313' c='_ZN18QSharedDataPointer5cloneEv'/>
<fun r='_ZN18QSharedDataPointer6detachEv'/>
<fun r='_ZN18QSharedDataPointer5cloneEv'/>
<use f='qtbase-6.5.0/src/corelib/text/qlocale.cpp' l='855'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezoneprivate_p.h' l='143' c='_ZN18QSharedDataPointer5cloneEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezoneprivate.cpp' l='707' c='_ZN18QSharedDataPointer5cloneEv'/>
<fun r='_ZN18QSharedDataPointer5cloneEv'/>
<fun r='_ZN18QSharedDataPointer5cloneEv'/>
<doc f='qtbase-6.5.0/src/corelib/tools/qshareddata.cpp' l='45'>/*!
    \class QSharedDataPointer
    \inmodule QtCore
    \brief The QSharedDataPointer class represents a pointer to an implicitly shared object.
    \since 4.0
    \reentrant

    QSharedDataPointer\&lt;T\&gt; makes writing your own \l {implicitly
    shared} classes easy. QSharedDataPointer implements \l {thread-safe}
    reference counting, ensuring that adding QSharedDataPointers to your
    \l {reentrant} classes won&apos;t make them non-reentrant.

    \l {Implicit sharing} is used by many Qt classes to combine the
    speed and memory efficiency of pointers with the ease of use of
    classes. See the \l{Shared Classes} page for more information.

    \target Employee example
    Suppose you want to make an \c Employee class implicitly shared. The
    procedure is:

    \list

    \li Define the class \c Employee to have a single data member of
     type \c {QSharedDataPointer&lt;EmployeeData&gt;}.

    \li Define the \c EmployeeData class derived from \l QSharedData to
     contain all the data members you would normally have put in the
     \c Employee class.

    \endlist

    To show this in practice, we review the source code for the
    implicitly shared \c Employee class. In the header file we define the
    two classes \c Employee and \c EmployeeData.

    \snippet sharedemployee/employee.h 0

    In class \c Employee, note the single data member, a \e {d pointer}
    of type \c {QSharedDataPointer&lt;EmployeeData&gt;}. All accesses of
    employee data must go through the \e {d pointer&apos;s} \c
    {operator-&gt;()}.  For write accesses, \c {operator-&gt;()} will
    automatically call detach(), which creates a copy of the shared data
    object if the shared data object&apos;s reference count is greater than
    1. This ensures that writes to one \c Employee object don&apos;t affect
    any other \c Employee objects that share the same \c EmployeeData
    object.

    Class \c EmployeeData inherits QSharedData, which provides the
    \e{behind the scenes} reference counter. \c EmployeeData has a default
    constructor, a copy constructor, and a destructor. Normally, trivial
    implementations of these are all that is needed in the \e {data}
    class for an implicitly shared class.

    Implementing the two constructors for class \c Employee is also
    straightforward. Both create a new instance of \c EmployeeData
    and assign it to the \e{d pointer} .

    \snippet sharedemployee/employee.h 1
    \codeline
    \snippet sharedemployee/employee.h 2

    Note that class \c Employee also has a trivial copy constructor
    defined, which is not strictly required in this case.

    \snippet sharedemployee/employee.h 7

    The copy constructor is not strictly required here, because class \c
    EmployeeData is included in the same file as class \c Employee
    (\c{employee.h}). However, including the private subclass of
    QSharedData in the same file as the public class containing the
    QSharedDataPointer is not typical. Normally, the idea is to hide the
    private subclass of QSharedData from the user by putting it in a
    separate file which would not be included in the public file. In
    this case, we would normally put class \c EmployeeData in a separate
    file, which would \e{not} be included in \c{employee.h}. Instead, we
    would just predeclare the private subclass \c EmployeeData in \c
    {employee.h} this way:

    \snippet code/src_corelib_tools_qshareddata.cpp 0

    If we had done it that way here, the copy constructor shown would be
    required. Since the copy constructor is trivial, you might as well
    just always include it.

    Behind the scenes, QSharedDataPointer automatically increments the
    reference count whenever an \c Employee object is copied, assigned,
    or passed as a parameter. It decrements the reference count whenever
    an \c Employee object is deleted or goes out of scope.  The shared
    \c EmployeeData object is deleted automatically if and when the
    reference count reaches 0.

    In a non-const member function of \c Employee, whenever the \e {d
    pointer} is dereferenced, QSharedDataPointer automatically calls
    detach() to ensure that the function operates on its own copy of the
    data.

    \snippet sharedemployee/employee.h 3
    \codeline
    \snippet sharedemployee/employee.h 4

    Note that if detach() is called more than once in a member function
    due to multiple dereferences of the \e {d pointer}, detach() will
    only create a copy of the shared data the first time it is called,
    if at all, because on the second and subsequent calls of detach(),
    the reference count will be 1 again.

    But note that in the second \c Employee constructor, which takes an
    employee ID and a name, both setId() and setName() are called, but
    they don&apos;t cause \e{copy on write}, because the reference count for
    the newly constructed \c EmployeeData object has just been set to 1.

    In \c Employee&apos;s \e const member functions, dereferencing the \e {d
    pointer} does \e not cause detach() to be called.

    \snippet sharedemployee/employee.h 5
    \codeline
    \snippet sharedemployee/employee.h 6

    Notice that there is no need to implement a copy constructor or an
    assignment operator for the \c Employee class, because the copy
    constructor and assignment operator provided by the C++ compiler
    will do the \e{member by member} shallow copy required. The only
    member to copy is the \e {d pointer}, which is a QSharedDataPointer,
    whose \c {operator=()} just increments the reference count of the
    shared \c EmployeeData object.

    \target Implicit vs Explicit Sharing
    \section1 Implicit vs Explicit Sharing

    Implicit sharing might not be right for the \c Employee class.
    Consider a simple example that creates two instances of the
    implicitly shared \c Employee class.

    \snippet sharedemployee/main.cpp 0

    After the second employee e2 is created and e1 is assigned to it,
    both \c e1 and \c e2 refer to Albrecht Durer, employee 1001. Both \c
    Employee objects point to the same instance of \c EmployeeData,
    which has reference count 2. Then \c {e1.setName(&quot;Hans Holbein&quot;)} is
    called to change the employee name, but because the reference count
    is greater than 1, a \e{copy on write} is performed before the name
    is changed. Now \c e1 and \c e2 point to different \c EmployeeData
    objects. They have different names, but both have ID 1001, which is
    probably not what you want. You can, of course, just continue with
    \c {e1.setId(1002)}, if you really mean to create a second, unique
    employee, but if you only want to change the employee&apos;s name
    everywhere, consider using \l {QExplicitlySharedDataPointer}
    {explicit sharing} in the \c Employee class instead of implicit
    sharing.

    If you declare the \e {d pointer} in the \c Employee class to be
    \c {QExplicitlySharedDataPointer&lt;EmployeeData&gt;}, then explicit
    sharing is used and \e{copy on write} operations are not performed
    automatically (i.e. detach() is not called in non-const
    functions). In that case, after \c {e1.setName(&quot;Hans Holbein&quot;)}, the
    employee&apos;s name has been changed, but both e1 and e2 still refer to
    the same instance of \c EmployeeData, so there is only one employee
    with ID 1001.

    In the member function documentation, \e{d pointer} always refers
    to the internal pointer to the shared data object.

    \section1 Optimize Performance for Usage in Qt Containers

    You should consider marking your implicitly shared class as a movable type
    using the Q_DECLARE_TYPEINFO() macro if it resembles the \c Employee class
    above and uses a QSharedDataPointer or QExplicitlySharedDataPointer as the
    only member. This can improve performance and memory efficiency when using
    Qt&apos;s \l{container classes}.

    \sa QSharedData, QExplicitlySharedDataPointer, QScopedPointer, QSharedPointer
*/</doc>
<use f='qtbase-6.5.0/src/dbus/qdbusintrospection_p.h' l='48'/>
<use f='qtbase-6.5.0/src/dbus/qdbusintrospection_p.h' l='49'/>
<use f='qtbase-6.5.0/src/dbus/qdbusxmlparser_p.h' l='36'/>
<use f='qtbase-6.5.0/src/dbus/qdbusxmlparser_p.h' l='44' c='_ZNK14QDBusXmlParser6objectEv'/>
<use f='qtbase-6.5.0/src/dbus/qdbusintrospection.cpp' l='341' c='_ZN18QDBusIntrospection11parseObjectERK7QStringS2_S2_'/>
<use f='qtbase-6.5.0/src/dbus/qdbusxmlparser.cpp' l='286' c='_ZL13readInterfaceR16QXmlStreamReaderPN18QDBusIntrospection6ObjectEP4QMapI7QString18QSharedDataPointerINS1_9InterfaceEEE'/>
<use f='qtbase-6.5.0/src/gui/text/qdistancefield_p.h' l='87'/>
<use f='qtbase-6.5.0/src/gui/util/qtexturefiledata_p.h' l='82'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkrequest.h' l='163'/>
<use f='qtbase-6.5.0/src/network/access/qhttpnetworkrequest_p.h' l='121'/>
<use f='qtbase-6.5.0/src/network/access/qhttp2configuration.h' l='47'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='71'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='149'/>
<use f='qtbase-6.5.0/src/network/access/qabstractnetworkcache.h' l='65'/>
<use f='qtbase-6.5.0/src/network/access/qhstspolicy.h' l='47'/>
<use f='qtbase-6.5.0/src/network/access/qhttpmultipart.h' l='45'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkcookie.h' l='81'/>
<use f='qtbase-6.5.0/src/network/kernel/qdnslookup.h' l='43'/>
<use f='qtbase-6.5.0/src/network/kernel/qdnslookup.h' l='65'/>
<use f='qtbase-6.5.0/src/network/kernel/qdnslookup.h' l='88'/>
<use f='qtbase-6.5.0/src/network/kernel/qdnslookup.h' l='113'/>
<use f='qtbase-6.5.0/src/network/kernel/qdnslookup.h' l='135'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface.h' l='135'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface_p.h' l='93' c='_ZN24QNetworkInterfaceManager17interfaceFromNameERK7QString'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface_p.h' l='94' c='_ZN24QNetworkInterfaceManager18interfaceFromIndexEi'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface_p.h' l='95' c='_ZN24QNetworkInterfaceManager13allInterfacesEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface_p.h' l='101'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface.cpp' l='58' c='_ZN24QNetworkInterfaceManager17interfaceFromNameERK7QString'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface.cpp' l='75' c='_ZN24QNetworkInterfaceManager18interfaceFromIndexEi'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface.cpp' l='86' c='_ZN24QNetworkInterfaceManager13allInterfacesEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface.cpp' l='89' c='_ZN24QNetworkInterfaceManager13allInterfacesEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface.cpp' l='99' c='_ZN24QNetworkInterfaceManager13allInterfacesEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface.cpp' l='848' c='_ZN17QNetworkInterface13allInterfacesEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinterface.cpp' l='869' c='_ZN17QNetworkInterface12allAddressesEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='445' c='_ZN18QSharedDataPointer6detachEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='889' c='_ZN18QSharedDataPointer6detachEv'/>
<fun r='_ZN18QSharedDataPointer6detachEv'/>
<fun r='_ZN18QSharedDataPointer6detachEv'/>
<use f='qtbase-6.5.0/src/network/ssl/qsslcertificateextension.h' l='37'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='379'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='604'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='605'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='606'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='607'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='608'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='609'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='610'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='611'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='612'/>
