<dec f='qtbase-6.5.0/src/gui/image/qimage.h' l='204' type='QImage QImage::createHeuristicMask(bool clipTight = true) const'/>
<def f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='3139' ll='3230' type='QImage QImage::createHeuristicMask(bool clipTight = true) const'/>
<use f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='3146' u='c' c='_ZNK6QImage19createHeuristicMaskEb'/>
<doc f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='3115'>/*!
    Creates and returns a 1-bpp heuristic mask for this image.

    The function works by selecting a color from one of the corners,
    then chipping away pixels of that color starting at all the edges.
    The four corners vote for which color is to be masked away. In
    case of a draw (this generally means that this function is not
    applicable to the image), the result is arbitrary.

    The returned image has little-endian bit order (i.e. the image&apos;s
    format is QImage::Format_MonoLSB), which you can convert to
    big-endian (QImage::Format_Mono) using the convertToFormat()
    function.

    If \a clipTight is true (the default) the mask is just large
    enough to cover the pixels; otherwise, the mask is larger than the
    data pixels.

    Note that this function disregards the alpha buffer.

    \sa createAlphaMask(), {QImage#Image Transformations}{Image
    Transformations}
*/</doc>
<use f='qtbase-6.5.0/src/gui/image/qpixmap.cpp' l='659' u='c' c='_ZNK7QPixmap19createHeuristicMaskEb'/>
