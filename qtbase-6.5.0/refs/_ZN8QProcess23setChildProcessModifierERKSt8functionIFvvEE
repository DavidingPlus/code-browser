<dec f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='175' type='void QProcess::setChildProcessModifier(const std::function&lt;void ()&gt; &amp; modifier)'/>
<def f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='1600' ll='1604' type='void QProcess::setChildProcessModifier(const std::function&lt;void ()&gt; &amp; modifier)'/>
<doc f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='1571'>/*!
    \since 6.0

    Sets the \a modifier function for the child process, for Unix systems
    (including \macos; for Windows, see setCreateProcessArgumentsModifier()).
    The function contained by the \a modifier argument will be invoked in the
    child process after \c{fork()} is completed and QProcess has set up the
    standard file descriptors for the child process, but before \c{execve()},
    inside start(). The modifier is useful to change certain properties of the
    child process, such as setting up additional file descriptors or closing
    others, changing the nice level, disconnecting from the controlling TTY,
    etc.

    The following shows an example of setting up a child process to run without
    privileges:

    \snippet code/src_corelib_io_qprocess.cpp 4

    If the modifier function needs to exit the process, remember to use
    \c{_exit()}, not \c{exit()}.

    \note In multithreaded applications, this function must be careful not to
    call any functions that may lock mutexes that may have been in use in
    other threads (in general, using only functions defined by POSIX as
    &quot;async-signal-safe&quot; is advised). Most of the Qt API is unsafe inside this
    callback, including qDebug(), and may lead to deadlocks.

    \sa childProcessModifier()
*/</doc>
