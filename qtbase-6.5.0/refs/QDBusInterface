<inh f='qtbase-6.5.0/src/dbus/qdbusabstractinterface.h' l='42' c='QDBusAbstractInterface'/>
<def f='qtbase-6.5.0/src/dbus/qdbusinterface.h' l='17' ll='35'/>
<size>16</size>
<fun r='_ZN14QDBusInterfaceC1EP21QDBusInterfacePrivate'/>
<fun r='_ZN14QDBusInterfaceC1ERK7QStringS2_S2_RK15QDBusConnectionP7QObject'/>
<fun r='_ZN14QDBusInterfaceD1Ev'/>
<fun r='_ZNK14QDBusInterface10metaObjectEv'/>
<fun r='_ZN14QDBusInterface11qt_metacastEPKc'/>
<fun r='_ZN14QDBusInterface11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN14QDBusInterface6d_funcEv'/>
<fun r='_ZNK14QDBusInterface6d_funcEv'/>
<use f='qtbase-6.5.0/src/dbus/qdbusinterface_p.h' l='31' c='_ZN21QDBusInterfacePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/dbus/qdbusinterface_p.h' l='31' c='_ZN21QDBusInterfacePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/dbus/qdbusinterface_p.h' l='31' c='_ZNK21QDBusInterfacePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/dbus/qdbusinterface_p.h' l='31' c='_ZNK21QDBusInterfacePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/dbus/qdbusinterface_p.h' l='31'/>
<size>16</size>
<use f='qtbase-6.5.0/src/dbus/qdbusinterface.cpp' l='216' c='_ZN14QDBusInterface11qt_metacastEPKc'/>
<use f='qtbase-6.5.0/src/dbus/qdbusinterface.cpp' l='218' c='_ZN14QDBusInterface11qt_metacastEPKc'/>
<use f='qtbase-6.5.0/src/dbus/qdbusinterface.cpp' l='236' c='_ZN21QDBusInterfacePrivate8metacallEN11QMetaObject4CallEiPPv'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/dbus/qdbusinterface.cpp' l='142'>/*!
    \class QDBusInterface
    \inmodule QtDBus
    \since 4.2

    \brief The QDBusInterface class is a proxy for interfaces on remote objects.

    QDBusInterface is a generic accessor class that is used to place calls to remote objects,
    connect to signals exported by remote objects and get/set the value of remote properties. This
    class is useful for dynamic access to remote objects: that is, when you do not have a generated
    code that represents the remote interface.

    Calls are usually placed by using the call() function, which constructs the message, sends it
    over the bus, waits for the reply and decodes the reply. Signals are connected to by using the
    normal QObject::connect() function. Finally, properties are accessed using the
    QObject::property() and QObject::setProperty() functions.

    The following code snippet demonstrates how to perform a
    mathematical operation of \tt{&quot;2 + 2&quot;} in a remote application
    called \c com.example.Calculator, accessed via the session bus.

    \snippet code/src_qdbus_qdbusinterface.cpp 0

    \sa {Qt D-Bus XML compiler (qdbusxml2cpp)}
*/</doc>
<fun r='_ZN14QDBusInterfaceC1ERK7QStringS2_S2_RK15QDBusConnectionP7QObject'/>
<fun r='_ZN14QDBusInterfaceD1Ev'/>
<fun r='_ZNK14QDBusInterface10metaObjectEv'/>
<fun r='_ZN14QDBusInterface11qt_metacastEPKc'/>
<fun r='_ZN14QDBusInterface11qt_metacallEN11QMetaObject4CallEiPPv'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/dbusmenu/qdbusmenuconnection.cpp' l='46' c='_ZN19QDBusMenuConnectionC1EP7QObjectRK7QString'/>
<size>16</size>
<use f='qtbase-6.5.0/src/plugins/networkinformation/networkmanager/qnetworkmanagerservice.cpp' l='86' c='_ZL16getPrimaryDeviceRK15QDBusObjectPath'/>
<use f='qtbase-6.5.0/src/plugins/networkinformation/networkmanager/qnetworkmanagerservice.cpp' l='88' c='_ZL16getPrimaryDeviceRK15QDBusObjectPath'/>
<use f='qtbase-6.5.0/src/plugins/networkinformation/networkmanager/qnetworkmanagerservice.cpp' l='98' c='_ZL16getPrimaryDeviceRK15QDBusObjectPath'/>
<size>16</size>
