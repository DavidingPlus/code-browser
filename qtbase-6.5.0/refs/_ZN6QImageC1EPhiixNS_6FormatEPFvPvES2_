<dec f='qtbase-6.5.0/src/gui/image/qimage.h' l='89' type='void QImage::QImage(uchar * data, int width, int height, qsizetype bytesPerLine, QImage::Format format, QImageCleanupFunction cleanupFunction = nullptr, void * cleanupInfo = nullptr)'/>
<def f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='918' ll='922' type='void QImage::QImage(uchar * data, int width, int height, qsizetype bytesPerLine, QImage::Format format, QImageCleanupFunction cleanupFunction = nullptr, void * cleanupInfo = nullptr)'/>
<doc f='qtbase-6.5.0/src/gui/image/qimage.cpp' l='900'>/*!
    Constructs an image with the given \a width, \a height and \a
    format, that uses an existing memory buffer, \a data. The \a width
    and \a height must be specified in pixels. \a bytesPerLine
    specifies the number of bytes per line (stride).

    The buffer must remain valid throughout the life of the QImage and
    all copies that have not been modified or otherwise detached from
    the original buffer. The image does not delete the buffer at destruction.
    You can provide a function pointer \a cleanupFunction along with an
    extra pointer \a cleanupInfo that will be called when the last copy
    is destroyed.

    If \a format is an indexed color format, the image color table is
    initially empty and must be sufficiently expanded with
    setColorCount() or setColorTable() before the image is used.
*/</doc>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstore.cpp' l='142' u='c' c='_ZN13QBackingStore10beginPaintERK7QRegion'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstoredefaultcompositor.cpp' l='499' u='c' c='_ZN30QBackingStoreDefaultCompositor5flushEP21QPlatformBackingStoreP4QRhiP13QRhiSwapChainP7QWindowdRK7QRegionRK6QPointP20QPlatformTextureListb'/>
<use f='qtbase-6.5.0/src/gui/painting/qtextureglyphcache.cpp' l='316' u='c' c='_ZN23QImageTextureGlyphCache11fillTextureERKN18QTextureGlyphCache5CoordEjRK11QFixedPoint'/>
<use f='qtbase-6.5.0/src/plugins/platforms/linuxfb/qlinuxfbscreen.cpp' l='357' u='c' c='_ZN14QLinuxFbScreen10initializeEv'/>
