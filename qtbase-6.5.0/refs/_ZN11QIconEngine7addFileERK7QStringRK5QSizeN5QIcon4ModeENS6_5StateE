<dec f='qtbase-6.5.0/src/gui/image/qiconengine.h' l='24' type='void QIconEngine::addFile(const QString &amp; fileName, const QSize &amp; size, QIcon::Mode mode, QIcon::State state)'/>
<ovr f='qtbase-6.5.0/src/gui/image/qicon.cpp' l='415' c='_ZN17QPixmapIconEngine7addFileERK7QStringRK5QSizeN5QIcon4ModeENS6_5StateE'/>
<use f='qtbase-6.5.0/src/gui/image/qicon.cpp' l='1079' u='c' c='_ZN5QIcon7addFileERK7QStringRK5QSizeNS_4ModeENS_5StateE'/>
<use f='qtbase-6.5.0/src/gui/image/qicon.cpp' l='1084' u='c' c='_ZN5QIcon7addFileERK7QStringRK5QSizeNS_4ModeENS_5StateE'/>
<def f='qtbase-6.5.0/src/gui/image/qiconengine.cpp' l='109' ll='111' type='void QIconEngine::addFile(const QString &amp; , const QSize &amp; , QIcon::Mode , QIcon::State )'/>
<doc f='qtbase-6.5.0/src/gui/image/qiconengine.cpp' l='101'>/*!  Called by QIcon::addFile(). Adds a specialized pixmap from the
  file with the given \a fileName, \a size, \a mode and \a state. The
  default pixmap-based engine stores any supplied file names, and it
  loads the pixmaps on demand instead of using scaled pixmaps if the
  size of a pixmap matches the size of icon requested. Custom icon
  engines that implement scalable vector formats are free to ignores
  any extra files.
 */</doc>
<doc f='qtbase-6.5.0/src/gui/image/qiconengine.cpp' l='109'>/*fileName*/</doc>
<doc f='qtbase-6.5.0/src/gui/image/qiconengine.cpp' l='109'>/*size*/</doc>
<doc f='qtbase-6.5.0/src/gui/image/qiconengine.cpp' l='109'>/*mode*/</doc>
<doc f='qtbase-6.5.0/src/gui/image/qiconengine.cpp' l='109'>/*state*/</doc>
