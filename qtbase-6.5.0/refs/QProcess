<inh f='qtbase-6.5.0/src/corelib/io/qiodevice.h' l='27' c='QIODevice'/>
<def f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='74' ll='257'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='151' c='_ZN8QProcess24setStandardOutputProcessEPS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='239' c='_ZN8QProcessC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='239' c='_ZN8QProcessaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='239' c='_ZN8QProcessaSERKS_'/>
<size>16</size>
<smbr r='QProcess::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK8QProcess10metaObjectEv'/>
<fun r='_ZN8QProcess11qt_metacastEPKc'/>
<fun r='_ZN8QProcess11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN8QProcess2trEPKcS1_i'/>
<fun r='_ZN8QProcess18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN8QProcessC1EP7QObject'/>
<fun r='_ZN8QProcessD1Ev'/>
<fun r='_ZN8QProcess5startERK7QStringRK5QListIS0_E6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess5startE6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess12startCommandERK7QString6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess13startDetachedEPx'/>
<fun r='_ZN8QProcess4openE6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZNK8QProcess7programEv'/>
<fun r='_ZN8QProcess10setProgramERK7QString'/>
<fun r='_ZNK8QProcess9argumentsEv'/>
<fun r='_ZN8QProcess12setArgumentsERK5QListI7QStringE'/>
<fun r='_ZNK8QProcess18processChannelModeEv'/>
<fun r='_ZN8QProcess21setProcessChannelModeENS_18ProcessChannelModeE'/>
<fun r='_ZNK8QProcess16inputChannelModeEv'/>
<fun r='_ZN8QProcess19setInputChannelModeENS_16InputChannelModeE'/>
<fun r='_ZNK8QProcess11readChannelEv'/>
<fun r='_ZN8QProcess14setReadChannelENS_14ProcessChannelE'/>
<fun r='_ZN8QProcess16closeReadChannelENS_14ProcessChannelE'/>
<fun r='_ZN8QProcess17closeWriteChannelEv'/>
<fun r='_ZN8QProcess20setStandardInputFileERK7QString'/>
<fun r='_ZN8QProcess21setStandardOutputFileERK7QString6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess20setStandardErrorFileERK7QString6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess24setStandardOutputProcessEPS_'/>
<fun r='_ZNK8QProcess20childProcessModifierEv'/>
<fun r='_ZN8QProcess23setChildProcessModifierERKSt8functionIFvvEE'/>
<fun r='_ZNK8QProcess16workingDirectoryEv'/>
<fun r='_ZN8QProcess19setWorkingDirectoryERK7QString'/>
<fun r='_ZN8QProcess14setEnvironmentERK5QListI7QStringE'/>
<fun r='_ZNK8QProcess11environmentEv'/>
<fun r='_ZN8QProcess21setProcessEnvironmentERK19QProcessEnvironment'/>
<fun r='_ZNK8QProcess18processEnvironmentEv'/>
<fun r='_ZNK8QProcess5errorEv'/>
<fun r='_ZNK8QProcess5stateEv'/>
<fun r='_ZNK8QProcess9processIdEv'/>
<fun r='_ZN8QProcess14waitForStartedEi'/>
<fun r='_ZN8QProcess16waitForReadyReadEi'/>
<fun r='_ZN8QProcess19waitForBytesWrittenEi'/>
<fun r='_ZN8QProcess15waitForFinishedEi'/>
<fun r='_ZN8QProcess21readAllStandardOutputEv'/>
<fun r='_ZN8QProcess20readAllStandardErrorEv'/>
<fun r='_ZNK8QProcess8exitCodeEv'/>
<fun r='_ZNK8QProcess10exitStatusEv'/>
<fun r='_ZNK8QProcess12bytesToWriteEv'/>
<fun r='_ZNK8QProcess12isSequentialEv'/>
<fun r='_ZN8QProcess5closeEv'/>
<fun r='_ZN8QProcess7executeERK7QStringRK5QListIS0_E'/>
<fun r='_ZN8QProcess13startDetachedERK7QStringRK5QListIS0_ES2_Px'/>
<fun r='_ZN8QProcess17systemEnvironmentEv'/>
<fun r='_ZN8QProcess10nullDeviceEv'/>
<fun r='_ZN8QProcess12splitCommandE11QStringView'/>
<fun r='_ZN8QProcess9terminateEv'/>
<fun r='_ZN8QProcess4killEv'/>
<fun r='_ZN8QProcess7startedENS_14QPrivateSignalE'/>
<fun r='_ZN8QProcess8finishedEiNS_10ExitStatusE'/>
<fun r='_ZN8QProcess13errorOccurredENS_12ProcessErrorE'/>
<fun r='_ZN8QProcess12stateChangedENS_12ProcessStateENS_14QPrivateSignalE'/>
<fun r='_ZN8QProcess23readyReadStandardOutputENS_14QPrivateSignalE'/>
<fun r='_ZN8QProcess22readyReadStandardErrorENS_14QPrivateSignalE'/>
<fun r='_ZN8QProcess15setProcessStateENS_12ProcessStateE'/>
<fun r='_ZN8QProcess8readDataEPcx'/>
<fun r='_ZN8QProcess9writeDataEPKcx'/>
<fun r='_ZN8QProcess6d_funcEv'/>
<fun r='_ZNK8QProcess6d_funcEv'/>
<fun r='_ZN8QProcessC1ERKS_'/>
<fun r='_ZN8QProcess17setupChildProcessEv'/>
<use f='qtbase-6.5.0/qmake/library/qmakeevaluator.h' l='225' c='_ZNK14QMakeEvaluator10runProcessEP8QProcessRK7QString'/>
<size>16</size>
<use f='qtbase-6.5.0/qmake/library/qmakebuiltins.cpp' l='467' c='_ZNK14QMakeEvaluator10runProcessEP8QProcessRK7QString'/>
<use f='qtbase-6.5.0/qmake/library/qmakebuiltins.cpp' l='488' c='_ZNK14QMakeEvaluator16getCommandOutputERK7QStringPi'/>
<use f='qtbase-6.5.0/qmake/library/qmakebuiltins.cpp' l='1794' c='_ZN14QMakeEvaluator26evaluateBuiltinConditionalERKN13QMakeInternal12QMakeBuiltinERK6ProKeyRK13ProStringList'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_p.h' l='194' c='_ZN15QProcessPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_p.h' l='194' c='_ZN15QProcessPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_p.h' l='194' c='_ZNK15QProcessPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_p.h' l='194' c='_ZNK15QProcessPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_p.h' l='194'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='927' c='_ZN15QProcessPrivate15setErrorAndEmitEN8QProcess12ProcessErrorERK7QString'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='1027' c='_ZN15QProcessPrivate18tryReadFromChannelEPNS_7ChannelE'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='1140' c='_ZN15QProcessPrivate15processFinishedEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='1176' c='_ZN15QProcessPrivate22_q_startupNotificationEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='1471' c='_ZN8QProcess24setStandardOutputProcessEPS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='2168' c='_ZN15QProcessPrivate5startE6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='2402' c='_ZN8QProcess7executeERK7QStringRK5QListIS0_E'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='2434' c='_ZN8QProcess13startDetachedERK7QStringRK5QListIS0_ES2_Px'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='399'>/*!
    \class QProcess
    \inmodule QtCore

    \brief The QProcess class is used to start external programs and
    to communicate with them.

    \ingroup io

    \reentrant

    \section1 Running a Process

    To start a process, pass the name and command line arguments of
    the program you want to run as arguments to start(). Arguments
    are supplied as individual strings in a QStringList.

    Alternatively, you can set the program to run with setProgram()
    and setArguments(), and then call start() or open().

    For example, the following code snippet runs the analog clock
    example in the Fusion style on X11 platforms by passing strings
    containing &quot;-style&quot; and &quot;fusion&quot; as two items in the list of
    arguments:

    \snippet qprocess/qprocess-simpleexecution.cpp 0
    \dots
    \snippet qprocess/qprocess-simpleexecution.cpp 1
    \snippet qprocess/qprocess-simpleexecution.cpp 2

    QProcess then enters the \l Starting state, and when the program
    has started, QProcess enters the \l Running state and emits
    started().

    QProcess allows you to treat a process as a sequential I/O
    device. You can write to and read from the process just as you
    would access a network connection using QTcpSocket. You can then
    write to the process&apos;s standard input by calling write(), and
    read the standard output by calling read(), readLine(), and
    getChar(). Because it inherits QIODevice, QProcess can also be
    used as an input source for QXmlReader, or for generating data to
    be uploaded using QNetworkAccessManager.

    When the process exits, QProcess reenters the \l NotRunning state
    (the initial state), and emits finished().

    The finished() signal provides the exit code and exit status of
    the process as arguments, and you can also call exitCode() to
    obtain the exit code of the last process that finished, and
    exitStatus() to obtain its exit status. If an error occurs at
    any point in time, QProcess will emit the errorOccurred() signal.
    You can also call error() to find the type of error that occurred
    last, and state() to find the current process state.

    \note QProcess is not supported on VxWorks, iOS, tvOS, or watchOS.

    \section1 Finding the Executable

    The program to be run can be set either by calling setProgram() or directly
    in the start() call. The effect of calling start() with the program name
    and arguments is equivalent to calling setProgram() and setArguments()
    before that function and then calling the overload without those
    parameters.

    QProcess interprets the program name in one of three different ways,
    similar to how Unix shells and the Windows command interpreter operate in
    their own command-lines:

    \list
      \li If the program name is an absolute path, then that is the exact
      executable that will be launched and QProcess performs no searching.

      \li If the program name is a relative path with more than one path
      component (that is, it contains at least one slash), the starting
      directory where that relative path is searched is OS-dependent: on
      Windows, it&apos;s the parent process&apos; current working dir, while on Unix it&apos;s
      the one set with setWorkingDirectory().

      \li If the program name is a plain file name with no slashes, the
      behavior is operating-system dependent. On Unix systems, QProcess will
      search the \c PATH environment variable; on Windows, the search is
      performed by the OS and will first the parent process&apos; current directory
      before the \c PATH environment variable (see the documentation for
      \l{CreateProcess} for the full list).
    \endlist

    To avoid platform-dependent behavior or any issues with how the current
    application was launched, it is advisable to always pass an absolute path
    to the executable to be launched. For auxiliary binaries shipped with the
    application, one can construct such a path starting with
    QCoreApplication::applicationDirPath(). Similarly, to explicitly run an
    executable that is to be found relative to the directory set with
    setWorkingDirectory(), use a program path starting with &quot;./&quot; or &quot;../&quot; as
    the case may be.

    On Windows, the &quot;.exe&quot; suffix is not required for most uses, except those
    outlined in the \l{CreateProcess} documentation. Additionally, QProcess
    will convert the Unix-style forward slashes to Windows path backslashes for
    the program name. This allows code using QProcess to be written in a
    cross-platform manner, as shown in the examples above.

    QProcess does not support directly executing Unix shell or Windows command
    interpreter built-in functions, such as \c{cmd.exe}&apos;s \c dir command or the
    Bourne shell&apos;s \c export. On Unix, even though many shell built-ins are
    also provided as separate executables, their behavior may differ from those
    implemented as built-ins. To run those commands, one should explicitly
    execute the interpreter with suitable options. For Unix systems, launch
    &quot;/bin/sh&quot; with two arguments: &quot;-c&quot; and a string with the command-line to be
    run. For Windows, due to the non-standard way \c{cmd.exe} parses its
    command-line, use setNativeArguments() (for example, &quot;/c dir d:&quot;).

    \section1 Environment variables

    The QProcess API offers methods to manipulate the environment variables
    that the child process will see. By default, the child process will have a
    copy of the current process environment variables that exist at the time
    the start() function is called. This means that any modifications performed
    using qputenv() prior to that call will be reflected in the child process&apos;
    environment. Note that QProcess makes no attempt to prevent race conditions
    with qputenv() happening in other threads, so it is recommended to avoid
    qputenv() after the application&apos;s initial start up.

    The environment for a specific child can be modified using the
    processEnvironment() and setProcessEnvironment() functions, which use the
    \l QProcessEnvironment class. By default, processEnvironment() will return
    an object for which QProcessEnvironment::inheritsFromParent() is true.
    Setting an environment that does not inherit from the parent will cause
    QProcess to use exactly that environment for the child when it is started.

    The normal scenario starts from the current environment by calling
    QProcessEnvironment::systemEnvironment() and then proceeds to adding,
    changing, or removing specific variables. The resulting variable roster can
    then be applied to a QProcess with setProcessEnvironment().

    It is possible to remove all variables from the environment or to start
    from an empty environment, using the QProcessEnvironment() default
    constructor. This is not advisable outside of controlled and
    system-specific conditions, as there may be system variables that are set
    in the current process environment and are required for proper execution
    of the child process.

    On Windows, QProcess will copy the current process&apos; \c &quot;PATH&quot; and \c
    &quot;SystemRoot&quot; environment variables if they were unset. It is not possible
    to unset them completely, but it is possible to set them to empty values.
    Setting \c &quot;PATH&quot; to empty on Windows will likely cause the child process
    to fail to start.

    \section1 Communicating via Channels

    Processes have two predefined output channels: The standard
    output channel (\c stdout) supplies regular console output, and
    the standard error channel (\c stderr) usually supplies the
    errors that are printed by the process. These channels represent
    two separate streams of data. You can toggle between them by
    calling setReadChannel(). QProcess emits readyRead() when data is
    available on the current read channel. It also emits
    readyReadStandardOutput() when new standard output data is
    available, and when new standard error data is available,
    readyReadStandardError() is emitted. Instead of calling read(),
    readLine(), or getChar(), you can explicitly read all data from
    either of the two channels by calling readAllStandardOutput() or
    readAllStandardError().

    The terminology for the channels can be misleading. Be aware that
    the process&apos;s output channels correspond to QProcess&apos;s
    \e read channels, whereas the process&apos;s input channels correspond
    to QProcess&apos;s \e write channels. This is because what we read
    using QProcess is the process&apos;s output, and what we write becomes
    the process&apos;s input.

    QProcess can merge the two output channels, so that standard
    output and standard error data from the running process both use
    the standard output channel. Call setProcessChannelMode() with
    MergedChannels before starting the process to activate
    this feature. You also have the option of forwarding the output of
    the running process to the calling, main process, by passing
    ForwardedChannels as the argument. It is also possible to forward
    only one of the output channels - typically one would use
    ForwardedErrorChannel, but ForwardedOutputChannel also exists.
    Note that using channel forwarding is typically a bad idea in GUI
    applications - you should present errors graphically instead.

    Certain processes need special environment settings in order to
    operate. You can set environment variables for your process by
    calling setProcessEnvironment(). To set a working directory, call
    setWorkingDirectory(). By default, processes are run in the
    current working directory of the calling process.

    The positioning and the screen Z-order of windows belonging to
    GUI applications started with QProcess are controlled by
    the underlying windowing system. For Qt 5 applications, the
    positioning can be specified using the \c{-qwindowgeometry}
    command line option; X11 applications generally accept a
    \c{-geometry} command line option.

    \note On QNX, setting the working directory may cause all
    application threads, with the exception of the QProcess caller
    thread, to temporarily freeze during the spawning process,
    owing to a limitation in the operating system.

    \section1 Synchronous Process API

    QProcess provides a set of functions which allow it to be used
    without an event loop, by suspending the calling thread until
    certain signals are emitted:

    \list
    \li waitForStarted() blocks until the process has started.

    \li waitForReadyRead() blocks until new data is
    available for reading on the current read channel.

    \li waitForBytesWritten() blocks until one payload of
    data has been written to the process.

    \li waitForFinished() blocks until the process has finished.
    \endlist

    Calling these functions from the main thread (the thread that
    calls QApplication::exec()) may cause your user interface to
    freeze.

    The following example runs \c gzip to compress the string &quot;Qt
    rocks!&quot;, without an event loop:

    \snippet process/process.cpp 0

    \sa QBuffer, QFile, QTcpSocket
*/</doc>
<fun r='_ZN8QProcessC1EP7QObject'/>
<fun r='_ZN8QProcessD1Ev'/>
<fun r='_ZNK8QProcess18processChannelModeEv'/>
<fun r='_ZN8QProcess21setProcessChannelModeENS_18ProcessChannelModeE'/>
<fun r='_ZNK8QProcess16inputChannelModeEv'/>
<fun r='_ZN8QProcess19setInputChannelModeENS_16InputChannelModeE'/>
<fun r='_ZNK8QProcess11readChannelEv'/>
<fun r='_ZN8QProcess14setReadChannelENS_14ProcessChannelE'/>
<fun r='_ZN8QProcess16closeReadChannelENS_14ProcessChannelE'/>
<fun r='_ZN8QProcess17closeWriteChannelEv'/>
<fun r='_ZN8QProcess20setStandardInputFileERK7QString'/>
<fun r='_ZN8QProcess21setStandardOutputFileERK7QString6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess20setStandardErrorFileERK7QString6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess24setStandardOutputProcessEPS_'/>
<fun r='_ZNK8QProcess20childProcessModifierEv'/>
<fun r='_ZN8QProcess23setChildProcessModifierERKSt8functionIFvvEE'/>
<fun r='_ZNK8QProcess16workingDirectoryEv'/>
<fun r='_ZN8QProcess19setWorkingDirectoryERK7QString'/>
<fun r='_ZNK8QProcess9processIdEv'/>
<fun r='_ZN8QProcess5closeEv'/>
<fun r='_ZNK8QProcess12isSequentialEv'/>
<fun r='_ZNK8QProcess12bytesToWriteEv'/>
<fun r='_ZNK8QProcess5errorEv'/>
<fun r='_ZNK8QProcess5stateEv'/>
<fun r='_ZN8QProcess14setEnvironmentERK5QListI7QStringE'/>
<fun r='_ZNK8QProcess11environmentEv'/>
<fun r='_ZN8QProcess21setProcessEnvironmentERK19QProcessEnvironment'/>
<fun r='_ZNK8QProcess18processEnvironmentEv'/>
<fun r='_ZN8QProcess14waitForStartedEi'/>
<fun r='_ZN8QProcess16waitForReadyReadEi'/>
<fun r='_ZN8QProcess19waitForBytesWrittenEi'/>
<fun r='_ZN8QProcess15waitForFinishedEi'/>
<fun r='_ZN8QProcess15setProcessStateENS_12ProcessStateE'/>
<fun r='_ZN8QProcess17setupChildProcessEv'/>
<fun r='_ZN8QProcess8readDataEPcx'/>
<fun r='_ZN8QProcess21readAllStandardOutputEv'/>
<fun r='_ZN8QProcess20readAllStandardErrorEv'/>
<fun r='_ZN8QProcess5startERK7QStringRK5QListIS0_E6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess5startE6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess12startCommandERK7QString6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess13startDetachedEPx'/>
<fun r='_ZN8QProcess4openE6QFlagsIN13QIODeviceBase12OpenModeFlagEE'/>
<fun r='_ZN8QProcess12splitCommandE11QStringView'/>
<fun r='_ZNK8QProcess7programEv'/>
<fun r='_ZN8QProcess10setProgramERK7QString'/>
<fun r='_ZNK8QProcess9argumentsEv'/>
<fun r='_ZN8QProcess12setArgumentsERK5QListI7QStringE'/>
<fun r='_ZN8QProcess9terminateEv'/>
<fun r='_ZN8QProcess4killEv'/>
<fun r='_ZNK8QProcess8exitCodeEv'/>
<fun r='_ZNK8QProcess10exitStatusEv'/>
<fun r='_ZN8QProcess7executeERK7QStringRK5QListIS0_E'/>
<fun r='_ZN8QProcess13startDetachedERK7QStringRK5QListIS0_ES2_Px'/>
<fun r='_ZN8QProcess17systemEnvironmentEv'/>
<fun r='_ZN8QProcess10nullDeviceEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_unix.cpp' l='266' c='_ZN15QProcessPrivate11openChannelERNS_7ChannelE'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_unix.cpp' l='417' c='_ZN15QProcessPrivate12startProcessEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_unix.cpp' l='564' c='_ZN15QProcessPrivate14processStartedEP7QString'/>
<size>16</size>
<fun r='_ZN8QProcess9writeDataEPKcx'/>
<use f='qtbase-6.5.0/src/testlib/qbenchmarkvalgrind.cpp' l='28' c='_ZN23QBenchmarkValgrindUtils12haveValgrindEv'/>
<use f='qtbase-6.5.0/src/testlib/qbenchmarkvalgrind.cpp' l='154' c='_ZN23QBenchmarkValgrindUtils22runCallgrindSubProcessERK5QListI7QStringERi'/>
<size>16</size>
