<dec f='qtbase-6.5.0/src/corelib/kernel/qsystemsemaphore.h' l='42' type='void QSystemSemaphore::~QSystemSemaphore()'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qsystemsemaphore.cpp' l='158' ll='161' type='void QSystemSemaphore::~QSystemSemaphore()'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qsystemsemaphore.cpp' l='143'>/*!
  The destructor destroys the QSystemSemaphore object, but the
  underlying system semaphore is not removed from the system unless
  this instance of QSystemSemaphore is the last one existing for that
  system semaphore.

  Two important side effects of the destructor depend on the system.
  In Windows, if acquire() has been called for this semaphore but not
  release(), release() will not be called by the destructor, nor will
  the resource be released when the process exits normally. This would
  be a program bug which could be the cause of a deadlock in another
  process trying to acquire the same resource. In Unix, acquired
  resources that are not released before the destructor is called are
  automatically released when the process exits.
*/</doc>
