<def f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='101' ll='104'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='105' c='_Z20qt_getEnumMetaObjectN16QDoubleValidator8NotationE'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='105' c='_Z14qt_getEnumNameN16QDoubleValidator8NotationE'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='114' c='_ZN16QDoubleValidator11setNotationENS_8NotationE'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='119' c='_ZNK16QDoubleValidator8notationEv'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='125' c='_ZN16QDoubleValidator15notationChangedENS_8NotationE'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.cpp' l='507'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.cpp' l='880' c='_ZN16QDoubleValidator11setNotationENS_8NotationE'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.cpp' l='890' c='_ZNK16QDoubleValidator8notationEv'/>
<doc f='qtbase-6.5.0/src/gui/util/qvalidator.cpp' l='543'>/*!
    \enum QDoubleValidator::Notation
    \since 4.3
    This enum defines the allowed notations for entering a double.

    \value StandardNotation The string is written in the standard format, a
                            whole number part optionally followed by a separator
                            and fractional part, for example \c{&quot;0.015&quot;}.

    \value ScientificNotation The string is written in scientific form, which
                              optionally appends an exponent part to the
                              standard format, for example \c{&quot;1.5E-2&quot;}.

    The whole number part may, as usual, include a sign. This, along with the
    separators for fractional part, exponent and any digit-grouping, depend on
    locale. QDoubleValidator doesn&apos;t check the placement (which would also
    depend on locale) of any digit-grouping separators it finds, but it will
    reject input that contains them if \l QLocale::RejectGroupSeparator is set
    in \c locale().numberOptions().

    \sa QLocale::numberOptions(), QLocale::decimalPoint(),
        QLocale::exponential(), QLocale::negativeSign()
*/</doc>
