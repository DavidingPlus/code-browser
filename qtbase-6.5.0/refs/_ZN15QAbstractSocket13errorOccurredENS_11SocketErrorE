<dec f='qtbase-6.5.0/src/network/socket/qabstractsocket.h' l='195' type='void QAbstractSocket::errorOccurred(QAbstractSocket::SocketError )'/>
<use f='qtbase-6.5.0/src/network/socket/qabstractsocket.cpp' l='900' u='c' c='_ZN22QAbstractSocketPrivate21startConnectingByNameERK7QString'/>
<use f='qtbase-6.5.0/src/network/socket/qabstractsocket.cpp' l='959' u='c' c='_ZN22QAbstractSocketPrivate18_q_startConnectingERK9QHostInfo'/>
<use f='qtbase-6.5.0/src/network/socket/qabstractsocket.cpp' l='1013' u='c' c='_ZN22QAbstractSocketPrivate23_q_connectToNextAddressEv'/>
<use f='qtbase-6.5.0/src/network/socket/qabstractsocket.cpp' l='1128' u='c' c='_ZN22QAbstractSocketPrivate25_q_abortConnectionAttemptEv'/>
<use f='qtbase-6.5.0/src/network/socket/qabstractsocket.cpp' l='1372' u='c' c='_ZN22QAbstractSocketPrivate15setErrorAndEmitEN15QAbstractSocket11SocketErrorERK7QString'/>
<doc f='qtbase-6.5.0/src/network/socket/qabstractsocket.cpp' l='168'>/*!
    \fn void QAbstractSocket::errorOccurred(QAbstractSocket::SocketError socketError)
    \since 5.15

    This signal is emitted after an error occurred. The \a socketError
    parameter describes the type of error that occurred.

    When this signal is emitted, the socket may not be ready for a reconnect
    attempt. In that case, attempts to reconnect should be done from the event
    loop. For example, use a QTimer::singleShot() with 0 as the timeout.

    QAbstractSocket::SocketError is not a registered metatype, so for queued
    connections, you will have to register it with Q_DECLARE_METATYPE() and
    qRegisterMetaType().

    \sa error(), errorString(), {Creating Custom Qt Types}
*/</doc>
