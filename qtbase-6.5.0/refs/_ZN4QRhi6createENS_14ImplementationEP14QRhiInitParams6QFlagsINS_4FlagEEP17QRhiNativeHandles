<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1718' type='static QRhi * QRhi::create(QRhi::Implementation impl, QRhiInitParams * params, QRhi::Flags flags = {}, QRhiNativeHandles * importDevice = nullptr)'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstorerhisupport.cpp' l='77' u='c' c='_ZN23QBackingStoreRhiSupport6createEv'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='5537' ll='5603' type='static QRhi * QRhi::create(QRhi::Implementation impl, QRhiInitParams * params, QRhi::Flags flags = {}, QRhiNativeHandles * importDevice = nullptr)'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='5632' u='c' c='_ZN4QRhi5probeENS_14ImplementationEP14QRhiInitParams'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='5514'>/*!
    \return a new QRhi instance with a backend for the graphics API specified
    by \a impl with the specified \a flags.

    \a params must point to an instance of one of the backend-specific
    subclasses of QRhiInitParams, such as, QRhiVulkanInitParams,
    QRhiMetalInitParams, QRhiD3D11InitParams, QRhiGles2InitParams. See these
    classes for examples on creating a QRhi.

    QRhi by design does not implement any fallback logic: if the specified API
    cannot be initialized, create() will fail, with warnings printed on the
    debug output by the backends. The clients of QRhi, for example Qt Quick,
    may however provide additional logic that allow falling back to an API
    different than what was requested, depending on the platform. If the
    intention is just to test if initialization would succeed when calling
    create() at later point, it is preferable to use probe() instead of
    create(), because with some backends probing can be implemented in a more
    lightweight manner as opposed to create(), which performs full
    initialization of the infrastructure and is wasteful if that QRhi instance
    is then thrown immediately away.

    \sa probe()
 */</doc>
