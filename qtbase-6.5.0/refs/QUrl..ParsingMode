<def f='qtbase-6.5.0/src/corelib/io/qurl.h' l='96' ll='100'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='151' c='_ZN4QUrlC1ERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='161' c='_ZN4QUrl6setUrlERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='168' c='_ZN4QUrl11fromEncodedERK10QByteArrayNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='188' c='_ZN4QUrl12setAuthorityERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='191' c='_ZN4QUrl11setUserInfoERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='194' c='_ZN4QUrl11setUserNameERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='197' c='_ZN4QUrl11setPasswordERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='200' c='_ZN4QUrl7setHostERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='206' c='_ZN4QUrl7setPathERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='211' c='_ZN4QUrl8setQueryERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='217' c='_ZN4QUrl11setFragmentERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='263' c='_ZN4QUrl14fromStringListERK5QListI7QStringENS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='507' c='_ZN11QUrlPrivate5parseERK7QStringN4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='531' c='_ZN11QUrlPrivate12setAuthorityERK7QStringxxN4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='535' c='_ZN11QUrlPrivate7setHostERK7QStringxxN4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1015' c='_ZN11QUrlPrivate12setAuthorityERK7QStringxxN4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1179' c='_ZL13parseIpFutureR7QStringPK5QCharS3_N4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1224' c='_ZL8parseIp6R7QStringPK5QCharS3_N4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1271' c='_ZN11QUrlPrivate7setHostERK7QStringxxN4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1362' c='_ZN11QUrlPrivate5parseERK7QStringN4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1838' c='_ZN4QUrlC1ERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1929' c='_ZN4QUrl6setUrlERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2022' c='_ZN4QUrl12setAuthorityERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2093' c='_ZN4QUrl11setUserInfoERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2164' c='_ZN4QUrl11setUserNameERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2227' c='_ZN4QUrl11setPasswordERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2289' c='_ZN4QUrl7setHostERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2414' c='_ZN4QUrl7setPathERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2550' c='_ZN4QUrl8setQueryERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2648' c='_ZN4QUrl11setFragmentERK7QStringNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2984' c='_ZN4QUrl11fromEncodedERK10QByteArrayNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='3645' c='_ZN4QUrl14fromStringListERK5QListI7QStringENS_11ParsingModeE'/>
<doc f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='140'>/*!
    \enum QUrl::ParsingMode

    The parsing mode controls the way QUrl parses strings.

    \value TolerantMode QUrl will try to correct some common errors in URLs.
                        This mode is useful for parsing URLs coming from sources
                        not known to be strictly standards-conforming.

    \value StrictMode Only valid URLs are accepted. This mode is useful for
                      general URL validation.

    \value DecodedMode QUrl will interpret the URL component in the fully-decoded form,
                       where percent characters stand for themselves, not as the beginning
                       of a percent-encoded sequence. This mode is only valid for the
                       setters setting components of a URL; it is not permitted in
                       the QUrl constructor, in fromEncoded() or in setUrl().
                       For more information on this mode, see the documentation for
                       \l {QUrl::ComponentFormattingOption}{QUrl::FullyDecoded}.

    In TolerantMode, the parser has the following behaviour:

    \list

    \li Spaces and &quot;%20&quot;: unencoded space characters will be accepted and will
    be treated as equivalent to &quot;%20&quot;.

    \li Single &quot;%&quot; characters: Any occurrences of a percent character &quot;%&quot; not
    followed by exactly two hexadecimal characters (e.g., &quot;13% coverage.html&quot;)
    will be replaced by &quot;%25&quot;. Note that one lone &quot;%&quot; character will trigger
    the correction mode for all percent characters.

    \li Reserved and unreserved characters: An encoded URL should only
    contain a few characters as literals; all other characters should
    be percent-encoded. In TolerantMode, these characters will be
    accepted if they are found in the URL:
            space / double-quote / &quot;&lt;&quot; / &quot;&gt;&quot; / &quot;\&quot; /
            &quot;^&quot; / &quot;`&quot; / &quot;{&quot; / &quot;|&quot; / &quot;}&quot;
    Those same characters can be decoded again by passing QUrl::DecodeReserved
    to toString() or toEncoded(). In the getters of individual components,
    those characters are often returned in decoded form.

    \endlist

    When in StrictMode, if a parsing error is found, isValid() will return \c
    false and errorString() will return a message describing the error.
    If more than one error is detected, it is undefined which error gets
    reported.

    Note that TolerantMode is not usually enough for parsing user input, which
    often contains more errors and expectations than the parser can deal with.
    When dealing with data coming directly from the user -- as opposed to data
    coming from data-transfer sources, such as other programs -- it is
    recommended to use fromUserInput().

    \sa fromUserInput(), setUrl(), toString(), toEncoded(), QUrl::FormattingOptions
*/</doc>
<use f='qtbase-6.5.0/src/network/access/qhstspolicy.h' l='29' c='_ZN11QHstsPolicyC1ERK9QDateTime6QFlagsINS_10PolicyFlagEERK7QStringN4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/network/access/qhstspolicy.h' l='37' c='_ZN11QHstsPolicy7setHostERK7QStringN4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/network/access/qhstspolicy.cpp' l='96' c='_ZN11QHstsPolicyC1ERK9QDateTime6QFlagsINS_10PolicyFlagEERK7QStringN4QUrl11ParsingModeE'/>
<use f='qtbase-6.5.0/src/network/access/qhstspolicy.cpp' l='133' c='_ZN11QHstsPolicy7setHostERK7QStringN4QUrl11ParsingModeE'/>
