<dec f='qtbase-6.5.0/src/widgets/styles/qdrawutil.h' l='60' type='void qDrawWinPanel(QPainter * p, int x, int y, int w, int h, const QPalette &amp; pal, bool sunken = false, const QBrush * fill = nullptr)'/>
<def f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='540' ll='552' type='void qDrawWinPanel(QPainter * p, int x, int y, int w, int h, const QPalette &amp; pal, bool sunken = false, const QBrush * fill = nullptr)'/>
<use f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='791' u='c' c='_Z13qDrawWinPanelP8QPainterRK5QRectRK8QPalettebPK6QBrush'/>
<doc f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='514'>/*!
    \fn void qDrawWinPanel(QPainter *painter, int x, int y, int width, int height,
                    const QPalette &amp;palette, bool        sunken,
                    const QBrush *fill)
    \relates &lt;qdrawutil.h&gt;

    Draws the Windows-style panel specified by the given point(\a x,
    \a y), \a width and \a height using the provided \a painter with a
    line width of 2 pixels. The button&apos;s interior is filled with the
    \a fill brush unless \a fill is \nullptr.

    The given \a palette specifies the shading colors.  The panel
    appears sunken if \a sunken is true, otherwise raised.

    \warning This function does not look at QWidget::style() or
    QApplication::style(). Use the drawing functions in QStyle to make
    widgets that follow the current GUI style.

    Alternatively you can use a QFrame widget and apply the
    QFrame::setFrameStyle() function to display a shaded panel:

    \snippet code/src_gui_painting_qdrawutil.cpp 3

    \sa qDrawShadePanel(), qDrawWinButton(), QStyle
*/</doc>
<use f='qtbase-6.5.0/src/widgets/styles/qwindowsstyle.cpp' l='1881' u='c' c='_ZNK13QWindowsStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qwindowsstyle.cpp' l='1886' u='c' c='_ZNK13QWindowsStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
