<inh f='qtbase-6.5.0/src/corelib/kernel/qpropertyprivate.h' l='125' c='QUntypedPropertyData'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qproperty.h' l='1245' ll='1326'/>
<fun r='_ZN23QObjectComputedProperty5ownerEv'/>
<fun r='_ZNK23QObjectComputedProperty5ownerEv'/>
<fun r='_ZN23QObjectComputedPropertyC1Ev'/>
<fun r='_ZNK23QObjectComputedProperty5valueEv'/>
<fun r='_ZNK23QObjectComputedPropertyptEv'/>
<fun r='_ZNK23QObjectComputedPropertydeEv'/>
<fun r='_ZNK23QObjectComputedPropertycvT0_Ev'/>
<fun r='_ZNK23QObjectComputedProperty10hasBindingEv'/>
<fun r='_ZN23QObjectComputedProperty14onValueChangedETL0__'/>
<fun r='_ZN23QObjectComputedProperty9subscribeETL0__'/>
<fun r='_ZN23QObjectComputedProperty11addNotifierETL0__'/>
<fun r='_ZNK23QObjectComputedProperty11bindingDataEv'/>
<fun r='_ZN23QObjectComputedProperty6notifyEv'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qproperty.cpp' l='1631'>/*!
  \class QObjectComputedProperty
  \inmodule QtCore
  \brief The QObjectComputedProperty class is a template class to help port old
         properties to the bindable property system.
  \since 6.0
  \ingroup tools

  QObjectComputedProperty is a read-only property which is recomputed on each read.
  It does not store the computed value.
  It is one of the Qt internal classes implementing \l {Qt Bindable Properties}.
  QObjectComputedProperty is usually not used directly, instead an instance of it is created by
  using the Q_OBJECT_COMPUTED_PROPERTY macro.

  See the following example.

  \snippet code/src_corelib_kernel_qproperty.cpp 5

  The rules for getters in \l {Bindable Property Getters and Setters}
  also apply for QObjectComputedProperty. Especially, the getter
  should be trivial and only return the value of the QObjectComputedProperty object.
  The callback given to the QObjectComputedProperty should usually be a private
  method which is only called by the QObjectComputedProperty.

  No setter is required or allowed, as QObjectComputedProperty is read-only.

  To correctly participate in dependency handling, QObjectComputedProperty
  has to know when its value, the result of the callback given to it, might
  have changed. Whenever a bindable property used in the callback changes,
  this happens automatically. If the result of the callback might change
  because of a change in a value which is not a bindable property,
  it is the developer&apos;s responsibility to call \c notify
  on the QObjectComputedProperty object.
  This will inform dependent properties about the potential change.

  Note that calling \c notify might trigger change handlers in dependent
  properties, which might in turn use the object the QObjectComputedProperty
  is a member of. So \c notify must not be called when in a transitional
  or invalid state.

  QObjectComputedProperty is not suitable for use with a computation that depends
  on any input that might change without notice, such as the contents of a file.

  \sa Q_OBJECT_COMPUTED_PROPERTY, QProperty, QObjectBindableProperty,
      {Qt&apos;s Property System}, {Qt Bindable Properties}
*/</doc>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer_p.h' l='34' macro='1'/>
