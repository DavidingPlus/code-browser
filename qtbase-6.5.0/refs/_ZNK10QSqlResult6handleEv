<dec f='qtbase-6.5.0/src/sql/kernel/qsqlresult.h' l='34' type='QVariant QSqlResult::handle() const'/>
<ovr f='qtbase-6.5.0/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp' l='586' c='_ZNK13QSQLiteResult6handleEv'/>
<def f='qtbase-6.5.0/src/sql/kernel/qsqlresult.cpp' l='1020' ll='1023' type='QVariant QSqlResult::handle() const'/>
<doc f='qtbase-6.5.0/src/sql/kernel/qsqlresult.cpp' l='992'>/*!
    Returns the low-level database handle for this result set
    wrapped in a QVariant or an invalid QVariant if there is no handle.

    \warning Use this with uttermost care and only if you know what you&apos;re doing.

    \warning The handle returned here can become a stale pointer if the result
    is modified (for example, if you clear it).

    \warning The handle can be NULL if the result was not executed yet.

    \warning PostgreSQL: in forward-only mode, the handle of QSqlResult can change
    after calling fetch(), fetchFirst(), fetchLast(), fetchNext(), fetchPrevious(),
    nextResult().

    The handle returned here is database-dependent, you should query the type
    name of the variant before accessing it.

    This example retrieves the handle for a sqlite result:

    \snippet code/src_sql_kernel_qsqlresult.cpp 1

    This snippet returns the handle for PostgreSQL or MySQL:

    \snippet code/src_sql_kernel_qsqlresult_snippet.cpp 2

    \sa QSqlDriver::handle()
*/</doc>
