<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.h' l='18' ll='69'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.h' l='36' c='_ZN24QOpenGLVertexArrayObject6BinderC1EPS_'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.h' l='61'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.h' l='65' c='_ZN24QOpenGLVertexArrayObjectC1ERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.h' l='65' c='_ZN24QOpenGLVertexArrayObjectaSERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.h' l='65' c='_ZN24QOpenGLVertexArrayObjectaSERKS_'/>
<size>16</size>
<smbr r='QOpenGLVertexArrayObject::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK24QOpenGLVertexArrayObject10metaObjectEv'/>
<fun r='_ZN24QOpenGLVertexArrayObject11qt_metacastEPKc'/>
<fun r='_ZN24QOpenGLVertexArrayObject11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN24QOpenGLVertexArrayObject2trEPKcS1_i'/>
<fun r='_ZN24QOpenGLVertexArrayObject18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN24QOpenGLVertexArrayObjectC1EP7QObject'/>
<fun r='_ZN24QOpenGLVertexArrayObjectD1Ev'/>
<fun r='_ZN24QOpenGLVertexArrayObject6createEv'/>
<fun r='_ZN24QOpenGLVertexArrayObject7destroyEv'/>
<fun r='_ZNK24QOpenGLVertexArrayObject9isCreatedEv'/>
<fun r='_ZNK24QOpenGLVertexArrayObject8objectIdEv'/>
<fun r='_ZN24QOpenGLVertexArrayObject4bindEv'/>
<fun r='_ZN24QOpenGLVertexArrayObject7releaseEv'/>
<fun r='_ZN24QOpenGLVertexArrayObjectC1ERKS_'/>
<fun r='_ZN24QOpenGLVertexArrayObject6d_funcEv'/>
<fun r='_ZNK24QOpenGLVertexArrayObject6d_funcEv'/>
<fun r='_ZN24QOpenGLVertexArrayObjectC1ER31QOpenGLVertexArrayObjectPrivate'/>
<use f='qtbase-6.5.0/src/opengl/qopenglpaintengine_p.h' l='287'/>
<size>16</size>
<use f='qtbase-6.5.0/src/opengl/qopengltextureglyphcache_p.h' l='141'/>
<size>16</size>
<use f='qtbase-6.5.0/src/opengl/qopengltextureblitter.cpp' l='207' c='_ZN28QOpenGLTextureBlitterPrivateC1EP21QOpenGLTextureBlitter'/>
<use f='qtbase-6.5.0/src/opengl/qopengltextureblitter.cpp' l='249'/>
<size>16</size>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.cpp' l='103' c='_ZN31QOpenGLVertexArrayObjectPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.cpp' l='103' c='_ZN31QOpenGLVertexArrayObjectPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.cpp' l='103' c='_ZNK31QOpenGLVertexArrayObjectPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.cpp' l='103' c='_ZNK31QOpenGLVertexArrayObjectPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.cpp' l='103'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.cpp' l='132' c='_ZN31QOpenGLVertexArrayObjectPrivate6createEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.cpp' l='186' c='_ZN31QOpenGLVertexArrayObjectPrivate7destroyEv'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.cpp' l='301'>/*!
    \class QOpenGLVertexArrayObject
    \brief The QOpenGLVertexArrayObject class wraps an OpenGL Vertex Array Object.
    \inmodule QtOpenGL
    \since 5.1
    \ingroup painting-3D

    A Vertex Array Object (VAO) is an OpenGL container object that encapsulates
    the state needed to specify per-vertex attribute data to the OpenGL pipeline.
    To put it another way, a VAO remembers the states of buffer objects (see
    QOpenGLBuffer) and their associated state (e.g. vertex attribute divisors).
    This allows a very easy and efficient method of switching between OpenGL buffer
    states for rendering different &quot;objects&quot; in a scene. The QOpenGLVertexArrayObject
    class is a thin wrapper around an OpenGL VAO.

    For the desktop, VAOs are supported as a core feature in OpenGL 3.0 or newer and by the
    GL_ARB_vertex_array_object for older versions. On OpenGL ES 2, VAOs are provided by
    the optional GL_OES_vertex_array_object extension. You can check the version of
    OpenGL with QOpenGLContext::surfaceFormat() and check for the presence of extensions
    with QOpenGLContext::hasExtension().

    As with the other Qt OpenGL classes, QOpenGLVertexArrayObject has a create()
    function to create the underlying OpenGL object. This is to allow the developer to
    ensure that there is a valid current OpenGL context at the time.

    Once you have successfully created a VAO the typical usage pattern is:

    \list
        \li In scene initialization function, for each visual object:
        \list
            \li Bind the VAO
            \li Set vertex data state for this visual object (vertices, normals, texture coordinates etc.)
            \li Unbind (release()) the VAO
        \endlist
        \li In render function, for each visual object:
        \list
            \li Bind the VAO (and shader program if needed)
            \li Call a glDraw*() function
            \li Unbind (release()) the VAO
        \endlist
    \endlist

    The act of binding the VAO in the render function has the effect of restoring
    all of the vertex data state setup in the initialization phase. In this way we can
    set a great deal of state when setting up a VAO and efficiently switch between
    state sets of objects to be rendered. Using VAOs also allows the OpenGL driver
    to amortise the validation checks of the vertex data.

    \note Vertex Array Objects, like all other OpenGL container objects, are specific
    to the context for which they were created and cannot be shared amongst a
    context group.

    \sa QOpenGLVertexArrayObject::Binder, QOpenGLBuffer
*/</doc>
<fun r='_ZN24QOpenGLVertexArrayObjectC1EP7QObject'/>
<fun r='_ZN24QOpenGLVertexArrayObjectC1ER31QOpenGLVertexArrayObjectPrivate'/>
<fun r='_ZN24QOpenGLVertexArrayObjectD1Ev'/>
<fun r='_ZN24QOpenGLVertexArrayObject6createEv'/>
<fun r='_ZN24QOpenGLVertexArrayObject7destroyEv'/>
<fun r='_ZNK24QOpenGLVertexArrayObject9isCreatedEv'/>
<fun r='_ZNK24QOpenGLVertexArrayObject8objectIdEv'/>
<fun r='_ZN24QOpenGLVertexArrayObject4bindEv'/>
<fun r='_ZN24QOpenGLVertexArrayObject7releaseEv'/>
