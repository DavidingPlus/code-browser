<doc f='qtbase-6.5.0/src/corelib/text/qstring.cpp' l='10321'>/*!
    \fn qlonglong QLatin1StringView::toLongLong(bool *ok, int base) const
    \fn qulonglong QLatin1StringView::toULongLong(bool *ok, int base) const
    \fn int QLatin1StringView::toInt(bool *ok, int base) const
    \fn uint QLatin1StringView::toUInt(bool *ok, int base) const
    \fn long QLatin1StringView::toLong(bool *ok, int base) const
    \fn ulong QLatin1StringView::toULong(bool *ok, int base) const
    \fn short QLatin1StringView::toShort(bool *ok, int base) const
    \fn ushort QLatin1StringView::toUShort(bool *ok, int base) const

    \since 6.4

    Returns this QLatin1StringView converted to a corresponding numeric value using
    base \a base, which is ten by default. Bases 0 and 2 through 36 are supported,
    using letters for digits beyond 9; A is ten, B is eleven and so on.

    If \a base is 0, the base is determined automatically using the following
    rules (in this order), if the Latin-1 string view begins with:

    \list
        \li \c &quot;0x&quot;, the rest of it is read as hexadecimal (base 16)
        \li \c &quot;0b&quot;, the rest of it is read as binary (base 2)
        \li \c &quot;0&quot;, the rest of it is read as octal (base 8)
        \li otherwise it is read as decimal
    \endlist

    Returns 0 if the conversion fails.

    If \a ok is not \nullptr, failure is reported by setting *\a{ok}
    to \c false, and success by setting *\a{ok} to \c true.

//! [latin1-numeric-conversion-note]
    \note The conversion of the number is performed in the default C locale,
    regardless of the user&apos;s locale. Use QLocale to perform locale-aware
    conversions between numbers and strings.

    This function ignores leading and trailing spacing characters.
//! [latin1-numeric-conversion-note]

    \note Support for the &quot;0b&quot; prefix was added in Qt 6.4.
*/</doc>
