<use f='qtbase-6.5.0/src/corelib/thread/qfuture.h' l='271'/>
<inh f='qtbase-6.5.0/src/corelib/thread/qfuturewatcher.h' l='18' c='QFutureWatcherBase'/>
<def f='qtbase-6.5.0/src/corelib/thread/qfuturewatcher.h' l='99' ll='172'/>
<use f='qtbase-6.5.0/src/corelib/thread/qfuturewatcher.h' l='175' c='_ZN14QFutureWatcher9setFutureERK7QFutureIT_E'/>
<fun r='_ZN14QFutureWatcherC1EP7QObject'/>
<fun r='_ZN14QFutureWatcherD1Ev'/>
<fun r='_ZN14QFutureWatcher9setFutureERK7QFutureIT_E'/>
<fun r='_ZNK14QFutureWatcher6futureEv'/>
<fun r='_ZNK14QFutureWatcher6resultEv'/>
<fun r='_ZNK14QFutureWatcher8resultAtEi'/>
<mbr r='QFutureWatcher::m_future' t='QFuture&lt;T&gt;'/>
<fun r='_ZNK14QFutureWatcher15futureInterfaceEv'/>
<fun r='_ZN14QFutureWatcher15futureInterfaceEv'/>
<fun r='_ZN14QFutureWatcher9setFutureERK7QFutureIT_E'/>
<doc f='qtbase-6.5.0/src/corelib/thread/qfuturewatcher.cpp' l='14'>/*! \class QFutureWatcher
    \reentrant
    \since 4.4

    \inmodule QtCore
    \ingroup thread

    \brief The QFutureWatcher class allows monitoring a QFuture using signals
    and slots.

    QFutureWatcher provides information and notifications about a QFuture. Use
    the setFuture() function to start watching a particular QFuture. The
    future() function returns the future set with setFuture().

    For convenience, several of QFuture&apos;s functions are also available in
    QFutureWatcher: progressValue(), progressMinimum(), progressMaximum(),
    progressText(), isStarted(), isFinished(), isRunning(), isCanceled(),
    isSuspending(), isSuspended(), waitForFinished(), result(), and resultAt().
    The cancel(), setSuspended(), suspend(), resume(), and toggleSuspended() functions
    are slots in QFutureWatcher.

    Status changes are reported via the started(), finished(), canceled(),
    suspending(), suspended(), resumed(), resultReadyAt(), and resultsReadyAt()
    signals. Progress information is provided from the progressRangeChanged(),
    void progressValueChanged(), and progressTextChanged() signals.

    Throttling control is provided by the setPendingResultsLimit() function.
    When the number of pending resultReadyAt() or resultsReadyAt() signals
    exceeds the limit, the computation represented by the future will be
    throttled automatically. The computation will resume once the number of
    pending signals drops below the limit.

    Example: Starting a computation and getting a slot callback when it&apos;s
    finished:

    \snippet code/src_corelib_thread_qfuturewatcher.cpp 0

    Be aware that not all running asynchronous computations can be canceled or
    suspended. For example, the future returned by QtConcurrent::run() cannot be
    canceled; but the future returned by QtConcurrent::mappedReduced() can.

    QFutureWatcher&lt;void&gt; is specialized to not contain any of the result
    fetching functions. Any QFuture&lt;T&gt; can be watched by a
    QFutureWatcher&lt;void&gt; as well. This is useful if only status or progress
    information is needed; not the actual result data.

    \sa QFuture, {Qt Concurrent}
*/</doc>
