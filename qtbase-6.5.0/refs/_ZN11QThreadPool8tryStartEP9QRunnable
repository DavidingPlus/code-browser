<dec f='qtbase-6.5.0/src/corelib/thread/qthreadpool.h' l='37' type='bool QThreadPool::tryStart(QRunnable * runnable)'/>
<use f='qtbase-6.5.0/src/concurrent/qtconcurrentthreadengine.cpp' l='203' u='c' c='_ZN12QtConcurrent16ThreadEngineBase19startThreadInternalEv'/>
<def f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='551' ll='562' type='bool QThreadPool::tryStart(QRunnable * runnable)'/>
<doc f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='535'>/*!
    Attempts to reserve a thread to run \a runnable.

    If no threads are available at the time of calling, then this function
    does nothing and returns \c false.  Otherwise, \a runnable is run immediately
    using one available thread and this function returns \c true.

    Note that on success the thread pool takes ownership of the \a runnable if
    \l{QRunnable::autoDelete()}{runnable-&gt;autoDelete()} returns \c true,
    and the \a runnable will be deleted automatically by the thread
    pool after the \l{QRunnable::run()}{runnable-&gt;run()} returns. If
    \l{QRunnable::autoDelete()}{runnable-&gt;autoDelete()} returns \c false,
    ownership of \a runnable remains with the caller. Note that
    changing the auto-deletion on \a runnable after calling this
    function results in undefined behavior.
*/</doc>
