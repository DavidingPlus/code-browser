<inh f='qtbase-6.5.0/src/widgets/widgets/qabstractscrollarea.h' l='19' c='QAbstractScrollArea'/>
<def f='qtbase-6.5.0/src/widgets/widgets/qscrollarea.h' l='16' ll='55'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qscrollarea.h' l='54' c='_ZN11QScrollAreaC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qscrollarea.h' l='54' c='_ZN11QScrollAreaaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qscrollarea.h' l='54' c='_ZN11QScrollAreaaSERKS_'/>
<size>40</size>
<smbr r='QScrollArea::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK11QScrollArea10metaObjectEv'/>
<fun r='_ZN11QScrollArea11qt_metacastEPKc'/>
<fun r='_ZN11QScrollArea11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN11QScrollArea2trEPKcS1_i'/>
<fun r='_ZN11QScrollArea18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN11QScrollAreaC1EP7QWidget'/>
<fun r='_ZN11QScrollAreaD1Ev'/>
<fun r='_ZNK11QScrollArea6widgetEv'/>
<fun r='_ZN11QScrollArea9setWidgetEP7QWidget'/>
<fun r='_ZN11QScrollArea10takeWidgetEv'/>
<fun r='_ZNK11QScrollArea15widgetResizableEv'/>
<fun r='_ZN11QScrollArea18setWidgetResizableEb'/>
<fun r='_ZNK11QScrollArea8sizeHintEv'/>
<fun r='_ZN11QScrollArea18focusNextPrevChildEb'/>
<fun r='_ZNK11QScrollArea9alignmentEv'/>
<fun r='_ZN11QScrollArea12setAlignmentE6QFlagsIN2Qt13AlignmentFlagEE'/>
<fun r='_ZN11QScrollArea13ensureVisibleEiiii'/>
<fun r='_ZN11QScrollArea19ensureWidgetVisibleEP7QWidgetii'/>
<fun r='_ZN11QScrollAreaC1ER18QScrollAreaPrivateP7QWidget'/>
<fun r='_ZN11QScrollArea5eventEP6QEvent'/>
<fun r='_ZN11QScrollArea11eventFilterEP7QObjectP6QEvent'/>
<fun r='_ZN11QScrollArea11resizeEventEP12QResizeEvent'/>
<fun r='_ZN11QScrollArea16scrollContentsByEii'/>
<fun r='_ZNK11QScrollArea16viewportSizeHintEv'/>
<fun r='_ZN11QScrollArea6d_funcEv'/>
<fun r='_ZNK11QScrollArea6d_funcEv'/>
<fun r='_ZN11QScrollAreaC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/accessible/complexwidgets.cpp' l='525' c='_ZN21QAccessibleScrollAreaC1EP7QWidget'/>
<size>40</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qscrollarea_p.h' l='29' c='_ZN18QScrollAreaPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qscrollarea_p.h' l='29' c='_ZN18QScrollAreaPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qscrollarea_p.h' l='29' c='_ZNK18QScrollAreaPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qscrollarea_p.h' l='29' c='_ZNK18QScrollAreaPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qscrollarea_p.h' l='29'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qscrollarea.cpp' l='141' c='_ZN18QScrollAreaPrivate20updateWidgetPositionEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qscrollarea.cpp' l='151' c='_ZN18QScrollAreaPrivate16updateScrollBarsEv'/>
<size>40</size>
<doc f='qtbase-6.5.0/src/widgets/widgets/qscrollarea.cpp' l='18'>/*!
    \class QScrollArea

    \brief The QScrollArea class provides a scrolling view onto
    another widget.

    \ingroup basicwidgets
    \inmodule QtWidgets

    A scroll area is used to display the contents of a child widget
    within a frame. If the widget exceeds the size of the frame, the
    view can provide scroll bars so that the entire area of the child
    widget can be viewed. The child widget must be specified with
    setWidget(). For example:

    \snippet code/src_gui_widgets_qscrollarea.cpp 0

    The code above creates a scroll area (shown in the images below)
    containing an image label. When scaling the image, the scroll area
    can provide the necessary scroll bars:

    \table
    \row
    \li \inlineimage qscrollarea-noscrollbars.png
    \li \inlineimage qscrollarea-onescrollbar.png
    \li \inlineimage qscrollarea-twoscrollbars.png
    \endtable

    The scroll bars appearance depends on the currently set \l
    {Qt::ScrollBarPolicy}{scroll bar policies}. You can control the
    appearance of the scroll bars using the inherited functionality
    from QAbstractScrollArea.

    For example, you can set the
    QAbstractScrollArea::horizontalScrollBarPolicy and
    QAbstractScrollArea::verticalScrollBarPolicy properties. Or if you
    want the scroll bars to adjust dynamically when the contents of
    the scroll area changes, you can use the \l
    {QAbstractScrollArea::horizontalScrollBar()}{horizontalScrollBar()}
    and \l
    {QAbstractScrollArea::verticalScrollBar()}{verticalScrollBar()}
    functions (which enable you to access the scroll bars) and set the
    scroll bars&apos; values whenever the scroll area&apos;s contents change,
    using the QScrollBar::setValue() function.

    You can retrieve the child widget using the widget() function. The
    view can be made to be resizable with the setWidgetResizable()
    function. The alignment of the widget can be specified with
    setAlignment().

    Two convenience functions ensureVisible() and
    ensureWidgetVisible() ensure a certain region of the contents is
    visible inside the viewport, by scrolling the contents if
    necessary.

    \section1 Size Hints and Layouts

    When using a scroll area to display the contents of a custom
    widget, it is important to ensure that the
    \l{QWidget::sizeHint}{size hint} of the child widget is set to a
    suitable value. If a standard QWidget is used for the child
    widget, it may be necessary to call QWidget::setMinimumSize() to
    ensure that the contents of the widget are shown correctly within
    the scroll area.

    If a scroll area is used to display the contents of a widget that
    contains child widgets arranged in a layout, it is important to
    realize that the size policy of the layout will also determine the
    size of the widget. This is especially useful to know if you intend
    to dynamically change the contents of the layout. In such cases,
    setting the layout&apos;s \l{QLayout::sizeConstraint}{size constraint}
    property to one which provides constraints on the minimum and/or
    maximum size of the layout (e.g., QLayout::SetMinAndMaxSize) will
    cause the size of the scroll area to be updated whenever the
    contents of the layout changes.

    For a complete example using the QScrollArea class, see the \l
    {widgets/imageviewer}{Image Viewer} example. The example shows how
    to combine QLabel and QScrollArea to display an image.

    \sa QAbstractScrollArea, QScrollBar, {Image Viewer Example}
*/</doc>
<fun r='_ZN11QScrollAreaC1EP7QWidget'/>
<fun r='_ZN11QScrollAreaC1ER18QScrollAreaPrivateP7QWidget'/>
<fun r='_ZN11QScrollAreaD1Ev'/>
<fun r='_ZNK11QScrollArea6widgetEv'/>
<fun r='_ZN11QScrollArea9setWidgetEP7QWidget'/>
<fun r='_ZN11QScrollArea10takeWidgetEv'/>
<fun r='_ZN11QScrollArea5eventEP6QEvent'/>
<fun r='_ZN11QScrollArea11eventFilterEP7QObjectP6QEvent'/>
<fun r='_ZN11QScrollArea11resizeEventEP12QResizeEvent'/>
<fun r='_ZN11QScrollArea16scrollContentsByEii'/>
<fun r='_ZNK11QScrollArea15widgetResizableEv'/>
<fun r='_ZN11QScrollArea18setWidgetResizableEb'/>
<fun r='_ZNK11QScrollArea8sizeHintEv'/>
<fun r='_ZNK11QScrollArea16viewportSizeHintEv'/>
<fun r='_ZN11QScrollArea18focusNextPrevChildEb'/>
<fun r='_ZN11QScrollArea13ensureVisibleEiiii'/>
<fun r='_ZN11QScrollArea19ensureWidgetVisibleEP7QWidgetii'/>
<fun r='_ZN11QScrollArea12setAlignmentE6QFlagsIN2Qt13AlignmentFlagEE'/>
<fun r='_ZNK11QScrollArea9alignmentEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qtoolbox.cpp' l='60'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qtoolbox.cpp' l='323' c='_ZN8QToolBox10insertItemEiP7QWidgetRK5QIconRK7QString'/>
<size>40</size>
