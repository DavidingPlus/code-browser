<def f='qtbase-6.5.0/src/corelib/serialization/qcborcommon.h' l='31' ll='55'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborcommon.h' l='57' c='_Zeq8QCborTag14QCborKnownTags'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborcommon.h' l='58' c='_Zeq14QCborKnownTags8QCborTag'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborcommon.h' l='59' c='_Zne8QCborTag14QCborKnownTags'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborcommon.h' l='60' c='_Zne14QCborKnownTags8QCborTag'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborcommon.h' l='95' c='_Zls6QDebug14QCborKnownTags'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.h' l='124' c='_ZN10QCborValueC1E14QCborKnownTagsRKS_'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.h' l='47' c='_ZN17QCborStreamWriter6appendE14QCborKnownTags'/>
<doc f='qtbase-6.5.0/src/corelib/serialization/qcborcommon.cpp' l='94'>/*!
   \enum QCborKnownTags
   \relates &lt;QtCborCommon&gt;

   This enum contains a list of CBOR tags, known at the time of the Qt
   implementation. This list is not meant to be complete and contains only
   tags that are either backed by an RFC or specifically used by the Qt
   implementation.

   The authoritative list is maintained by IANA in the
   \l{https://www.iana.org/assignments/cbor-tags/cbor-tags.xhtml}{CBOR tag
   registry}.

   \value DateTimeString        A date and time string, formatted according to RFC 3339, as refined
                                by RFC 4287. It is the same format as Qt::ISODate and
                                Qt::ISODateWithMs.
   \value UnixTime_t            A numerical representation of seconds elapsed since
                                1970-01-01T00:00Z.
   \value PositiveBignum        A positive number of arbitrary length, encoded as a byte array in
                                network byte order. For example, the number 2\sup{64} is represented by
                                a byte array containing the byte value 0x01 followed by 8 zero bytes.
   \value NegativeBignum        A negative number of arbitrary length, encoded as the absolute value
                                of that number, minus one. For example, a byte array containing
                                byte value 0x02 followed by 8 zero bytes represents the number
                                -2\sup{65} - 1.
   \value Decimal               A decimal fraction, encoded as an array of two integers: the first
                                is the exponent of the power of 10, the second the integral
                                mantissa. The value 273.15 would be encoded as array \c{[-2, 27315]}.
   \value Bigfloat              Similar to Decimal, but the exponent is a power of 2 instead.
   \value COSE_Encrypt0         An \c Encrypt0 map as specified by \l{RFC 8152}
                                (CBOR Object Signing and Encryption).
   \value COSE_Mac0             A \c Mac0 map as specified by \l{RFC 8152}
                                (CBOR Object Signing and Encryption).
   \value COSE_Sign1            A \c Sign1 map as specified by \l{RFC 8152}
                                (CBOR Object Signing and Encryption).
   \value ExpectedBase64url     Indicates that the byte array should be encoded using Base64url
                                if the stream is converted to JSON.
   \value ExpectedBase64        Indicates that the byte array should be encoded using Base64
                                if the stream is converted to JSON.
   \value ExpectedBase16        Indicates that the byte array should be encoded using Base16 (hex)
                                if the stream is converted to JSON.
   \value EncodedCbor           Indicates that the byte array contains a CBOR stream.
   \value Url                   Indicates that the string contains a URL.
   \value Base64url             Indicates that the string contains data encoded using Base64url.
   \value Base64                Indicates that the string contains data encoded using Base64.
   \value RegularExpression     Indicates that the string contains a Perl-Compatible Regular
                                Expression pattern.
   \value MimeMessage           Indicates that the string contains a MIME message (according to
                                \l{RFC 2045}).
   \value Uuid                  Indicates that the byte array contains a UUID.
   \value COSE_Encrypt          An \c Encrypt map as specified by \l{RFC 8152}
                                (CBOR Object Signing and Encryption).
   \value COSE_Mac              A \c Mac map as specified by \l{RFC 8152}
                                (CBOR Object Signing and Encryption).
   \value COSE_Sign             A \c Sign map as specified by \l{RFC 8152}
                                (CBOR Object Signing and Encryption).
   \value Signature             No change in interpretation; this tag can be used as the outermost
                                tag in a CBOR stream as the file header.

   The following tags are interpreted by QCborValue during decoding and will
   produce objects with extended Qt types, and it will use those tags when
   encoding the same extended types.

   \value DateTimeString        \l QDateTime
   \value UnixTime_t            \l QDateTime (only in decoding)
   \value Url                   \l QUrl
   \value Uuid                  \l QUuid

   Additionally, if a QCborValue containing a QByteArray is tagged using one of
   \c ExpectedBase64url, \c ExpectedBase64 or \c ExpectedBase16, QCborValue
   will use the expected encoding when converting to JSON (see
   QCborValue::toJsonValue).

   \sa QCborTag, QCborStreamWriter::append(QCborTag),
       QCborStreamReader::isTag(), QCborStreamReader::toTag(),
       QCborValue::isTag(), QCborValue::tag()
 */</doc>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='2928' c='_Z14qt_cbor_tag_id8QCborTag'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='3071' c='_Zls6QDebug14QCborKnownTags'/>
