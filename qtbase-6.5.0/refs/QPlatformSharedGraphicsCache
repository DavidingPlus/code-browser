<use f='qtbase-6.5.0/src/gui/kernel/qplatformintegration.h' l='115' c='_ZNK20QPlatformIntegration33createPlatformSharedGraphicsCacheEPKc'/>
<use f='qtbase-6.5.0/src/gui/kernel/qplatformintegration.cpp' l='296' c='_ZNK20QPlatformIntegration33createPlatformSharedGraphicsCacheEPKc'/>
<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/gui/kernel/qplatformsharedgraphicscache.h' l='22' ll='62'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/gui/kernel/qplatformsharedgraphicscache.cpp' l='8'>/*!
    \class QPlatformSharedGraphicsCache
    \since 5.0
    \internal
    \preliminary
    \ingroup qpa
    \brief The QPlatformSharedGraphicsCache is an abstraction of a cross-process graphics cache.

    If supported, it is possible to retrieve a QPlatformSharedGraphicsCache object from the
    platform integration. This is typically used to store graphical items which should be shared
    between several processes.

    Items are requested from the cache by calling requestItems(). If the cache contains the
    requested items in the requested cache, the itemsAvailable() signal is emitted with the ID of
    the graphical buffer and each item&apos;s coordinates inside the buffer. Before requesting items
    from a cache, the user must call ensureCacheInitialized() to set the correct parameters for
    the cache.

    If the cache does not yet contain the requested items, it will emit a similar itemsMissing()
    signal. The client can then call updateItems() with rasterizations of the items and they will be
    entered into the shared cache. As the items are rendered into the cache, itemsAvailable() signals
    will be emitted for each of the items which have previously been requested and which have not
    yet been reported as ready.

    Using beginRequestBatch() and endRequestBatch(), it&apos;s possible to batch glyph requests, which
    could improve performance in cases where you have a sequence of requests pending, and you
    do not need the results during this sequence.
*/</doc>
<smbr r='QPlatformSharedGraphicsCache::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK28QPlatformSharedGraphicsCache10metaObjectEv'/>
<fun r='_ZN28QPlatformSharedGraphicsCache11qt_metacastEPKc'/>
<fun r='_ZN28QPlatformSharedGraphicsCache11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN28QPlatformSharedGraphicsCache2trEPKcS1_i'/>
<fun r='_ZN28QPlatformSharedGraphicsCache18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN28QPlatformSharedGraphicsCacheC1EP7QObject'/>
<fun r='_ZN28QPlatformSharedGraphicsCache17beginRequestBatchEv'/>
<fun r='_ZN28QPlatformSharedGraphicsCache22ensureCacheInitializedERK10QByteArrayNS_10BufferTypeENS_11PixelFormatE'/>
<fun r='_ZN28QPlatformSharedGraphicsCache12requestItemsERK10QByteArrayRK5QListIjE'/>
<fun r='_ZN28QPlatformSharedGraphicsCache11insertItemsERK10QByteArrayRK5QListIjERKS3_I6QImageE'/>
<fun r='_ZN28QPlatformSharedGraphicsCache12releaseItemsERK10QByteArrayRK5QListIjE'/>
<fun r='_ZN28QPlatformSharedGraphicsCache15endRequestBatchEv'/>
<fun r='_ZNK28QPlatformSharedGraphicsCache19requestBatchStartedEv'/>
<fun r='_ZN28QPlatformSharedGraphicsCache18textureIdForBufferEPv'/>
<fun r='_ZN28QPlatformSharedGraphicsCache15referenceBufferEPv'/>
<fun r='_ZN28QPlatformSharedGraphicsCache17dereferenceBufferEPv'/>
<fun r='_ZN28QPlatformSharedGraphicsCache12sizeOfBufferEPv'/>
<fun r='_ZN28QPlatformSharedGraphicsCache17eglImageForBufferEPv'/>
<fun r='_ZN28QPlatformSharedGraphicsCache12itemsMissingERK10QByteArrayRK5QListIjE'/>
<fun r='_ZN28QPlatformSharedGraphicsCache14itemsAvailableERK10QByteArrayPvRK5QListIjERKS4_I6QPointE'/>
<fun r='_ZN28QPlatformSharedGraphicsCache16itemsInvalidatedERK10QByteArrayRK5QListIjE'/>
<fun r='_ZN28QPlatformSharedGraphicsCache12itemsUpdatedERK10QByteArrayPvRK5QListIjERKS4_I6QPointE'/>
