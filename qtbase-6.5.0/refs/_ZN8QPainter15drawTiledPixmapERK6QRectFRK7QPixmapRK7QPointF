<dec f='qtbase-6.5.0/src/gui/painting/qpainter.h' l='306' type='void QPainter::drawTiledPixmap(const QRectF &amp; rect, const QPixmap &amp; pm, const QPointF &amp; offset = QPointF())'/>
<use f='qtbase-6.5.0/src/gui/painting/qpainter.h' l='710' u='c' c='_ZN8QPainter15drawTiledPixmapERK5QRectRK7QPixmapRK6QPoint'/>
<use f='qtbase-6.5.0/src/gui/painting/qpainter.h' l='715' u='c' c='_ZN8QPainter15drawTiledPixmapEiiiiRK7QPixmapii'/>
<use f='qtbase-6.5.0/src/gui/image/qpicture.cpp' l='666' u='c' c='_ZN8QPicture4execEP8QPainterR11QDataStreami'/>
<def f='qtbase-6.5.0/src/gui/painting/qpainter.cpp' l='6378' ll='6458' type='void QPainter::drawTiledPixmap(const QRectF &amp; r, const QPixmap &amp; pixmap, const QPointF &amp; sp = QPointF())'/>
<doc f='qtbase-6.5.0/src/gui/painting/qpainter.cpp' l='6355'>/*!
    \fn void QPainter::drawTiledPixmap(const QRectF &amp;rectangle, const QPixmap &amp;pixmap, const QPointF &amp;position)

    Draws a tiled \a pixmap, inside the given \a rectangle with its
    origin at the given \a position.

    Calling drawTiledPixmap() is similar to calling drawPixmap()
    several times to fill (tile) an area with a pixmap, but is
    potentially much more efficient depending on the underlying window
    system.

    drawTiledPixmap() will produce the same visual tiling pattern on
    high-dpi displays (with devicePixelRatio &gt; 1), compared to normal-
    dpi displays. Set the devicePixelRatio on the \a pixmap to control
    the tile size. For example, setting it to 2 halves the tile width
    and height (on both 1x and 2x displays), and produces high-resolution
    output on 2x displays.

    The \a position offset is always in the painter coordinate system,
    indepentent of display devicePixelRatio.

    \sa drawPixmap()
*/</doc>
