<dec f='qtbase-6.5.0/src/corelib/io/qurl.h' l='151' type='void QUrl::QUrl(const QString &amp; url, QUrl::ParsingMode mode = TolerantMode)'/>
<def f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1838' ll='1841' type='void QUrl::QUrl(const QString &amp; url, QUrl::ParsingMode parsingMode = TolerantMode)'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2986' u='c' c='_ZN4QUrl11fromEncodedERK10QByteArrayNS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='3650' u='c' c='_ZN4QUrl14fromStringListERK5QListI7QStringENS_11ParsingModeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='3759' u='c' c='_ZN4QUrl13fromUserInputERK7QStringS2_6QFlagsINS_25UserInputResolutionOptionEE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='3776' u='c' c='_ZN4QUrl13fromUserInputERK7QStringS2_6QFlagsINS_25UserInputResolutionOptionEE'/>
<doc f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1794'>/*!
    Constructs a URL by parsing \a url. Note this constructor expects a proper
    URL or URL-Reference and will not attempt to guess intent. For example, the
    following declaration:

    \snippet code/src_corelib_io_qurl.cpp constructor-url-reference

    Will construct a valid URL but it may not be what one expects, as the
    scheme() part of the input is missing. For a string like the above,
    applications may want to use fromUserInput(). For this constructor or
    setUrl(), the following is probably what was intended:

    \snippet code/src_corelib_io_qurl.cpp constructor-url

    QUrl will automatically percent encode
    all characters that are not allowed in a URL and decode the percent-encoded
    sequences that represent an unreserved character (letters, digits, hyphens,
    underscores, dots and tildes). All other characters are left in their
    original forms.

    Parses the \a url using the parser mode \a parsingMode. In TolerantMode
    (the default), QUrl will correct certain mistakes, notably the presence of
    a percent character (&apos;%&apos;) not followed by two hexadecimal digits, and it
    will accept any character in any position. In StrictMode, encoding mistakes
    will not be tolerated and QUrl will also check that certain forbidden
    characters are not present in unencoded form. If an error is detected in
    StrictMode, isValid() will return false. The parsing mode DecodedMode is not
    permitted in this context.

    Example:

    \snippet code/src_corelib_io_qurl.cpp 0

    To construct a URL from an encoded string, you can also use fromEncoded():

    \snippet code/src_corelib_io_qurl.cpp 1

    Both functions are equivalent and, in Qt 5, both functions accept encoded
    data. Usually, the choice of the QUrl constructor or setUrl() versus
    fromEncoded() will depend on the source data: the constructor and setUrl()
    take a QString, whereas fromEncoded takes a QByteArray.

    \sa setUrl(), fromEncoded(), TolerantMode
*/</doc>
<use f='qtbase-6.5.0/src/gui/text/qtextcursor.cpp' l='2346' u='c' c='_ZN11QTextCursor11insertImageERK6QImageRK7QString'/>
<use f='qtbase-6.5.0/src/gui/text/qtextdocument.cpp' l='2256' u='c' c='_ZN13QTextDocument12loadResourceEiRK4QUrl'/>
<use f='qtbase-6.5.0/src/gui/text/qtexthtmlparser.cpp' l='1460' u='c' c='_ZN19QTextHtmlParserNode20applyBackgroundImageERK7QStringPK13QTextDocument'/>
<use f='qtbase-6.5.0/src/gui/text/qtexthtmlparser.cpp' l='1918' u='c' c='_ZN15QTextHtmlParser16importStyleSheetERK7QString'/>
<use f='qtbase-6.5.0/src/gui/text/qtextimagehandler.cpp' l='41' u='c' c='_ZL24fromLocalfileOrResources7QString'/>
<use f='qtbase-6.5.0/src/gui/text/qtextmarkdownwriter.cpp' l='492' u='c' c='_ZN19QTextMarkdownWriter10writeBlockERK10QTextBlockbbb'/>
<use f='qtbase-6.5.0/src/gui/text/qtextodfwriter.cpp' l='425' u='c' c='_ZNK14QTextOdfWriter20writeInlineCharacterER16QXmlStreamWriterRK13QTextFragment'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyhttpimpl.cpp' l='1295' u='c' c='_ZN28QNetworkReplyHttpImplPrivate16checkForRedirectEi'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyhttpimpl.cpp' l='1297' u='c' c='_ZN28QNetworkReplyHttpImplPrivate16checkForRedirectEi'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy_generic.cpp' l='84' u='c' c='_ZN20QNetworkProxyFactory19systemProxyForQueryERK18QNetworkProxyQuery'/>
<use f='qtbase-6.5.0/src/plugins/platformthemes/xdgdesktopportal/qxdgdesktopportalfiledialog.cpp' l='329' u='c' c='_ZNK27QXdgDesktopPortalFileDialog9directoryEv'/>
<use f='qtbase-6.5.0/src/plugins/platformthemes/xdgdesktopportal/qxdgdesktopportalfiledialog.cpp' l='353' u='c' c='_ZNK27QXdgDesktopPortalFileDialog13selectedFilesEv'/>
<use f='qtbase-6.5.0/src/tools/androiddeployqt/main.cpp' l='2083' u='c' c='_Z11scanImportsP7OptionsP4QSetI7QStringE'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='1865' u='c' c='_ZN19QFileDialogComboBox10setHistoryERK5QListI7QStringE'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='2838' u='c' c='_ZN18QFileDialogPrivate19restoreFromSettingsEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='2979' u='c' c='_ZN18QFileDialogPrivate13createWidgetsEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='4010' u='c' c='_ZN19QFileDialogComboBox9showPopupEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qtextbrowser.cpp' l='120' u='c' c='_ZNK19QTextBrowserPrivate10resolveUrlERK7QString'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qwidgettextcontrol.cpp' l='2950' u='c' c='_ZN25QWidgetTextControlPrivate23activateLinkUnderCursorE7QString'/>
