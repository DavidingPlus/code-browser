<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='7206' type='int sqlite3_table_column_metadata(sqlite3 * db, const char * zDbName, const char * zTableName, const char * zColumnName, const char ** pzDataType, const char ** pzCollSeq, int * pNotNull, int * pPrimaryKey, int * pAutoinc)'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='132975'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='177743' ll='177856' type='int sqlite3_table_column_metadata(sqlite3 * db, const char * zDbName, const char * zTableName, const char * zColumnName, const char ** pzDataType, const char ** pzCollSeq, int * pNotNull, int * pPrimaryKey, int * pAutoinc)'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='183717' u='c' c='fts3SetHasStat'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='204916' u='c' c='rtreeQueryStat1'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='7137'>/*
** CAPI3REF: Extract Metadata About A Column Of A Table
** METHOD: sqlite3
**
** ^(The sqlite3_table_column_metadata(X,D,T,C,....) routine returns
** information about column C of table T in database D
** on [database connection] X.)^  ^The sqlite3_table_column_metadata()
** interface returns SQLITE_OK and fills in the non-NULL pointers in
** the final five arguments with appropriate values if the specified
** column exists.  ^The sqlite3_table_column_metadata() interface returns
** SQLITE_ERROR if the specified column does not exist.
** ^If the column-name parameter to sqlite3_table_column_metadata() is a
** NULL pointer, then this routine simply checks for the existence of the
** table and returns SQLITE_OK if the table exists and SQLITE_ERROR if it
** does not.  If the table name parameter T in a call to
** sqlite3_table_column_metadata(X,D,T,C,...) is NULL then the result is
** undefined behavior.
**
** ^The column is identified by the second, third and fourth parameters to
** this function. ^(The second parameter is either the name of the database
** (i.e. &quot;main&quot;, &quot;temp&quot;, or an attached database) containing the specified
** table or NULL.)^ ^If it is NULL, then all attached databases are searched
** for the table using the same algorithm used by the database engine to
** resolve unqualified table references.
**
** ^The third and fourth parameters to this function are the table and column
** name of the desired column, respectively.
**
** ^Metadata is returned by writing to the memory locations passed as the 5th
** and subsequent parameters to this function. ^Any of these arguments may be
** NULL, in which case the corresponding element of metadata is omitted.
**
** ^(&lt;blockquote&gt;
** &lt;table border=&quot;1&quot;&gt;
** &lt;tr&gt;&lt;th&gt; Parameter &lt;th&gt; Output&lt;br&gt;Type &lt;th&gt;  Description
**
** &lt;tr&gt;&lt;td&gt; 5th &lt;td&gt; const char* &lt;td&gt; Data type
** &lt;tr&gt;&lt;td&gt; 6th &lt;td&gt; const char* &lt;td&gt; Name of default collation sequence
** &lt;tr&gt;&lt;td&gt; 7th &lt;td&gt; int         &lt;td&gt; True if column has a NOT NULL constraint
** &lt;tr&gt;&lt;td&gt; 8th &lt;td&gt; int         &lt;td&gt; True if column is part of the PRIMARY KEY
** &lt;tr&gt;&lt;td&gt; 9th &lt;td&gt; int         &lt;td&gt; True if column is [AUTOINCREMENT]
** &lt;/table&gt;
** &lt;/blockquote&gt;)^
**
** ^The memory pointed to by the character pointers returned for the
** declaration type and collation sequence is valid until the next
** call to any SQLite API function.
**
** ^If the specified table is actually a view, an [error code] is returned.
**
** ^If the specified column is &quot;rowid&quot;, &quot;oid&quot; or &quot;_rowid_&quot; and the table
** is not a [WITHOUT ROWID] table and an
** [INTEGER PRIMARY KEY] column has been explicitly declared, then the output
** parameters are set for the explicitly declared column. ^(If there is no
** [INTEGER PRIMARY KEY] column, then the outputs
** for the [rowid] are set as follows:
**
** &lt;pre&gt;
**     data type: &quot;INTEGER&quot;
**     collation sequence: &quot;BINARY&quot;
**     not null: 0
**     primary key: 1
**     auto increment: 0
** &lt;/pre&gt;)^
**
** ^This function causes all database schemas to be read from disk and
** parsed, if that has not already been done, and returns an error if
** any errors are encountered while loading the schema.
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='177739'>/*
** Return meta information about a specific column of a database table.
** See comment in sqlite3.h (sqlite.h.in) for details.
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='6900' type='int sqlite3_table_column_metadata(sqlite3 * db, const char * zDbName, const char * zTableName, const char * zColumnName, const char ** pzDataType, const char ** pzCollSeq, int * pNotNull, int * pPrimaryKey, int * pAutoinc)'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='6831'>/*
** CAPI3REF: Extract Metadata About A Column Of A Table
** METHOD: sqlite3
**
** ^(The sqlite3_table_column_metadata(X,D,T,C,....) routine returns
** information about column C of table T in database D
** on [database connection] X.)^  ^The sqlite3_table_column_metadata()
** interface returns SQLITE_OK and fills in the non-NULL pointers in
** the final five arguments with appropriate values if the specified
** column exists.  ^The sqlite3_table_column_metadata() interface returns
** SQLITE_ERROR if the specified column does not exist.
** ^If the column-name parameter to sqlite3_table_column_metadata() is a
** NULL pointer, then this routine simply checks for the existence of the
** table and returns SQLITE_OK if the table exists and SQLITE_ERROR if it
** does not.  If the table name parameter T in a call to
** sqlite3_table_column_metadata(X,D,T,C,...) is NULL then the result is
** undefined behavior.
**
** ^The column is identified by the second, third and fourth parameters to
** this function. ^(The second parameter is either the name of the database
** (i.e. &quot;main&quot;, &quot;temp&quot;, or an attached database) containing the specified
** table or NULL.)^ ^If it is NULL, then all attached databases are searched
** for the table using the same algorithm used by the database engine to
** resolve unqualified table references.
**
** ^The third and fourth parameters to this function are the table and column
** name of the desired column, respectively.
**
** ^Metadata is returned by writing to the memory locations passed as the 5th
** and subsequent parameters to this function. ^Any of these arguments may be
** NULL, in which case the corresponding element of metadata is omitted.
**
** ^(&lt;blockquote&gt;
** &lt;table border=&quot;1&quot;&gt;
** &lt;tr&gt;&lt;th&gt; Parameter &lt;th&gt; Output&lt;br&gt;Type &lt;th&gt;  Description
**
** &lt;tr&gt;&lt;td&gt; 5th &lt;td&gt; const char* &lt;td&gt; Data type
** &lt;tr&gt;&lt;td&gt; 6th &lt;td&gt; const char* &lt;td&gt; Name of default collation sequence
** &lt;tr&gt;&lt;td&gt; 7th &lt;td&gt; int         &lt;td&gt; True if column has a NOT NULL constraint
** &lt;tr&gt;&lt;td&gt; 8th &lt;td&gt; int         &lt;td&gt; True if column is part of the PRIMARY KEY
** &lt;tr&gt;&lt;td&gt; 9th &lt;td&gt; int         &lt;td&gt; True if column is [AUTOINCREMENT]
** &lt;/table&gt;
** &lt;/blockquote&gt;)^
**
** ^The memory pointed to by the character pointers returned for the
** declaration type and collation sequence is valid until the next
** call to any SQLite API function.
**
** ^If the specified table is actually a view, an [error code] is returned.
**
** ^If the specified column is &quot;rowid&quot;, &quot;oid&quot; or &quot;_rowid_&quot; and the table
** is not a [WITHOUT ROWID] table and an
** [INTEGER PRIMARY KEY] column has been explicitly declared, then the output
** parameters are set for the explicitly declared column. ^(If there is no
** [INTEGER PRIMARY KEY] column, then the outputs
** for the [rowid] are set as follows:
**
** &lt;pre&gt;
**     data type: &quot;INTEGER&quot;
**     collation sequence: &quot;BINARY&quot;
**     not null: 0
**     primary key: 1
**     auto increment: 0
** &lt;/pre&gt;)^
**
** ^This function causes all database schemas to be read from disk and
** parsed, if that has not already been done, and returns an error if
** any errors are encountered while loading the schema.
*/</doc>
