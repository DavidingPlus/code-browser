<def f='qtbase-6.5.0/src/corelib/tools/qrefcount.h' l='15' ll='48'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhash.h' l='454'/>
<size>4</size>
<fun r='_ZN9QtPrivate8RefCount3refEv'/>
<fun r='_ZN9QtPrivate8RefCount5derefEv'/>
<fun r='_ZNK9QtPrivate8RefCount8isStaticEv'/>
<fun r='_ZNK9QtPrivate8RefCount8isSharedEv'/>
<fun r='_ZN9QtPrivate8RefCount15initializeOwnedEv'/>
<fun r='_ZN9QtPrivate8RefCount20initializeUnsharableEv'/>
<mbr r='QtPrivate::RefCount::atomic' o='0' t='QBasicAtomicInt'/>
<use f='qtbase-6.5.0/src/gui/painting/qregion.h' l='122'/>
<size>4</size>
<doc f='qtbase-6.5.0/src/corelib/tools/qrefcount.cpp' l='4'>/*!
  \class QtPrivate::RefCount
  \inmodule QtCore
  \internal

  QRefCount implements atomic ref counting for Qt&apos;s shared classes. It behaves very similar
  to QAtomicInt, but ignores negative ref counts.

  This can be used to allow to implement e.g. const read-only QStringData objects. QString::shared_null and
  the qs(...) macro make use of this feature.
*/</doc>
