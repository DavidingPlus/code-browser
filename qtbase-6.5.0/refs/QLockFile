<def f='qtbase-6.5.0/src/corelib/io/qlockfile.h' l='16' ll='58'/>
<use f='qtbase-6.5.0/src/corelib/io/qlockfile.h' l='57' c='_ZN9QLockFileC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qlockfile.h' l='57' c='_ZN9QLockFileaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qlockfile.h' l='57' c='_ZN9QLockFileaSERKS_'/>
<size>8</size>
<fun r='_ZN9QLockFileC1ERK7QString'/>
<fun r='_ZN9QLockFileD1Ev'/>
<fun r='_ZNK9QLockFile8fileNameEv'/>
<fun r='_ZN9QLockFile4lockEv'/>
<fun r='_ZN9QLockFile7tryLockEi'/>
<fun r='_ZN9QLockFile6unlockEv'/>
<fun r='_ZN9QLockFile16setStaleLockTimeEi'/>
<fun r='_ZNK9QLockFile13staleLockTimeEv'/>
<fun r='_ZN9QLockFile7tryLockENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE'/>
<fun r='_ZN9QLockFile16setStaleLockTimeENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE'/>
<fun r='_ZNK9QLockFile23staleLockTimeAsDurationEv'/>
<fun r='_ZNK9QLockFile8isLockedEv'/>
<fun r='_ZNK9QLockFile11getLockInfoEPxP7QStringS2_'/>
<fun r='_ZN9QLockFile19removeStaleLockFileEv'/>
<fun r='_ZNK9QLockFile5errorEv'/>
<mbr r='QLockFile::d_ptr' o='0' t='QScopedPointer&lt;QLockFilePrivate&gt;'/>
<fun r='_ZN9QLockFile6d_funcEv'/>
<fun r='_ZNK9QLockFile6d_funcEv'/>
<fun r='_ZN9QLockFileC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qlockfile_p.h' l='67' c='_ZN16QLockFilePrivate17getLockFileHandleEP9QLockFile'/>
<use f='qtbase-6.5.0/src/corelib/io/qlockfile.cpp' l='262' c='_ZN9QLockFile7tryLockEi'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/corelib/io/qlockfile.cpp' l='42'>/*!
    \class QLockFile
    \inmodule QtCore
    \brief The QLockFile class provides locking between processes using a file.
    \since 5.1

    A lock file can be used to prevent multiple processes from accessing concurrently
    the same resource. For instance, a configuration file on disk, or a socket, a port,
    a region of shared memory...

    Serialization is only guaranteed if all processes that access the shared resource
    use QLockFile, with the same file path.

    QLockFile supports two use cases:
    to protect a resource for a short-term operation (e.g. verifying if a configuration
    file has changed before saving new settings), and for long-lived protection of a
    resource (e.g. a document opened by a user in an editor) for an indefinite amount of time.

    When protecting for a short-term operation, it is acceptable to call lock() and wait
    until any running operation finishes.
    When protecting a resource over a long time, however, the application should always
    call setStaleLockTime(0) and then tryLock() with a short timeout, in order to
    warn the user that the resource is locked.

    If the process holding the lock crashes, the lock file stays on disk and can prevent
    any other process from accessing the shared resource, ever. For this reason, QLockFile
    tries to detect such a &quot;stale&quot; lock file, based on the process ID written into the file.
    To cover the situation that the process ID got reused meanwhile, the current process name is
    compared to the name of the process that corresponds to the process ID from the lock file.
    If the process names differ, the lock file is considered stale.
    Additionally, the last modification time of the lock file (30s by default, for the use case of a
    short-lived operation) is taken into account.
    If the lock file is found to be stale, it will be deleted.

    For the use case of protecting a resource over a long time, you should therefore call
    setStaleLockTime(0), and when tryLock() returns LockFailedError, inform the user
    that the document is locked, possibly using getLockInfo() for more details.

    \note On Windows, this class has problems detecting a stale lock if the
    machine&apos;s hostname contains characters outside the US-ASCII character set.
*/</doc>
<fun r='_ZN9QLockFileC1ERK7QString'/>
<fun r='_ZN9QLockFileD1Ev'/>
<fun r='_ZNK9QLockFile8fileNameEv'/>
<fun r='_ZN9QLockFile16setStaleLockTimeEi'/>
<fun r='_ZNK9QLockFile13staleLockTimeEv'/>
<fun r='_ZNK9QLockFile8isLockedEv'/>
<fun r='_ZN9QLockFile4lockEv'/>
<fun r='_ZN9QLockFile7tryLockEi'/>
<fun r='_ZNK9QLockFile11getLockInfoEPxP7QStringS2_'/>
<fun r='_ZN9QLockFile19removeStaleLockFileEv'/>
<fun r='_ZNK9QLockFile5errorEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qsettings.cpp' l='1344' c='_ZN24QConfFileSettingsPrivate12syncConfFileEP9QConfFile'/>
<size>8</size>
