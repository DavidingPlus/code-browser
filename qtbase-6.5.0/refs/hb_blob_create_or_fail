<dec f='qtbase-6.5.0/src/3rdparty/harfbuzz-ng/src/hb-blob.h' l='94' type='hb_blob_t * hb_blob_create_or_fail(const char * data, unsigned int length, hb_memory_mode_t mode, void * user_data, hb_destroy_func_t destroy)'/>
<use f='qtbase-6.5.0/src/3rdparty/harfbuzz-ng/src/hb-blob.cc' l='82' u='c' c='hb_blob_create'/>
<def f='qtbase-6.5.0/src/3rdparty/harfbuzz-ng/src/hb-blob.cc' l='106' ll='140' type='hb_blob_t * hb_blob_create_or_fail(const char * data, unsigned int length, hb_memory_mode_t mode, void * user_data, hb_destroy_func_t destroy)'/>
<use f='qtbase-6.5.0/src/3rdparty/harfbuzz-ng/src/hb-blob.cc' l='766' u='c' c='hb_blob_create_from_file_or_fail'/>
<doc f='qtbase-6.5.0/src/3rdparty/harfbuzz-ng/src/hb-blob.cc' l='87'>/**
 * hb_blob_create_or_fail: (skip)
 * @data: Pointer to blob data.
 * @length: Length of @data in bytes.
 * @mode: Memory mode for @data.
 * @user_data: Data parameter to pass to @destroy.
 * @destroy: (nullable): Callback to call when @data is not needed anymore.
 *
 * Creates a new &quot;blob&quot; object wrapping @data.  The @mode parameter is used
 * to negotiate ownership and lifecycle of @data.
 *
 * Note that this function returns a freshly-allocated empty blob even if @length
 * is zero. This is in contrast to hb_blob_create(), which returns the singleton
 * empty blob (as returned by hb_blob_get_empty()) if @length is zero.
 *
 * Return value: New blob, or `NULL` if failed.  Destroy with hb_blob_destroy().
 *
 * Since: 2.8.2
 **/</doc>
