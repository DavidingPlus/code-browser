<dec f='qtbase-6.5.0/src/network/access/qabstractnetworkcache.h' l='88' type='QIODevice * QAbstractNetworkCache::prepare(const QNetworkCacheMetaData &amp; metaData)'/>
<doc f='qtbase-6.5.0/src/network/access/qabstractnetworkcache.cpp' l='461'>/*!
    \fn QIODevice *QAbstractNetworkCache::prepare(const QNetworkCacheMetaData &amp;metaData) = 0
    Returns the device that should be populated with the data for
    the cache item \a metaData.  When all of the data has been written
    insert() should be called.  If metaData is invalid or the url in
    the metadata is invalid \nullptr is returned.

    The cache owns the device and will take care of deleting it when
    it is inserted or removed.

    To cancel a prepared inserted call remove() on the metadata&apos;s url.

    In the base class this is a pure virtual function.

    \sa remove(), updateMetaData(), insert()
*/</doc>
<ovr f='qtbase-6.5.0/src/network/access/qnetworkdiskcache.cpp' l='145' c='_ZN17QNetworkDiskCache7prepareERK21QNetworkCacheMetaData'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyhttpimpl.cpp' l='1015' u='c' c='_ZN28QNetworkReplyHttpImplPrivate19initCacheSaveDeviceEv'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyimpl.cpp' l='434' u='c' c='_ZN24QNetworkReplyImplPrivate19initCacheSaveDeviceEv'/>
