<use f='include/glib-2.0/glib/gmarkup.h' l='113'/>
<def f='include/glib-2.0/glib/gmarkup.h' l='143' ll='184'/>
<size>40</size>
<doc f='include/glib-2.0/glib/gmarkup.h' l='115'>/**
 * GMarkupParser:
 * @start_element: Callback to invoke when the opening tag of an element
 *     is seen. The callback&apos;s @attribute_names and @attribute_values parameters
 *     are %NULL-terminated.
 * @end_element: Callback to invoke when the closing tag of an element
 *     is seen. Note that this is also called for empty tags like
 *     `&lt;empty/&gt;`.
 * @text: Callback to invoke when some text is seen (text is always
 *     inside an element). Note that the text of an element may be spread
 *     over multiple calls of this function. If the
 *     %G_MARKUP_TREAT_CDATA_AS_TEXT flag is set, this function is also
 *     called for the content of CDATA marked sections.
 * @passthrough: Callback to invoke for comments, processing instructions
 *     and doctype declarations; if you&apos;re re-writing the parsed document,
 *     write the passthrough text back out in the same position. If the
 *     %G_MARKUP_TREAT_CDATA_AS_TEXT flag is not set, this function is also
 *     called for CDATA marked sections.
 * @error: Callback to invoke when an error occurs.
 *
 * Any of the fields in #GMarkupParser can be %NULL, in which case they
 * will be ignored. Except for the @error function, any of these callbacks
 * can set an error; in particular the %G_MARKUP_ERROR_UNKNOWN_ELEMENT,
 * %G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE, and %G_MARKUP_ERROR_INVALID_CONTENT
 * errors are intended to be set from these callbacks. If you set an error
 * from a callback, g_markup_parse_context_parse() will report that error
 * back to its caller.
 */</doc>
<mbr r='_GMarkupParser::start_element' o='0' t='void (*)(GMarkupParseContext *, const gchar *, const gchar **, const gchar **, gpointer, GError **)'/>
<mbr r='_GMarkupParser::end_element' o='64' t='void (*)(GMarkupParseContext *, const gchar *, gpointer, GError **)'/>
<mbr r='_GMarkupParser::text' o='128' t='void (*)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)'/>
<mbr r='_GMarkupParser::passthrough' o='192' t='void (*)(GMarkupParseContext *, const gchar *, gsize, gpointer, GError **)'/>
<mbr r='_GMarkupParser::error' o='256' t='void (*)(GMarkupParseContext *, GError *, gpointer)'/>
