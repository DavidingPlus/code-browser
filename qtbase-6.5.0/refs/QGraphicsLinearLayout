<inh f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslayout.h' l='18' c='QGraphicsLayout'/>
<def f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslinearlayout.h' l='17' ll='69'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslinearlayout.h' l='67' c='_ZN21QGraphicsLinearLayoutC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslinearlayout.h' l='67' c='_ZN21QGraphicsLinearLayoutaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslinearlayout.h' l='67' c='_ZN21QGraphicsLinearLayoutaSERKS_'/>
<size>16</size>
<fun r='_ZN21QGraphicsLinearLayoutC1EP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayoutC1EN2Qt11OrientationEP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayoutD1Ev'/>
<fun r='_ZN21QGraphicsLinearLayout14setOrientationEN2Qt11OrientationE'/>
<fun r='_ZNK21QGraphicsLinearLayout11orientationEv'/>
<fun r='_ZN21QGraphicsLinearLayout7addItemEP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayout10addStretchEi'/>
<fun r='_ZN21QGraphicsLinearLayout10insertItemEiP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayout13insertStretchEii'/>
<fun r='_ZN21QGraphicsLinearLayout10removeItemEP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayout8removeAtEi'/>
<fun r='_ZN21QGraphicsLinearLayout10setSpacingEd'/>
<fun r='_ZNK21QGraphicsLinearLayout7spacingEv'/>
<fun r='_ZN21QGraphicsLinearLayout14setItemSpacingEid'/>
<fun r='_ZNK21QGraphicsLinearLayout11itemSpacingEi'/>
<fun r='_ZN21QGraphicsLinearLayout16setStretchFactorEP19QGraphicsLayoutItemi'/>
<fun r='_ZNK21QGraphicsLinearLayout13stretchFactorEP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayout12setAlignmentEP19QGraphicsLayoutItem6QFlagsIN2Qt13AlignmentFlagEE'/>
<fun r='_ZNK21QGraphicsLinearLayout9alignmentEP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayout11setGeometryERK6QRectF'/>
<fun r='_ZNK21QGraphicsLinearLayout5countEv'/>
<fun r='_ZNK21QGraphicsLinearLayout6itemAtEi'/>
<fun r='_ZN21QGraphicsLinearLayout10invalidateEv'/>
<fun r='_ZNK21QGraphicsLinearLayout8sizeHintEN2Qt8SizeHintERK6QSizeF'/>
<fun r='_ZNK21QGraphicsLinearLayout4dumpEi'/>
<fun r='_ZN21QGraphicsLinearLayoutC1ERKS_'/>
<fun r='_ZN21QGraphicsLinearLayout6d_funcEv'/>
<fun r='_ZNK21QGraphicsLinearLayout6d_funcEv'/>
<doc f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslinearlayout.cpp' l='4'>/*!
    \class QGraphicsLinearLayout
    \brief The QGraphicsLinearLayout class provides a horizontal or vertical
    layout for managing widgets in Graphics View.
    \since 4.4
    \ingroup graphicsview-api
    \inmodule QtWidgets

    The default orientation for a linear layout is Qt::Horizontal. You can
    choose a vertical orientation either by calling setOrientation(), or by
    passing Qt::Vertical to QGraphicsLinearLayout&apos;s constructor.

    The most common way to use QGraphicsLinearLayout is to construct an object
    on the heap, passing a parent widget to the constructor, then add widgets
    and layouts by calling addItem().

    \snippet code/src_gui_graphicsview_qgraphicslinearlayout.cpp 0

    Alternatively, if you do not pass a parent widget to the layout&apos;s constructor,
    you will need to call QGraphicsWidget::setLayout() to set this layout as the
    top-level layout for that widget, the widget will take ownership of
    the layout.

    You can add widgets, layouts, stretches (addStretch(), insertStretch() or
    setStretchFactor()), and spacings (setItemSpacing()) to a linear
    layout. The layout takes ownership of the items. In some cases when the layout
    item also inherits from QGraphicsItem (such as QGraphicsWidget) there will be a
    ambiguity in ownership because the layout item belongs to two ownership hierarchies.
    See the documentation of QGraphicsLayoutItem::setOwnedByLayout() how to handle
    this.
    You can access each item in the layout by calling count() and itemAt(). Calling
    removeAt() or removeItem() will remove an item from the layout, without
    destroying it.

    \section1 Size Hints and Size Policies in QGraphicsLinearLayout

    QGraphicsLinearLayout respects each item&apos;s size hints and size policies,
    and when the layout contains more space than the items can fill, each item
    is arranged according to the layout&apos;s alignment for that item. You can set
    an alignment for each item by calling setAlignment(), and check the
    alignment for any item by calling alignment(). By default, items are
    aligned to the top left.

    \section1 Spacing within QGraphicsLinearLayout

    Between the items, the layout distributes some space. The actual amount of
    space depends on the managed widget&apos;s current style, but the common
    spacing is 4. You can also set your own spacing by calling setSpacing(),
    and get the current spacing value by calling spacing(). If you want to
    configure individual spacing for your items, you can call setItemSpacing().

    \section1 Stretch Factor in QGraphicsLinearLayout

    You can assign a stretch factor to each item to control how much space it
    will get compared to the other items. By default, two identical widgets
    arranged in a linear layout will have the same size, but if the first
    widget has a stretch factor of 1 and the second widget has a stretch
    factor of 2, the first widget will get 1/3 of the available space, and the
    second will get 2/3.

    QGraphicsLinearLayout calculates the distribution of sizes by adding up
    the stretch factors of all items, and then dividing the available space
    accordingly. The default stretch factor is 0 for all items; a factor of 0
    means the item does not have any defined stretch factor; effectively this
    is the same as setting the stretch factor to 1. The stretch factor only
    applies to the available space in the lengthwise direction of the layout
    (following its orientation). If you want to control both the item&apos;s
    horizontal and vertical stretch, you can use QGraphicsGridLayout instead.

    \section1 QGraphicsLinearLayout Compared to Other Layouts

    QGraphicsLinearLayout is very similar to QVBoxLayout and QHBoxLayout, but
    in contrast to these classes, it is used to manage QGraphicsWidget and
    QGraphicsLayout instead of QWidget and QLayout.

    \sa QGraphicsGridLayout, QGraphicsWidget
*/</doc>
<fun r='_ZN21QGraphicsLinearLayoutC1EN2Qt11OrientationEP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayoutC1EP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayoutD1Ev'/>
<fun r='_ZN21QGraphicsLinearLayout14setOrientationEN2Qt11OrientationE'/>
<fun r='_ZNK21QGraphicsLinearLayout11orientationEv'/>
<fun r='_ZN21QGraphicsLinearLayout10insertItemEiP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayout13insertStretchEii'/>
<fun r='_ZN21QGraphicsLinearLayout10removeItemEP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayout8removeAtEi'/>
<fun r='_ZN21QGraphicsLinearLayout10setSpacingEd'/>
<fun r='_ZNK21QGraphicsLinearLayout7spacingEv'/>
<fun r='_ZN21QGraphicsLinearLayout14setItemSpacingEid'/>
<fun r='_ZNK21QGraphicsLinearLayout11itemSpacingEi'/>
<fun r='_ZN21QGraphicsLinearLayout16setStretchFactorEP19QGraphicsLayoutItemi'/>
<fun r='_ZNK21QGraphicsLinearLayout13stretchFactorEP19QGraphicsLayoutItem'/>
<fun r='_ZN21QGraphicsLinearLayout12setAlignmentEP19QGraphicsLayoutItem6QFlagsIN2Qt13AlignmentFlagEE'/>
<fun r='_ZNK21QGraphicsLinearLayout9alignmentEP19QGraphicsLayoutItem'/>
<fun r='_ZNK21QGraphicsLinearLayout5countEv'/>
<fun r='_ZNK21QGraphicsLinearLayout6itemAtEi'/>
<fun r='_ZN21QGraphicsLinearLayout11setGeometryERK6QRectF'/>
<fun r='_ZNK21QGraphicsLinearLayout8sizeHintEN2Qt8SizeHintERK6QSizeF'/>
<fun r='_ZN21QGraphicsLinearLayout10invalidateEv'/>
<fun r='_ZNK21QGraphicsLinearLayout4dumpEi'/>
