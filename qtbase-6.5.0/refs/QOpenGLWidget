<use f='qtbase-6.5.0/src/gui/image/qpixmap.h' l='136'/>
<inh f='qtbase-6.5.0/src/widgets/kernel/qwidget.h' l='98' c='QWidget'/>
<def f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.h' l='17' ll='83'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.h' l='82' c='_ZN13QOpenGLWidgetC1ERKS_'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.h' l='82' c='_ZN13QOpenGLWidgetaSERKS_'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.h' l='82' c='_ZN13QOpenGLWidgetaSERKS_'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='514' c='_ZN31QOpenGLWidgetPaintDevicePrivateC1EP13QOpenGLWidget'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='521'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='527' c='_ZN24QOpenGLWidgetPaintDeviceC1EP13QOpenGLWidget'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='534' c='_ZN20QOpenGLWidgetPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='534' c='_ZN20QOpenGLWidgetPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='534' c='_ZNK20QOpenGLWidgetPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='534' c='_ZNK20QOpenGLWidgetPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='534'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='676' c='_ZN20QOpenGLWidgetPrivate5resetEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='719' c='_ZN20QOpenGLWidgetPrivate12recreateFbosEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='776' c='_ZN20QOpenGLWidgetPrivate27ensureRhiDependentResourcesEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='801' c='_ZN20QOpenGLWidgetPrivate12beginComposeEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='813' c='_ZN20QOpenGLWidgetPrivate10endComposeEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='819' c='_ZN20QOpenGLWidgetPrivate10initializeEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='907' c='_ZN20QOpenGLWidgetPrivate23resolveSamplesForBufferEN13QOpenGLWidget12TargetBufferE'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='918' c='_ZN20QOpenGLWidgetPrivate6renderEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='1021' c='_ZN20QOpenGLWidgetPrivate15grabFramebufferEN13QOpenGLWidget12TargetBufferE'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='1060' c='_ZN20QOpenGLWidgetPrivate29initializeViewportFramebufferEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='1068' c='_ZN20QOpenGLWidgetPrivate15isStereoEnabledEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='1084' c='_ZN20QOpenGLWidgetPrivate25resizeViewportFramebufferEv'/>
<use f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='1642' c='_ZN20QOpenGLWidgetPrivate22setCurrentTargetBufferEN13QOpenGLWidget12TargetBufferE'/>
<size>40</size>
<doc f='qtbase-6.5.0/src/openglwidgets/qopenglwidget.cpp' l='31'>/*!
  \class QOpenGLWidget
  \inmodule QtOpenGLWidgets
  \since 5.4

  \brief The QOpenGLWidget class is a widget for rendering OpenGL graphics.

  QOpenGLWidget provides functionality for displaying OpenGL graphics
  integrated into a Qt application. It is very simple to use: Make
  your class inherit from it and use the subclass like any other
  QWidget, except that you have the choice between using QPainter and
  standard OpenGL rendering commands.

  QOpenGLWidget provides three convenient virtual functions that you
  can reimplement in your subclass to perform the typical OpenGL
  tasks:

  \list
  \li paintGL() - Renders the OpenGL scene. Gets called whenever the widget
  needs to be updated.
  \li resizeGL() - Sets up the OpenGL viewport, projection, etc. Gets
  called whenever the widget has been resized (and also when it
  is shown for the first time because all newly created widgets get a
  resize event automatically).
  \li initializeGL() - Sets up the OpenGL resources and state. Gets called
  once before the first time resizeGL() or paintGL() is called.
  \endlist

  If you need to trigger a repaint from places other than paintGL() (a
  typical example is when using \l{QTimer}{timers} to animate scenes),
  you should call the widget&apos;s update() function to schedule an update.

  Your widget&apos;s OpenGL rendering context is made current when
  paintGL(), resizeGL(), or initializeGL() is called. If you need to
  call the standard OpenGL API functions from other places (e.g. in
  your widget&apos;s constructor or in your own paint functions), you
  must call makeCurrent() first.

  All rendering happens into an OpenGL framebuffer
  object. makeCurrent() ensure that it is bound in the context. Keep
  this in mind when creating and binding additional framebuffer
  objects in the rendering code in paintGL(). Never re-bind the
  framebuffer with ID 0. Instead, call defaultFramebufferObject() to
  get the ID that should be bound.

  QOpenGLWidget allows using different OpenGL versions and profiles
  when the platform supports it. Just set the requested format via
  setFormat(). Keep in mind however that having multiple QOpenGLWidget
  instances in the same window requires that they all use the same
  format, or at least formats that do not make the contexts
  non-sharable. To overcome this issue, prefer using
  QSurfaceFormat::setDefaultFormat() instead of setFormat().

  \note Calling QSurfaceFormat::setDefaultFormat() before constructing
  the QApplication instance is mandatory on some platforms (for example,
  \macos) when an OpenGL core profile context is requested. This is to
  ensure that resource sharing between contexts stays functional as all
  internal contexts are created using the correct version and profile.

  \section1 Painting Techniques

  As described above, subclass QOpenGLWidget to render pure 3D content in the
  following way:

  \list

  \li Reimplement the initializeGL() and resizeGL() functions to
  set up the OpenGL state and provide a perspective transformation.

  \li Reimplement paintGL() to paint the 3D scene, calling only
  OpenGL functions.

  \endlist

  It is also possible to draw 2D graphics onto a QOpenGLWidget subclass using QPainter:

  \list

  \li In paintGL(), instead of issuing OpenGL commands, construct a QPainter
      object for use on the widget.

  \li Draw primitives using QPainter&apos;s member functions.

  \li Direct OpenGL commands can still be issued. However, you must make sure
  these are enclosed by a call to the painter&apos;s beginNativePainting() and
  endNativePainting().

  \endlist

  When performing drawing using QPainter only, it is also possible to perform
  the painting like it is done for ordinary widgets: by reimplementing paintEvent().

  \list

  \li Reimplement the paintEvent() function.

  \li Construct a QPainter object targeting the widget. Either pass the widget to the
  constructor or the QPainter::begin() function.

  \li Draw primitives using QPainter&apos;s member functions.

  \li Painting finishes then the QPainter instance is destroyed. Alternatively,
  call QPainter::end() explicitly.

  \endlist

  \section1 OpenGL Function Calls, Headers and QOpenGLFunctions

  When making OpenGL function calls, it is strongly recommended to avoid calling
  the functions directly. Instead, prefer using QOpenGLFunctions (when making
  portable applications) or the versioned variants (for example,
  QOpenGLFunctions_3_2_Core and similar, when targeting modern, desktop-only
  OpenGL). This way the application will work correctly in all Qt build
  configurations, including the ones that perform dynamic OpenGL implementation
  loading which means applications are not directly linking to an GL
  implementation and thus direct function calls are not feasible.

  In paintGL() the current context is always accessible by calling
  QOpenGLContext::currentContext(). From this context an already initialized,
  ready-to-be-used QOpenGLFunctions instance is retrievable by calling
  QOpenGLContext::functions(). An alternative to prefixing every GL call is to
  inherit from QOpenGLFunctions and call
  QOpenGLFunctions::initializeOpenGLFunctions() in initializeGL().

  As for the OpenGL headers, note that in most cases there will be no need to
  directly include any headers like GL.h. The OpenGL-related Qt headers will
  include qopengl.h which will in turn include an appropriate header for the
  system. This might be an OpenGL ES 3.x or 2.0 header, the highest version that
  is available, or a system-provided gl.h. In addition, a copy of the extension
  headers (called glext.h on some systems) is provided as part of Qt both for
  OpenGL and OpenGL ES. These will get included automatically on platforms where
  feasible. This means that constants and function pointer typedefs from ARB,
  EXT, OES extensions are automatically available.

  \section1 Code Examples

  To get started, the simplest QOpenGLWidget subclass could look like the following:

  \snippet code/doc_gui_widgets_qopenglwidget.cpp 0

  Alternatively, the prefixing of each and every OpenGL call can be avoided by deriving
  from QOpenGLFunctions instead:

  \snippet code/doc_gui_widgets_qopenglwidget.cpp 1

  To get a context compatible with a given OpenGL version or profile, or to
  request depth and stencil buffers, call setFormat():

  \snippet code/doc_gui_widgets_qopenglwidget.cpp 2

  With OpenGL 3.0+ contexts, when portability is not important, the versioned
  QOpenGLFunctions variants give easy access to all the modern OpenGL functions
  available in a given version:

  \snippet code/doc_gui_widgets_qopenglwidget.cpp 3

  As described above, it is simpler and more robust to set the requested format
  globally so that it applies to all windows and contexts during the lifetime of
  the application. Below is an example of this:

  \snippet code/doc_gui_widgets_qopenglwidget.cpp 6

  \section1 Multisampling

  To enable multisampling, set the number of requested samples on the
  QSurfaceFormat that is passed to setFormat(). On systems that do not support
  it the request may get ignored.

  Multisampling support requires support for multisampled renderbuffers and
  framebuffer blits. On OpenGL ES 2.0 implementations it is likely that these
  will not be present. This means that multisampling will not be available. With
  modern OpenGL versions and OpenGL ES 3.0 and up this is usually not a problem
  anymore.

  \section1 Threading

  Performing offscreen rendering on worker threads, for example to generate
  textures that are then used in the GUI/main thread in paintGL(), are supported
  by exposing the widget&apos;s QOpenGLContext so that additional contexts sharing
  with it can be created on each thread.

  Drawing directly to the QOpenGLWidget&apos;s framebuffer outside the GUI/main
  thread is possible by reimplementing paintEvent() to do nothing. The context&apos;s
  thread affinity has to be changed via QObject::moveToThread(). After that,
  makeCurrent() and doneCurrent() are usable on the worker thread. Be careful to
  move the context back to the GUI/main thread afterwards.

  Triggering a buffer swap just for the QOpenGLWidget is not possible since there
  is no real, onscreen native surface for it. It is up to the widget stack to
  manage composition and buffer swaps on the gui thread. When a thread is done
  updating the framebuffer, call update() \b{on the GUI/main thread} to
  schedule composition.

  Extra care has to be taken to avoid using the framebuffer when the GUI/main
  thread is performing compositing. The signals aboutToCompose() and
  frameSwapped() will be emitted when the composition is starting and
  ending. They are emitted on the GUI/main thread. This means that by using a
  direct connection aboutToCompose() can block the GUI/main thread until the
  worker thread has finished its rendering. After that, the worker thread must
  perform no further rendering until the frameSwapped() signal is emitted. If
  this is not acceptable, the worker thread has to implement a double buffering
  mechanism. This involves drawing using an alternative render target, that is
  fully controlled by the thread, e.g. an additional framebuffer object, and
  blitting to the QOpenGLWidget&apos;s framebuffer at a suitable time.

  \section1 Context Sharing

  When multiple QOpenGLWidgets are added as children to the same top-level
  widget, their contexts will share with each other. This does not apply for
  QOpenGLWidget instances that belong to different windows.

  This means that all QOpenGLWidgets in the same window can access each other&apos;s
  sharable resources, like textures, and there is no need for an extra &quot;global
  share&quot; context.

  To set up sharing between QOpenGLWidget instances belonging to different
  windows, set the Qt::AA_ShareOpenGLContexts application attribute before
  instantiating QApplication. This will trigger sharing between all
  QOpenGLWidget instances without any further steps.

  Creating extra QOpenGLContext instances that share resources like textures
  with the QOpenGLWidget&apos;s context is also possible. Simply pass the pointer
  returned from context() to QOpenGLContext::setShareContext() before calling
  QOpenGLContext::create(). The resulting context can also be used on a
  different thread, allowing threaded generation of textures and asynchronous
  texture uploads.

  Note that QOpenGLWidget expects a standard conformant implementation of
  resource sharing when it comes to the underlying graphics drivers. For
  example, some drivers, in particular for mobile and embedded hardware, have
  issues with setting up sharing between an existing context and others that are
  created later. Some other drivers may behave in unexpected ways when trying to
  utilize shared resources between different threads.

  \section1 Resource Initialization and Cleanup

  The QOpenGLWidget&apos;s associated OpenGL context is guaranteed to be current
  whenever initializeGL() and paintGL() are invoked. Do not attempt to create
  OpenGL resources before initializeGL() is called. For example, attempting to
  compile shaders, initialize vertex buffer objects or upload texture data will
  fail when done in a subclass&apos;s constructor. These operations must be deferred
  to initializeGL(). Some of Qt&apos;s OpenGL helper classes, like QOpenGLBuffer or
  QOpenGLVertexArrayObject, have a matching deferred behavior: they can be
  instantiated without a context, but all initialization is deferred until a
  create(), or similar, call. This means that they can be used as normal
  (non-pointer) member variables in a QOpenGLWidget subclass, but the create()
  or similar function can only be called from initializeGL(). Be aware however
  that not all classes are designed like this. When in doubt, make the member
  variable a pointer and create and destroy the instance dynamically in
  initializeGL() and the destructor, respectively.

  Releasing the resources also needs the context to be current. Therefore
  destructors that perform such cleanup are expected to call makeCurrent()
  before moving on to destroy any OpenGL resources or wrappers. Avoid deferred
  deletion via \l{QObject::deleteLater()}{deleteLater()} or the parenting
  mechanism of QObject. There is no guarantee the correct context will be
  current at the time the instance in question is really destroyed.

  A typical subclass will therefore often look like the following when it comes
  to resource initialization and destruction:

  \snippet code/doc_gui_widgets_qopenglwidget.cpp 4

  This works for most cases, but not fully ideal as a generic solution. When
  the widget is reparented so that it ends up in an entirely different
  top-level window, something more is needed: by connecting to the
  \l{QOpenGLContext::aboutToBeDestroyed()}{aboutToBeDestroyed()} signal of
  QOpenGLContext, cleanup can be performed whenever the OpenGL context is about
  to be released.

  \note For widgets that change their associated top-level window multiple
  times during their lifetime, a combined cleanup approach, as demonstrated in
  the code snippet below, is essential. Whenever the widget or a parent of it
  gets reparented so that the top-level window becomes different, the widget&apos;s
  associated context is destroyed and a new one is created. This is then
  followed by a call to initializeGL() where all OpenGL resources must get
  reinitialized. Due to this the only option to perform proper cleanup is to
  connect to the context&apos;s aboutToBeDestroyed() signal. Note that the context
  in question may not be the current one when the signal gets emitted.
  Therefore it is good practice to call makeCurrent() in the connected slot.
  Additionally, the same cleanup steps must be performed from the derived
  class&apos; destructor, since the slot or lambda connected to the signal may not
  invoked when the widget is being destroyed.

  \snippet code/doc_gui_widgets_qopenglwidget.cpp 5

  \note When Qt::AA_ShareOpenGLContexts is set, the widget&apos;s context never
  changes, not even when reparenting because the widget&apos;s associated texture is
  going to be accessible also from the new top-level&apos;s context. Therefore,
  acting on the aboutToBeDestroyed() signal of the context is not mandatory
  with this flag set.

  Proper cleanup is especially important due to context sharing. Even though
  each QOpenGLWidget&apos;s associated context is destroyed together with the
  QOpenGLWidget, the sharable resources in that context, like textures, will
  stay valid until the top-level window, in which the QOpenGLWidget lived, is
  destroyed. Additionally, settings like Qt::AA_ShareOpenGLContexts and some Qt
  modules may trigger an even wider scope for sharing contexts, potentially
  leading to keeping the resources in question alive for the entire lifetime of
  the application. Therefore the safest and most robust is always to perform
  explicit cleanup for all resources and resource wrappers used in the
  QOpenGLWidget.

  \section1 Limitations and Other Considerations

  Putting other widgets underneath and making the QOpenGLWidget transparent will
  not lead to the expected results: The widgets underneath will not be
  visible. This is because in practice the QOpenGLWidget is drawn before all
  other regular, non-OpenGL widgets, and so see-through type of solutions are
  not feasible. Other type of layouts, like having widgets on top of the
  QOpenGLWidget, will function as expected.

  When absolutely necessary, this limitation can be overcome by setting the
  Qt::WA_AlwaysStackOnTop attribute on the QOpenGLWidget. Be aware however that
  this breaks stacking order, for example it will not be possible to have other
  widgets on top of the QOpenGLWidget, so it should only be used in situations
  where a semi-transparent QOpenGLWidget with other widgets visible underneath
  is required.

  Note that this does not apply when there are no other widgets underneath and
  the intention is to have a semi-transparent window. In that case the
  traditional approach of setting Qt::WA_TranslucentBackground
  on the top-level window is sufficient. Note that if the transparent areas are
  only desired in the QOpenGLWidget, then Qt::WA_NoSystemBackground will need
  to be turned back to \c false after enabling Qt::WA_TranslucentBackground.
  Additionally, requesting an alpha channel for the QOpenGLWidget&apos;s context via
  setFormat() may be necessary too, depending on the system.

  QOpenGLWidget supports multiple update behaviors, just like QOpenGLWindow. In
  preserved mode the rendered content from the previous paintGL() call is
  available in the next one, allowing incremental rendering. In non-preserved
  mode the content is lost and paintGL() implementations are expected to redraw
  everything in the view.

  Before Qt 5.5 the default behavior of QOpenGLWidget was to preserve the
  rendered contents between paintGL() calls. Since Qt 5.5 the default behavior
  is non-preserved because this provides better performance and the majority of
  applications have no need for the previous content. This also resembles the
  semantics of an OpenGL-based QWindow and matches the default behavior of
  QOpenGLWindow in that the color and ancillary buffers are invalidated for
  each frame. To restore the preserved behavior, call setUpdateBehavior() with
  \c PartialUpdate.

  \note When dynamically adding a QOpenGLWidget into a widget hierarchy, e.g.
  by parenting a new QOpenGLWidget to a widget where the corresponding
  top-level widget is already shown on screen, the associated native window may
  get implicitly destroyed and recreated if the QOpenGLWidget is the first of
  its kind within its window. This is because the window type changes from
  \l{QSurface::RasterSurface}{RasterSurface} to
  \l{QSurface::OpenGLSurface}{OpenGLSurface} and that has platform-specific
  implications. This behavior is new in Qt 6.4.

  Once a QOpenGLWidget is added to a widget hierarchy, the contents of the
  top-level window is flushed via OpenGL-based rendering. Widgets other than
  the QOpenGLWidget continue to draw their content using a software-based
  painter, but the final composition is done through the 3D API.

  \note Displaying a QOpenGLWidget requires an alpha channel in the associated
  top-level window&apos;s backing store due to the way composition with other
  QWidget-based content works. If there is no alpha channel, the content
  rendered by the QOpenGLWidget will not be visible. This can become
  particularly relevant on Linux/X11 in remote display setups (such as, with
  Xvnc), when using a color depth lower than 24. For example, a color depth of
  16 will typically map to using a backing store image with the format
  QImage::Format_RGB16 (RGB565), leaving no room for an alpha
  channel. Therefore, if experiencing problems with getting the contents of a
  QOpenGLWidget composited correctly with other the widgets in the window, make
  sure the server (such as, vncserver) is configured with a 24 or 32 bit depth
  instead of 16.

  \section1 Alternatives

  Adding a QOpenGLWidget into a window turns on OpenGL-based
  compositing for the entire window.  In some special cases this may
  not be ideal, and the old QGLWidget-style behavior with a separate,
  native child window is desired. Desktop applications that understand
  the limitations of this approach (for example when it comes to
  overlaps, transparency, scroll views and MDI areas), can use
  QOpenGLWindow with QWidget::createWindowContainer(). This is a
  modern alternative to QGLWidget and is faster than QOpenGLWidget due
  to the lack of the additional composition step. It is strongly
  recommended to limit the usage of this approach to cases where there
  is no other choice. Note that this option is not suitable for most
  embedded and mobile platforms, and it is known to have issues on
  certain desktop platforms (e.g. \macos) too. The stable,
  cross-platform solution is always QOpenGLWidget.


  \section1 Stereoscopic rendering

  Starting from 6.5 QOpenGLWidget has support for stereoscopic rendering.
  To enable it, set the QSurfaceFormat::StereoBuffers flag
  globally before the window is created, using QSurfaceFormat::SetDefaultFormat().

  \note Using setFormat() will not necessarily work because of how the flag is
  handled internally.

  This will trigger paintGL() to be called twice each frame,
  once for each QOpenGLWidget::TargetBuffer. In paintGL(), call
  currentTargetBuffer() to query which one is currently being drawn to.

  \note For more control over the left and right color buffers, consider using
  QOpenGLWindow + QWidget::createWindowContainer() instead.

  \note This type of 3D rendering has certain hardware requirements,
  like the graphics card needs to be setup with stereo support.

  \e{OpenGL is a trademark of Silicon Graphics, Inc. in the United States and other
  countries.}

  \sa QOpenGLFunctions, QOpenGLWindow, Qt::AA_ShareOpenGLContexts, UpdateBehavior
*/</doc>
<smbr r='QOpenGLWidget::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK13QOpenGLWidget10metaObjectEv'/>
<fun r='_ZN13QOpenGLWidget11qt_metacastEPKc'/>
<fun r='_ZN13QOpenGLWidget11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QOpenGLWidget2trEPKcS1_i'/>
<fun r='_ZN13QOpenGLWidget18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QOpenGLWidget6d_funcEv'/>
<fun r='_ZNK13QOpenGLWidget6d_funcEv'/>
<fun r='_ZN13QOpenGLWidgetC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE'/>
<fun r='_ZN13QOpenGLWidgetD1Ev'/>
<fun r='_ZN13QOpenGLWidget17setUpdateBehaviorENS_14UpdateBehaviorE'/>
<fun r='_ZNK13QOpenGLWidget14updateBehaviorEv'/>
<fun r='_ZN13QOpenGLWidget9setFormatERK14QSurfaceFormat'/>
<fun r='_ZNK13QOpenGLWidget6formatEv'/>
<fun r='_ZNK13QOpenGLWidget13textureFormatEv'/>
<fun r='_ZN13QOpenGLWidget16setTextureFormatEj'/>
<fun r='_ZNK13QOpenGLWidget7isValidEv'/>
<fun r='_ZN13QOpenGLWidget11makeCurrentEv'/>
<fun r='_ZN13QOpenGLWidget11makeCurrentENS_12TargetBufferE'/>
<fun r='_ZN13QOpenGLWidget11doneCurrentEv'/>
<fun r='_ZNK13QOpenGLWidget7contextEv'/>
<fun r='_ZNK13QOpenGLWidget24defaultFramebufferObjectEv'/>
<fun r='_ZNK13QOpenGLWidget24defaultFramebufferObjectENS_12TargetBufferE'/>
<fun r='_ZN13QOpenGLWidget15grabFramebufferEv'/>
<fun r='_ZN13QOpenGLWidget15grabFramebufferENS_12TargetBufferE'/>
<fun r='_ZNK13QOpenGLWidget19currentTargetBufferEv'/>
<fun r='_ZN13QOpenGLWidget14aboutToComposeEv'/>
<fun r='_ZN13QOpenGLWidget12frameSwappedEv'/>
<fun r='_ZN13QOpenGLWidget13aboutToResizeEv'/>
<fun r='_ZN13QOpenGLWidget7resizedEv'/>
<fun r='_ZN13QOpenGLWidget12initializeGLEv'/>
<fun r='_ZN13QOpenGLWidget8resizeGLEii'/>
<fun r='_ZN13QOpenGLWidget7paintGLEv'/>
<fun r='_ZN13QOpenGLWidget10paintEventEP11QPaintEvent'/>
<fun r='_ZN13QOpenGLWidget11resizeEventEP12QResizeEvent'/>
<fun r='_ZN13QOpenGLWidget5eventEP6QEvent'/>
<fun r='_ZNK13QOpenGLWidget6metricEN12QPaintDevice17PaintDeviceMetricE'/>
<fun r='_ZNK13QOpenGLWidget10redirectedEP6QPoint'/>
<fun r='_ZNK13QOpenGLWidget11paintEngineEv'/>
<fun r='_ZN13QOpenGLWidgetC1ERKS_'/>
<fun r='_ZN13QOpenGLWidgetC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE'/>
<fun r='_ZN13QOpenGLWidgetD1Ev'/>
<fun r='_ZN13QOpenGLWidget17setUpdateBehaviorENS_14UpdateBehaviorE'/>
<fun r='_ZNK13QOpenGLWidget14updateBehaviorEv'/>
<fun r='_ZN13QOpenGLWidget9setFormatERK14QSurfaceFormat'/>
<fun r='_ZNK13QOpenGLWidget6formatEv'/>
<fun r='_ZN13QOpenGLWidget16setTextureFormatEj'/>
<fun r='_ZNK13QOpenGLWidget13textureFormatEv'/>
<fun r='_ZNK13QOpenGLWidget7isValidEv'/>
<fun r='_ZN13QOpenGLWidget11makeCurrentEv'/>
<fun r='_ZN13QOpenGLWidget11makeCurrentENS_12TargetBufferE'/>
<fun r='_ZN13QOpenGLWidget11doneCurrentEv'/>
<fun r='_ZNK13QOpenGLWidget7contextEv'/>
<fun r='_ZNK13QOpenGLWidget24defaultFramebufferObjectEv'/>
<fun r='_ZNK13QOpenGLWidget24defaultFramebufferObjectENS_12TargetBufferE'/>
<fun r='_ZN13QOpenGLWidget12initializeGLEv'/>
<fun r='_ZN13QOpenGLWidget8resizeGLEii'/>
<fun r='_ZN13QOpenGLWidget7paintGLEv'/>
<fun r='_ZN13QOpenGLWidget11resizeEventEP12QResizeEvent'/>
<fun r='_ZN13QOpenGLWidget10paintEventEP11QPaintEvent'/>
<fun r='_ZN13QOpenGLWidget15grabFramebufferEv'/>
<fun r='_ZN13QOpenGLWidget15grabFramebufferENS_12TargetBufferE'/>
<fun r='_ZNK13QOpenGLWidget19currentTargetBufferEv'/>
<fun r='_ZNK13QOpenGLWidget6metricEN12QPaintDevice17PaintDeviceMetricE'/>
<fun r='_ZNK13QOpenGLWidget10redirectedEP6QPoint'/>
<fun r='_ZNK13QOpenGLWidget11paintEngineEv'/>
<fun r='_ZN13QOpenGLWidget5eventEP6QEvent'/>
