<dec f='qtbase-6.5.0/src/corelib/animation/qvariantanimation.h' l='53' type='QEasingCurve QVariantAnimation::easingCurve() const'/>
<def f='qtbase-6.5.0/src/corelib/animation/qvariantanimation.cpp' l='347' ll='351' type='QEasingCurve QVariantAnimation::easingCurve() const'/>
<doc f='qtbase-6.5.0/src/corelib/animation/qvariantanimation.cpp' l='325'>/*!
    \property QVariantAnimation::easingCurve
    \brief the easing curve of the animation

    This property defines the easing curve of the animation. By
    default, a linear easing curve is used, resulting in linear
    interpolation. Other curves are provided, for instance,
    QEasingCurve::InCirc, which provides a circular entry curve.
    Another example is QEasingCurve::InOutElastic, which provides an
    elastic effect on the values of the interpolated variant.

    QVariantAnimation will use the QEasingCurve::valueForProgress() to
    transform the &quot;normalized progress&quot; (currentTime / totalDuration)
    of the animation into the effective progress actually
    used by the animation. It is this effective progress that will be
    the progress when interpolated() is called. Also, the steps in the
    keyValues are referring to this effective progress.

    The easing curve is used with the interpolator, the interpolated()
    virtual function, and the animation&apos;s duration to control how the
    current value changes as the animation progresses.
*/</doc>
