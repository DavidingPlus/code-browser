<def f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='751' ll='765'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='766'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='2586'>/*!
    \enum QRhiTexture::Flag

    Flag values to specify how the texture is going to be used. Not honoring
    the flags set before create() and attempting to use the texture in ways that
    was not declared upfront can lead to unspecified behavior or decreased
    performance depending on the backend and the underlying graphics API.

    \value RenderTarget The texture going to be used in combination with
    QRhiTextureRenderTarget.

    \value CubeMap The texture is a cubemap. Such textures have 6 layers, one
    for each face in the order of +X, -X, +Y, -Y, +Z, -Z. Cubemap textures
    cannot be multisample.

     \value MipMapped The texture has mipmaps. The appropriate mip count is
     calculated automatically and can also be retrieved via
     QRhi::mipLevelsForSize(). The images for the mip levels have to be
     provided in the texture uploaded or generated via
     QRhiResourceUpdateBatch::generateMips(). Multisample textures cannot have
     mipmaps.

    \value sRGB Use an sRGB format.

    \value UsedAsTransferSource The texture is used as the source of a texture
    copy or readback, meaning the texture is given as the source in
    QRhiResourceUpdateBatch::copyTexture() or
    QRhiResourceUpdateBatch::readBackTexture().

     \value UsedWithGenerateMips The texture is going to be used with
     QRhiResourceUpdateBatch::generateMips().

     \value UsedWithLoadStore The texture is going to be used with image
     load/store operations, for example, in a compute shader.

     \value UsedAsCompressedAtlas The texture has a compressed format and the
     dimensions of subresource uploads may not match the texture size.

     \value ExternalOES The texture should use the GL_TEXTURE_EXTERNAL_OES
     target with OpenGL. This flag is ignored with other graphics APIs.

     \value ThreeDimensional The texture is a 3D texture. Such textures should
     be created with the QRhi::newTexture() overload taking a depth in addition
     to width and height. A 3D texture can have mipmaps but cannot be
     multisample. When rendering into, or uploading data to a 3D texture, the \c
     layer specified in the render target&apos;s color attachment or the upload
     description refers to a single slice in range [0..depth-1]. The underlying
     graphics API may not support 3D textures at run time. Support is indicated
     by the QRhi::ThreeDimensionalTextures feature.

     \value TextureRectangleGL The texture should use the GL_TEXTURE_RECTANGLE
     target with OpenGL. This flag is ignored with other graphics APIs. Just
     like ExternalOES, this flag is useful when working with platform APIs where
     native OpenGL texture objects received from the platform are wrapped in a
     QRhiTexture, and the platform can only provide textures for a non-2D
     texture target.

     \value TextureArray The texture is a texture array, i.e. a single texture
     object that is a homogeneous array of 2D textures. Texture arrays are
     created with QRhi::newTextureArray(). The underlying graphics API may not
     support texture array objects at run time. Support is indicated by the
     QRhi::TextureArrays feature. When rendering into, or uploading data to a
     texture array, the \c layer specified in the render target&apos;s color
     attachment or the upload description selects a single element in the array.
 */</doc>
