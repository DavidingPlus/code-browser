<dec f='qtbase-6.5.0/src/corelib/io/qurl.h' l='176' type='static QUrl QUrl::fromUserInput(const QString &amp; userInput, const QString &amp; workingDirectory = QString(), QUrl::UserInputResolutionOptions options = DefaultResolution)'/>
<def f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='3742' ll='3796' type='static QUrl QUrl::fromUserInput(const QString &amp; userInput, const QString &amp; workingDirectory = QString(), QUrl::UserInputResolutionOptions options = DefaultResolution)'/>
<doc f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='3702'>/*!
    Returns a valid URL from a user supplied \a userInput string if one can be
    deduced. In the case that is not possible, an invalid QUrl() is returned.

    This allows the user to input a URL or a local file path in the form of a plain
    string. This string can be manually typed into a location bar, obtained from
    the clipboard, or passed in via command line arguments.

    When the string is not already a valid URL, a best guess is performed,
    making various assumptions.

    In the case the string corresponds to a valid file path on the system,
    a file:// URL is constructed, using QUrl::fromLocalFile().

    If that is not the case, an attempt is made to turn the string into a
    http:// or ftp:// URL. The latter in the case the string starts with
    &apos;ftp&apos;. The result is then passed through QUrl&apos;s tolerant parser, and
    in the case or success, a valid QUrl is returned, or else a QUrl().

    \section1 Examples:

    \list
    \li qt-project.org becomes http://qt-project.org
    \li ftp.qt-project.org becomes ftp://ftp.qt-project.org
    \li hostname becomes http://hostname
    \li /home/user/test.html becomes file:///home/user/test.html
    \endlist

    In order to be able to handle relative paths, this method takes an optional
    \a workingDirectory path. This is especially useful when handling command
    line arguments.
    If \a workingDirectory is empty, no handling of relative paths will be done.

    By default, an input string that looks like a relative path will only be treated
    as such if the file actually exists in the given working directory.
    If the application can handle files that don&apos;t exist yet, it should pass the
    flag AssumeLocalFile in \a options.

    \since 5.4
*/</doc>
