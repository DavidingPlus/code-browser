<inh f='include/unicode/bytestream.h' l='53' c='icu_66::ByteSink'/>
<def f='include/unicode/bytestream.h' l='148' ll='227'/>
<use f='include/unicode/bytestream.h' l='170' c='_ZN6icu_6620CheckedArrayByteSink5ResetEv'/>
<use f='include/unicode/bytestream.h' l='225' c='_ZN6icu_6620CheckedArrayByteSinkC1ERKS0_'/>
<use f='include/unicode/bytestream.h' l='226' c='_ZN6icu_6620CheckedArrayByteSinkaSERKS0_'/>
<use f='include/unicode/bytestream.h' l='226' c='_ZN6icu_6620CheckedArrayByteSinkaSERKS0_'/>
<size>32</size>
<doc f='include/unicode/bytestream.h' l='139'>/** 
 * Implementation of ByteSink that writes to a flat byte array,
 * with bounds-checking:
 * This sink will not write more than capacity bytes to outbuf.
 * If more than capacity bytes are Append()ed, then excess bytes are ignored,
 * and Overflowed() will return true.
 * Overflow does not cause a runtime error.
 * @stable ICU 4.2
 */</doc>
<fun r='_ZN6icu_6620CheckedArrayByteSinkC1EPci'/>
<fun r='_ZN6icu_6620CheckedArrayByteSinkD1Ev'/>
<fun r='_ZN6icu_6620CheckedArrayByteSink5ResetEv'/>
<fun r='_ZN6icu_6620CheckedArrayByteSink6AppendEPKci'/>
<fun r='_ZN6icu_6620CheckedArrayByteSink15GetAppendBufferEiiPciPi'/>
<fun r='_ZNK6icu_6620CheckedArrayByteSink20NumberOfBytesWrittenEv'/>
<fun r='_ZNK6icu_6620CheckedArrayByteSink10OverflowedEv'/>
<fun r='_ZNK6icu_6620CheckedArrayByteSink21NumberOfBytesAppendedEv'/>
<mbr r='icu_66::CheckedArrayByteSink::outbuf_' o='64' t='char *'/>
<mbr r='icu_66::CheckedArrayByteSink::capacity_' o='128' t='const int32_t'/>
<mbr r='icu_66::CheckedArrayByteSink::size_' o='160' t='int32_t'/>
<mbr r='icu_66::CheckedArrayByteSink::appended_' o='192' t='int32_t'/>
<mbr r='icu_66::CheckedArrayByteSink::overflowed_' o='224' t='UBool'/>
<fun r='_ZN6icu_6620CheckedArrayByteSinkC1Ev'/>
<fun r='_ZN6icu_6620CheckedArrayByteSinkC1ERKS0_'/>
<fun r='_ZN6icu_6620CheckedArrayByteSinkaSERKS0_'/>
