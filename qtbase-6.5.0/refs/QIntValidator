<use f='qtbase-6.5.0/src/corelib/text/qlocale.h' l='33'/>
<inh f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='23' c='QValidator'/>
<def f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='55' ll='84'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='80' c='_ZN13QIntValidatorC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='80' c='_ZN13QIntValidatoraSERKS_'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='80' c='_ZN13QIntValidatoraSERKS_'/>
<size>24</size>
<smbr r='QIntValidator::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK13QIntValidator10metaObjectEv'/>
<fun r='_ZN13QIntValidator11qt_metacastEPKc'/>
<fun r='_ZN13QIntValidator11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QIntValidator2trEPKcS1_i'/>
<fun r='_ZN13QIntValidator18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QIntValidatorC1EP7QObject'/>
<fun r='_ZN13QIntValidatorC1EiiP7QObject'/>
<fun r='_ZN13QIntValidatorD1Ev'/>
<fun r='_ZNK13QIntValidator8validateER7QStringRi'/>
<fun r='_ZNK13QIntValidator5fixupER7QString'/>
<fun r='_ZN13QIntValidator9setBottomEi'/>
<fun r='_ZN13QIntValidator6setTopEi'/>
<fun r='_ZN13QIntValidator8setRangeEii'/>
<fun r='_ZNK13QIntValidator6bottomEv'/>
<fun r='_ZNK13QIntValidator3topEv'/>
<fun r='_ZN13QIntValidator13bottomChangedEi'/>
<fun r='_ZN13QIntValidator10topChangedEi'/>
<fun r='_ZN13QIntValidatorC1ERKS_'/>
<mbr r='QIntValidator::b' o='128' t='int'/>
<mbr r='QIntValidator::t' o='160' t='int'/>
<use f='qtbase-6.5.0/src/gui/util/qvalidator.cpp' l='297' c='_ZN13QIntValidatorC1EP7QObject'/>
<size>24</size>
<doc f='qtbase-6.5.0/src/gui/util/qvalidator.cpp' l='255'>/*!
    \class QIntValidator
    \brief The QIntValidator class provides a validator that ensures
    a string contains a valid integer within a specified range.
    \inmodule QtGui

    Example of use:

    \snippet code/src_gui_util_qvalidator.cpp 0

    Below we present some examples of validators. In practice they would
    normally be associated with a widget as in the example above.

    \snippet code/src_gui_util_qvalidator.cpp 1

    Notice that the value \c 999 returns Intermediate. Values
    consisting of a number of digits equal to or less than the max
    value are considered intermediate. This is intended because the
    digit that prevents a number from being in range is not necessarily the
    last digit typed. This also means that an intermediate number can
    have leading zeros.

    The minimum and maximum values are set in one call with setRange(),
    or individually with setBottom() and setTop().

    QIntValidator uses its locale() to interpret the number. For example,
    in Arabic locales, QIntValidator will accept Arabic digits.

    \note The QLocale::NumberOptions set on the locale() also affect the
    way the number is interpreted. For example, since QLocale::RejectGroupSeparator
    is not set by default, the validator will accept group separators. It is thus
    recommended to use QLocale::toInt() to obtain the numeric value.

    \sa QDoubleValidator, QRegularExpressionValidator, QLocale::toInt(), {Line Edits Example}
*/</doc>
<fun r='_ZN13QIntValidatorC1EP7QObject'/>
<fun r='_ZN13QIntValidatorC1EiiP7QObject'/>
<fun r='_ZN13QIntValidatorD1Ev'/>
<fun r='_ZNK13QIntValidator8validateER7QStringRi'/>
<fun r='_ZNK13QIntValidator5fixupER7QString'/>
<fun r='_ZN13QIntValidator8setRangeEii'/>
<fun r='_ZN13QIntValidator9setBottomEi'/>
<fun r='_ZN13QIntValidator6setTopEi'/>
<use f='qtbase-6.5.0/src/printsupport/dialogs/qprintpreviewdialog.cpp' l='459' c='_ZN26QPrintPreviewDialogPrivate18updatePageNumLabelEv'/>
<size>24</size>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfontdialog.cpp' l='172' c='_ZN18QFontDialogPrivate4initEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfontdialog.cpp' l='172' c='_ZN18QFontDialogPrivate4initEv'/>
<size>24</size>
