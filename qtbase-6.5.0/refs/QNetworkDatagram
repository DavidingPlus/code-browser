<def f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='17' ll='77'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='23' c='_ZN16QNetworkDatagramC1ERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='24' c='_ZN16QNetworkDatagramaSERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='24' c='_ZN16QNetworkDatagramaSERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='28' c='_ZN16QNetworkDatagramC1EOS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='31' c='_ZN16QNetworkDatagramaSEOS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='31' c='_ZN16QNetworkDatagramaSEOS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='34' c='_ZN16QNetworkDatagram4swapERS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='59' c='_ZNKR16QNetworkDatagram9makeReplyERK10QByteArray'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='61' c='_ZNO16QNetworkDatagram9makeReplyERK10QByteArray'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='74' c='_ZNK16QNetworkDatagram16makeReply_helperERK10QByteArray'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='79'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='79'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='79'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='79'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='79'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='79' c='_Z4swapR16QNetworkDatagramS0_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='79' c='_Z4swapR16QNetworkDatagramS0_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='83' c='_Z27qRegisterNormalizedMetaTypeRK10QByteArray'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='83'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='83'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='83' c='_ZN11QMetaTypeIdI16QNetworkDatagramE14qt_metatype_idEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='83' c='_ZN11QMetaTypeIdI16QNetworkDatagramE14qt_metatype_idEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.h' l='83' c='_ZN11QMetaTypeIdI16QNetworkDatagramE14qt_metatype_idEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.cpp' l='11' c='_Z44qRegisterNormalizedMetaType_QNetworkDatagramRK10QByteArray'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.cpp' l='129' c='_ZN16QNetworkDatagramC1ERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.cpp' l='145' c='_ZN16QNetworkDatagramaSERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.cpp' l='145' c='_ZN16QNetworkDatagramaSERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.cpp' l='461' c='_ZNK16QNetworkDatagram16makeReply_helperERK10QByteArray'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.cpp' l='469' c='_ZNK16QNetworkDatagram16makeReply_helperERK10QByteArray'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/network/kernel/qnetworkdatagram.cpp' l='13'>/*!
    \class QNetworkDatagram
    \brief The QNetworkDatagram class provides the data and metadata of a UDP datagram.
    \since 5.8
    \ingroup network
    \inmodule QtNetwork
    \reentrant

    QNetworkDatagram can be used with the \l QUdpSocket class to represent the full
    information contained in a UDP (User Datagram Protocol) datagram.
    QNetworkDatagram encapsulates the following information of a datagram:
    \list
      \li the payload data;
      \li the sender address and port number;
      \li the destination address and port number;
      \li the remaining hop count limit (on IPv4, this field is usually called &quot;time to live&quot; - TTL);
      \li the network interface index the datagram was received on or to be sent on.
    \endlist

    QUdpSocket will try to match a common behavior as much as possible on all
    operating systems, but not all of the metadata above can be obtained in
    some operating systems. Metadata that cannot be set on the datagram when
    sending with QUdpSocket::writeDatagram() will be silently discarded.

    Upon reception, the senderAddress() and senderPort() properties contain the
    address and port of the peer that sent the datagram, while
    destinationAddress() and destinationPort() contain the target that was
    contained in the datagram. That is usually an address local to the current
    machine, but it can also be an IPv4 broadcast address (such as
    &quot;255.255.255.255&quot;) or an IPv4 or IPv6 multicast address. Applications may
    find it useful to determine if the datagram was sent specifically to this
    machine via unicast addressing or whether it was sent to multiple destinations.

    When sending, the senderAddress() and senderPort() should contain the local
    address to be used when sending. The sender address must be an address that
    is assigned to this machine, which can be obtained using
    \l{QNetworkInterface}, and the port number must be the port number that the
    socket is bound to. Either field can be left unset and will be filled in by
    the operating system with default values. The destinationAddress() and
    destinationPort() fields may be set to a target address different from the
    one the UDP socket is currently associated with.

    Usually, when sending a datagram in reply to a datagram previously
    received, one will set the destinationAddress() to be the senderAddress()
    of the incoming datagram and similarly for the port numbers. To facilitate
    this common process, QNetworkDatagram provides the function makeReply().

    The hopCount() function contains, for a received datagram, the remaining
    hop count limit for the packet. When sending, it contains the hop count
    limit to be set. Most protocols will leave this value set to the default
    and let the operating system decide on the best value to be used.
    Multicasting over IPv4 often uses this field to indicate the scope of the
    multicast group (link-local, local to an organization or global).

    The interfaceIndex() function contains the index of the operating system&apos;s
    interface that received the packet. This value is the same one that can be
    set on a QHostAddress::scopeId() property and matches the
    QNetworkInterface::index() property. When sending packets to global
    addresses, it is not necessary to set the interface index as the operating
    system will choose the correct one using the system routing table. This
    property is important when sending datagrams to link-local destinations,
    whether unicast or multicast.

    \section1 Feature support

    Some features of QNetworkDatagram are not supported in all operating systems.
    Only the address and ports of the remote host (sender in received packets
    and destination for outgoing packets) are supported in all systems. On most
    operating systems, the other features are supported only for IPv6. Software
    should check at runtime whether the rest could be determined for IPv4
    addresses.

    The current feature support is as follows:

    \table
      \header   \li Operating system    \li Local address   \li Hop count       \li Interface index
      \row      \li FreeBSD             \li Supported       \li Supported       \li Only for IPv6
      \row      \li Linux               \li Supported       \li Supported       \li Supported
      \row      \li OS X                \li Supported       \li Supported       \li Only for IPv6
      \row      \li Other Unix supporting RFC 3542 \li Only for IPv6 \li Only for IPv6 \li Only for IPv6
      \row      \li Windows (desktop)   \li Supported       \li Supported       \li Supported
      \row      \li Windows RT          \li Not supported   \li Not supported   \li Not supported
    \endtable

    \sa QUdpSocket, QNetworkInterface
 */</doc>
<fun r='_ZN16QNetworkDatagramC1Ev'/>
<fun r='_ZN16QNetworkDatagramC1ERK10QByteArrayRK12QHostAddresst'/>
<fun r='_ZN16QNetworkDatagramC1ERKS_'/>
<fun r='_ZN16QNetworkDatagramaSERKS_'/>
<fun r='_ZN16QNetworkDatagramD1Ev'/>
<fun r='_ZN16QNetworkDatagramC1EOS_'/>
<fun r='_ZN16QNetworkDatagramaSEOS_'/>
<fun r='_ZN16QNetworkDatagram4swapERS_'/>
<fun r='_ZN16QNetworkDatagram5clearEv'/>
<fun r='_ZNK16QNetworkDatagram7isValidEv'/>
<fun r='_ZNK16QNetworkDatagram6isNullEv'/>
<fun r='_ZNK16QNetworkDatagram14interfaceIndexEv'/>
<fun r='_ZN16QNetworkDatagram17setInterfaceIndexEj'/>
<fun r='_ZNK16QNetworkDatagram13senderAddressEv'/>
<fun r='_ZNK16QNetworkDatagram18destinationAddressEv'/>
<fun r='_ZNK16QNetworkDatagram10senderPortEv'/>
<fun r='_ZNK16QNetworkDatagram15destinationPortEv'/>
<fun r='_ZN16QNetworkDatagram9setSenderERK12QHostAddresst'/>
<fun r='_ZN16QNetworkDatagram14setDestinationERK12QHostAddresst'/>
<fun r='_ZNK16QNetworkDatagram8hopLimitEv'/>
<fun r='_ZN16QNetworkDatagram11setHopLimitEi'/>
<fun r='_ZNK16QNetworkDatagram4dataEv'/>
<fun r='_ZN16QNetworkDatagram7setDataERK10QByteArray'/>
<fun r='_ZNKR16QNetworkDatagram9makeReplyERK10QByteArray'/>
<fun r='_ZNO16QNetworkDatagram9makeReplyERK10QByteArray'/>
<mbr r='QNetworkDatagram::d' o='0' t='QNetworkDatagramPrivate *'/>
<fun r='_ZN16QNetworkDatagramC1ER23QNetworkDatagramPrivate'/>
<fun r='_ZNK16QNetworkDatagram16makeReply_helperERK10QByteArray'/>
<fun r='_ZN16QNetworkDatagram24makeReply_helper_inplaceERK10QByteArray'/>
<fun r='_ZN16QNetworkDatagram7destroyEP23QNetworkDatagramPrivate'/>
<fun r='_ZN16QNetworkDatagramC1Ev'/>
<fun r='_ZN16QNetworkDatagramC1ERK10QByteArrayRK12QHostAddresst'/>
<fun r='_ZN16QNetworkDatagramC1ERKS_'/>
<fun r='_ZN16QNetworkDatagramC1ER23QNetworkDatagramPrivate'/>
<fun r='_ZN16QNetworkDatagramaSERKS_'/>
<fun r='_ZN16QNetworkDatagram5clearEv'/>
<fun r='_ZNK16QNetworkDatagram7isValidEv'/>
<fun r='_ZNK16QNetworkDatagram13senderAddressEv'/>
<fun r='_ZNK16QNetworkDatagram18destinationAddressEv'/>
<fun r='_ZNK16QNetworkDatagram10senderPortEv'/>
<fun r='_ZNK16QNetworkDatagram15destinationPortEv'/>
<fun r='_ZN16QNetworkDatagram9setSenderERK12QHostAddresst'/>
<fun r='_ZN16QNetworkDatagram14setDestinationERK12QHostAddresst'/>
<fun r='_ZNK16QNetworkDatagram8hopLimitEv'/>
<fun r='_ZN16QNetworkDatagram11setHopLimitEi'/>
<fun r='_ZNK16QNetworkDatagram14interfaceIndexEv'/>
<fun r='_ZN16QNetworkDatagram17setInterfaceIndexEj'/>
<fun r='_ZNK16QNetworkDatagram4dataEv'/>
<fun r='_ZN16QNetworkDatagram7setDataERK10QByteArray'/>
<fun r='_ZNK16QNetworkDatagram16makeReply_helperERK10QByteArray'/>
<fun r='_ZN16QNetworkDatagram24makeReply_helper_inplaceERK10QByteArray'/>
<fun r='_ZN16QNetworkDatagram7destroyEP23QNetworkDatagramPrivate'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.h' l='48' c='_ZN10QUdpSocket15receiveDatagramEx'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.h' l='51' c='_ZN10QUdpSocket13writeDatagramERK16QNetworkDatagram'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='370' c='_ZN10QUdpSocket13writeDatagramERK16QNetworkDatagram'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='415' c='_ZN10QUdpSocket15receiveDatagramEx'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='422' c='_ZN10QUdpSocket15receiveDatagramEx'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='427' c='_ZN10QUdpSocket15receiveDatagramEx'/>
<use f='qtbase-6.5.0/src/network/socket/qudpsocket.cpp' l='429' c='_ZN10QUdpSocket15receiveDatagramEx'/>
<size>8</size>
