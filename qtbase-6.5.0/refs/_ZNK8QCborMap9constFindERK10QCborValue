<use f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='205' u='c' c='_ZN8QCborMap4takeERK10QCborValue'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='213' u='c' c='_ZN8QCborMap6removeERK10QCborValue'/>
<dec f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='264' type='QCborMap::const_iterator QCborMap::constFind(const QCborValue &amp; key) const'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='268' u='c' c='_ZNK8QCborMap4findERK10QCborValue'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcbormap.cpp' l='868' u='c' c='_ZN8QCborMap4findERK10QCborValue'/>
<def f='qtbase-6.5.0/src/corelib/serialization/qcbormap.cpp' l='951' ll='954' type='QCborMap::const_iterator QCborMap::constFind(const QCborValue &amp; key) const'/>
<doc f='qtbase-6.5.0/src/corelib/serialization/qcbormap.cpp' l='935'>/*!
    \overload

    Returns a map iterator to the key-value pair whose key is \a key, if the
    map contains such a pair. If it doesn&apos;t, this function returns constEnd().

    If the map contains more than one key equal to \a key, it is undefined
    which one this function will find. QCborMap does not allow inserting
    duplicate keys, but it is possible to create such a map by decoding a CBOR
    stream with them. They are usually not permitted and having duplicate keys
    is usually an indication of a problem in the sender.

    \sa value(const QCborValue &amp;), operator[](const QCborValue &amp;), find(const QCborValue &amp;),
        remove(const QCborValue &amp;), contains(const QCborValue &amp;),
        value(qint64), value(QLatin1StringView), value(const QString &amp;)
 */</doc>
