<dec f='qtbase-6.5.0/src/opengl/qopenglframebufferobject.h' l='75' type='QImage QOpenGLFramebufferObject::toImage(bool flipped = true) const'/>
<use f='qtbase-6.5.0/src/opengl/qopenglcompositor.cpp' l='91' u='c' c='_ZN17QOpenGLCompositor4grabEv'/>
<def f='qtbase-6.5.0/src/opengl/qopenglframebufferobject.cpp' l='1473' ll='1476' type='QImage QOpenGLFramebufferObject::toImage(bool flipped = true) const'/>
<use f='qtbase-6.5.0/src/opengl/qopenglframebufferobject.cpp' l='1526' u='c' c='_ZNK24QOpenGLFramebufferObject7toImageEbi'/>
<use f='qtbase-6.5.0/src/opengl/qopenglframebufferobject.cpp' l='1531' u='c' c='_ZNK24QOpenGLFramebufferObject7toImageEbi'/>
<doc f='qtbase-6.5.0/src/opengl/qopenglframebufferobject.cpp' l='1435'>/*!
    \fn QImage QOpenGLFramebufferObject::toImage(bool flipped) const

    Returns the contents of this framebuffer object as a QImage.

    If \a flipped is true the image is flipped from OpenGL coordinates to raster coordinates.
    If used together with QOpenGLPaintDevice, \a flipped should be the opposite of the value
    of QOpenGLPaintDevice::paintFlipped().

    The returned image has a format of premultiplied ARGB32 or RGB32. The latter
    is used only when internalTextureFormat() is set to \c GL_RGB. Since Qt 5.2
    the function will fall back to premultiplied RGBA8888 or RGBx8888 when
    reading to (A)RGB32 is not supported, and this includes OpenGL ES. Since Qt
    5.4 an A2BGR30 image is returned if the internal format is RGB10_A2, and since
    Qt 5.12 a RGBA64 image is return if the internal format is RGBA16.

    If the rendering in the framebuffer was not done with premultiplied alpha in mind,
    create a wrapper QImage with a non-premultiplied format. This is necessary before
    performing operations like QImage::save() because otherwise the image data would get
    unpremultiplied, even though it was not premultiplied in the first place. To create
    such a wrapper without performing a copy of the pixel data, do the following:

    \code
    QImage fboImage(fbo.toImage());
    QImage image(fboImage.constBits(), fboImage.width(), fboImage.height(), QImage::Format_ARGB32);
    \endcode

    For multisampled framebuffer objects the samples are resolved using the
    \c{GL_EXT_framebuffer_blit} extension. If the extension is not available, the contents
    of the returned image is undefined.

    For singlesampled framebuffers the contents is retrieved via \c glReadPixels. This is
    a potentially expensive and inefficient operation. Therefore it is recommended that
    this function is used as seldom as possible.

    \sa QOpenGLPaintDevice::paintFlipped()
*/</doc>
