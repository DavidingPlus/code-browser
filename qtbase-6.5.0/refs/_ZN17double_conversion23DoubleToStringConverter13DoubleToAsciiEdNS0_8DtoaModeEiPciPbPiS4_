<dec f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.h' l='397' type='static void double_conversion::DoubleToStringConverter::DoubleToAscii(double v, double_conversion::DoubleToStringConverter::DtoaMode mode, int requested_digits, char * buffer, int buffer_length, bool * sign, int * length, int * point)'/>
<use f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.cc' l='182' u='c' c='_ZNK17double_conversion23DoubleToStringConverter20ToShortestIeeeNumberEdPNS_13StringBuilderENS0_8DtoaModeE'/>
<use f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.cc' l='226' u='c' c='_ZNK17double_conversion23DoubleToStringConverter7ToFixedEdiPNS_13StringBuilderE'/>
<use f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.cc' l='267' u='c' c='_ZNK17double_conversion23DoubleToStringConverter13ToExponentialEdiPNS_13StringBuilderE'/>
<use f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.cc' l='271' u='c' c='_ZNK17double_conversion23DoubleToStringConverter13ToExponentialEdiPNS_13StringBuilderE'/>
<use f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.cc' l='315' u='c' c='_ZNK17double_conversion23DoubleToStringConverter11ToPrecisionEdiPNS_13StringBuilderE'/>
<def f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.cc' l='379' ll='438' type='static void double_conversion::DoubleToStringConverter::DoubleToAscii(double v, double_conversion::DoubleToStringConverter::DtoaMode mode, int requested_digits, char * buffer, int buffer_length, bool * sign, int * length, int * point)'/>
<doc f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.h' l='354'>// Converts the given double &apos;v&apos; to digit characters. &apos;v&apos; must not be NaN,
  // +Infinity, or -Infinity. In SHORTEST_SINGLE-mode this restriction also
  // applies to &apos;v&apos; after it has been casted to a single-precision float. That
  // is, in this mode static_cast&lt;float&gt;(v) must not be NaN, +Infinity or
  // -Infinity.
  //
  // The result should be interpreted as buffer * 10^(point-length).
  //
  // The digits are written to the buffer in the platform&apos;s charset, which is
  // often UTF-8 (with ASCII-range digits) but may be another charset, such
  // as EBCDIC.
  //
  // The output depends on the given mode:
  //  - SHORTEST: produce the least amount of digits for which the internal
  //   identity requirement is still satisfied. If the digits are printed
  //   (together with the correct exponent) then reading this number will give
  //   &apos;v&apos; again. The buffer will choose the representation that is closest to
  //   &apos;v&apos;. If there are two at the same distance, than the one farther away
  //   from 0 is chosen (halfway cases - ending with 5 - are rounded up).
  //   In this mode the &apos;requested_digits&apos; parameter is ignored.
  //  - SHORTEST_SINGLE: same as SHORTEST but with single-precision.
  //  - FIXED: produces digits necessary to print a given number with
  //   &apos;requested_digits&apos; digits after the decimal point. The produced digits
  //   might be too short in which case the caller has to fill the remainder
  //   with &apos;0&apos;s.
  //   Example: toFixed(0.001, 5) is allowed to return buffer=&quot;1&quot;, point=-2.
  //   Halfway cases are rounded towards +/-Infinity (away from 0). The call
  //   toFixed(0.15, 2) thus returns buffer=&quot;2&quot;, point=0.
  //   The returned buffer may contain digits that would be truncated from the
  //   shortest representation of the input.
  //  - PRECISION: produces &apos;requested_digits&apos; where the first digit is not &apos;0&apos;.
  //   Even though the length of produced digits usually equals
  //   &apos;requested_digits&apos;, the function is allowed to return fewer digits, in
  //   which case the caller has to fill the missing digits with &apos;0&apos;s.
  //   Halfway cases are again rounded away from 0.
  // DoubleToAscii expects the given buffer to be big enough to hold all
  // digits and a terminating null-character. In SHORTEST-mode it expects a
  // buffer of at least kBase10MaximalLength + 1. In all other modes the
  // requested_digits parameter and the padding-zeroes limit the size of the
  // output. Don&apos;t forget the decimal point, the exponent character and the
  // terminating null-character when computing the maximal output size.
  // The given length is only used in debug mode to ensure the buffer is big
  // enough.</doc>
