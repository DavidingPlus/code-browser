<dec f='qtbase-6.5.0/src/corelib/animation/qvariantanimation.h' l='70' type='QVariant QVariantAnimation::interpolated(const QVariant &amp; from, const QVariant &amp; to, qreal progress) const'/>
<use f='qtbase-6.5.0/src/corelib/animation/qvariantanimation.cpp' l='249' u='c' c='_ZN24QVariantAnimationPrivate26setCurrentValueForProgressEd'/>
<def f='qtbase-6.5.0/src/corelib/animation/qvariantanimation.cpp' l='662' ll='665' type='QVariant QVariantAnimation::interpolated(const QVariant &amp; from, const QVariant &amp; to, qreal progress) const'/>
<doc f='qtbase-6.5.0/src/corelib/animation/qvariantanimation.cpp' l='642'>/*!

    This virtual function returns the linear interpolation between
    variants \a from and \a to, at \a progress, usually a value
    between 0 and 1. You can reimplement this function in a subclass
    of QVariantAnimation to provide your own interpolation algorithm.

    Note that in order for the interpolation to work with a
    QEasingCurve that return a value smaller than 0 or larger than 1
    (such as QEasingCurve::InBack) you should make sure that it can
    extrapolate. If the semantic of the datatype does not allow
    extrapolation this function should handle that gracefully.

    You should call the QVariantAnimation implementation of this
    function if you want your class to handle the types already
    supported by Qt (see class QVariantAnimation description for a
    list of supported types).

    \sa QEasingCurve
 */</doc>
