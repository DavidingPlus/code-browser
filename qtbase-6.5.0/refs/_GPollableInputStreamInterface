<use f='include/glib-2.0/gio/gpollableinputstream.h' l='42'/>
<def f='include/glib-2.0/gio/gpollableinputstream.h' l='66' ll='80'/>
<size>48</size>
<doc f='include/glib-2.0/gio/gpollableinputstream.h' l='44'>/**
 * GPollableInputStreamInterface:
 * @g_iface: The parent interface.
 * @can_poll: Checks if the #GPollableInputStream instance is actually pollable
 * @is_readable: Checks if the stream is readable
 * @create_source: Creates a #GSource to poll the stream
 * @read_nonblocking: Does a non-blocking read or returns
 *   %G_IO_ERROR_WOULD_BLOCK
 *
 * The interface for pollable input streams.
 *
 * The default implementation of @can_poll always returns %TRUE.
 *
 * The default implementation of @read_nonblocking calls
 * g_pollable_input_stream_is_readable(), and then calls
 * g_input_stream_read() if it returns %TRUE. This means you only need
 * to override it if it is possible that your @is_readable
 * implementation may return %TRUE when the stream is not actually
 * readable.
 *
 * Since: 2.28
 */</doc>
<mbr r='_GPollableInputStreamInterface::g_iface' o='0' t='GTypeInterface'/>
<mbr r='_GPollableInputStreamInterface::can_poll' o='128' t='gboolean (*)(GPollableInputStream *)'/>
<mbr r='_GPollableInputStreamInterface::is_readable' o='192' t='gboolean (*)(GPollableInputStream *)'/>
<mbr r='_GPollableInputStreamInterface::create_source' o='256' t='GSource *(*)(GPollableInputStream *, GCancellable *)'/>
<mbr r='_GPollableInputStreamInterface::read_nonblocking' o='320' t='gssize (*)(GPollableInputStream *, void *, gsize, GError **)'/>
