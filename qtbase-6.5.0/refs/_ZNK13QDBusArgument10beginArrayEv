<dec f='qtbase-6.5.0/src/dbus/qdbusargument.h' l='106' type='void QDBusArgument::beginArray() const'/>
<use f='qtbase-6.5.0/src/dbus/qdbusargument.h' l='210' u='c' c='_ZrsRK13QDBusArgumentRT_IT0_E'/>
<def f='qtbase-6.5.0/src/dbus/qdbusargument.cpp' l='975' ll='979' type='void QDBusArgument::beginArray() const'/>
<doc f='qtbase-6.5.0/src/dbus/qdbusargument.cpp' l='957'>/*!
    Recurses into the D-Bus array to allow extraction of
    the array elements.

    This function is used usually in \c{operator&gt;&gt;} streaming
    operators, as in the following example:

    \snippet code/src_qdbus_qdbusargument.cpp 9

    If the type you want to demarshall is a QList or any of the
    Qt&apos;s \l {Container Classes} that take one template parameter, you
    need not declare an \c{operator&gt;&gt;} function for it, since Qt D-Bus
    provides generic templates to do the job of demarshalling the data.
    The same applies for STL&apos;s sequence containers, such as \c {std::list},
    \c {std::vector}, etc.

    \sa atEnd(), beginStructure(), beginMap()
*/</doc>
<use f='qtbase-6.5.0/src/dbus/qdbusutil.cpp' l='145' u='c' c='_ZL11argToStringRK13QDBusArgumentR7QString'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/dbusmenu/qdbusmenutypes.cpp' l='129' u='c' c='_ZrsRK13QDBusArgumentR19QDBusMenuLayoutItem'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/dbustray/qdbustraytypes.cpp' l='131' u='c' c='_ZrsRK13QDBusArgumentR5QListI19QXdgDBusImageStructE'/>
<use f='qtbase-6.5.0/src/plugins/platforminputcontexts/ibus/qibustypes.cpp' l='162' u='c' c='_ZN18QIBusAttributeList15deserializeFromERK13QDBusArgument'/>
