<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='3371' type='void sqlite3_randomness(int N, void * P)'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='32696' ll='32767' type='void sqlite3_randomness(int N, void * pBuf)'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='42834' u='c' c='unixGetTempname'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='43119' u='c' c='unixOpen'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='52570' u='c' c='sqlite3BitvecBuiltinTest'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='56981' u='c' c='writeJournalHdr'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='65401' u='c' c='walCheckpoint'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='66665' u='c' c='walRestartLog'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='66877' u='c' c='sqlite3WalFrames'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='85314' u='c' c='vdbeCommit'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='95704' u='c' c='sqlite3VdbeExec'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='125264' u='c' c='randomFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='125298' u='c' c='randomBlob'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='133068'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='140535' u='c' c='sqlite3ColumnsFromExprList'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='177998' u='c' c='sqlite3_test_control'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='3350'>/*
** CAPI3REF: Pseudo-Random Number Generator
**
** SQLite contains a high-quality pseudo-random number generator (PRNG) used to
** select random [ROWID | ROWIDs] when inserting new records into a table that
** already uses the largest possible [ROWID].  The PRNG is also used for
** the built-in random() and randomblob() SQL functions.  This interface allows
** applications to access the same PRNG for other purposes.
**
** ^A call to this routine stores N bytes of randomness into buffer P.
** ^The P parameter can be a NULL pointer.
**
** ^If this routine has not been previously called or if the previous
** call had N less than one or a NULL pointer for P, then the PRNG is
** seeded using randomness obtained from the xRandomness method of
** the default [sqlite3_vfs] object.
** ^If the previous call to this routine had an N of 1 or more and a
** non-NULL P then the pseudo-randomness is generated
** internally and without recourse to the [sqlite3_vfs] xRandomness
** method.
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='32693'>/*
** Return N random bytes.
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='3065' type='void sqlite3_randomness(int N, void * P)'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='3044'>/*
** CAPI3REF: Pseudo-Random Number Generator
**
** SQLite contains a high-quality pseudo-random number generator (PRNG) used to
** select random [ROWID | ROWIDs] when inserting new records into a table that
** already uses the largest possible [ROWID].  The PRNG is also used for
** the built-in random() and randomblob() SQL functions.  This interface allows
** applications to access the same PRNG for other purposes.
**
** ^A call to this routine stores N bytes of randomness into buffer P.
** ^The P parameter can be a NULL pointer.
**
** ^If this routine has not been previously called or if the previous
** call had N less than one or a NULL pointer for P, then the PRNG is
** seeded using randomness obtained from the xRandomness method of
** the default [sqlite3_vfs] object.
** ^If the previous call to this routine had an N of 1 or more and a
** non-NULL P then the pseudo-randomness is generated
** internally and without recourse to the [sqlite3_vfs] xRandomness
** method.
*/</doc>
