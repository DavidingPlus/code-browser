<dec f='qtbase-6.5.0/src/widgets/kernel/qwidget.h' l='427' type='void QWidget::activateWindow()'/>
<use f='qtbase-6.5.0/src/widgets/accessible/qaccessiblewidget.cpp' l='421' u='c' c='_ZN17QAccessibleWidget8doActionERK7QString'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='2972' u='c' c='_ZN7QWidget14setWindowStateE6QFlagsIN2Qt11WindowStateEE'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='3037' u='c' c='_ZN7QWidget14showFullScreenEv'/>
<def f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='12783' ll='12789' type='void QWidget::activateWindow()'/>
<doc f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='12759'>/*!
    \fn void QWidget::activateWindow()

    Sets the top-level widget containing this widget to be the active
    window.

    An active window is a visible top-level window that has the
    keyboard input focus.

    This function performs the same operation as clicking the mouse on
    the title bar of a top-level window. On X11, the result depends on
    the Window Manager. If you want to ensure that the window is
    stacked on top as well you should also call raise(). Note that the
    window must be visible, otherwise activateWindow() has no effect.

    On Windows, if you are calling this when the application is not
    currently the active one then it will not make it the active
    window.  It will change the color of the taskbar entry to indicate
    that the window has changed in some way. This is because Microsoft
    does not allow an application to interrupt what the user is currently
    doing in another application.

    \sa isActiveWindow(), window(), show()
*/</doc>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidgetwindow.cpp' l='546' u='c' c='_ZN13QWidgetWindow16handleMouseEventEP11QMouseEvent'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qdockwidget.cpp' l='851' u='c' c='_ZN18QDockWidgetPrivate7endDragEb'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qtoolbar.cpp' l='199' u='c' c='_ZN15QToolBarPrivate7endDragEv'/>
