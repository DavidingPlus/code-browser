<dec f='qtbase-6.5.0/src/network/socket/qnativesocketengine_p.h' l='105' type='bool QNativeSocketEngine::waitForRead(int msecs = 30000, bool * timedOut = nullptr)'/>
<inh f='qtbase-6.5.0/src/network/socket/qabstractsocketengine_p.h' l='131' c='_ZN21QAbstractSocketEngine11waitForReadEiPb'/>
<def f='qtbase-6.5.0/src/network/socket/qnativesocketengine.cpp' l='979' ll='1002' type='bool QNativeSocketEngine::waitForRead(int msecs = 30000, bool * timedOut = nullptr)'/>
<doc f='qtbase-6.5.0/src/network/socket/qnativesocketengine.cpp' l='964'>/*!
    Waits for \a msecs milliseconds or until the socket is ready for
    reading. If \a timedOut is not \nullptr and \a msecs milliseconds
    have passed, the value of \a timedOut is set to true.

    Returns \c true if data is available for reading; otherwise returns
    false.

    This is a blocking function call; its use is disadvised in a
    single threaded application, as the whole thread will stop
    responding until the function returns. waitForRead() is most
    useful when there is no event loop available. The general approach
    is to create a QSocketNotifier, passing the socket descriptor
    returned by socketDescriptor() to its constructor.
*/</doc>
