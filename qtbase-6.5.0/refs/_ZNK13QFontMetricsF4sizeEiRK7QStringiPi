<dec f='qtbase-6.5.0/src/gui/text/qfontmetrics.h' l='132' type='QSizeF QFontMetricsF::size(int flags, const QString &amp; str, int tabstops = 0, int * tabarray = nullptr) const'/>
<def f='qtbase-6.5.0/src/gui/text/qfontmetrics.cpp' l='1716' ll='1719' type='QSizeF QFontMetricsF::size(int flags, const QString &amp; text, int tabStops = 0, int * tabArray = nullptr) const'/>
<use f='qtbase-6.5.0/src/gui/text/qfontmetrics.cpp' l='1815' u='c' c='_ZNK13QFontMetricsF10elidedTextERK7QStringN2Qt13TextElideModeEdi'/>
<doc f='qtbase-6.5.0/src/gui/text/qfontmetrics.cpp' l='1688'>/*!
    Returns the size in pixels of the characters in the given \a text.

    The \a flags argument is the bitwise OR of the following flags:
    \list
    \li Qt::TextSingleLine ignores newline characters.
    \li Qt::TextExpandTabs expands tabs (see below)
    \li Qt::TextShowMnemonic interprets &quot;&amp;x&quot; as \underline{x}; i.e., underlined.
    \li Qt::TextWordWrap breaks the text to fit the rectangle.
    \endlist

    These flags are defined in the \l{Qt::TextFlag} enum.

    If Qt::TextExpandTabs is set in \a flags, the following behavior is
    used to interpret tab characters in the text:
    \list
    \li If \a tabArray is non-null, it specifies a 0-terminated sequence of
       pixel-positions for tabs in the text.
    \li If \a tabStops is non-zero, it is used as the tab spacing (in pixels).
    \endlist

    Newline characters are processed as line breaks.

    Note: Despite the different actual character heights, the heights of the
    bounding rectangles of &quot;Yes&quot; and &quot;yes&quot; are the same.

    \sa boundingRect()
*/</doc>
