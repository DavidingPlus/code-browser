<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='6569' type='char *'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='42794' u='r' c='unixTempFileDir'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='135272' u='r' c='sqlite3Pragma'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='135290' u='r' c='sqlite3Pragma'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='135292' u='w' c='sqlite3Pragma'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='135294' u='w' c='sqlite3Pragma'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='174113' type='char *'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='174364' u='w' c='sqlite3_shutdown'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='6513'>/*
** CAPI3REF: Name Of The Folder Holding Temporary Files
**
** ^(If this global variable is made to point to a string which is
** the name of a folder (a.k.a. directory), then all temporary files
** created by SQLite when using a built-in [sqlite3_vfs | VFS]
** will be placed in that directory.)^  ^If this variable
** is a NULL pointer, then SQLite performs a search for an appropriate
** temporary file directory.
**
** Applications are strongly discouraged from using this global variable.
** It is required to set a temporary folder on Windows Runtime (WinRT).
** But for all other platforms, it is highly recommended that applications
** neither read nor write this variable.  This global variable is a relic
** that exists for backwards compatibility of legacy applications and should
** be avoided in new projects.
**
** It is not safe to read or modify this variable in more than one
** thread at a time.  It is not safe to read or modify this variable
** if a [database connection] is being used at the same time in a separate
** thread.
** It is intended that this variable be set once
** as part of process initialization and before any SQLite interface
** routines have been called and that this variable remain unchanged
** thereafter.
**
** ^The [temp_store_directory pragma] may modify this variable and cause
** it to point to memory obtained from [sqlite3_malloc].  ^Furthermore,
** the [temp_store_directory pragma] always assumes that any string
** that this variable points to is held in memory obtained from
** [sqlite3_malloc] and the pragma may attempt to free that memory
** using [sqlite3_free].
** Hence, if this variable is modified directly, either it should be
** made NULL or made to point to memory obtained from [sqlite3_malloc]
** or else the use of the [temp_store_directory pragma] should be avoided.
** Except when requested by the [temp_store_directory pragma], SQLite
** does not free the memory that sqlite3_temp_directory points to.  If
** the application wants that memory to be freed, it must do
** so itself, taking care to only do so after all [database connection]
** objects have been destroyed.
**
** &lt;b&gt;Note to Windows Runtime users:&lt;/b&gt;  The temporary directory must be set
** prior to calling [sqlite3_open] or [sqlite3_open_v2].  Otherwise, various
** features that require the use of temporary files may fail.  Here is an
** example of how to do this using C++ with the Windows Runtime:
**
** &lt;blockquote&gt;&lt;pre&gt;
** LPCWSTR zPath = Windows::Storage::ApplicationData::Current-&gt;
** &amp;nbsp;     TemporaryFolder-&gt;Path-&gt;Data();
** char zPathBuf&amp;#91;MAX_PATH + 1&amp;#93;;
** memset(zPathBuf, 0, sizeof(zPathBuf));
** WideCharToMultiByte(CP_UTF8, 0, zPath, -1, zPathBuf, sizeof(zPathBuf),
** &amp;nbsp;     NULL, NULL);
** sqlite3_temp_directory = sqlite3_mprintf(&quot;%s&quot;, zPathBuf);
** &lt;/pre&gt;&lt;/blockquote&gt;
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='174106'>/*
** If the following global variable points to a string which is the
** name of a directory, then that directory will be used to store
** temporary files.
**
** See also the &quot;PRAGMA temp_store_directory&quot; SQL command.
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='6263' type='char *'/>
