<use f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.h' l='30' c='_ZN12QTestPrivate16testDataGuiRolesEP24QAbstractItemModelTester'/>
<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.h' l='33' ll='55'/>
<use f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.h' l='53' c='_ZN12QTestPrivate16testDataGuiRolesEP24QAbstractItemModelTester'/>
<use f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.h' l='58' c='_ZN12QTestPrivate16testDataGuiRolesEP24QAbstractItemModelTester'/>
<use f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.cpp' l='33' c='_ZN31QAbstractItemModelTesterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.cpp' l='33' c='_ZN31QAbstractItemModelTesterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.cpp' l='33' c='_ZNK31QAbstractItemModelTesterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.cpp' l='33' c='_ZNK31QAbstractItemModelTesterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.cpp' l='33'/>
<use f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.cpp' l='199' c='_ZN24QAbstractItemModelTesterC1EP18QAbstractItemModelP7QObject'/>
<use f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.cpp' l='672' c='_ZN31QAbstractItemModelTesterPrivate4dataEv'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/testlib/qabstractitemmodeltester.cpp' l='113'>/*!
    \class QAbstractItemModelTester
    \since 5.11
    \inmodule QtTest

    \brief The QAbstractItemModelTester class helps testing QAbstractItemModel subclasses.

    The QAbstractItemModelTester class is a utility class to test item models.

    When implementing an item model (that is, a concrete QAbstractItemModel
    subclass) one must abide to a very strict set of rules that ensure
    consistency for users of the model (views, proxy models, and so on).

    For instance, for a given index, a model&apos;s reimplementation of
    \l{QAbstractItemModel::hasChildren()}{hasChildren()} must be consistent
    with the values returned by \l{QAbstractItemModel::rowCount()}{rowCount()}
    and \l{QAbstractItemModel::columnCount()}{columnCount()}.

    QAbstractItemModelTester helps catching the most common errors in custom
    item model classes. By performing a series of tests, it
    will try to check that the model status is consistent at all times. The
    tests will be repeated automatically every time the model is modified.

    QAbstractItemModelTester employs non-destructive tests, which typically
    consist in reading data and metadata out of a given item model.
    QAbstractItemModelTester will also attempt illegal modifications of
    the model. In models which are properly implemented, such attempts
    should be rejected, and no data should be changed as a consequence.

    \section1 Usage

    Using QAbstractItemModelTester is straightforward. In a \l{Qt Test Overview}{test case}
    it is sufficient to create an instance, passing the model that
    needs to be tested to the constructor:

    \code
    MyModel *modelToBeTested = ...;
    auto tester = new QAbstractItemModelTester(modelToBeTested);
    \endcode

    QAbstractItemModelTester will report testing failures through the
    Qt Test logging mechanisms.

    It is also possible to use QAbstractItemModelTester outside of a test case.
    For instance, it may be useful to test an item model used by an application
    without the need of building an explicit unit test for such a model (which
    might be challenging). In order to use QAbstractItemModelTester outside of
    a test case, pass one of the \c QAbstractItemModelTester::FailureReportingMode
    enumerators to its constructor, therefore specifying how failures should
    be logged.

    QAbstractItemModelTester may also report additional debugging information
    as logging messages under the \c qt.modeltest logging category. Such
    debug logging is disabled by default; refer to the
    QLoggingCategory documentation to learn how to enable it.

    \note While QAbstractItemModelTester is a valid help for development and
    testing of custom item models, it does not (and cannot) catch all possible
    problems in QAbstractItemModel subclasses. Notably, it will never perform
    meaningful destructive testing of a model, which must be therefore tested
    separately.

    \sa {Model/View Programming}, QAbstractItemModel
*/</doc>
<smbr r='QAbstractItemModelTester::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK24QAbstractItemModelTester10metaObjectEv'/>
<fun r='_ZN24QAbstractItemModelTester11qt_metacastEPKc'/>
<fun r='_ZN24QAbstractItemModelTester11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN24QAbstractItemModelTester2trEPKcS1_i'/>
<fun r='_ZN24QAbstractItemModelTester18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN24QAbstractItemModelTester6d_funcEv'/>
<fun r='_ZNK24QAbstractItemModelTester6d_funcEv'/>
<fun r='_ZN24QAbstractItemModelTesterC1EP18QAbstractItemModelP7QObject'/>
<fun r='_ZN24QAbstractItemModelTesterC1EP18QAbstractItemModelNS_20FailureReportingModeEP7QObject'/>
<fun r='_ZNK24QAbstractItemModelTester5modelEv'/>
<fun r='_ZNK24QAbstractItemModelTester20failureReportingModeEv'/>
<fun r='_ZN24QAbstractItemModelTester15setUseFetchMoreEb'/>
<fun r='_ZN24QAbstractItemModelTester6verifyEbPKcS1_S1_i'/>
<fun r='_ZN24QAbstractItemModelTesterC1EP18QAbstractItemModelP7QObject'/>
<fun r='_ZN24QAbstractItemModelTesterC1EP18QAbstractItemModelNS_20FailureReportingModeEP7QObject'/>
<fun r='_ZNK24QAbstractItemModelTester5modelEv'/>
<fun r='_ZNK24QAbstractItemModelTester20failureReportingModeEv'/>
<fun r='_ZN24QAbstractItemModelTester15setUseFetchMoreEb'/>
<fun r='_ZN24QAbstractItemModelTester6verifyEbPKcS1_S1_i'/>
