<dec f='qtbase-6.5.0/src/gui/kernel/qcursor.h' l='79' type='static void QCursor::setPos(QScreen * screen, int x, int y)'/>
<use f='qtbase-6.5.0/src/gui/kernel/qcursor.h' l='81' u='c' c='_ZN7QCursor6setPosEP7QScreenRK6QPoint'/>
<def f='qtbase-6.5.0/src/gui/kernel/qcursor.cpp' l='214' ll='227' type='static void QCursor::setPos(QScreen * screen, int x, int y)'/>
<use f='qtbase-6.5.0/src/gui/kernel/qcursor.cpp' l='242' u='c' c='_ZN7QCursor6setPosEii'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qcursor.cpp' l='193'>/*!
    \fn void QCursor::setPos(QScreen *screen, int x, int y)

    Moves the cursor (hot spot) of the \a screen to the global
    screen position (\a x, \a y).

    You can call QWidget::mapToGlobal() to translate widget
    coordinates to global screen coordinates.

    \note Calling this function results in changing the cursor position through the windowing
    system. The windowing system will typically respond by sending mouse events to the application&apos;s
    window. This means that the usage of this function should be avoided in unit tests and
    everywhere where fake mouse events are being injected via QWindowSystemInterface because the
    windowing system&apos;s mouse state (with regards to buttons for example) may not match the state in
    the application-generated events.

    \note On platforms where there is no windowing system or cursors are not available, this
    function may do nothing.

    \sa pos(), QWidget::mapFromGlobal(), QWidget::mapToGlobal()
*/</doc>
