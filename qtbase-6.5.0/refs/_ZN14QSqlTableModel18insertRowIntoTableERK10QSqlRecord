<dec f='qtbase-6.5.0/src/sql/models/qsqltablemodel.h' l='96' type='bool QSqlTableModel::insertRowIntoTable(const QSqlRecord &amp; values)'/>
<ovr f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='714' c='_ZN24QSqlRelationalTableModel18insertRowIntoTableERK10QSqlRecord'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlrelationaltablemodel.cpp' l='721' u='c' c='_ZN24QSqlRelationalTableModel18insertRowIntoTableERK10QSqlRecord'/>
<def f='qtbase-6.5.0/src/sql/models/qsqltablemodel.cpp' l='634' ll='650' type='bool QSqlTableModel::insertRowIntoTable(const QSqlRecord &amp; values)'/>
<use f='qtbase-6.5.0/src/sql/models/qsqltablemodel.cpp' l='722' u='c' c='_ZN14QSqlTableModel9submitAllEv'/>
<doc f='qtbase-6.5.0/src/sql/models/qsqltablemodel.cpp' l='621'>/*!
    Inserts the values \a values into the currently active database table.

    This is a low-level method that operates directly on the database
    and should not be called directly. Use insertRow() and setData()
    to insert values. The model will decide depending on its edit strategy
    when to modify the database.

    Returns \c true if the values could be inserted, otherwise false.
    Error information can be retrieved with \l lastError().

    \sa lastError(), insertRow(), insertRows()
*/</doc>
