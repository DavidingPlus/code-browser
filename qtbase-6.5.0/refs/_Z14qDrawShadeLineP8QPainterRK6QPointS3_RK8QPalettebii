<dec f='qtbase-6.5.0/src/widgets/styles/qdrawutil.h' l='30' type='void qDrawShadeLine(QPainter * p, const QPoint &amp; p1, const QPoint &amp; p2, const QPalette &amp; pal, bool sunken = true, int lineWidth = 1, int midLineWidth = 0)'/>
<use f='qtbase-6.5.0/src/widgets/styles/qcommonstyle.cpp' l='423' u='c' c='_ZNK12QCommonStyle13drawPrimitiveEN6QStyle16PrimitiveElementEPK12QStyleOptionP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qcommonstyle.cpp' l='479' u='c' c='_ZNK12QCommonStyle13drawPrimitiveEN6QStyle16PrimitiveElementEPK12QStyleOptionP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qcommonstyle.cpp' l='2392' u='c' c='_ZNK12QCommonStyle11drawControlEN6QStyle14ControlElementEPK12QStyleOptionP8QPainterPK7QWidget'/>
<def f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='650' ll='656' type='void qDrawShadeLine(QPainter * p, const QPoint &amp; p1, const QPoint &amp; p2, const QPalette &amp; pal, bool sunken = true, int lineWidth = 1, int midLineWidth = 0)'/>
<doc f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='618'>/*!
    \fn void qDrawShadeLine(QPainter *painter, const QPoint &amp;p1, const QPoint &amp;p2,
             const QPalette &amp;palette, bool sunken, int lineWidth, int midLineWidth)
    \relates &lt;qdrawutil.h&gt;
    \overload

    Draws a horizontal or vertical shaded line between \a p1 and \a p2
    using the given \a painter.  Note that nothing is drawn if the line
    between the points would be neither horizontal nor vertical.

    The provided \a palette specifies the shading colors (\l
    {QPalette::light()}{light}, \l {QPalette::dark()}{dark} and \l
    {QPalette::mid()}{middle} colors).  The given \a lineWidth
    specifies the line width for each of the lines; it is not the
    total line width. The given \a midLineWidth specifies the width of
    a middle line drawn in the QPalette::mid() color.

    The line appears sunken if \a sunken is true, otherwise raised.

    \warning This function does not look at QWidget::style() or
    QApplication::style().  Use the drawing functions in QStyle to
    make widgets that follow the current GUI style.


    Alternatively you can use a QFrame widget and apply the
    QFrame::setFrameStyle() function to display a shaded line:

    \snippet code/src_gui_painting_qdrawutil.cpp 5

    \sa qDrawShadeRect(), qDrawShadePanel(), QStyle
*/</doc>
