<dec f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='51' type='qint64 QDeadlineTimer::deadline() const'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='99' ll='103' type='std::chrono::time_point&lt;Clock, Duration&gt; QDeadlineTimer::deadline() const'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='159' ll='163' type='std::chrono::steady_clock::time_point QDeadlineTimer::deadline() const'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='156'>// We know for these OS/compilers that the std::chrono::steady_clock uses the same
// reference time as QDeadlineTimer</doc>
<def f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.cpp' l='712' ll='722' type='qint64 QDeadlineTimer::deadline() const'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.cpp' l='692'>/*!
    Returns the absolute time point for the deadline stored in QDeadlineTimer
    object, calculated in milliseconds relative to the reference clock, the
    same as QElapsedTimer::msecsSinceReference(). The value will be in the past
    if this QDeadlineTimer has expired.

    If this QDeadlineTimer never expires, this function returns
    \c{std::numeric_limits&lt;qint64&gt;::max()}.

    This function can be used to calculate the amount of time a timer is
    overdue, by subtracting QDeadlineTimer::current() or
    QElapsedTimer::msecsSinceReference(), as in the following example:

    \snippet code/src_corelib_kernel_qdeadlinetimer.cpp 6

    \note Timers that were created as expired have an indetermine time point in
    the past as their deadline, so the above calculation may not work.

    \sa remainingTime(), deadlineNSecs(), setDeadline()
*/</doc>
