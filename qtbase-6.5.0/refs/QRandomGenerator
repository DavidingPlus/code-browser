<def f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='20' ll='206'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='27' c='_ZN16QRandomGeneratorC1Ej'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='30' c='_ZN16QRandomGeneratorC1ERAT__Kj'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='33' c='_ZN16QRandomGeneratorC1EPKjx'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='39' c='_ZN16QRandomGeneratorC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='40' c='_ZN16QRandomGeneratoraSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='40' c='_ZN16QRandomGeneratoraSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='42' c='_ZeqRK16QRandomGeneratorS1_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='42' c='_ZeqRK16QRandomGeneratorS1_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='43' c='_ZneRK16QRandomGeneratorS1_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='43' c='_ZneRK16QRandomGeneratorS1_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='173' c='_ZN16QRandomGenerator6systemEv'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='174' c='_ZN16QRandomGenerator6globalEv'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='175' c='_ZN16QRandomGenerator14securelySeededEv'/>
<ovr f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='208' c='QRandomGenerator64'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='208'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='221' c='_ZN18QRandomGenerator64C1Ej'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='224' c='_ZN18QRandomGenerator64C1ERAT__Kj'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='227' c='_ZN18QRandomGenerator64C1EPKjx'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='230' c='_ZN18QRandomGenerator64C1ERSt8seed_seq'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='233' c='_ZN18QRandomGenerator64C1EPKjS1_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='235' c='_ZN18QRandomGenerator64C1ERK16QRandomGenerator'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='235' c='_ZN18QRandomGenerator64C1ERK16QRandomGenerator'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='270' c='_ZN16QRandomGenerator6systemEv'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='275' c='_ZN16QRandomGenerator6globalEv'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='280' c='_ZN16QRandomGenerator14securelySeededEv'/>
<size>2512</size>
<fun r='_ZN16QRandomGeneratorC1Ej'/>
<fun r='_ZN16QRandomGeneratorC1ERAT__Kj'/>
<fun r='_ZN16QRandomGeneratorC1EPKjx'/>
<fun r='_ZN16QRandomGeneratorC1ERSt8seed_seq'/>
<fun r='_ZN16QRandomGeneratorC1EPKjS1_'/>
<fun r='_ZN16QRandomGeneratorC1ERKS_'/>
<fun r='_ZN16QRandomGeneratoraSERKS_'/>
<fun r='_ZN16QRandomGenerator8generateEv'/>
<fun r='_ZN16QRandomGenerator10generate64Ev'/>
<fun r='_ZN16QRandomGenerator14generateDoubleEv'/>
<fun r='_ZN16QRandomGenerator7boundedEd'/>
<fun r='_ZN16QRandomGenerator7boundedEj'/>
<fun r='_ZN16QRandomGenerator7boundedEjj'/>
<fun r='_ZN16QRandomGenerator7boundedEi'/>
<fun r='_ZN16QRandomGenerator7boundedEii'/>
<fun r='_ZN16QRandomGenerator7boundedEy'/>
<fun r='_ZN16QRandomGenerator7boundedEyy'/>
<fun r='_ZN16QRandomGenerator7boundedEx'/>
<fun r='_ZN16QRandomGenerator7boundedExx'/>
<fun r='_ZN16QRandomGenerator7boundedEix'/>
<fun r='_ZN16QRandomGenerator7boundedExi'/>
<fun r='_ZN16QRandomGenerator7boundedEjy'/>
<fun r='_ZN16QRandomGenerator7boundedEyj'/>
<fun r='_ZN16QRandomGenerator9fillRangeEPT_x'/>
<fun r='_ZN16QRandomGenerator9fillRangeERAT0__T_'/>
<fun r='_ZN16QRandomGenerator8generateET_S0_'/>
<fun r='_ZN16QRandomGenerator8generateEPjS0_'/>
<fun r='_ZN16QRandomGeneratorclEv'/>
<fun r='_ZN16QRandomGenerator4seedEj'/>
<fun r='_ZN16QRandomGenerator4seedERSt8seed_seq'/>
<fun r='_ZN16QRandomGenerator7discardEy'/>
<fun r='_ZN16QRandomGenerator3minEv'/>
<fun r='_ZN16QRandomGenerator3maxEv'/>
<fun r='_ZN16QRandomGenerator6systemEv'/>
<fun r='_ZN16QRandomGenerator6globalEv'/>
<fun r='_ZN16QRandomGenerator14securelySeededEv'/>
<fun r='_ZN16QRandomGeneratorC1ENS_6SystemE'/>
<fun r='_ZN16QRandomGenerator10_fillRangeEPvx'/>
<mbr r='QRandomGenerator::type' o='0' t='uint'/>
<mbr r='QRandomGenerator::storage' o='64' t='QRandomGenerator::Storage'/>
<fun r='_ZN16QRandomGenerator7boundedEy'/>
<fun r='_ZN16QRandomGenerator6systemEv'/>
<fun r='_ZN16QRandomGenerator6globalEv'/>
<fun r='_ZN16QRandomGenerator14securelySeededEv'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='369' c='_ZN16QRandomGenerator25SystemAndGlobalGenerators12securelySeedEPS_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='372' c='_ZN16QRandomGenerator25SystemAndGlobalGenerators12securelySeedEPS_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='381' c='_ZN16QRandomGenerator25SystemAndGlobalGenerators10PRNGLockerC1EPKS_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='1122' c='_ZN18QRandomGenerator64C1EN16QRandomGenerator6SystemE'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='1167' c='_ZN16QRandomGeneratorC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='1179' c='_ZN16QRandomGeneratoraSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='1179' c='_ZN16QRandomGeneratoraSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='1219' c='_ZeqRK16QRandomGeneratorS1_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='1219' c='_ZeqRK16QRandomGeneratorS1_'/>
<size>2512</size>
<doc f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='400'>/*!
    \class QRandomGenerator
    \inmodule QtCore
    \reentrant
    \since 5.10

    \brief The QRandomGenerator class allows one to obtain random values from a
    high-quality Random Number Generator.

    QRandomGenerator may be used to generate random values from a high-quality
    random number generator. Like the C++ random engines, QRandomGenerator can
    be seeded with user-provided values through the constructor.
    When seeded, the sequence of numbers generated by this
    class is deterministic. That is to say, given the same seed data,
    QRandomGenerator will generate the same sequence of numbers. But given
    different seeds, the results should be considerably different.

    QRandomGenerator::securelySeeded() can be used to create a QRandomGenerator
    that is securely seeded with QRandomGenerator::system(), meaning that the
    sequence of numbers it generates cannot be easily predicted. Additionally,
    QRandomGenerator::global() returns a global instance of QRandomGenerator
    that Qt will ensure to be securely seeded. This object is thread-safe, may
    be shared for most uses, and is always seeded from
    QRandomGenerator::system()

    QRandomGenerator::system() may be used to access the system&apos;s
    cryptographically-safe random generator. On Unix systems, it&apos;s equivalent
    to reading from \c {/dev/urandom} or the \c {getrandom()} or \c
    {getentropy()} system calls.

    The class can generate 32-bit or 64-bit quantities, or fill an array of
    those. The most common way of generating new values is to call the generate(),
    generate64() or fillRange() functions. One would use it as:

    \snippet code/src_corelib_global_qrandom.cpp 0

    Additionally, it provides a floating-point function generateDouble() that
    returns a number in the range [0, 1) (that is, inclusive of zero and
    exclusive of 1). There&apos;s also a set of convenience functions that
    facilitate obtaining a random number in a bounded, integral range.

    \section1 Seeding and determinism

    QRandomGenerator may be seeded with specific seed data. When that is done,
    the numbers generated by the object will always be the same, as in the
    following example:

    \snippet code/src_corelib_global_qrandom.cpp 1

    The seed data takes the form of one or more 32-bit words. The ideal seed
    size is approximately equal to the size of the QRandomGenerator class
    itself. Due to mixing of the seed data, QRandomGenerator cannot guarantee
    that distinct seeds will produce different sequences.

    QRandomGenerator::global(), like all generators created by
    QRandomGenerator::securelySeeded(), is always seeded from
    QRandomGenerator::system(), so it&apos;s not possible to make it produce
    identical sequences.

    \section1 Bulk data

    When operating in deterministic mode, QRandomGenerator may be used for bulk
    data generation. In fact, applications that do not need
    cryptographically-secure or true random data are advised to use a regular
    QRandomGenerator instead of QRandomGenerator::system() for their random
    data needs.

    For ease of use, QRandomGenerator provides a global object that can
    be easily used, as in the following example:

    \snippet code/src_corelib_global_qrandom.cpp 2

    \section1 System-wide random number generator

    QRandomGenerator::system() may be used to access the system-wide random
    number generator, which is cryptographically-safe on all systems that Qt
    runs on. This function will use hardware facilities to generate random
    numbers where available. On such systems, those facilities are true Random
    Number Generators. However, if they are true RNGs, those facilities have
    finite entropy sources and thus may fail to produce any results if their
    entropy pool is exhausted.

    If that happens, first the operating system then QRandomGenerator will fall
    back to Pseudo Random Number Generators of decreasing qualities (Qt&apos;s
    fallback generator being the simplest). Whether those generators are still
    of cryptographic quality is implementation-defined. Therefore,
    QRandomGenerator::system() should not be used for high-frequency random
    number generation, lest the entropy pool become empty. As a rule of thumb,
    this class should not be called upon to generate more than a kilobyte per
    second of random data (note: this may vary from system to system).

    If an application needs true RNG data in bulk, it should use the operating
    system facilities (such as \c{/dev/random} on Linux) directly and wait for
    entropy to become available. If the application requires PRNG engines of
    cryptographic quality but not of true randomness,
    QRandomGenerator::system() may still be used (see section below).

    If neither a true RNG nor a cryptographically secure PRNG are required,
    applications should instead use PRNG engines like QRandomGenerator&apos;s
    deterministic mode and those from the C++ Standard Library.
    QRandomGenerator::system() can be used to seed those.

    \section2 Fallback quality

    QRandomGenerator::system() uses the operating system facilities to obtain
    random numbers, which attempt to collect real entropy from the surrounding
    environment to produce true random numbers. However, it&apos;s possible that the
    entropy pool becomes exhausted, in which case the operating system will
    fall back to a pseudo-random engine for a time. Under no circumstances will
    QRandomGenerator::system() block, waiting for more entropy to be collected.

    The following operating systems guarantee that the results from their
    random-generation API will be of at least cryptographically-safe quality,
    even if the entropy pool is exhausted: Apple OSes (Darwin), BSDs, Linux,
    Windows. Barring a system installation problem (such as \c{/dev/urandom}
    not being readable by the current process), QRandomGenerator::system() will
    therefore have the same guarantees.

    On other operating systems, QRandomGenerator will fall back to a PRNG of
    good numeric distribution, but it cannot guarantee proper seeding in all
    cases. Please consult the OS documentation for more information.

    Applications that require QRandomGenerator not to fall back to
    non-cryptographic quality generators are advised to check their operating
    system documentation or restrict their deployment to one of the above.

    \section1 Reentrancy and thread-safety

    QRandomGenerator is reentrant, meaning that multiple threads can operate on
    this class at the same time, so long as they operate on different objects.
    If multiple threads need to share one PRNG sequence, external locking by a
    mutex is required.

    The exceptions are the objects returned by QRandomGenerator::global() and
    QRandomGenerator::system(): those objects are thread-safe and may be used
    by any thread without external locking. Note that thread-safety does not
    extend to copying those objects: they should always be used by reference.

    \section1 Standard C++ Library compatibility

    QRandomGenerator is modeled after the requirements for random number
    engines in the C++ Standard Library and may be used in almost all contexts
    that the Standard Library engines can. Exceptions to the requirements are
    the following:

    \list
      \li QRandomGenerator does not support seeding from another seed
          sequence-like class besides std::seed_seq itself;
      \li QRandomGenerator is not comparable (but is copyable) or
          streamable to \c{std::ostream} or from \c{std::istream}.
    \endlist

    QRandomGenerator is also compatible with the uniform distribution classes
    \c{std::uniform_int_distribution} and \c{std:uniform_real_distribution}, as
    well as the free function \c{std::generate_canonical}. For example, the
    following code may be used to generate a floating-point number in the range
    [1, 2.5):

    \snippet code/src_corelib_global_qrandom.cpp 3

    \sa QRandomGenerator64
 */</doc>
<fun r='_ZN16QRandomGeneratorC1ENS_6SystemE'/>
<fun r='_ZN16QRandomGeneratorC1ERKS_'/>
<fun r='_ZN16QRandomGeneratoraSERKS_'/>
<fun r='_ZN16QRandomGeneratorC1ERSt8seed_seq'/>
<fun r='_ZN16QRandomGeneratorC1EPKjS1_'/>
<fun r='_ZN16QRandomGenerator7discardEy'/>
<fun r='_ZN16QRandomGenerator10_fillRangeEPvx'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhash.cpp' l='90' c='_ZN12_GLOBAL__N_115HashSeedStorage9resetSeedEv'/>
<size>2512</size>
