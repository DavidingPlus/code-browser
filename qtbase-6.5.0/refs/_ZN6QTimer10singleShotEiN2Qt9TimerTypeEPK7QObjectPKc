<dec f='qtbase-6.5.0/src/corelib/kernel/qtimer.h' l='50' type='static void QTimer::singleShot(int msec, Qt::TimerType timerType, const QObject * receiver, const char * member)'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer.h' l='168' u='c' c='_ZN6QTimer10singleShotENSt6chrono8durationIlSt5ratioILl1ELl1000EEEEN2Qt9TimerTypeEPK7QObjectPKc'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer.cpp' l='390' u='c' c='_ZN6QTimer10singleShotEiPK7QObjectPKc'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qtimer.cpp' l='407' ll='427' type='static void QTimer::singleShot(int msec, Qt::TimerType timerType, const QObject * receiver, const char * member)'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qtimer.cpp' l='393'>/*! \overload
    \reentrant
    This static function calls a slot after a given time interval.

    It is very convenient to use this function because you do not need
    to bother with a \l{QObject::timerEvent()}{timerEvent} or
    create a local QTimer object.

    The \a receiver is the receiving object and the \a member is the slot. The
    time interval is \a msec milliseconds. The \a timerType affects the
    accuracy of the timer.

    \sa start()
*/</doc>
