<dec f='include/freetype2/freetype/freetype.h' l='2354' type='FT_Error FT_Open_Face(FT_Library library, const FT_Open_Args * args, FT_Long face_index, FT_Face * aface)'/>
<doc f='include/freetype2/freetype/freetype.h' l='2216'>/**************************************************************************
   *
   * @function:
   *   FT_Open_Face
   *
   * @description:
   *   Create a face object from a given resource described by @FT_Open_Args.
   *
   * @inout:
   *   library ::
   *     A handle to the library resource.
   *
   * @input:
   *   args ::
   *     A pointer to an `FT_Open_Args` structure that must be filled by the
   *     caller.
   *
   *   face_index ::
   *     This field holds two different values.  Bits 0-15 are the index of
   *     the face in the font file (starting with value~0).  Set it to~0 if
   *     there is only one face in the font file.
   *
   *     [Since 2.6.1] Bits 16-30 are relevant to GX and OpenType variation
   *     fonts only, specifying the named instance index for the current face
   *     index (starting with value~1; value~0 makes FreeType ignore named
   *     instances).  For non-variation fonts, bits 16-30 are ignored.
   *     Assuming that you want to access the third named instance in face~4,
   *     `face_index` should be set to 0x00030004.  If you want to access
   *     face~4 without variation handling, simply set `face_index` to
   *     value~4.
   *
   *     `FT_Open_Face` and its siblings can be used to quickly check whether
   *     the font format of a given font resource is supported by FreeType.
   *     In general, if the `face_index` argument is negative, the function&apos;s
   *     return value is~0 if the font format is recognized, or non-zero
   *     otherwise.  The function allocates a more or less empty face handle
   *     in `*aface` (if `aface` isn&apos;t `NULL`); the only two useful fields in
   *     this special case are `face-&gt;num_faces` and `face-&gt;style_flags`.
   *     For any negative value of `face_index`, `face-&gt;num_faces` gives the
   *     number of faces within the font file.  For the negative value
   *     &apos;-(N+1)&apos; (with &apos;N&apos; a non-negative 16-bit value), bits 16-30 in
   *     `face-&gt;style_flags` give the number of named instances in face &apos;N&apos;
   *     if we have a variation font (or zero otherwise).  After examination,
   *     the returned @FT_Face structure should be deallocated with a call to
   *     @FT_Done_Face.
   *
   * @output:
   *   aface ::
   *     A handle to a new face object.  If `face_index` is greater than or
   *     equal to zero, it must be non-`NULL`.
   *
   * @return:
   *   FreeType error code.  0~means success.
   *
   * @note:
   *   Unlike FreeType 1.x, this function automatically creates a glyph slot
   *   for the face object that can be accessed directly through
   *   `face-&gt;glyph`.
   *
   *   Each new face object created with this function also owns a default
   *   @FT_Size object, accessible as `face-&gt;size`.
   *
   *   One @FT_Library instance can have multiple face objects, this is,
   *   @FT_Open_Face and its siblings can be called multiple times using the
   *   same `library` argument.
   *
   *   See the discussion of reference counters in the description of
   *   @FT_Reference_Face.
   *
   * @example:
   *   To loop over all faces, use code similar to the following snippet
   *   (omitting the error handling).
   *
   *   ```
   *     ...
   *     FT_Face  face;
   *     FT_Long  i, num_faces;
   *
   *
   *     error = FT_Open_Face( library, args, -1, &amp;face );
   *     if ( error ) { ... }
   *
   *     num_faces = face-&gt;num_faces;
   *     FT_Done_Face( face );
   *
   *     for ( i = 0; i &lt; num_faces; i++ )
   *     {
   *       ...
   *       error = FT_Open_Face( library, args, i, &amp;face );
   *       ...
   *       FT_Done_Face( face );
   *       ...
   *     }
   *   ```
   *
   *   To loop over all valid values for `face_index`, use something similar
   *   to the following snippet, again without error handling.  The code
   *   accesses all faces immediately (thus only a single call of
   *   `FT_Open_Face` within the do-loop), with and without named instances.
   *
   *   ```
   *     ...
   *     FT_Face  face;
   *
   *     FT_Long  num_faces     = 0;
   *     FT_Long  num_instances = 0;
   *
   *     FT_Long  face_idx     = 0;
   *     FT_Long  instance_idx = 0;
   *
   *
   *     do
   *     {
   *       FT_Long  id = ( instance_idx &lt;&lt; 16 ) + face_idx;
   *
   *
   *       error = FT_Open_Face( library, args, id, &amp;face );
   *       if ( error ) { ... }
   *
   *       num_faces     = face-&gt;num_faces;
   *       num_instances = face-&gt;style_flags &gt;&gt; 16;
   *
   *       ...
   *
   *       FT_Done_Face( face );
   *
   *       if ( instance_idx &lt; num_instances )
   *         instance_idx++;
   *       else
   *       {
   *         face_idx++;
   *         instance_idx = 0;
   *       }
   *
   *     } while ( face_idx &lt; num_faces )
   *   ```
   */</doc>
