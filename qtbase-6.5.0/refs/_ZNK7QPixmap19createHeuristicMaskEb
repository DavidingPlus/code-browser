<dec f='qtbase-6.5.0/src/gui/image/qpixmap.h' l='74' type='QBitmap QPixmap::createHeuristicMask(bool clipTight = true) const'/>
<def f='qtbase-6.5.0/src/gui/image/qpixmap.cpp' l='657' ll='661' type='QBitmap QPixmap::createHeuristicMask(bool clipTight = true) const'/>
<doc f='qtbase-6.5.0/src/gui/image/qpixmap.cpp' l='638'>/*!
    Creates and returns a heuristic mask for this pixmap.

    The function works by selecting a color from one of the corners
    and then chipping away pixels of that color, starting at all the
    edges.  If \a clipTight is true (the default) the mask is just
    large enough to cover the pixels; otherwise, the mask is larger
    than the data pixels.

    The mask may not be perfect but it should be reasonable, so you
    can do things such as the following:

    \snippet code/src_gui_image_qpixmap.cpp 1

    This function is slow because it involves converting to/from a
    QImage, and non-trivial computations.

    \sa QImage::createHeuristicMask(), createMaskFromColor()
*/</doc>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitem.cpp' l='9410' u='c' c='_ZN26QGraphicsPixmapItemPrivate11updateShapeEv'/>
