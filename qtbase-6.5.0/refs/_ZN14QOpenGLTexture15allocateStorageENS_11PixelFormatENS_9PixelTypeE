<dec f='qtbase-6.5.0/src/opengl/qopengltexture.h' l='412' type='void QOpenGLTexture::allocateStorage(QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType)'/>
<def f='qtbase-6.5.0/src/opengl/qopengltexture.cpp' l='3290' ll='3295' type='void QOpenGLTexture::allocateStorage(QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType)'/>
<use f='qtbase-6.5.0/src/opengl/qopengltexture.cpp' l='3635' u='c' c='_ZN14QOpenGLTexture7setDataERK6QImageNS_16MipMapGenerationE'/>
<doc f='qtbase-6.5.0/src/opengl/qopengltexture.cpp' l='3268'>/*!
    \since 5.5

    Allocates server-side storage for this texture object taking
    into account, the format, dimensions, mipmap levels, array
    layers and cubemap faces.

    Once storage has been allocated it is no longer possible to change
    these properties.

    If supported QOpenGLTexture makes use of immutable texture
    storage. However, if immutable texture storage is not available,
    then the specified \a pixelFormat and \a pixelType will be used
    to allocate mutable storage; note that in certain OpenGL implementations
    (notably, OpenGL ES 2) they must perfectly match the format
    and the type passed to any subsequent setData() call.

    Once storage has been allocated for the texture then pixel data
    can be uploaded via one of the setData() overloads.

    \sa isStorageAllocated(), setData()
*/</doc>
