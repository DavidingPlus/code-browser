<use f='include/glib-2.0/gobject/gtype.h' l='394'/>
<def f='include/glib-2.0/gobject/gtype.h' l='1044' ll='1064'/>
<size>72</size>
<doc f='include/glib-2.0/gobject/gtype.h' l='1013'>/**
 * GTypeInfo:
 * @class_size: Size of the class structure (required for interface, classed and instantiatable types)
 * @base_init: Location of the base initialization function (optional)
 * @base_finalize: Location of the base finalization function (optional)
 * @class_init: Location of the class initialization function for
 *  classed and instantiatable types. Location of the default vtable 
 *  inititalization function for interface types. (optional) This function 
 *  is used both to fill in virtual functions in the class or default vtable, 
 *  and to do type-specific setup such as registering signals and object
 *  properties.
 * @class_finalize: Location of the class finalization function for
 *  classed and instantiatable types. Location of the default vtable
 *  finalization function for interface types. (optional)
 * @class_data: User-supplied data passed to the class init/finalize functions
 * @instance_size: Size of the instance (object) structure (required for instantiatable types only)
 * @n_preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now.
 * @instance_init: Location of the instance initialization function (optional, for instantiatable types only)
 * @value_table: A #GTypeValueTable function table for generic handling of GValues
 *  of this type (usually only useful for fundamental types)
 * 
 * This structure is used to provide the type system with the information
 * required to initialize and destruct (finalize) a type&apos;s class and
 * its instances.
 *
 * The initialized structure is passed to the g_type_register_static() function
 * (or is copied into the provided #GTypeInfo structure in the
 * g_type_plugin_complete_type_info()). The type system will perform a deep
 * copy of this structure, so its memory does not need to be persistent
 * across invocation of g_type_register_static().
 */</doc>
<mbr r='_GTypeInfo::class_size' o='0' t='guint16'/>
<mbr r='_GTypeInfo::base_init' o='64' t='GBaseInitFunc'/>
<mbr r='_GTypeInfo::base_finalize' o='128' t='GBaseFinalizeFunc'/>
<mbr r='_GTypeInfo::class_init' o='192' t='GClassInitFunc'/>
<mbr r='_GTypeInfo::class_finalize' o='256' t='GClassFinalizeFunc'/>
<mbr r='_GTypeInfo::class_data' o='320' t='gconstpointer'/>
<mbr r='_GTypeInfo::instance_size' o='384' t='guint16'/>
<mbr r='_GTypeInfo::n_preallocs' o='400' t='guint16'/>
<mbr r='_GTypeInfo::instance_init' o='448' t='GInstanceInitFunc'/>
<mbr r='_GTypeInfo::value_table' o='512' t='const GTypeValueTable *'/>
