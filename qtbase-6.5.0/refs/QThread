<use f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='125' c='_ZNK7QObject6threadEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='126' c='_ZN7QObject12moveToThreadEP7QThread'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qeventloop.h' l='59' c='_ZN16QEventLoopLockerC1EP7QThread'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qabstracteventdispatcher.h' l='35' c='_ZN24QAbstractEventDispatcher8instanceEP7QThread'/>
<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/corelib/thread/qthread.h' l='28' ll='119'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread.h' l='33' c='_ZN7QThread13currentThreadEv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread.h' l='74' c='_ZN7QThread6createEOT_DpOT0_'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread.h' l='113' c='_ZN7QThread16createThreadImplEOSt6futureIvE'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread.h' l='123' c='_ZN7QThread6createEOT_DpOT0_'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthreadpool.h' l='66' c='_ZNK11QThreadPool8containsEPK7QThread'/>
<size>16</size>
<smbr r='QThread::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK7QThread10metaObjectEv'/>
<fun r='_ZN7QThread11qt_metacastEPKc'/>
<fun r='_ZN7QThread11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN7QThread2trEPKcS1_i'/>
<fun r='_ZN7QThread18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN7QThread15currentThreadIdEv'/>
<fun r='_ZN7QThread13currentThreadEv'/>
<fun r='_ZN7QThread16idealThreadCountEv'/>
<fun r='_ZN7QThread18yieldCurrentThreadEv'/>
<fun r='_ZN7QThreadC1EP7QObject'/>
<fun r='_ZN7QThreadD1Ev'/>
<fun r='_ZN7QThread11setPriorityENS_8PriorityE'/>
<fun r='_ZNK7QThread8priorityEv'/>
<fun r='_ZNK7QThread10isFinishedEv'/>
<fun r='_ZNK7QThread9isRunningEv'/>
<fun r='_ZN7QThread19requestInterruptionEv'/>
<fun r='_ZNK7QThread23isInterruptionRequestedEv'/>
<fun r='_ZN7QThread12setStackSizeEj'/>
<fun r='_ZNK7QThread9stackSizeEv'/>
<fun r='_ZNK7QThread15eventDispatcherEv'/>
<fun r='_ZN7QThread18setEventDispatcherEP24QAbstractEventDispatcher'/>
<fun r='_ZN7QThread5eventEP6QEvent'/>
<fun r='_ZNK7QThread9loopLevelEv'/>
<fun r='_ZN7QThread6createEOT_DpOT0_'/>
<fun r='_ZN7QThread5startENS_8PriorityE'/>
<fun r='_ZN7QThread9terminateEv'/>
<fun r='_ZN7QThread4exitEi'/>
<fun r='_ZN7QThread4quitEv'/>
<fun r='_ZN7QThread4waitE14QDeadlineTimer'/>
<fun r='_ZN7QThread4waitEm'/>
<fun r='_ZN7QThread5sleepEm'/>
<fun r='_ZN7QThread6msleepEm'/>
<fun r='_ZN7QThread6usleepEm'/>
<fun r='_ZN7QThread7startedENS_14QPrivateSignalE'/>
<fun r='_ZN7QThread8finishedENS_14QPrivateSignalE'/>
<fun r='_ZN7QThread3runEv'/>
<fun r='_ZN7QThread4execEv'/>
<fun r='_ZN7QThread21setTerminationEnabledEb'/>
<fun r='_ZN7QThreadC1ER14QThreadPrivateP7QObject'/>
<fun r='_ZN7QThread6d_funcEv'/>
<fun r='_ZNK7QThread6d_funcEv'/>
<fun r='_ZN7QThread16createThreadImplEOSt6futureIvE'/>
<fun r='_ZN7QThread19currentThreadIdImplEv'/>
<fun r='_ZN7QThread6createEOT_DpOT0_'/>
<fun r='_ZN7QThread15currentThreadIdEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qcoreapplication_p.h' l='105'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qcoreapplication_p.h' l='106' c='_ZN23QCoreApplicationPrivate10mainThreadEv'/>
<ovr f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='166' c='QDaemonThread'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='166'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='175' c='_ZN14QThreadPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='175' c='_ZN14QThreadPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='175' c='_ZNK14QThreadPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='175' c='_ZNK14QThreadPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='175'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='290' c='_ZN11QThreadData4get2EP7QThread'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='322'/>
<ovr f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='345' c='QAdoptedThread'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='345'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/kernel/qabstracteventdispatcher.cpp' l='144' c='_ZN24QAbstractEventDispatcher8instanceEP7QThread'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/kernel/qeventloop.cpp' l='401' c='_ZN16QEventLoopLockerC1EP7QThread'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetaobject.cpp' l='1601' c='_ZN11QMetaObject16invokeMethodImplEP7QObjectPN9QtPrivate15QSlotObjectBaseEN2Qt14ConnectionTypeEPv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetaobject.cpp' l='2674' c='_ZN18QMetaMethodInvoker10invokeImplE11QMetaMethodPvN2Qt14ConnectionTypeExPKPKvPKPKcPKPKN9QtPrivate18QMetaTypeInterfaceE'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject.cpp' l='880' c='_ZL19check_parent_threadP7QObjectP11QThreadDataS2_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject.cpp' l='881' c='_ZL19check_parent_threadP7QObjectP11QThreadDataS2_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject.cpp' l='989' c='_ZN7QObjectD1Ev'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject.cpp' l='1562' c='_ZNK7QObject6threadEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject.cpp' l='1607' c='_ZN7QObject12moveToThreadEP7QThread'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/thread/qthread.cpp' l='80' c='_ZN11QThreadDataD1Ev'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread.cpp' l='124' c='_ZN14QAdoptedThreadC1EP11QThreadData'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread.cpp' l='404' c='_ZN7QThread13currentThreadEv'/>
<ovr f='qtbase-6.5.0/src/corelib/thread/qthread.cpp' l='1195' c='QThreadCreateThread'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread.cpp' l='1195'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread.cpp' l='1219' c='_ZN7QThread16createThreadImplEOSt6futureIvE'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread.cpp' l='1234' c='_ZN13QDaemonThreadC1EP7QObject'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/corelib/thread/qthread.cpp' l='194'>/*!
    \class QThread
    \inmodule QtCore
    \brief The QThread class provides a platform-independent way to
    manage threads.

    \ingroup thread

    A QThread object manages one thread of control within the
    program. QThreads begin executing in run(). By default, run() starts the
    event loop by calling exec() and runs a Qt event loop inside the thread.

    You can use worker objects by moving them to the thread using
    QObject::moveToThread().

    \snippet code/src_corelib_thread_qthread.cpp worker

    The code inside the Worker&apos;s slot would then execute in a
    separate thread. However, you are free to connect the
    Worker&apos;s slots to any signal, from any object, in any thread. It
    is safe to connect signals and slots across different threads,
    thanks to a mechanism called \l{Qt::QueuedConnection}{queued
    connections}.

    Another way to make code run in a separate thread, is to subclass QThread
    and reimplement run(). For example:

    \snippet code/src_corelib_thread_qthread.cpp reimpl-run

    In that example, the thread will exit after the run function has returned.
    There will not be any event loop running in the thread unless you call
    exec().

    It is important to remember that a QThread instance \l{QObject#Thread
    Affinity}{lives in} the old thread that instantiated it, not in the
    new thread that calls run(). This means that all of QThread&apos;s queued
    slots and \l {QMetaObject::invokeMethod()}{invoked methods} will execute
    in the old thread. Thus, a developer who wishes to invoke slots in the
    new thread must use the worker-object approach; new slots should not be
    implemented directly into a subclassed QThread.

    Unlike queued slots or invoked methods, methods called directly on the
    QThread object will execute in the thread that calls the method. When
    subclassing QThread, keep in mind that the constructor executes in the
    old thread while run() executes in the new thread. If a member variable
    is accessed from both functions, then the variable is accessed from two
    different threads. Check that it is safe to do so.

    \note Care must be taken when interacting with objects across different
    threads. As a general rule, functions can only be called from the thread
    that created the QThread object itself (e.g. setPriority()), unless the
    documentation says otherwise. See \l{Synchronizing Threads} for details.

    \section1 Managing Threads

    QThread will notify you via a signal when the thread is
    started() and finished(), or you can use isFinished() and
    isRunning() to query the state of the thread.

    You can stop the thread by calling exit() or quit(). In extreme
    cases, you may want to forcibly terminate() an executing thread.
    However, doing so is dangerous and discouraged. Please read the
    documentation for terminate() and setTerminationEnabled() for
    detailed information.

    From Qt 4.8 onwards, it is possible to deallocate objects that
    live in a thread that has just ended, by connecting the
    finished() signal to QObject::deleteLater().

    Use wait() to block the calling thread, until the other thread
    has finished execution (or until a specified time has passed).

    QThread also provides static, platform independent sleep
    functions: sleep(), msleep(), and usleep() allow full second,
    millisecond, and microsecond resolution respectively. These
    functions were made public in Qt 5.0.

    \note wait() and the sleep() functions should be unnecessary in
    general, since Qt is an event-driven framework. Instead of
    wait(), consider listening for the finished() signal. Instead of
    the sleep() functions, consider using QTimer.

    The static functions currentThreadId() and currentThread() return
    identifiers for the currently executing thread. The former
    returns a platform specific ID for the thread; the latter returns
    a QThread pointer.

    To choose the name that your thread will be given (as identified
    by the command \c{ps -L} on Linux, for example), you can call
    \l{QObject::setObjectName()}{setObjectName()} before starting the thread.
    If you don&apos;t call \l{QObject::setObjectName()}{setObjectName()},
    the name given to your thread will be the class name of the runtime
    type of your thread object (for example, \c &quot;RenderThread&quot; in the case of the
    \l{Mandelbrot Example}, as that is the name of the QThread subclass).
    Note that this is currently not available with release builds on Windows.

    \sa {Thread Support in Qt}, QThreadStorage, {Synchronizing Threads},
        {Mandelbrot Example}, {Semaphores Example}, {Wait Conditions Example}
*/</doc>
<fun r='_ZN7QThread13currentThreadEv'/>
<fun r='_ZN7QThreadC1EP7QObject'/>
<fun r='_ZN7QThreadC1ER14QThreadPrivateP7QObject'/>
<fun r='_ZN7QThreadD1Ev'/>
<fun r='_ZNK7QThread10isFinishedEv'/>
<fun r='_ZNK7QThread9isRunningEv'/>
<fun r='_ZN7QThread12setStackSizeEj'/>
<fun r='_ZNK7QThread9stackSizeEv'/>
<fun r='_ZN7QThread4execEv'/>
<fun r='_ZN7QThread4exitEi'/>
<fun r='_ZN7QThread4quitEv'/>
<fun r='_ZN7QThread3runEv'/>
<fun r='_ZN7QThread11setPriorityENS_8PriorityE'/>
<fun r='_ZNK7QThread8priorityEv'/>
<fun r='_ZNK7QThread9loopLevelEv'/>
<fun r='_ZNK7QThread15eventDispatcherEv'/>
<fun r='_ZN7QThread18setEventDispatcherEP24QAbstractEventDispatcher'/>
<fun r='_ZN7QThread5eventEP6QEvent'/>
<fun r='_ZN7QThread19requestInterruptionEv'/>
<fun r='_ZNK7QThread23isInterruptionRequestedEv'/>
<fun r='_ZN7QThread16createThreadImplEOSt6futureIvE'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_unix.cpp' l='93' c='_ZL27destroy_current_thread_dataPv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_unix.cpp' l='281' c='_ZN14QThreadPrivate5startEPv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_unix.cpp' l='281' c='_ZN14QThreadPrivate5startEPv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_unix.cpp' l='335' c='_ZN14QThreadPrivate6finishEPv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_unix.cpp' l='335' c='_ZN14QThreadPrivate6finishEPv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_unix.cpp' l='786' c='_ZN7QThread21setTerminationEnabledEb'/>
<size>16</size>
<fun r='_ZN7QThread19currentThreadIdImplEv'/>
<fun r='_ZN7QThread16idealThreadCountEv'/>
<fun r='_ZN7QThread18yieldCurrentThreadEv'/>
<fun r='_ZN7QThread5sleepEm'/>
<fun r='_ZN7QThread6msleepEm'/>
<fun r='_ZN7QThread6usleepEm'/>
<fun r='_ZN7QThread5startENS_8PriorityE'/>
<fun r='_ZN7QThread9terminateEv'/>
<fun r='_ZN7QThread4waitE14QDeadlineTimer'/>
<fun r='_ZN7QThread21setTerminationEnabledEb'/>
<ovr f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='19' c='QThreadPoolThread'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='19'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='848' c='_ZNK11QThreadPool8containsEPK7QThread'/>
<size>16</size>
<use f='qtbase-6.5.0/src/dbus/qdbusintegrator.cpp' l='58' c='_Zls6QDebugPK7QThread'/>
<use f='qtbase-6.5.0/src/dbus/qdbusintegrator.cpp' l='1526' c='_ZN22QDBusConnectionPrivate16handleObjectCallERK12QDBusMessage'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/gui/itemmodels/qfileinfogatherer_p.h' l='122' c='QFileInfoGatherer'/>
<use f='qtbase-6.5.0/src/gui/itemmodels/qfileinfogatherer_p.h' l='122'/>
<use f='qtbase-6.5.0/src/gui/itemmodels/qfileinfogatherer.cpp' l='49' c='_ZN17QFileInfoGathererC1EP7QObject'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1728' c='_ZNK4QRhi6threadEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/text/qrawfont_p.h' l='111'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p_p.h' l='233'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='5796' c='_ZNK4QRhi6threadEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager_p.h' l='58' c='_ZN28QNetworkAccessManagerPrivate12createThreadEv'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager_p.h' l='104'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.cpp' l='1621' c='_ZN28QNetworkAccessManagerPrivate12createThreadEv'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.cpp' l='1624' c='_ZN28QNetworkAccessManagerPrivate12createThreadEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyhttpimpl.cpp' l='613' c='_ZN28QNetworkReplyHttpImplPrivate11postRequestERK15QNetworkRequest'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyhttpimpl.cpp' l='616' c='_ZN28QNetworkReplyHttpImplPrivate11postRequestERK15QNetworkRequest'/>
<size>16</size>
<use f='qtbase-6.5.0/src/opengl/qopenglvertexarrayobject.cpp' l='122'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/testlib/qtestcase.cpp' l='1212' c='QTest::WatchDog'/>
<use f='qtbase-6.5.0/src/testlib/qtestcase.cpp' l='1212'/>
<size>16</size>
