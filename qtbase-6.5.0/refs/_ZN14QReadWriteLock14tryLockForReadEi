<dec f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.h' l='26' type='bool QReadWriteLock::tryLockForRead(int timeout)'/>
<use f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.cpp' l='148' u='c' c='_ZN14QReadWriteLock11lockForReadEv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.cpp' l='169' u='c' c='_ZN14QReadWriteLock14tryLockForReadEv'/>
<def f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.cpp' l='191' ll='248' type='bool QReadWriteLock::tryLockForRead(int timeout)'/>
<doc f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.cpp' l='172'>/*! \overload

    Attempts to lock for reading. This function returns \c true if the
    lock was obtained; otherwise it returns \c false. If another thread
    has locked for writing, this function will wait for at most \a
    timeout milliseconds for the lock to become available.

    Note: Passing a negative number as the \a timeout is equivalent to
    calling lockForRead(), i.e. this function will wait forever until
    lock can be locked for reading when \a timeout is negative.

    If the lock was obtained, the lock must be unlocked with unlock()
    before another thread can successfully lock it for writing.

    It is not possible to lock for read if the thread already has
    locked for write.

    \sa unlock(), lockForRead()
*/</doc>
