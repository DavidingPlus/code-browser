<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='349' type='static QRhiShaderResourceBinding QRhiShaderResourceBinding::imageLoadStore(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiTexture * tex, int level)'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='3830' ll='3840' type='static QRhiShaderResourceBinding QRhiShaderResourceBinding::imageLoadStore(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiTexture * tex, int level)'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='3807'>/*!
   \return a shader resource binding for a read/write storage image with the
   given \a binding number and pipeline \a stage. The image load/store operations
   will have access to all layers of the specified \a level. (so if the texture
   is a cubemap, the shader must use imageCube instead of image2D)

   \note When \a tex is not null, it must have been created with
   QRhiTexture::UsedWithLoadStore.

   \note \a tex can be null. It is valid to create a QRhiShaderResourceBindings
   with unspecified resources, but such an object cannot be used with
   QRhiCommandBuffer::setShaderResources(). It is however suitable for creating
   pipelines. Such a pipeline must then always be used together with another,
   layout compatible QRhiShaderResourceBindings with resources present passed
   to QRhiCommandBuffer::setShaderResources().

   \note Image load/store is only guaranteed to be available within a compute
   pipeline. While some backends may support using these resources in a
   graphics pipeline as well, this is not universally supported, and even when
   it is, unexpected problems may arise when it comes to barriers and
   synchronization. Therefore, avoid using such resources with shaders other
   than compute.
 */</doc>
