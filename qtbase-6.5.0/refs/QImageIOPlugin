<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/gui/image/qimageiohandler.h' l='101' ll='117'/>
<size>16</size>
<smbr r='QImageIOPlugin::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK14QImageIOPlugin10metaObjectEv'/>
<fun r='_ZN14QImageIOPlugin11qt_metacastEPKc'/>
<fun r='_ZN14QImageIOPlugin11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN14QImageIOPlugin2trEPKcS1_i'/>
<fun r='_ZN14QImageIOPlugin18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN14QImageIOPluginC1EP7QObject'/>
<fun r='_ZN14QImageIOPluginD1Ev'/>
<fun r='_ZNK14QImageIOPlugin12capabilitiesEP9QIODeviceRK10QByteArray'/>
<fun r='_ZNK14QImageIOPlugin6createEP9QIODeviceRK10QByteArray'/>
<doc f='qtbase-6.5.0/src/gui/image/qimageiohandler.cpp' l='168'>/*!
    \class QImageIOPlugin
    \inmodule QtGui
    \brief The QImageIOPlugin class defines an interface for writing
    an image format plugin.
    \reentrant

    \ingroup plugins

    QImageIOPlugin is a factory for creating QImageIOHandler objects,
    which are used internally by QImageReader and QImageWriter to add
    support for different image formats to Qt.

    Writing an image I/O plugin is achieved by subclassing this
    base class, reimplementing the pure virtual functions capabilities()
    and create(), and exporting the class with the
    Q_PLUGIN_METADATA() macro. See \l{How to Create Qt Plugins} for details.

    An image format plugin can support three capabilities: reading (\l
    CanRead), writing (\l CanWrite) and \e incremental reading (\l
    CanReadIncremental). Reimplement capabilities() in your subclass to
    expose the capabilities of your image format.

    create() should create an instance of your QImageIOHandler
    subclass, with the provided device and format properly set, and
    return this handler.

    The json metadata file for the plugin needs to contain information
    about the image formats the plugins supports, together with the
    corresponding MIME types (one for each format). For a jpeg plugin, this
    could, for example, look as follows:

    \code
    {
      &quot;Keys&quot;: [ &quot;jpg&quot;, &quot;jpeg&quot; ],
      &quot;MimeTypes&quot;: [ &quot;image/jpeg&quot;, &quot;image/jpeg&quot; ]
    }
    \endcode

    Different plugins can support different capabilities. For example,
    you may have one plugin that supports reading the GIF format, and
    another that supports writing. Qt will select the correct plugin
    for the job, depending on the return value of capabilities(). If
    several plugins support the same capability, Qt will select one
    arbitrarily.

    \sa QImageIOHandler, {How to Create Qt Plugins}
*/</doc>
<fun r='_ZN14QImageIOPluginC1EP7QObject'/>
<fun r='_ZN14QImageIOPluginD1Ev'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereader.cpp' l='208' c='_ZL23createReadHandlerHelperP9QIODeviceRK10QByteArraybb'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereader.cpp' l='208' c='_ZL23createReadHandlerHelperP9QIODeviceRK10QByteArraybb'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereader.cpp' l='230' c='_ZL23createReadHandlerHelperP9QIODeviceRK10QByteArraybb'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereader.cpp' l='230' c='_ZL23createReadHandlerHelperP9QIODeviceRK10QByteArraybb'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereader.cpp' l='243' c='_ZL23createReadHandlerHelperP9QIODeviceRK10QByteArraybb'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereader.cpp' l='243' c='_ZL23createReadHandlerHelperP9QIODeviceRK10QByteArraybb'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereader.cpp' l='325' c='_ZL23createReadHandlerHelperP9QIODeviceRK10QByteArraybb'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereader.cpp' l='325' c='_ZL23createReadHandlerHelperP9QIODeviceRK10QByteArraybb'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/image/qimagereaderwriterhelpers.cpp' l='32' c='_ZN25QImageReaderWriterHelpersL24appendImagePluginFormatsEP14QFactoryLoaderN14QImageIOPlugin10CapabilityEP5QListI10QByteArrayE'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereaderwriterhelpers.cpp' l='37' c='_ZN25QImageReaderWriterHelpersL24appendImagePluginFormatsEP14QFactoryLoaderN14QImageIOPlugin10CapabilityEP5QListI10QByteArrayE'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereaderwriterhelpers.cpp' l='56' c='_ZN25QImageReaderWriterHelpersL26appendImagePluginMimeTypesEP14QFactoryLoaderN14QImageIOPlugin10CapabilityEP5QListI10QByteArrayES7_'/>
<use f='qtbase-6.5.0/src/gui/image/qimagereaderwriterhelpers.cpp' l='56' c='_ZN25QImageReaderWriterHelpersL26appendImagePluginMimeTypesEP14QFactoryLoaderN14QImageIOPlugin10CapabilityEP5QListI10QByteArrayES7_'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/image/qimagewriter.cpp' l='140' c='_ZL24createWriteHandlerHelperP9QIODeviceRK10QByteArray'/>
<use f='qtbase-6.5.0/src/gui/image/qimagewriter.cpp' l='140' c='_ZL24createWriteHandlerHelperP9QIODeviceRK10QByteArray'/>
<use f='qtbase-6.5.0/src/gui/image/qimagewriter.cpp' l='182' c='_ZL24createWriteHandlerHelperP9QIODeviceRK10QByteArray'/>
<use f='qtbase-6.5.0/src/gui/image/qimagewriter.cpp' l='182' c='_ZL24createWriteHandlerHelperP9QIODeviceRK10QByteArray'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/plugins/imageformats/gif/main.cpp' l='14' c='QGifPlugin'/>
<use f='qtbase-6.5.0/src/plugins/imageformats/gif/main.cpp' l='14'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/plugins/imageformats/ico/main.cpp' l='14' c='QICOPlugin'/>
<use f='qtbase-6.5.0/src/plugins/imageformats/ico/main.cpp' l='14'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/plugins/imageformats/jpeg/main.cpp' l='14' c='QJpegPlugin'/>
<use f='qtbase-6.5.0/src/plugins/imageformats/jpeg/main.cpp' l='14'/>
<size>16</size>
