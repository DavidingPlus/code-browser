<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.h' l='424' u='c' c='_ZN9QMetaType9constructEiPvPKv'/>
<dec f='qtbase-6.5.0/src/corelib/kernel/qmetatype.h' l='461' type='void * QMetaType::construct(void * where, const void * copy = nullptr) const'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='704' ll='713' type='void * QMetaType::construct(void * where, const void * copy = nullptr) const'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='2347' u='c' c='_ZN9QMetaType7convertES_PKvS_Pv'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='678'>/*!
    \fn void *QMetaType::construct(void *where, const void *copy = nullptr) const
    \since 5.0

    Constructs a value of the type that this QMetaType instance
    was constructed for in the existing memory addressed by \a where,
    that is a copy of \a copy, and returns \a where. If \a copy is
    zero, the value is default constructed.

    This is a low-level function for explicitly managing the memory
    used to store the type. Consider calling create() if you don&apos;t
    need this level of control (that is, use &quot;new&quot; rather than
    &quot;placement new&quot;).

    You must ensure that \a where points to a location where the new
    value can be stored and that \a where is suitably aligned.
    The type&apos;s size can be queried by calling sizeOf().

    The rule of thumb for alignment is that a type is aligned to its
    natural boundary, which is the smallest power of 2 that is bigger
    than the type, unless that alignment is larger than the maximum
    useful alignment for the platform. For practical purposes,
    alignment larger than 2 * sizeof(void*) is only necessary for
    special hardware instructions (e.g., aligned SSE loads and stores
    on x86).
*/</doc>
<doc f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='2933'>/*!
    \fn void *QMetaType::construct(int type, void *where, const void *copy)
    \since 5.0
    \deprecated

    Constructs a value of the given \a type in the existing memory
    addressed by \a where, that is a copy of \a copy, and returns
    \a where. If \a copy is zero, the value is default constructed.

    This is a low-level function for explicitly managing the memory
    used to store the type. Consider calling create() if you don&apos;t
    need this level of control (that is, use &quot;new&quot; rather than
    &quot;placement new&quot;).

    You must ensure that \a where points to a location that can store
    a value of type \a type, and that \a where is suitably aligned.
    The type&apos;s size can be queried by calling sizeOf().

    The rule of thumb for alignment is that a type is aligned to its
    natural boundary, which is the smallest power of 2 that is bigger
    than the type, unless that alignment is larger than the maximum
    useful alignment for the platform. For practical purposes,
    alignment larger than 2 * sizeof(void*) is only necessary for
    special hardware instructions (e.g., aligned SSE loads and stores
    on x86).

    \sa destruct(), sizeOf()
*/</doc>
<use f='qtbase-6.5.0/src/corelib/kernel/qproperty.cpp' l='2436' u='c' c='_ZN9QtPrivate32PropertyAdaptorSlotObjectHelpers6getterEPK20QUntypedPropertyDataPv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qproperty.cpp' l='2459' u='c' c='_ZN9QtPrivate32PropertyAdaptorSlotObjectHelpers14bindingWrapperE9QMetaTypeP20QUntypedPropertyDataNS_24QPropertyBindingFunctionES3_Pv'/>
<use f='qtbase-6.5.0/src/dbus/qdbusabstractinterface.cpp' l='168' u='c' c='_ZNK29QDBusAbstractInterfacePrivate8propertyERK13QMetaPropertyPv'/>
