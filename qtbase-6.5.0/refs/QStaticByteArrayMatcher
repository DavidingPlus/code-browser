<inh f='qtbase-6.5.0/src/corelib/text/qbytearraymatcher.h' l='64' c='QStaticByteArrayMatcherBase'/>
<def f='qtbase-6.5.0/src/corelib/text/qbytearraymatcher.h' l='98' ll='120'/>
<use f='qtbase-6.5.0/src/corelib/text/qbytearraymatcher.h' l='123' c='_Z27qMakeStaticByteArrayMatcherRAT__Kc'/>
<use f='qtbase-6.5.0/src/corelib/text/qbytearraymatcher.h' l='124' c='_Z27qMakeStaticByteArrayMatcherRAT__Kc'/>
<mbr r='QStaticByteArrayMatcher::m_pattern' t='char[N]'/>
<fun r='_ZN23QStaticByteArrayMatcherC1ERAT__Kc'/>
<fun r='_ZNK23QStaticByteArrayMatcher7indexInERK10QByteArrayx'/>
<fun r='_ZNK23QStaticByteArrayMatcher7indexInEPKcxx'/>
<fun r='_ZNK23QStaticByteArrayMatcher7indexInE14QByteArrayViewx'/>
<fun r='_ZNK23QStaticByteArrayMatcher7patternEv'/>
<doc f='qtbase-6.5.0/src/corelib/text/qbytearraymatcher.cpp' l='317'>/*!
    \class QStaticByteArrayMatcher
    \since 5.9
    \inmodule QtCore
    \brief The QStaticByteArrayMatcher class is a compile-time version of QByteArrayMatcher.

    \ingroup tools
    \ingroup string-processing

    This class is useful when you have a sequence of bytes that you
    want to repeatedly match against some byte arrays (perhaps in a
    loop), or when you want to search for the same sequence of bytes
    multiple times in the same byte array. Using a matcher object and
    indexIn() is faster than matching a plain QByteArray with
    QByteArray::indexOf(), in particular if repeated matching takes place.

    Unlike QByteArrayMatcher, this class calculates the internal
    representation at \e{compile-time}, so it can
    even benefit if you are doing one-off byte array matches.

    Create the QStaticByteArrayMatcher by calling qMakeStaticByteArrayMatcher(),
    passing it the C string literal you want to search for. Store the return
    value of that function in a \c{static const auto} variable, so you don&apos;t need
    to pass the \c{N} template parameter explicitly:

    \snippet code/src_corelib_text_qbytearraymatcher.cpp 0

    Then call indexIn() on the QByteArray in which you want to search, just like
    with QByteArrayMatcher.

    Since this class is designed to do all the up-front calculations at compile-time,
    it does not offer a setPattern() method.

    \sa QByteArrayMatcher, QStringMatcher
*/</doc>
