<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.h' l='13' ll='42'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.h' l='40' c='_ZN13QSignalMapperC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.h' l='40' c='_ZN13QSignalMapperaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.h' l='40' c='_ZN13QSignalMapperaSERKS_'/>
<size>16</size>
<smbr r='QSignalMapper::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK13QSignalMapper10metaObjectEv'/>
<fun r='_ZN13QSignalMapper11qt_metacastEPKc'/>
<fun r='_ZN13QSignalMapper11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QSignalMapper2trEPKcS1_i'/>
<fun r='_ZN13QSignalMapper18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QSignalMapper6d_funcEv'/>
<fun r='_ZNK13QSignalMapper6d_funcEv'/>
<fun r='_ZN13QSignalMapperC1EP7QObject'/>
<fun r='_ZN13QSignalMapperD1Ev'/>
<fun r='_ZN13QSignalMapper10setMappingEP7QObjecti'/>
<fun r='_ZN13QSignalMapper10setMappingEP7QObjectRK7QString'/>
<fun r='_ZN13QSignalMapper10setMappingEP7QObjectS1_'/>
<fun r='_ZN13QSignalMapper14removeMappingsEP7QObject'/>
<fun r='_ZNK13QSignalMapper7mappingEi'/>
<fun r='_ZNK13QSignalMapper7mappingERK7QString'/>
<fun r='_ZNK13QSignalMapper7mappingEP7QObject'/>
<fun r='_ZN13QSignalMapper9mappedIntEi'/>
<fun r='_ZN13QSignalMapper12mappedStringERK7QString'/>
<fun r='_ZN13QSignalMapper12mappedObjectEP7QObject'/>
<fun r='_ZN13QSignalMapper3mapEv'/>
<fun r='_ZN13QSignalMapper3mapEP7QObject'/>
<fun r='_ZN13QSignalMapperC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.cpp' l='14' c='_ZN20QSignalMapperPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.cpp' l='14' c='_ZN20QSignalMapperPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.cpp' l='14' c='_ZNK20QSignalMapperPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.cpp' l='14' c='_ZNK20QSignalMapperPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.cpp' l='14'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.cpp' l='18' c='_ZN20QSignalMapperPrivate18_q_senderDestroyedEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.cpp' l='25' c='_ZN20QSignalMapperPrivate15emitMappedValueEP7QObjectT_RKT0_'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/corelib/kernel/qsignalmapper.cpp' l='44'>/*!
    \class QSignalMapper
    \inmodule QtCore
    \brief The QSignalMapper class bundles signals from identifiable senders.

    \ingroup objectmodel


    This class collects a set of parameterless signals, and re-emits
    them with integer, string or widget parameters corresponding to
    the object that sent the signal. Note that in most cases you can
    use lambdas for passing custom parameters to slots. This is less
    costly and will simplify the code.

    The class supports the mapping of particular strings, integers,
    objects and widgets with particular objects using setMapping().
    The objects&apos; signals can then be connected to the map() slot which
    will emit a signal (it could be mappedInt(), mappedString()
    and mappedObject()) with a value associated with
    the original signalling object. Mappings can be removed later using
    removeMappings().

    Example: Suppose we want to create a custom widget that contains
    a group of buttons (like a tool palette). One approach is to
    connect each button&apos;s \c clicked() signal to its own custom slot;
    but in this example we want to connect all the buttons to a
    single slot and parameterize the slot by the button that was
    clicked.

    Here&apos;s the definition of a simple custom widget that has a single
    signal, \c clicked(), which is emitted with the text of the button
    that was clicked:

    \snippet qsignalmapper/buttonwidget.h 0
    \snippet qsignalmapper/buttonwidget.h 1

    The only function that we need to implement is the constructor:

    \snippet qsignalmapper/buttonwidget.cpp 0
    \snippet qsignalmapper/buttonwidget.cpp 1
    \snippet qsignalmapper/buttonwidget.cpp 2

    A list of texts is passed to the constructor. A signal mapper is
    constructed and for each text in the list a QPushButton is
    created. We connect each button&apos;s \c clicked() signal to the
    signal mapper&apos;s map() slot, and create a mapping in the signal
    mapper from each button to the button&apos;s text. Finally we connect
    the signal mapper&apos;s mappedString() signal to the custom widget&apos;s
    \c clicked() signal. When the user clicks a button, the custom
    widget will emit a single \c clicked() signal whose argument is
    the text of the button the user clicked.

    This class was mostly useful before lambda functions could be used as
    slots. The example above can be rewritten simpler without QSignalMapper
    by connecting to a lambda function.

    \snippet qsignalmapper/buttonwidget.cpp 3

    \sa QObject, QButtonGroup, QActionGroup
*/</doc>
<fun r='_ZN13QSignalMapperC1EP7QObject'/>
<fun r='_ZN13QSignalMapperD1Ev'/>
<fun r='_ZN13QSignalMapper10setMappingEP7QObjecti'/>
<fun r='_ZN13QSignalMapper10setMappingEP7QObjectRK7QString'/>
<fun r='_ZN13QSignalMapper10setMappingEP7QObjectS1_'/>
<fun r='_ZNK13QSignalMapper7mappingEi'/>
<fun r='_ZNK13QSignalMapper7mappingERK7QString'/>
<fun r='_ZNK13QSignalMapper7mappingEP7QObject'/>
<fun r='_ZN13QSignalMapper14removeMappingsEP7QObject'/>
<fun r='_ZN13QSignalMapper3mapEv'/>
<fun r='_ZN13QSignalMapper3mapEP7QObject'/>
