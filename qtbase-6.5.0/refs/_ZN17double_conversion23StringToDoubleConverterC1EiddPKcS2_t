<def f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/string-to-double.h' l='167' ll='179' type='void double_conversion::StringToDoubleConverter::StringToDoubleConverter(int flags, double empty_string_value, double junk_string_value, const char * infinity_symbol, const char * nan_symbol, uc16 separator = kNoSeparator)'/>
<doc f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/string-to-double.h' l='54'>// Flags should be a bit-or combination of the possible Flags-enum.
  //  - NO_FLAGS: no special flags.
  //  - ALLOW_HEX: recognizes the prefix &quot;0x&quot;. Hex numbers may only be integers.
  //      Ex: StringToDouble(&quot;0x1234&quot;) -&gt; 4660.0
  //          In StringToDouble(&quot;0x1234.56&quot;) the characters &quot;.56&quot; are trailing
  //          junk. The result of the call is hence dependent on
  //          the ALLOW_TRAILING_JUNK flag and/or the junk value.
  //      With this flag &quot;0x&quot; is a junk-string. Even with ALLOW_TRAILING_JUNK,
  //      the string will not be parsed as &quot;0&quot; followed by junk.
  //
  //  - ALLOW_OCTALS: recognizes the prefix &quot;0&quot; for octals:
  //      If a sequence of octal digits starts with &apos;0&apos;, then the number is
  //      read as octal integer. Octal numbers may only be integers.
  //      Ex: StringToDouble(&quot;01234&quot;) -&gt; 668.0
  //          StringToDouble(&quot;012349&quot;) -&gt; 12349.0  // Not a sequence of octal
  //                                               // digits.
  //          In StringToDouble(&quot;01234.56&quot;) the characters &quot;.56&quot; are trailing
  //          junk. The result of the call is hence dependent on
  //          the ALLOW_TRAILING_JUNK flag and/or the junk value.
  //          In StringToDouble(&quot;01234e56&quot;) the characters &quot;e56&quot; are trailing
  //          junk, too.
  //  - ALLOW_TRAILING_JUNK: ignore trailing characters that are not part of
  //      a double literal.
  //  - ALLOW_LEADING_SPACES: skip over leading whitespace, including spaces,
  //                          new-lines, and tabs.
  //  - ALLOW_TRAILING_SPACES: ignore trailing whitespace.
  //  - ALLOW_SPACES_AFTER_SIGN: ignore whitespace after the sign.
  //       Ex: StringToDouble(&quot;-   123.2&quot;) -&gt; -123.2.
  //           StringToDouble(&quot;+   123.2&quot;) -&gt; 123.2
  //  - ALLOW_CASE_INSENSITIVITY: ignore case of characters for special values:
  //      infinity and nan.
  //  - ALLOW_HEX_FLOATS: allows hexadecimal float literals.
  //      This *must* start with &quot;0x&quot; and separate the exponent with &quot;p&quot;.
  //      Examples: 0x1.2p3 == 9.0
  //                0x10.1p0 == 16.0625
  //      ALLOW_HEX and ALLOW_HEX_FLOATS are indented.
  //
  // empty_string_value is returned when an empty string is given as input.
  // If ALLOW_LEADING_SPACES or ALLOW_TRAILING_SPACES are set, then a string
  // containing only spaces is converted to the &apos;empty_string_value&apos;, too.
  //
  // junk_string_value is returned when
  //  a) ALLOW_TRAILING_JUNK is not set, and a junk character (a character not
  //     part of a double-literal) is found.
  //  b) ALLOW_TRAILING_JUNK is set, but the string does not start with a
  //     double literal.
  //
  // infinity_symbol and nan_symbol are strings that are used to detect
  // inputs that represent infinity and NaN. They can be null, in which case
  // they are ignored.
  // The conversion routine first reads any possible signs. Then it compares the
  // following character of the input-string with the first character of
  // the infinity, and nan-symbol. If either matches, the function assumes, that
  // a match has been found, and expects the following input characters to match
  // the remaining characters of the special-value symbol.
  // This means that the following restrictions apply to special-value symbols:
  //  - they must not start with signs (&apos;+&apos;, or &apos;-&apos;),
  //  - they must not have the same first character.
  //  - they must not start with digits.
  //
  // If the separator character is not kNoSeparator, then that specific
  // character is ignored when in between two valid digits of the significant.
  // It is not allowed to appear in the exponent.
  // It is not allowed to lead or trail the number.
  // It is not allowed to appear twice next to each other.
  //
  // Examples:
  //  flags = ALLOW_HEX | ALLOW_TRAILING_JUNK,
  //  empty_string_value = 0.0,
  //  junk_string_value = NaN,
  //  infinity_symbol = &quot;infinity&quot;,
  //  nan_symbol = &quot;nan&quot;:
  //    StringToDouble(&quot;0x1234&quot;) -&gt; 4660.0.
  //    StringToDouble(&quot;0x1234K&quot;) -&gt; 4660.0.
  //    StringToDouble(&quot;&quot;) -&gt; 0.0  // empty_string_value.
  //    StringToDouble(&quot; &quot;) -&gt; NaN  // junk_string_value.
  //    StringToDouble(&quot; 1&quot;) -&gt; NaN  // junk_string_value.
  //    StringToDouble(&quot;0x&quot;) -&gt; NaN  // junk_string_value.
  //    StringToDouble(&quot;-123.45&quot;) -&gt; -123.45.
  //    StringToDouble(&quot;--123.45&quot;) -&gt; NaN  // junk_string_value.
  //    StringToDouble(&quot;123e45&quot;) -&gt; 123e45.
  //    StringToDouble(&quot;123E45&quot;) -&gt; 123e45.
  //    StringToDouble(&quot;123e+45&quot;) -&gt; 123e45.
  //    StringToDouble(&quot;123E-45&quot;) -&gt; 123e-45.
  //    StringToDouble(&quot;123e&quot;) -&gt; 123.0  // trailing junk ignored.
  //    StringToDouble(&quot;123e-&quot;) -&gt; 123.0  // trailing junk ignored.
  //    StringToDouble(&quot;+NaN&quot;) -&gt; NaN  // NaN string literal.
  //    StringToDouble(&quot;-infinity&quot;) -&gt; -inf.  // infinity literal.
  //    StringToDouble(&quot;Infinity&quot;) -&gt; NaN  // junk_string_value.
  //
  //  flags = ALLOW_OCTAL | ALLOW_LEADING_SPACES,
  //  empty_string_value = 0.0,
  //  junk_string_value = NaN,
  //  infinity_symbol = NULL,
  //  nan_symbol = NULL:
  //    StringToDouble(&quot;0x1234&quot;) -&gt; NaN  // junk_string_value.
  //    StringToDouble(&quot;01234&quot;) -&gt; 668.0.
  //    StringToDouble(&quot;&quot;) -&gt; 0.0  // empty_string_value.
  //    StringToDouble(&quot; &quot;) -&gt; 0.0  // empty_string_value.
  //    StringToDouble(&quot; 1&quot;) -&gt; 1.0
  //    StringToDouble(&quot;0x&quot;) -&gt; NaN  // junk_string_value.
  //    StringToDouble(&quot;0123e45&quot;) -&gt; NaN  // junk_string_value.
  //    StringToDouble(&quot;01239E45&quot;) -&gt; 1239e45.
  //    StringToDouble(&quot;-infinity&quot;) -&gt; NaN  // junk_string_value.
  //    StringToDouble(&quot;NaN&quot;) -&gt; NaN  // junk_string_value.
  //
  //  flags = NO_FLAGS,
  //  separator = &apos; &apos;:
  //    StringToDouble(&quot;1 2 3 4&quot;) -&gt; 1234.0
  //    StringToDouble(&quot;1  2&quot;) -&gt; NaN // junk_string_value
  //    StringToDouble(&quot;1 000 000.0&quot;) -&gt; 1000000.0
  //    StringToDouble(&quot;1.000 000&quot;) -&gt; 1.0
  //    StringToDouble(&quot;1.0e1 000&quot;) -&gt; NaN // junk_string_value</doc>
