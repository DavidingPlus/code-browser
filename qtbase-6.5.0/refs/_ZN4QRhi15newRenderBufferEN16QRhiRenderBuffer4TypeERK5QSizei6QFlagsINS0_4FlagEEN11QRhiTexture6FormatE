<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1745' type='QRhiRenderBuffer * QRhi::newRenderBuffer(QRhiRenderBuffer::Type type, const QSize &amp; pixelSize, int sampleCount = 1, QRhiRenderBuffer::Flags flags = {}, QRhiTexture::Format backingFormatHint = QRhiTexture::UnknownFormat)'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='7341' ll='7348' type='QRhiRenderBuffer * QRhi::newRenderBuffer(QRhiRenderBuffer::Type type, const QSize &amp; pixelSize, int sampleCount = 1, QRhiRenderBuffer::Flags flags = {}, QRhiTexture::Format backingFormatHint = QRhiTexture::UnknownFormat)'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='7321'>/*!
    \return a new renderbuffer with the specified \a type, \a pixelSize, \a
    sampleCount, and \a flags.

    When \a backingFormatHint is set to a texture format other than
    QRhiTexture::UnknownFormat, it may be used by the backend to decide what
    format to use for the storage backing the renderbuffer.

    \note \a backingFormatHint becomes relevant typically when multisampling
    and floating point texture formats are involved: rendering into a
    multisample QRhiRenderBuffer and then resolving into a non-RGBA8
    QRhiTexture implies (with some graphics APIs) that the storage backing the
    QRhiRenderBuffer uses the matching non-RGBA8 format. That means that
    passing a format like QRhiTexture::RGBA32F is important, because backends
    will typically opt for QRhiTexture::RGBA8 by default, which would then
    break later on due to attempting to set up RGBA8-&gt;RGBA32F multisample
    resolve in the color attachment(s) of the QRhiTextureRenderTarget.

    \sa QRhiResource::destroy()
 */</doc>
