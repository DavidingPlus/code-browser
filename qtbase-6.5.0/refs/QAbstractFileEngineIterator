<use f='qtbase-6.5.0/src/corelib/io/qabstractfileengine_p.h' l='127'/>
<def f='qtbase-6.5.0/src/corelib/io/qabstractfileengine_p.h' l='194' ll='222'/>
<use f='qtbase-6.5.0/src/corelib/io/qabstractfileengine_p.h' l='217' c='_ZN27QAbstractFileEngineIteratorC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qabstractfileengine_p.h' l='217' c='_ZN27QAbstractFileEngineIteratoraSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qabstractfileengine_p.h' l='217' c='_ZN27QAbstractFileEngineIteratoraSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qabstractfileengine_p.h' l='217' c='_ZN27QAbstractFileEngineIteratorC1EOS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qabstractfileengine_p.h' l='217' c='_ZN27QAbstractFileEngineIteratoraSEOS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qabstractfileengine_p.h' l='217' c='_ZN27QAbstractFileEngineIteratoraSEOS_'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/corelib/io/qabstractfileengine.cpp' l='818'>/*!
    \since 4.3
    \class QAbstractFileEngineIterator
    \inmodule QtCore
    \brief The QAbstractFileEngineIterator class provides an iterator
    interface for custom file engines.
    \internal

    If all you want is to iterate over entries in a directory, see
    QDirIterator instead. This class is only for custom file engine authors.

    QAbstractFileEngineIterator is a unidirectional single-use virtual
    iterator that plugs into QDirIterator, providing transparent proxy
    iteration for custom file engines.

    You can subclass QAbstractFileEngineIterator to provide an iterator when
    writing your own file engine. To plug the iterator into your file system,
    you simply return an instance of this subclass from a reimplementation of
    QAbstractFileEngine::beginEntryList().

    Example:

    \snippet code/src_corelib_io_qabstractfileengine.cpp 2

    QAbstractFileEngineIterator is associated with a path, name filters, and
    entry filters. The path is the directory that the iterator lists entries
    in. The name filters and entry filters are provided for file engines that
    can optimize directory listing at the iterator level (e.g., network file
    systems that need to minimize network traffic), but they can also be
    ignored by the iterator subclass; QAbstractFileEngineIterator already
    provides the required filtering logics in the matchesFilters() function.
    You can call dirName() to get the directory name, nameFilters() to get a
    stringlist of name filters, and filters() to get the entry filters.

    The pure virtual function hasNext() returns \c true if the current directory
    has at least one more entry (i.e., the directory name is valid and
    accessible, and we have not reached the end of the entry list), and false
    otherwise. Reimplement next() to seek to the next entry.

    The pure virtual function currentFileName() returns the name of the
    current entry without advancing the iterator. The currentFilePath()
    function is provided for convenience; it returns the full path of the
    current entry.

    Here is an example of how to implement an iterator that returns each of
    three fixed entries in sequence.

    \snippet code/src_corelib_io_qabstractfileengine.cpp 3

    Note: QAbstractFileEngineIterator does not deal with QDir::IteratorFlags;
    it simply returns entries for a single directory.

    \sa QDirIterator
*/</doc>
<fun r='_ZN27QAbstractFileEngineIteratorC1E6QFlagsIN4QDir6FilterEERK5QListI7QStringE'/>
<fun r='_ZN27QAbstractFileEngineIteratorD1Ev'/>
<fun r='_ZN27QAbstractFileEngineIterator4nextEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator7hasNextEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator4pathEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator11nameFiltersEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator7filtersEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator15currentFileNameEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator15currentFileInfoEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator15currentFilePathEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator9entryInfoENS_13EntryInfoTypeE'/>
<fun r='_ZN27QAbstractFileEngineIteratorC1ERKS_'/>
<fun r='_ZN27QAbstractFileEngineIteratorC1EOS_'/>
<fun r='_ZN27QAbstractFileEngineIterator7setPathERK7QString'/>
<mbr r='QAbstractFileEngineIterator::d' o='64' t='QScopedPointer&lt;QAbstractFileEngineIteratorPrivate&gt;'/>
<fun r='_ZN27QAbstractFileEngineIteratorC1E6QFlagsIN4QDir6FilterEERK5QListI7QStringE'/>
<fun r='_ZN27QAbstractFileEngineIteratorD1Ev'/>
<fun r='_ZNK27QAbstractFileEngineIterator4pathEv'/>
<fun r='_ZN27QAbstractFileEngineIterator7setPathERK7QString'/>
<fun r='_ZNK27QAbstractFileEngineIterator11nameFiltersEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator7filtersEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator15currentFilePathEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator15currentFileInfoEv'/>
<fun r='_ZNK27QAbstractFileEngineIterator9entryInfoENS_13EntryInfoTypeE'/>
<use f='qtbase-6.5.0/src/corelib/io/qdiriterator.cpp' l='114'/>
<use f='qtbase-6.5.0/src/corelib/io/qdiriterator.cpp' l='174' c='_ZN19QDirIteratorPrivate13pushDirectoryERK9QFileInfo'/>
<use f='qtbase-6.5.0/src/corelib/io/qdiriterator.cpp' l='215' c='_ZN19QDirIteratorPrivate7advanceEv'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/corelib/io/qfsfileengine_iterator_p.h' l='29' c='QFSFileEngineIterator'/>
<use f='qtbase-6.5.0/src/corelib/io/qfsfileengine_iterator_p.h' l='29'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/io/qfsfileengine_iterator.cpp' l='13' c='_ZN21QFSFileEngineIteratorC1E6QFlagsIN4QDir6FilterEERK5QListI7QStringE'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/corelib/io/qresource_iterator_p.h' l='24' c='QResourceFileEngineIterator'/>
<use f='qtbase-6.5.0/src/corelib/io/qresource_iterator_p.h' l='24'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/io/qresource_iterator.cpp' l='13' c='_ZN27QResourceFileEngineIteratorC1E6QFlagsIN4QDir6FilterEERK5QListI7QStringE'/>
<size>16</size>
