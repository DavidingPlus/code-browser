<use f='include/glib-2.0/gobject/gparam.h' l='351'/>
<def f='include/glib-2.0/gobject/gparam.h' l='376' ll='393'/>
<size>56</size>
<doc f='include/glib-2.0/gobject/gparam.h' l='352'>/**
 * GParamSpecTypeInfo:
 * @instance_size: Size of the instance (object) structure.
 * @n_preallocs: Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the [slice allocator][glib-Memory-Slices] now.
 * @instance_init: Location of the instance initialization function (optional).
 * @value_type: The #GType of values conforming to this #GParamSpec
 * @finalize: The instance finalization function (optional).
 * @value_set_default: Resets a @value to the default value for @pspec 
 *  (recommended, the default is g_value_reset()), see 
 *  g_param_value_set_default().
 * @value_validate: Ensures that the contents of @value comply with the 
 *  specifications set out by @pspec (optional), see 
 *  g_param_value_validate().
 * @values_cmp: Compares @value1 with @value2 according to @pspec 
 *  (recommended, the default is memcmp()), see g_param_values_cmp().
 * 
 * This structure is used to provide the type system with the information
 * required to initialize and destruct (finalize) a parameter&apos;s class and
 * instances thereof.
 * The initialized structure is passed to the g_param_type_register_static() 
 * The type system will perform a deep copy of this structure, so its memory 
 * does not need to be persistent across invocation of 
 * g_param_type_register_static().
 */</doc>
<mbr r='_GParamSpecTypeInfo::instance_size' o='0' t='guint16'/>
<mbr r='_GParamSpecTypeInfo::n_preallocs' o='16' t='guint16'/>
<mbr r='_GParamSpecTypeInfo::instance_init' o='64' t='void (*)(GParamSpec *)'/>
<mbr r='_GParamSpecTypeInfo::value_type' o='128' t='GType'/>
<mbr r='_GParamSpecTypeInfo::finalize' o='192' t='void (*)(GParamSpec *)'/>
<mbr r='_GParamSpecTypeInfo::value_set_default' o='256' t='void (*)(GParamSpec *, GValue *)'/>
<mbr r='_GParamSpecTypeInfo::value_validate' o='320' t='gboolean (*)(GParamSpec *, GValue *)'/>
<mbr r='_GParamSpecTypeInfo::values_cmp' o='384' t='gint (*)(GParamSpec *, const GValue *, const GValue *)'/>
