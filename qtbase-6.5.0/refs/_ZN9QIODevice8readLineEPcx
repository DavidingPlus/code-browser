<dec f='qtbase-6.5.0/src/corelib/io/qiodevice.h' l='79' type='qint64 QIODevice::readLine(char * data, qint64 maxlen)'/>
<def f='qtbase-6.5.0/src/corelib/io/qiodevice.cpp' l='1316' ll='1335' type='qint64 QIODevice::readLine(char * data, qint64 maxSize)'/>
<doc f='qtbase-6.5.0/src/corelib/io/qiodevice.cpp' l='1275'>/*!
    This function reads a line of ASCII characters from the device, up
    to a maximum of \a maxSize - 1 bytes, stores the characters in \a
    data, and returns the number of bytes read. If a line could not be
    read but no error occurred, this function returns 0. If an error
    occurs, this function returns the length of what could be read, or
    -1 if nothing was read.

    A terminating &apos;\\0&apos; byte is always appended to \a data, so \a
    maxSize must be larger than 1.

    Data is read until either of the following conditions are met:

    \list
    \li The first &apos;\\n&apos; character is read.
    \li \a maxSize - 1 bytes are read.
    \li The end of the device data is detected.
    \endlist

    For example, the following code reads a line of characters from a
    file:

    \snippet code/src_corelib_io_qiodevice.cpp 2

    The newline character (&apos;\\n&apos;) is included in the buffer. If a
    newline is not encountered before maxSize - 1 bytes are read, a
    newline will not be inserted into the buffer. On windows newline
    characters are replaced with &apos;\\n&apos;.

    Note that on sequential devices, data may not be immediately available,
    which may result in a partial line being returned. By calling the
    canReadLine() function before reading, you can check whether a complete
    line (including the newline character) can be read.

    This function calls readLineData(), which is implemented using
    repeated calls to getChar(). You can provide a more efficient
    implementation by reimplementing readLineData() in your own
    subclass.

    \sa getChar(), read(), canReadLine(), write()
*/</doc>
<use f='qtbase-6.5.0/src/gui/image/qppmhandler.cpp' l='31' u='c' c='_ZL16discard_pbm_lineP9QIODevice'/>
<use f='qtbase-6.5.0/src/gui/image/qxbmhandler.cpp' l='45' u='c' c='_ZL15read_xbm_headerP9QIODeviceRiS1_'/>
<use f='qtbase-6.5.0/src/gui/image/qxbmhandler.cpp' l='85' u='c' c='_ZL15read_xbm_headerP9QIODeviceRiS1_'/>
<use f='qtbase-6.5.0/src/gui/image/qxbmhandler.cpp' l='107' u='c' c='_ZL13read_xbm_bodyP9QIODeviceiiP6QImage'/>
<use f='qtbase-6.5.0/src/gui/image/qxbmhandler.cpp' l='142' u='c' c='_ZL13read_xbm_bodyP9QIODeviceiiP6QImage'/>
<use f='qtbase-6.5.0/src/gui/image/qxpmhandler.cpp' l='1010' u='c' c='_Z26qt_read_xpm_image_or_arrayP9QIODevicePKPKcR6QImage'/>
<use f='qtbase-6.5.0/src/gui/util/qedidparser.cpp' l='45' u='c' c='_ZL30lookupVendorIdInSystemDatabase14QByteArrayView'/>
<use f='qtbase-6.5.0/src/network/socket/qlocalsocket_unix.cpp' l='457' u='c' c='_ZN12QLocalSocket12readLineDataEPcx'/>
