<dec f='qtbase-6.5.0/src/corelib/text/qbytearray.h' l='105' type='qsizetype QByteArray::capacity() const'/>
<def f='qtbase-6.5.0/src/corelib/text/qbytearray.h' l='523' type='qsizetype QByteArray::capacity() const'/>
<use f='qtbase-6.5.0/src/corelib/text/qbytearray.h' l='527' u='c' c='_ZN10QByteArray7reserveEx'/>
<use f='qtbase-6.5.0/src/corelib/text/qbytearray.h' l='537' u='c' c='_ZN10QByteArray7squeezeEv'/>
<use f='qtbase-6.5.0/src/corelib/text/qstringbuilder.h' l='418' u='c' c='_ZN15QtStringBuilder17appendToByteArrayER10QByteArrayRK14QStringBuilderIT_T0_Ec'/>
<use f='qtbase-6.5.0/src/corelib/text/qbytearray.cpp' l='1871' u='c' c='_ZN10QByteArray6resizeEx'/>
<use f='qtbase-6.5.0/src/corelib/text/qbytearray.cpp' l='2560' u='c' c='_ZNK10QByteArray8repeatedEx'/>
<doc f='qtbase-6.5.0/src/corelib/text/qbytearray.cpp' l='1405'>/*! \fn qsizetype QByteArray::capacity() const

    Returns the maximum number of bytes that can be stored in the
    byte array without forcing a reallocation.

    The sole purpose of this function is to provide a means of fine
    tuning QByteArray&apos;s memory usage. In general, you will rarely
    ever need to call this function. If you want to know how many
    bytes are in the byte array, call size().

    \note a statically allocated byte array will report a capacity of 0,
    even if it&apos;s not empty.

    \note The free space position in the allocated memory block is undefined. In
    other words, one should not assume that the free memory is always located
    after the initialized elements.

    \sa reserve(), squeeze()
*/</doc>
