<dec f='qtbase-6.5.0/src/dbus/qdbusconnection.h' l='143' type='bool QDBusConnection::registerObject(const QString &amp; path, const QString &amp; interface, QObject * object, QDBusConnection::RegisterOptions options = ExportAdaptors)'/>
<use f='qtbase-6.5.0/src/dbus/qdbusconnection.cpp' l='827' u='c' c='_ZN15QDBusConnection14registerObjectERK7QStringP7QObject6QFlagsINS_14RegisterOptionEE'/>
<def f='qtbase-6.5.0/src/dbus/qdbusconnection.cpp' l='849' ll='922' type='bool QDBusConnection::registerObject(const QString &amp; path, const QString &amp; interface, QObject * object, QDBusConnection::RegisterOptions options = ExportAdaptors)'/>
<doc f='qtbase-6.5.0/src/dbus/qdbusconnection.cpp' l='830'>/*!
    \overload
    \since 5.5

    Registers the object \a object at path \a path with interface name \a interface
    and returns \c true if the registration was successful. The \a options parameter
    specifies how much of the object \a object will be exposed through
    D-Bus.

    This function does not replace existing objects: if there is already an object registered at
    path \a path, this function will return false. Use unregisterObject() to unregister it first.

    The ExportChildObjects flag exports child objects on D-Bus based on the
    path of the registered objects and the QObject::objectName of the child.
    Therefore, it is important for the child object to have an object name.

    You cannot register an object as a child object of an object that
    was registered with ExportChildObjects.
*/</doc>
