<def f='qtbase-6.5.0/src/corelib/io/qabstractfileengine_p.h' l='185' ll='191'/>
<use f='qtbase-6.5.0/src/corelib/io/qabstractfileengine.cpp' l='76'/>
<use f='qtbase-6.5.0/src/corelib/io/qabstractfileengine.cpp' l='130' c='_Z36qt_custom_file_engine_handler_createRK7QString'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/corelib/io/qabstractfileengine.cpp' l='22'>/*!
    \class QAbstractFileEngineHandler
    \inmodule QtCore
    \reentrant
    \internal

    \brief The QAbstractFileEngineHandler class provides a way to register
    custom file engines with your application.

    \ingroup io
    \since 4.1

    QAbstractFileEngineHandler is a factory for creating QAbstractFileEngine
    objects (file engines), which are used internally by QFile, QFileInfo, and
    QDir when working with files and directories.

    When you open a file, Qt chooses a suitable file engine by passing the
    file name from QFile or QDir through an internal list of registered file
    engine handlers. The first handler to recognize the file name is used to
    create the engine. Qt provides internal file engines for working with
    regular files and resources, but you can also register your own
    QAbstractFileEngine subclasses.

    To install an application-specific file engine, you subclass
    QAbstractFileEngineHandler and reimplement create(). When you instantiate
    the handler (e.g. by creating an instance on the stack or on the heap), it
    will automatically register with Qt. (The latest registered handler takes
    precedence over existing handlers.)

    For example:

    \snippet code/src_corelib_io_qabstractfileengine.cpp 0

    When the handler is destroyed, it is automatically removed from Qt.

    The most common approach to registering a handler is to create an instance
    as part of the start-up phase of your application. It is also possible to
    limit the scope of the file engine handler to a particular area of
    interest (e.g. a special file dialog that needs a custom file engine). By
    creating the handler inside a local scope, you can precisely control the
    area in which your engine will be applied without disturbing file
    operations in other parts of your application.

    \sa QAbstractFileEngine, QAbstractFileEngine::create()
*/</doc>
<fun r='_ZN26QAbstractFileEngineHandlerC1Ev'/>
<fun r='_ZN26QAbstractFileEngineHandlerD1Ev'/>
<fun r='_ZNK26QAbstractFileEngineHandler6createERK7QString'/>
<fun r='_ZN26QAbstractFileEngineHandlerC1Ev'/>
<fun r='_ZN26QAbstractFileEngineHandlerD1Ev'/>
