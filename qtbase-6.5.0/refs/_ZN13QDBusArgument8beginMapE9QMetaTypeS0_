<use f='qtbase-6.5.0/src/dbus/qdbusargument.h' l='75' u='c' c='_ZN13QDBusArgument8beginMapEii'/>
<dec f='qtbase-6.5.0/src/dbus/qdbusargument.h' l='76' type='void QDBusArgument::beginMap(QMetaType keyMetaType, QMetaType valueMetaType)'/>
<use f='qtbase-6.5.0/src/dbus/qdbusargument.h' l='286' u='c' c='_ZlsR13QDBusArgumentRK4QMapI7QString8QVariantE'/>
<use f='qtbase-6.5.0/src/dbus/qdbusargument.h' l='300' u='c' c='_ZlsR13QDBusArgumentRK5QHashI7QString8QVariantE'/>
<def f='qtbase-6.5.0/src/dbus/qdbusargument.cpp' l='884' ll='888' type='void QDBusArgument::beginMap(QMetaType keyMetaType, QMetaType valueMetaType)'/>
<doc f='qtbase-6.5.0/src/dbus/qdbusargument.cpp' l='865'>/*!
    Opens a new D-Bus map suitable for
    appending elements. Maps are containers that associate one entry
    (the key) to another (the value), such as Qt&apos;s QMap or QHash. The
    ids of the map&apos;s key and value meta types must be passed in \a keyMetaType
    and \a valueMetaType respectively.

    This function is used usually in \c{operator&lt;&lt;} streaming
    operators, as in the following example:

    \snippet code/src_qdbus_qdbusargument.cpp 7

    You usually don&apos;t need to provide an \c{operator&lt;&lt;} or \c{operator&gt;&gt;}
    function for associative containers such as QHash or std::map,
    since Qt D-Bus provides generic templates to do the job of marshalling
    the data.

    \sa endMap(), beginStructure(), beginArray(), beginMapEntry()
*/</doc>
