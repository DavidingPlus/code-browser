<def f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='161' ll='206'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='208'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='208'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='208'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='208'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='208'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='210' c='_ZeqRK24QRhiVertexInputAttributeS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='210' c='_ZeqRK24QRhiVertexInputAttributeS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='211' c='_ZneRK24QRhiVertexInputAttributeS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='211' c='_ZneRK24QRhiVertexInputAttributeS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='212' c='_Z5qHashRK24QRhiVertexInputAttributem'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='214' c='_Zls6QDebugRK24QRhiVertexInputAttribute'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='233' c='_ZN21QRhiVertexInputLayout13setAttributesESt16initializer_listI24QRhiVertexInputAttributeE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='240' c='_ZNK21QRhiVertexInputLayout16cbeginAttributesEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='241' c='_ZNK21QRhiVertexInputLayout14cendAttributesEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='245'/>
<size>20</size>
<fun r='_ZN24QRhiVertexInputAttributeC1Ev'/>
<fun r='_ZN24QRhiVertexInputAttributeC1EiiNS_6FormatEji'/>
<fun r='_ZNK24QRhiVertexInputAttribute7bindingEv'/>
<fun r='_ZN24QRhiVertexInputAttribute10setBindingEi'/>
<fun r='_ZNK24QRhiVertexInputAttribute8locationEv'/>
<fun r='_ZN24QRhiVertexInputAttribute11setLocationEi'/>
<fun r='_ZNK24QRhiVertexInputAttribute6formatEv'/>
<fun r='_ZN24QRhiVertexInputAttribute9setFormatENS_6FormatE'/>
<fun r='_ZNK24QRhiVertexInputAttribute6offsetEv'/>
<fun r='_ZN24QRhiVertexInputAttribute9setOffsetEj'/>
<fun r='_ZNK24QRhiVertexInputAttribute11matrixSliceEv'/>
<fun r='_ZN24QRhiVertexInputAttribute14setMatrixSliceEi'/>
<mbr r='QRhiVertexInputAttribute::m_binding' o='0' t='int'/>
<mbr r='QRhiVertexInputAttribute::m_location' o='32' t='int'/>
<mbr r='QRhiVertexInputAttribute::m_format' o='64' t='QRhiVertexInputAttribute::Format'/>
<mbr r='QRhiVertexInputAttribute::m_offset' o='96' t='quint32'/>
<mbr r='QRhiVertexInputAttribute::m_matrixSlice' o='128' t='int'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='1374' c='_ZeqRK24QRhiVertexInputAttributeS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='1374' c='_ZeqRK24QRhiVertexInputAttributeS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='1388' c='_ZneRK24QRhiVertexInputAttributeS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='1388' c='_ZneRK24QRhiVertexInputAttributeS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='1398' c='_Z5qHashRK24QRhiVertexInputAttributem'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='1404' c='_Zls6QDebugRK24QRhiVertexInputAttribute'/>
<size>20</size>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='1247'>/*!
    \class QRhiVertexInputAttribute
    \internal
    \inmodule QtGui
    \brief Describes a single vertex input element.

    The members specify the binding number, location, format, and offset for a
    single vertex input element.

    \note For HLSL it is assumed that the vertex shader uses
    \c{TEXCOORD&lt;location&gt;} as the semantic for each input. Hence no separate
    semantic name and index.

    As an example, assume a vertex shader with the following inputs:

    \badcode
        layout(location = 0) in vec4 position;
        layout(location = 1) in vec2 texcoord;
    \endcode

    Now let&apos;s assume that we have 3 component vertex positions \c{(x, y, z)}
    and 2 component texture coordinates \c{(u, v)} are provided in a
    non-interleaved format in a buffer (or separate buffers even). Once two
    bindings are defined, the attributes could be specified as:

    \badcode
        QRhiVertexInputLayout inputLayout;
        inputLayout.setBindings({
            { 3 * sizeof(float) },
            { 2 * sizeof(float) }
        });
        inputLayout.setAttributes({
            { 0, 0, QRhiVertexInputAttribute::Float3, 0 },
            { 1, 1, QRhiVertexInputAttribute::Float2, 0 }
        });
    \endcode

    Once a graphics pipeline with this vertex input layout is bound, the vertex
    inputs could be set up like the following for drawing a cube with 36
    vertices, assuming we have a single buffer with first the positions and
    then the texture coordinates:

    \badcode
        const QRhiCommandBuffer::VertexInput vbufBindings[] = {
            { cubeBuf, 0 },
            { cubeBuf, 36 * 3 * sizeof(float) }
        };
        cb-&gt;setVertexInput(0, 2, vbufBindings);
    \endcode

    When working with interleaved data, there will typically be just one
    binding, with multiple attributes referring to that same buffer binding
    point:

    \badcode
        QRhiVertexInputLayout inputLayout;
        inputLayout.setBindings({
            { 5 * sizeof(float) }
        });
        inputLayout.setAttributes({
            { 0, 0, QRhiVertexInputAttribute::Float3, 0 },
            { 0, 1, QRhiVertexInputAttribute::Float2, 3 * sizeof(float) }
        });
    \endcode

    and then:

    \badcode
        const QRhiCommandBuffer::VertexInput vbufBinding(interleavedCubeBuf, 0);
        cb-&gt;setVertexInput(0, 1, &amp;vbufBinding);
    \endcode

    \sa QRhiCommandBuffer::setVertexInput()
 */</doc>
<fun r='_ZN24QRhiVertexInputAttributeC1EiiNS_6FormatEji'/>
