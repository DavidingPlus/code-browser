<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='7332' type='int sqlite3_auto_extension(void (*)(void) xEntryPoint)'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='133136'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='133504' ll='133540' type='int sqlite3_auto_extension(void (*)(void) xInit)'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='7296'>/*
** CAPI3REF: Automatically Load Statically Linked Extensions
**
** ^This interface causes the xEntryPoint() function to be invoked for
** each new [database connection] that is created.  The idea here is that
** xEntryPoint() is the entry point for a statically linked [SQLite extension]
** that is to be automatically loaded into all new database connections.
**
** ^(Even though the function prototype shows that xEntryPoint() takes
** no arguments and returns void, SQLite invokes xEntryPoint() with three
** arguments and expects an integer result as if the signature of the
** entry point where as follows:
**
** &lt;blockquote&gt;&lt;pre&gt;
** &amp;nbsp;  int xEntryPoint(
** &amp;nbsp;    sqlite3 *db,
** &amp;nbsp;    const char **pzErrMsg,
** &amp;nbsp;    const struct sqlite3_api_routines *pThunk
** &amp;nbsp;  );
** &lt;/pre&gt;&lt;/blockquote&gt;)^
**
** If the xEntryPoint routine encounters an error, it should make *pzErrMsg
** point to an appropriate error message (obtained from [sqlite3_mprintf()])
** and return an appropriate [error code].  ^SQLite ensures that *pzErrMsg
** is NULL before calling the xEntryPoint().  ^SQLite will invoke
** [sqlite3_free()] on *pzErrMsg after xEntryPoint() returns.  ^If any
** xEntryPoint() returns an error, the [sqlite3_open()], [sqlite3_open16()],
** or [sqlite3_open_v2()] call that provoked the xEntryPoint() will fail.
**
** ^Calling sqlite3_auto_extension(X) with an entry point X that is already
** on the list of automatic extensions is a harmless no-op. ^No entry point
** will be called more than once for each database connection that is opened.
**
** See also: [sqlite3_reset_auto_extension()]
** and [sqlite3_cancel_auto_extension()]
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='133500'>/*
** Register a statically linked extension that is automatically
** loaded by every new database connection.
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='7026' type='int sqlite3_auto_extension(void (*)() xEntryPoint)'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='6990'>/*
** CAPI3REF: Automatically Load Statically Linked Extensions
**
** ^This interface causes the xEntryPoint() function to be invoked for
** each new [database connection] that is created.  The idea here is that
** xEntryPoint() is the entry point for a statically linked [SQLite extension]
** that is to be automatically loaded into all new database connections.
**
** ^(Even though the function prototype shows that xEntryPoint() takes
** no arguments and returns void, SQLite invokes xEntryPoint() with three
** arguments and expects an integer result as if the signature of the
** entry point where as follows:
**
** &lt;blockquote&gt;&lt;pre&gt;
** &amp;nbsp;  int xEntryPoint(
** &amp;nbsp;    sqlite3 *db,
** &amp;nbsp;    const char **pzErrMsg,
** &amp;nbsp;    const struct sqlite3_api_routines *pThunk
** &amp;nbsp;  );
** &lt;/pre&gt;&lt;/blockquote&gt;)^
**
** If the xEntryPoint routine encounters an error, it should make *pzErrMsg
** point to an appropriate error message (obtained from [sqlite3_mprintf()])
** and return an appropriate [error code].  ^SQLite ensures that *pzErrMsg
** is NULL before calling the xEntryPoint().  ^SQLite will invoke
** [sqlite3_free()] on *pzErrMsg after xEntryPoint() returns.  ^If any
** xEntryPoint() returns an error, the [sqlite3_open()], [sqlite3_open16()],
** or [sqlite3_open_v2()] call that provoked the xEntryPoint() will fail.
**
** ^Calling sqlite3_auto_extension(X) with an entry point X that is already
** on the list of automatic extensions is a harmless no-op. ^No entry point
** will be called more than once for each database connection that is opened.
**
** See also: [sqlite3_reset_auto_extension()]
** and [sqlite3_cancel_auto_extension()]
*/</doc>
