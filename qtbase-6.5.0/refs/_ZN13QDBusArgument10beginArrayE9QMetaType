<use f='qtbase-6.5.0/src/dbus/qdbusargument.h' l='71' u='c' c='_ZN13QDBusArgument10beginArrayEi'/>
<dec f='qtbase-6.5.0/src/dbus/qdbusargument.h' l='72' type='void QDBusArgument::beginArray(QMetaType elementMetaType)'/>
<use f='qtbase-6.5.0/src/dbus/qdbusargument.h' l='224' u='c' c='_ZlsR13QDBusArgumentRK5QListI8QVariantE'/>
<def f='qtbase-6.5.0/src/dbus/qdbusargument.cpp' l='847' ll='851' type='void QDBusArgument::beginArray(QMetaType id)'/>
<doc f='qtbase-6.5.0/src/dbus/qdbusargument.cpp' l='830'>/*!
    Opens a new D-Bus array suitable for appending elements of meta-type \a id.

    This function is used usually in \c{operator&lt;&lt;} streaming
    operators, as in the following example:

    \snippet code/src_qdbus_qdbusargument.cpp 6

    If the type you want to marshall is a QList or any of the
    Qt&apos;s \l {Container Classes} that take one template parameter,
    you need not declare an \c{operator&lt;&lt;} function for it, since
    Qt D-Bus provides generic templates to do the job of marshalling
    the data. The same applies for STL&apos;s sequence containers, such
    as \c {std::list}, \c {std::vector}, etc.

    \sa endArray(), beginStructure(), beginMap()
*/</doc>
