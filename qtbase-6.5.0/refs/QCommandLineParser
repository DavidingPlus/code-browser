<def f='qtbase-6.5.0/src/corelib/tools/qcommandlineparser.h' l='19' ll='74'/>
<use f='qtbase-6.5.0/src/corelib/tools/qcommandlineparser.h' l='71' c='_ZN18QCommandLineParserC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/tools/qcommandlineparser.h' l='71' c='_ZN18QCommandLineParseraSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/tools/qcommandlineparser.h' l='71' c='_ZN18QCommandLineParseraSERKS_'/>
<size>8</size>
<fun r='_ZN18QCommandLineParser2trEPKcS1_i'/>
<fun r='_ZN18QCommandLineParserC1Ev'/>
<fun r='_ZN18QCommandLineParserD1Ev'/>
<fun r='_ZN18QCommandLineParser27setSingleDashWordOptionModeENS_24SingleDashWordOptionModeE'/>
<fun r='_ZN18QCommandLineParser38setOptionsAfterPositionalArgumentsModeENS_35OptionsAfterPositionalArgumentsModeE'/>
<fun r='_ZN18QCommandLineParser9addOptionERK18QCommandLineOption'/>
<fun r='_ZN18QCommandLineParser10addOptionsERK5QListI18QCommandLineOptionE'/>
<fun r='_ZN18QCommandLineParser16addVersionOptionEv'/>
<fun r='_ZN18QCommandLineParser13addHelpOptionEv'/>
<fun r='_ZN18QCommandLineParser25setApplicationDescriptionERK7QString'/>
<fun r='_ZNK18QCommandLineParser22applicationDescriptionEv'/>
<fun r='_ZN18QCommandLineParser21addPositionalArgumentERK7QStringS2_S2_'/>
<fun r='_ZN18QCommandLineParser24clearPositionalArgumentsEv'/>
<fun r='_ZN18QCommandLineParser7processERK5QListI7QStringE'/>
<fun r='_ZN18QCommandLineParser7processERK16QCoreApplication'/>
<fun r='_ZN18QCommandLineParser5parseERK5QListI7QStringE'/>
<fun r='_ZNK18QCommandLineParser9errorTextEv'/>
<fun r='_ZNK18QCommandLineParser5isSetERK7QString'/>
<fun r='_ZNK18QCommandLineParser5valueERK7QString'/>
<fun r='_ZNK18QCommandLineParser6valuesERK7QString'/>
<fun r='_ZNK18QCommandLineParser5isSetERK18QCommandLineOption'/>
<fun r='_ZNK18QCommandLineParser5valueERK18QCommandLineOption'/>
<fun r='_ZNK18QCommandLineParser6valuesERK18QCommandLineOption'/>
<fun r='_ZNK18QCommandLineParser19positionalArgumentsEv'/>
<fun r='_ZNK18QCommandLineParser11optionNamesEv'/>
<fun r='_ZNK18QCommandLineParser18unknownOptionNamesEv'/>
<fun r='_ZN18QCommandLineParser11showVersionEv'/>
<fun r='_ZN18QCommandLineParser8showHelpEi'/>
<fun r='_ZNK18QCommandLineParser8helpTextEv'/>
<fun r='_ZN18QCommandLineParserC1ERKS_'/>
<mbr r='QCommandLineParser::d' o='0' t='QCommandLineParserPrivate *const'/>
<doc f='qtbase-6.5.0/src/corelib/tools/qcommandlineparser.cpp' l='108'>/*!
    \since 5.2
    \class QCommandLineParser
    \inmodule QtCore
    \ingroup tools

    \brief The QCommandLineParser class provides a means for handling the
    command line options.

    QCoreApplication provides the command-line arguments as a simple list of strings.
    QCommandLineParser provides the ability to define a set of options, parse the
    command-line arguments, and store which options have actually been used, as
    well as option values.

    Any argument that isn&apos;t an option (i.e. doesn&apos;t start with a \c{-}) is stored
    as a &quot;positional argument&quot;.

    The parser handles short names, long names, more than one name for the same
    option, and option values.

    Options on the command line are recognized as starting with a single or
    double \c{-} character(s).
    The option \c{-} (single dash alone) is a special case, often meaning standard
    input, and not treated as an option. The parser will treat everything after the
    option \c{--} (double dash) as positional arguments.

    Short options are single letters. The option \c{v} would be specified by
    passing \c{-v} on the command line. In the default parsing mode, short options
    can be written in a compact form, for instance \c{-abc} is equivalent to \c{-a -b -c}.
    The parsing mode for can be set to ParseAsLongOptions, in which case \c{-abc}
    will be parsed as the long option \c{abc}.

    Long options are more than one letter long and cannot be compacted together.
    The long option \c{verbose} would be passed as \c{--verbose} or \c{-verbose}.

    Passing values to options can be done using the assignment operator: \c{-v=value}
    \c{--verbose=value}, or a space: \c{-v value} \c{--verbose value}, i.e. the next
    argument is used as value (even if it starts with a \c{-}).

    The parser does not support optional values - if an option is set to
    require a value, one must be present. If such an option is placed last
    and has no value, the option will be treated as if it had not been
    specified.

    The parser does not automatically support negating or disabling long options
    by using the format \c{--disable-option} or \c{--no-option}. However, it is
    possible to handle this case explicitly by making an option with \c{no-option}
    as one of its names, and handling the option explicitly.

    Example:
    \snippet code/src_corelib_tools_qcommandlineparser_main.cpp 0

    If your compiler supports the C++11 standard, the three addOption() calls in
    the above example can be simplified:
    \snippet code/src_corelib_tools_qcommandlineparser_main.cpp cxx11

    Known limitation: the parsing of Qt options inside QCoreApplication and subclasses
    happens before QCommandLineParser exists, so it can&apos;t take it into account. This
    means any option value that looks like a builtin Qt option, will be treated by
    QCoreApplication as a builtin Qt option. Example: \c{--profile -reverse} will
    lead to QGuiApplication seeing the -reverse option set, and removing it from
    QCoreApplication::arguments() before QCommandLineParser defines the \c{profile}
    option and parses the command line.

    \section2 How to Use QCommandLineParser in Complex Applications

    In practice, additional error checking needs to be performed on the positional
    arguments and option values. For example, ranges of numbers should be checked.

    It is then advisable to introduce a function to do the command line parsing
    which takes a struct or class receiving the option values returning an
    enumeration representing the result. The dnslookup example of the QtNetwork
    module illustrates this:

    \snippet dnslookup.h 0

    \snippet dnslookup.cpp 0

    In the main function, help should be printed to the standard output if the help option
    was passed and the application should return the exit code 0.

    If an error was detected, the error message should be printed to the standard
    error output and the application should return an exit code other than 0.

    \snippet dnslookup.cpp 1

    A special case to consider here are GUI applications on Windows and mobile
    platforms. These applications may not use the standard output or error channels
    since the output is either discarded or not accessible.

    On Windows, QCommandLineParser uses message boxes to display usage information
    and errors if no console window can be obtained.

    For other platforms, it is recommended to display help texts and error messages
    using a QMessageBox. To preserve the formatting of the help text, rich text
    with \c &lt;pre&gt; elements should be used:

    \code

    switch (parseCommandLine(parser, &amp;query, &amp;errorMessage)) {
    case CommandLineOk:
        break;
    case CommandLineError:
        QMessageBox::warning(0, QGuiApplication::applicationDisplayName(),
                             &quot;&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;h2&gt;&quot; + errorMessage + &quot;&lt;/h2&gt;&lt;pre&gt;&quot;
                             + parser.helpText() + &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&quot;);
        return 1;
    case CommandLineVersionRequested:
        QMessageBox::information(0, QGuiApplication::applicationDisplayName(),
                                 QGuiApplication::applicationDisplayName() + &apos; &apos;
                                 + QCoreApplication::applicationVersion());
        return 0;
    case CommandLineHelpRequested:
        QMessageBox::warning(0, QGuiApplication::applicationDisplayName(),
                             &quot;&lt;html&gt;&lt;head/&gt;&lt;body&gt;&lt;pre&gt;&quot;
                             + parser.helpText() + &quot;&lt;/pre&gt;&lt;/body&gt;&lt;/html&gt;&quot;);
        return 0;
    }
    \endcode

    However, this does not apply to the dnslookup example, because it is a
    console application.

    \sa QCommandLineOption, QCoreApplication
*/</doc>
<fun r='_ZN18QCommandLineParserC1Ev'/>
<fun r='_ZN18QCommandLineParserD1Ev'/>
<fun r='_ZN18QCommandLineParser27setSingleDashWordOptionModeENS_24SingleDashWordOptionModeE'/>
<fun r='_ZN18QCommandLineParser38setOptionsAfterPositionalArgumentsModeENS_35OptionsAfterPositionalArgumentsModeE'/>
<fun r='_ZN18QCommandLineParser9addOptionERK18QCommandLineOption'/>
<fun r='_ZN18QCommandLineParser10addOptionsERK5QListI18QCommandLineOptionE'/>
<fun r='_ZN18QCommandLineParser16addVersionOptionEv'/>
<fun r='_ZN18QCommandLineParser13addHelpOptionEv'/>
<fun r='_ZN18QCommandLineParser25setApplicationDescriptionERK7QString'/>
<fun r='_ZNK18QCommandLineParser22applicationDescriptionEv'/>
<fun r='_ZN18QCommandLineParser21addPositionalArgumentERK7QStringS2_S2_'/>
<fun r='_ZN18QCommandLineParser24clearPositionalArgumentsEv'/>
<fun r='_ZN18QCommandLineParser5parseERK5QListI7QStringE'/>
<fun r='_ZNK18QCommandLineParser9errorTextEv'/>
<fun r='_ZN18QCommandLineParser7processERK5QListI7QStringE'/>
<fun r='_ZN18QCommandLineParser7processERK16QCoreApplication'/>
<fun r='_ZNK18QCommandLineParser5isSetERK7QString'/>
<fun r='_ZNK18QCommandLineParser5valueERK7QString'/>
<fun r='_ZNK18QCommandLineParser6valuesERK7QString'/>
<fun r='_ZNK18QCommandLineParser5isSetERK18QCommandLineOption'/>
<fun r='_ZNK18QCommandLineParser5valueERK18QCommandLineOption'/>
<fun r='_ZNK18QCommandLineParser6valuesERK18QCommandLineOption'/>
<fun r='_ZNK18QCommandLineParser19positionalArgumentsEv'/>
<fun r='_ZNK18QCommandLineParser11optionNamesEv'/>
<fun r='_ZNK18QCommandLineParser18unknownOptionNamesEv'/>
<fun r='_ZN18QCommandLineParser11showVersionEv'/>
<fun r='_ZN18QCommandLineParser8showHelpEi'/>
<fun r='_ZNK18QCommandLineParser8helpTextEv'/>
<use f='qtbase-6.5.0/src/tools/cmake_automoc_parser/main.cpp' l='231' c='main'/>
<size>8</size>
<use f='qtbase-6.5.0/src/tools/moc/main.cpp' l='185' c='_Z6runMociPPc'/>
<size>8</size>
<use f='qtbase-6.5.0/src/tools/qdbusxml2cpp/qdbusxml2cpp.cpp' l='1093' c='main'/>
<size>8</size>
<use f='qtbase-6.5.0/src/tools/qtpaths/qtpaths.cpp' l='116' c='_ZL19searchStringOrErrorP18QCommandLineParser'/>
<use f='qtbase-6.5.0/src/tools/qtpaths/qtpaths.cpp' l='136' c='main'/>
<size>8</size>
<use f='qtbase-6.5.0/src/tools/rcc/main.cpp' l='117' c='_Z6runRcciPPc'/>
<size>8</size>
<use f='qtbase-6.5.0/src/tools/uic/main.cpp' l='64' c='_Z6runUiciPPc'/>
<size>8</size>
