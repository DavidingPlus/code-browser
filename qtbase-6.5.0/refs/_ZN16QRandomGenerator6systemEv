<dec f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='173' type='static QRandomGenerator * QRandomGenerator::system()'/>
<def f='qtbase-6.5.0/src/corelib/global/qrandom.h' l='270' ll='273' type='static QRandomGenerator * QRandomGenerator::system()'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='1181' u='c' c='_ZN16QRandomGeneratoraSERKS_'/>
<doc f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='1000'>/*!
    \fn QRandomGenerator *QRandomGenerator::system()
    \threadsafe

    Returns a pointer to a shared QRandomGenerator that always uses the
    facilities provided by the operating system to generate random numbers. The
    system facilities are considered to be cryptographically safe on at least
    the following operating systems: Apple OSes (Darwin), BSDs, Linux, Windows.
    That may also be the case on other operating systems.

    They are also possibly backed by a true hardware random number generator.
    For that reason, the QRandomGenerator returned by this function should not
    be used for bulk data generation. Instead, use it to seed QRandomGenerator
    or a random engine from the &lt;random&gt; header.

    The object returned by this function is thread-safe and may be used in any
    thread without locks. It may also be copied and the resulting
    QRandomGenerator will also access the operating system facilities, but they
    will not generate the same sequence.

    \sa securelySeeded(), global()
*/</doc>
<use f='qtbase-6.5.0/src/corelib/plugin/quuid.cpp' l='905' u='c' c='_ZN5QUuid10createUuidEv'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhash.cpp' l='90' u='c' c='_ZN12_GLOBAL__N_115HashSeedStorage9resetSeedEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qauthenticator.cpp' l='382' u='c' c='_ZN21QAuthenticatorPrivateC1Ev'/>
