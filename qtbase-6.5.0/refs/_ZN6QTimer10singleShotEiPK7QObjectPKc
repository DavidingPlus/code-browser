<dec f='qtbase-6.5.0/src/corelib/kernel/qtimer.h' l='49' type='static void QTimer::singleShot(int msec, const QObject * receiver, const char * member)'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer.h' l='163' u='c' c='_ZN6QTimer10singleShotENSt6chrono8durationIlSt5ratioILl1ELl1000EEEEPK7QObjectPKc'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qtimer.cpp' l='385' ll='391' type='static void QTimer::singleShot(int msec, const QObject * receiver, const char * member)'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qtimer.cpp' l='365'>/*!
    \reentrant
    This static function calls a slot after a given time interval.

    It is very convenient to use this function because you do not need
    to bother with a \l{QObject::timerEvent()}{timerEvent} or
    create a local QTimer object.

    Example:
    \snippet code/src_corelib_kernel_qtimer.cpp 0

    This sample program automatically terminates after 10 minutes
    (600,000 milliseconds).

    The \a receiver is the receiving object and the \a member is the
    slot. The time interval is \a msec milliseconds.

    \sa start()
*/</doc>
<use f='qtbase-6.5.0/src/dbus/qdbusconnection.cpp' l='156' u='c' c='_ZN22QDBusConnectionManager12connectToBusEN15QDBusConnection7BusTypeERK7QStringb'/>
<use f='qtbase-6.5.0/src/dbus/qdbusintegrator.cpp' l='299' u='c' c='_ZL18qDBusNewConnectionP10DBusServerP14DBusConnectionPv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qwindow.cpp' l='2909' u='c' c='_ZN7QWindow5alertEi'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='310' u='c' c='_ZN18QSyntaxHighlighter11setDocumentEP13QTextDocument'/>
<use f='qtbase-6.5.0/src/network/access/qhttpthreaddelegate.cpp' l='219' u='c' c='_ZN19QHttpThreadDelegate25startRequestSynchronouslyEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qlineedit.cpp' l='1434' u='c' c='_ZN9QLineEdit5eventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qmenu.cpp' l='581' u='c' c='_ZN12QMenuPrivate8hideMenuEP5QMenu'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qmenu.cpp' l='586' u='c' c='_ZN12QMenuPrivate8hideMenuEP5QMenu'/>
