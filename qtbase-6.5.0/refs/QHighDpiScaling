<use f='qtbase-6.5.0/src/gui/kernel/qscreen.h' l='140'/>
<def f='qtbase-6.5.0/src/gui/kernel/qhighdpiscaling_p.h' l='38' ll='121'/>
<use f='qtbase-6.5.0/src/gui/kernel/qhighdpiscaling_p.h' l='51' c='_ZN15QHighDpiScalingC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qhighdpiscaling_p.h' l='52' c='_ZN15QHighDpiScalingaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qhighdpiscaling_p.h' l='52' c='_ZN15QHighDpiScalingaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qhighdpiscaling_p.h' l='53' c='_ZN15QHighDpiScalingC1EOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qhighdpiscaling_p.h' l='54' c='_ZN15QHighDpiScalingaSEOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qhighdpiscaling_p.h' l='54' c='_ZN15QHighDpiScalingaSEOS_'/>
<size>1</size>
<smbr r='QHighDpiScaling::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZN15QHighDpiScaling26qt_check_for_QGADGET_macroEv'/>
<fun r='_ZN15QHighDpiScaling18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN15QHighDpiScalingC1Ev'/>
<fun r='_ZN15QHighDpiScalingD1Ev'/>
<fun r='_ZN15QHighDpiScalingC1ERKS_'/>
<fun r='_ZN15QHighDpiScalingaSERKS_'/>
<fun r='_ZN15QHighDpiScalingC1EOS_'/>
<fun r='_ZN15QHighDpiScalingaSEOS_'/>
<fun r='_ZN15QHighDpiScaling18initHighDpiScalingEv'/>
<fun r='_ZN15QHighDpiScaling20updateHighDpiScalingEv'/>
<fun r='_ZN15QHighDpiScaling15setGlobalFactorEd'/>
<fun r='_ZN15QHighDpiScaling15setScreenFactorEP7QScreend'/>
<fun r='_ZN15QHighDpiScaling8isActiveEv'/>
<fun r='_ZN15QHighDpiScaling14scaleAndOriginEPK15QPlatformScreenNS_5PointE'/>
<fun r='_ZN15QHighDpiScaling14scaleAndOriginEPK7QScreenNS_5PointE'/>
<fun r='_ZN15QHighDpiScaling14scaleAndOriginEPK7QWindowNS_5PointE'/>
<fun r='_ZN15QHighDpiScaling6factorEPT_'/>
<fun r='_ZN15QHighDpiScaling21mapPositionFromNativeERK6QPointPK15QPlatformScreen'/>
<fun r='_ZN15QHighDpiScaling19mapPositionToNativeERK6QPointPK15QPlatformScreen'/>
<fun r='_ZN15QHighDpiScaling10logicalDpiEPK7QScreen'/>
<fun r='_ZN15QHighDpiScaling16roundScaleFactorEd'/>
<fun r='_ZN15QHighDpiScaling14rawScaleFactorEPK15QPlatformScreen'/>
<fun r='_ZN15QHighDpiScaling19effectiveLogicalDpiEPK15QPlatformScreendd'/>
<fun r='_ZN15QHighDpiScaling15screenSubfactorEPK15QPlatformScreen'/>
<fun r='_ZN15QHighDpiScaling17screenForPositionENS_5PointEP7QScreen'/>
<fun r='_ZN15QHighDpiScaling27parseScreenScaleFactorsSpecERK11QStringView'/>
<smbr r='QHighDpiScaling::m_factor' t='qreal'/>
<smbr r='QHighDpiScaling::m_active' t='bool'/>
<smbr r='QHighDpiScaling::m_usePlatformPluginDpi' t='bool'/>
<smbr r='QHighDpiScaling::m_platformPluginDpiScalingActive' t='bool'/>
<smbr r='QHighDpiScaling::m_globalScalingActive' t='bool'/>
<smbr r='QHighDpiScaling::m_screenFactorSet' t='bool'/>
<smbr r='QHighDpiScaling::m_usePhysicalDpi' t='bool'/>
<smbr r='QHighDpiScaling::m_screenFactors' t='QVector&lt;QHighDpiScaling::ScreenFactor&gt;'/>
<smbr r='QHighDpiScaling::m_dpiAdjustmentPolicy' t='QHighDpiScaling::DpiAdjustmentPolicy'/>
<smbr r='QHighDpiScaling::m_namedScreenScaleFactors' t='QHash&lt;QString, qreal&gt;'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qhighdpiscaling.cpp' l='65'>/*!
    \class QHighDpiScaling
    \since 5.6
    \internal
    \preliminary
    \ingroup qpa

    \brief Collection of utility functions for UI scaling.

    QHighDpiScaling implements utility functions for high-dpi scaling for use
    on operating systems that provide limited support for native scaling, such
    as Windows, X11, and Android. In addition this functionality can be used
    for simulation and testing purposes.

    The functions support scaling between the device independent coordinate
    system used by Qt applications and the native coordinate system used by
    the platform plugins. Intended usage locations are the low level / platform
    plugin interfacing parts of QtGui, for example the QWindow, QScreen and
    QWindowSystemInterface implementation.

    There are now up to three active coordinate systems in Qt:

     ---------------------------------------------------
    |  Application            Device Independent Pixels |   devicePixelRatio
    |  Qt Widgets                                       |         =
    |  Qt Gui                                           |
    |---------------------------------------------------|   Qt Scale Factor
    |  Qt Gui QPlatform*      Native Pixels             |         *
    |  Qt platform plugin                               |
    |---------------------------------------------------|   OS Scale Factor
    |  Display                Device Pixels             |
    |  (Graphics Buffers)                               |
    -----------------------------------------------------

    This is an simplification and shows the main coordinate system. All layers
    may work with device pixels in specific cases: OpenGL, creating the backing
    store, and QPixmap management. The &quot;Native Pixels&quot; coordinate system is
    internal to Qt and should not be exposed to Qt users: Seen from the outside
    there are only two coordinate systems: device independent pixels and device
    pixels.

    The devicePixelRatio seen by applications is the product of the Qt scale
    factor and the OS scale factor (see QWindow::devicePixelRatio()). The value
    of the scale factors may be 1, in which case two or more of the coordinate
    systems are equivalent. Platforms that (may) have an OS scale factor include
    macOS, iOS, Wayland, and Web(Assembly).

    Note that the API implemented in this file do use the OS scale factor, and
    is used for converting between device independent and native pixels only.

    Configuration Examples:

    &apos;Classic&apos;: Device Independent Pixels = Native Pixels = Device Pixels
     ---------------------------------------------------    devicePixelRatio: 1
    |  Application / Qt Gui             100 x 100       |
    |                                                   |   Qt Scale Factor: 1
    |  Qt Platform / OS                 100 x 100       |
    |                                                   |   OS Scale Factor: 1
    |  Display                          100 x 100       |
    -----------------------------------------------------

    &apos;2x Apple Device&apos;: Device Independent Pixels = Native Pixels
     ---------------------------------------------------    devicePixelRatio: 2
    |  Application / Qt Gui             100 x 100       |
    |                                                   |   Qt Scale Factor: 1
    |  Qt Platform / OS                 100 x 100       |
    |---------------------------------------------------|   OS Scale Factor: 2
    |  Display                          200 x 200       |
    -----------------------------------------------------

    &apos;Windows at 200%&apos;: Native Pixels = Device Pixels
     ---------------------------------------------------    devicePixelRatio: 2
    |  Application / Qt Gui             100 x 100       |
    |---------------------------------------------------|   Qt Scale Factor: 2
    |  Qt Platform / OS                 200 x 200       |
    |                                                   |   OS Scale Factor: 1
    |  Display                          200 x 200       |
    -----------------------------------------------------

    * Configuration

    - Enabling: In Qt 6, high-dpi scaling (the functionality implemented in this file)
      is always enabled. The Qt scale factor value is typically determined by the
      QPlatformScreen implementation - see below.

      There is one environment variable based opt-out option: set QT_ENABLE_HIGHDPI_SCALING=0.
      Keep in mind that this does not affect the OS scale factor, which is controlled by
      the operating system.

    - Qt scale factor value: The Qt scale factor is the product of the screen scale
      factor and the global scale factor, which are independently either set or determined
      by the platform plugin. Several APIs are offered for this, targeting both developers
      and end users. All scale factors are of type qreal.

      1) Per-screen scale factors

        Per-screen scale factors are computed based on logical DPI provided by
        by the platform plugin.

        The platform plugin implements DPI accessor functions:
            QDpi QPlatformScreen::logicalDpi()
            QDpi QPlatformScreen::logicalBaseDpi()

        QHighDpiScaling then computes the per-screen scale factor as follows:

            factor = logicalDpi / logicalBaseDpi

        Alternatively, QT_SCREEN_SCALE_FACTORS can be used to set the screen
        scale factors.

      2) The global scale factor

        The QT_SCALE_FACTOR environment variable can be used to set a global scale
        factor which applies to all application windows. This allows developing and
        testing at any DPR, independently of available hardware and without changing
        global desktop settings.

    - Rounding

      Qt 6 does not round scale factors by default. Qt 5 rounds the screen scale factor
      to the nearest integer (except for Qt on Android which does not round).

      The rounding policy can be set by the application, or on the environment:

        Application (C++):    QGuiApplication::setHighDpiScaleFactorRoundingPolicy()
        User (environment):   QT_SCALE_FACTOR_ROUNDING_POLICY

      Note that the OS scale factor, and global scale factors set with QT_SCALE_FACTOR
      are never rounded by Qt.

    * C++ API Overview

    - Coordinate Conversion (&quot;scaling&quot;)

      The QHighDpi namespace provides several functions for converting geometry
      between the device independent and native coordinate systems. These should
      be used when calling &quot;QPlatform*&quot; API from QtGui. Callers are responsible
      for selecting a function variant based on geometry type:

            Type                        From Native                              To Native
        local               :    QHighDpi::fromNativeLocalPosition()    QHighDpi::toNativeLocalPosition()
        global (screen)     :    QHighDpi::fromNativeGlobalPosition()   QHighDpi::toNativeGlobalPosition()
        QWindow::geometry() :    QHighDpi::fromNativeWindowGeometry()   QHighDpi::toNativeWindowGeometry()
        sizes, margins, etc :    QHighDpi::fromNativePixels()           QHighDpi::toNativePixels()

     The conversion functions take two arguments; the geometry and a context:

        QSize nativeSize = toNativePixels(deviceIndependentSize, window);

     The context is usually a QWindow instance, but can also be a QScreen instance,
     or the corresponding QPlatform classes.

    - Activation

      QHighDpiScaling::isActive() returns true iff
            Qt high-dpi scaling is enabled (e.g. with AA_EnableHighDpiScaling) AND
            there is a Qt scale factor != 1

      (the value of the OS scale factor does not affect this API)

    - Calling QtGui from the platform plugins

      Platform plugin code should be careful about calling QtGui geometry accessor
      functions like geometry():

         QRect r = window-&gt;geometry();

      In this case the returned geometry is in the wrong coordinate system (device independent
      instead of native pixels). Fix this by adding a conversion call:

         QRect r = QHighDpi::toNativeWindowGeometry(window-&gt;geometry());

      (Also consider if the call to QtGui is really needed - prefer calling QPlatform* API.)
*/</doc>
<smbr r='QHighDpiScaling::m_factor' t='qreal'/>
<smbr r='QHighDpiScaling::m_active' t='bool'/>
<smbr r='QHighDpiScaling::m_usePlatformPluginDpi' t='bool'/>
<smbr r='QHighDpiScaling::m_platformPluginDpiScalingActive' t='bool'/>
<smbr r='QHighDpiScaling::m_globalScalingActive' t='bool'/>
<smbr r='QHighDpiScaling::m_screenFactorSet' t='bool'/>
<smbr r='QHighDpiScaling::m_usePhysicalDpi' t='bool'/>
<smbr r='QHighDpiScaling::m_screenFactors' t='QVector&lt;QHighDpiScaling::ScreenFactor&gt;'/>
<smbr r='QHighDpiScaling::m_dpiAdjustmentPolicy' t='QHighDpiScaling::DpiAdjustmentPolicy'/>
<smbr r='QHighDpiScaling::m_namedScreenScaleFactors' t='QHash&lt;QString, qreal&gt;'/>
<fun r='_ZN15QHighDpiScaling14rawScaleFactorEPK15QPlatformScreen'/>
<fun r='_ZN15QHighDpiScaling16roundScaleFactorEd'/>
<fun r='_ZN15QHighDpiScaling19effectiveLogicalDpiEPK15QPlatformScreendd'/>
<fun r='_ZN15QHighDpiScaling18initHighDpiScalingEv'/>
<fun r='_ZN15QHighDpiScaling20updateHighDpiScalingEv'/>
<fun r='_ZN15QHighDpiScaling15setGlobalFactorEd'/>
<fun r='_ZN15QHighDpiScaling15setScreenFactorEP7QScreend'/>
<fun r='_ZN15QHighDpiScaling19mapPositionToNativeERK6QPointPK15QPlatformScreen'/>
<fun r='_ZN15QHighDpiScaling21mapPositionFromNativeERK6QPointPK15QPlatformScreen'/>
<fun r='_ZN15QHighDpiScaling15screenSubfactorEPK15QPlatformScreen'/>
<fun r='_ZN15QHighDpiScaling10logicalDpiEPK7QScreen'/>
<fun r='_ZN15QHighDpiScaling17screenForPositionENS_5PointEP7QScreen'/>
<fun r='_ZN15QHighDpiScaling27parseScreenScaleFactorsSpecERK11QStringView'/>
<fun r='_ZN15QHighDpiScaling14scaleAndOriginEPK15QPlatformScreenNS_5PointE'/>
<fun r='_ZN15QHighDpiScaling14scaleAndOriginEPK7QScreenNS_5PointE'/>
<fun r='_ZN15QHighDpiScaling14scaleAndOriginEPK7QWindowNS_5PointE'/>
