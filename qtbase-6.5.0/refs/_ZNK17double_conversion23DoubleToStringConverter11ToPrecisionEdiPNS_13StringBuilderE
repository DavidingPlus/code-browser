<dec f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.h' l='335' type='bool double_conversion::DoubleToStringConverter::ToPrecision(double value, int precision, double_conversion::StringBuilder * result_builder) const'/>
<def f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.cc' l='296' ll='362' type='bool double_conversion::DoubleToStringConverter::ToPrecision(double value, int precision, double_conversion::StringBuilder * result_builder) const'/>
<doc f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.h' l='299'>// Computes &apos;precision&apos; leading digits of the given &apos;value&apos; and returns them
  // either in exponential or decimal format, depending on
  // max_{leading|trailing}_padding_zeroes_in_precision_mode (given to the
  // constructor).
  // The last computed digit is rounded.
  //
  // Example with max_leading_padding_zeroes_in_precision_mode = 6.
  //   ToPrecision(0.0000012345, 2) -&gt; &quot;0.0000012&quot;
  //   ToPrecision(0.00000012345, 2) -&gt; &quot;1.2e-7&quot;
  // Similarly the converter may add up to
  // max_trailing_padding_zeroes_in_precision_mode in precision mode to avoid
  // returning an exponential representation. A zero added by the
  // EMIT_TRAILING_ZERO_AFTER_POINT flag is counted for this limit.
  // Examples for max_trailing_padding_zeroes_in_precision_mode = 1:
  //   ToPrecision(230.0, 2) -&gt; &quot;230&quot;
  //   ToPrecision(230.0, 2) -&gt; &quot;230.&quot;  with EMIT_TRAILING_DECIMAL_POINT.
  //   ToPrecision(230.0, 2) -&gt; &quot;2.3e2&quot; with EMIT_TRAILING_ZERO_AFTER_POINT.
  // Examples for max_trailing_padding_zeroes_in_precision_mode = 3, and no
  //    EMIT_TRAILING_ZERO_AFTER_POINT:
  //   ToPrecision(123450.0, 6) -&gt; &quot;123450&quot;
  //   ToPrecision(123450.0, 5) -&gt; &quot;123450&quot;
  //   ToPrecision(123450.0, 4) -&gt; &quot;123500&quot;
  //   ToPrecision(123450.0, 3) -&gt; &quot;123000&quot;
  //   ToPrecision(123450.0, 2) -&gt; &quot;1.2e5&quot;
  //
  // Returns true if the conversion succeeds. The conversion always succeeds
  // except for the following cases:
  //   - the input value is special and no infinity_symbol or nan_symbol has
  //     been provided to the constructor,
  //   - precision &lt; kMinPericisionDigits
  //   - precision &gt; kMaxPrecisionDigits
  //
  // The last condition implies that the result never contains more than
  // kMaxPrecisionDigits + 7 characters (the sign, the decimal point, the
  // exponent character, the exponent&apos;s sign, and at most 3 exponent digits).
  // In addition, the buffer must be able to hold the trailing &apos;\0&apos; character.</doc>
