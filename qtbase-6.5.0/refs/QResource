<def f='qtbase-6.5.0/src/corelib/io/qresource.h' l='19' ll='65'/>
<size>8</size>
<fun r='_ZN9QResourceC1ERK7QStringRK7QLocale'/>
<fun r='_ZN9QResourceD1Ev'/>
<fun r='_ZN9QResource11setFileNameERK7QString'/>
<fun r='_ZNK9QResource8fileNameEv'/>
<fun r='_ZNK9QResource16absoluteFilePathEv'/>
<fun r='_ZN9QResource9setLocaleERK7QLocale'/>
<fun r='_ZNK9QResource6localeEv'/>
<fun r='_ZNK9QResource7isValidEv'/>
<fun r='_ZNK9QResource20compressionAlgorithmEv'/>
<fun r='_ZNK9QResource4sizeEv'/>
<fun r='_ZNK9QResource4dataEv'/>
<fun r='_ZNK9QResource16uncompressedSizeEv'/>
<fun r='_ZNK9QResource16uncompressedDataEv'/>
<fun r='_ZNK9QResource12lastModifiedEv'/>
<fun r='_ZN9QResource16registerResourceERK7QStringS2_'/>
<fun r='_ZN9QResource18unregisterResourceERK7QStringS2_'/>
<fun r='_ZN9QResource16registerResourceEPKhRK7QString'/>
<fun r='_ZN9QResource18unregisterResourceEPKhRK7QString'/>
<fun r='_ZNK9QResource5isDirEv'/>
<fun r='_ZNK9QResource6isFileEv'/>
<fun r='_ZNK9QResource8childrenEv'/>
<mbr r='QResource::d_ptr' o='0' t='QScopedPointer&lt;QResourcePrivate&gt;'/>
<fun r='_ZN9QResource6d_funcEv'/>
<fun r='_ZNK9QResource6d_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qresource.cpp' l='258' c='_ZN16QResourcePrivateC1EP9QResource'/>
<use f='qtbase-6.5.0/src/corelib/io/qresource.cpp' l='280'/>
<use f='qtbase-6.5.0/src/corelib/io/qresource.cpp' l='281' c='_ZN16QResourcePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qresource.cpp' l='281' c='_ZN16QResourcePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qresource.cpp' l='281' c='_ZNK16QResourcePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qresource.cpp' l='281' c='_ZNK16QResourcePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qresource.cpp' l='281'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/corelib/io/qresource.cpp' l='179'>/*!
    \class QResource
    \inmodule QtCore
    \brief The QResource class provides an interface for reading directly from resources.

    \ingroup io

    \reentrant
    \since 4.2

    QResource is an object that represents a set of data (and possibly
    children) relating to a single resource entity. QResource gives direct
    access to the bytes in their raw format. In this way direct access
    allows reading data without buffer copying or indirection. Indirection
    is often useful when interacting with the resource entity as if it is a
    file, this can be achieved with QFile. The data and children behind a
    QResource are normally compiled into an application/library, but it is
    also possible to load a resource at runtime. When loaded at run time
    the resource file will be loaded as one big set of data and then given
    out in pieces via references into the resource tree.

    A QResource can either be loaded with an absolute path, either treated
    as a file system rooted with a \c{/} character, or in resource notation
    rooted with a \c{:} character. A relative resource can also be opened
    which will be found in the list of paths returned by QDir::searchPaths().

    A QResource that is representing a file will have data backing it, this
    data can possibly be compressed, in which case qUncompress() must be
    used to access the real data; this happens implicitly when accessed
    through a QFile. A QResource that is representing a directory will have
    only children and no data.

    \section1 Dynamic Resource Loading

    A resource can be left out of an application&apos;s binary and loaded when
    it is needed at run-time by using the registerResource() function. The
    resource file passed into registerResource() must be a binary resource
    as created by rcc. Further information about binary resources can be
    found in \l{The Qt Resource System} documentation.

    This can often be useful when loading a large set of application icons
    that may change based on a setting, or that can be edited by a user and
    later recreated. The resource is immediately loaded into memory, either
    as a result of a single file read operation, or as a memory mapped file.

    This approach can prove to be a significant performance gain as only a
    single file will be loaded, and pieces of data will be given out via the
    path requested in setFileName().

    The unregisterResource() function removes a reference to a particular
    file. If there are QResource objects that currently reference resources related
    to the unregistered file, they will continue to be valid but the resource
    file itself will be removed from the resource roots, and thus no further
    QResource can be created pointing into this resource data. The resource
    itself will be unmapped from memory when the last QResource that points
    to it is destroyed.

    \sa {The Qt Resource System}, QFile, QDir, QFileInfo
*/</doc>
<fun r='_ZN9QResourceC1ERK7QStringRK7QLocale'/>
<fun r='_ZN9QResourceD1Ev'/>
<fun r='_ZN9QResource9setLocaleERK7QLocale'/>
<fun r='_ZNK9QResource6localeEv'/>
<fun r='_ZN9QResource11setFileNameERK7QString'/>
<fun r='_ZNK9QResource8fileNameEv'/>
<fun r='_ZNK9QResource16absoluteFilePathEv'/>
<fun r='_ZNK9QResource7isValidEv'/>
<fun r='_ZNK9QResource20compressionAlgorithmEv'/>
<fun r='_ZNK9QResource4sizeEv'/>
<fun r='_ZNK9QResource16uncompressedSizeEv'/>
<fun r='_ZNK9QResource4dataEv'/>
<fun r='_ZNK9QResource16uncompressedDataEv'/>
<fun r='_ZNK9QResource12lastModifiedEv'/>
<fun r='_ZNK9QResource5isDirEv'/>
<fun r='_ZNK9QResource8childrenEv'/>
<fun r='_ZN9QResource16registerResourceERK7QStringS2_'/>
<fun r='_ZN9QResource18unregisterResourceERK7QStringS2_'/>
<fun r='_ZN9QResource16registerResourceEPKhRK7QString'/>
<fun r='_ZN9QResource18unregisterResourceEPKhRK7QString'/>
<use f='qtbase-6.5.0/src/corelib/io/qresource_iterator.cpp' l='33' c='_ZNK27QResourceFileEngineIterator7hasNextEv'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/kernel/qtranslator.cpp' l='270'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtranslator.cpp' l='501' c='_ZN18QTranslatorPrivate7do_loadERK7QStringS2_'/>
<size>8</size>
