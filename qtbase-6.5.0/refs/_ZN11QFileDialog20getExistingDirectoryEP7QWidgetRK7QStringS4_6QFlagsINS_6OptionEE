<dec f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.h' l='189' type='static QString QFileDialog::getExistingDirectory(QWidget * parent = nullptr, const QString &amp; caption = QString(), const QString &amp; dir = QString(), QFileDialog::Options options = ShowDirsOnly)'/>
<def f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='2536' ll='2548' type='static QString QFileDialog::getExistingDirectory(QWidget * parent = nullptr, const QString &amp; caption = QString(), const QString &amp; dir = QString(), QFileDialog::Options options = ShowDirsOnly)'/>
<doc f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='2493'>/*!
    This is a convenience static function that will return an existing
    directory selected by the user.

    \snippet code/src_gui_dialogs_qfiledialog.cpp 12

    This function creates a modal file dialog with the given \a parent widget.
    If \a parent is not \nullptr, the dialog will be shown centered over the
    parent widget.

    The dialog&apos;s working directory is set to \a dir, and the caption is set to
    \a caption. Either of these may be an empty string in which case the
    current directory and a default caption will be used respectively.

    The \a options argument holds various options about how to run the dialog,
    see the QFileDialog::Option enum for more information on the flags you can
    pass. To ensure a native file dialog, \l{QFileDialog::}{ShowDirsOnly} must
    be set.

    On Windows and \macos, this static function will use the
    native file dialog and not a QFileDialog. However, the native Windows file
    dialog does not support displaying files in the directory chooser. You need
    to pass \l{QFileDialog::}{DontUseNativeDialog} to display files using a
    QFileDialog.

    Note that the \macos native file dialog does not show a title bar.

    On Unix/X11, the normal behavior of the file dialog is to resolve and
    follow symlinks. For example, if \c{/usr/tmp} is a symlink to \c{/var/tmp},
    the file dialog will change to \c{/var/tmp} after entering \c{/usr/tmp}. If
    \a options includes DontResolveSymlinks, the file dialog will treat
    symlinks as regular directories.

    On Windows, the dialog will spin a blocking modal event loop that will not
    dispatch any QTimers, and if \a parent is not \nullptr then it will position
    the dialog just below the parent&apos;s title bar.

    \warning Do not delete \a parent during the execution of the dialog. If you
    want to do this, you should create the dialog yourself using one of the
    QFileDialog constructors.

    \sa getOpenFileName(), getOpenFileNames(), getSaveFileName()
*/</doc>
