<dec f='qtbase-6.5.0/src/3rdparty/libjpeg/src/jpeglib.h' l='1063' type='boolean jpeg_resync_to_restart(j_decompress_ptr cinfo, int desired)'/>
<use f='qtbase-6.5.0/src/3rdparty/libjpeg/src/jdatasrc.c' l='248' u='r' c='jpeg_stdio_src'/>
<use f='qtbase-6.5.0/src/3rdparty/libjpeg/src/jdatasrc.c' l='290' u='r' c='jpeg_mem_src'/>
<def f='qtbase-6.5.0/src/3rdparty/libjpeg/src/jdmarker.c' l='1205' ll='1248' macro='1' type='boolean jpeg_resync_to_restart(j_decompress_ptr cinfo, int desired)'/>
<doc f='qtbase-6.5.0/src/3rdparty/libjpeg/src/jdmarker.c' l='1156'>/*
 * This is the default resync_to_restart method for data source managers
 * to use if they don&apos;t have any better approach.  Some data source managers
 * may be able to back up, or may have additional knowledge about the data
 * which permits a more intelligent recovery strategy; such managers would
 * presumably supply their own resync method.
 *
 * read_restart_marker calls resync_to_restart if it finds a marker other than
 * the restart marker it was expecting.  (This code is *not* used unless
 * a nonzero restart interval has been declared.)  cinfo-&gt;unread_marker is
 * the marker code actually found (might be anything, except 0 or FF).
 * The desired restart marker number (0..7) is passed as a parameter.
 * This routine is supposed to apply whatever error recovery strategy seems
 * appropriate in order to position the input stream to the next data segment.
 * Note that cinfo-&gt;unread_marker is treated as a marker appearing before
 * the current data-source input point; usually it should be reset to zero
 * before returning.
 * Returns FALSE if suspension is required.
 *
 * This implementation is substantially constrained by wanting to treat the
 * input as a data stream; this means we can&apos;t back up.  Therefore, we have
 * only the following actions to work with:
 *   1. Simply discard the marker and let the entropy decoder resume at next
 *      byte of file.
 *   2. Read forward until we find another marker, discarding intervening
 *      data.  (In theory we could look ahead within the current bufferload,
 *      without having to discard data if we don&apos;t find the desired marker.
 *      This idea is not implemented here, in part because it makes behavior
 *      dependent on buffer size and chance buffer-boundary positions.)
 *   3. Leave the marker unread (by failing to zero cinfo-&gt;unread_marker).
 *      This will cause the entropy decoder to process an empty data segment,
 *      inserting dummy zeroes, and then we will reprocess the marker.
 *
 * #2 is appropriate if we think the desired marker lies ahead, while #3 is
 * appropriate if the found marker is a future restart marker (indicating
 * that we have missed the desired restart marker, probably because it got
 * corrupted).
 * We apply #2 or #3 if the found marker is a restart marker no more than
 * two counts behind or ahead of the expected one.  We also apply #2 if the
 * found marker is not a legal JPEG marker code (it&apos;s certainly bogus data).
 * If the found marker is a restart marker more than 2 counts away, we do #1
 * (too much risk that the marker is erroneous; with luck we will be able to
 * resync at some future point).
 * For any valid non-restart JPEG marker, we apply #3.  This keeps us from
 * overrunning the end of a scan.  An implementation limited to single-scan
 * files might find it better to apply #2 for markers other than EOI, since
 * any other marker would have to be bogus data in that case.
 */</doc>
<use f='qtbase-6.5.0/src/plugins/imageformats/jpeg/qjpeghandler.cpp' l='146' u='r' c='_ZN18my_jpeg_source_mgrC1EP9QIODevice'/>
