<inh f='qtbase-6.5.0/src/widgets/dialogs/qdialog.h' l='18' c='QDialog'/>
<def f='qtbase-6.5.0/src/widgets/dialogs/qwizard.h' l='18' ll='170'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.h' l='163' c='_ZN7QWizardC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.h' l='163' c='_ZN7QWizardaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.h' l='163' c='_ZN7QWizardaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.h' l='213' c='_ZNK11QWizardPage6wizardEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.h' l='221'/>
<size>40</size>
<smbr r='QWizard::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK7QWizard10metaObjectEv'/>
<fun r='_ZN7QWizard11qt_metacastEPKc'/>
<fun r='_ZN7QWizard11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN7QWizard2trEPKcS1_i'/>
<fun r='_ZN7QWizard18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN7QWizardC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE'/>
<fun r='_ZN7QWizardD1Ev'/>
<fun r='_ZN7QWizard7addPageEP11QWizardPage'/>
<fun r='_ZN7QWizard7setPageEiP11QWizardPage'/>
<fun r='_ZN7QWizard10removePageEi'/>
<fun r='_ZNK7QWizard4pageEi'/>
<fun r='_ZNK7QWizard14hasVisitedPageEi'/>
<fun r='_ZNK7QWizard10visitedIdsEv'/>
<fun r='_ZNK7QWizard7pageIdsEv'/>
<fun r='_ZN7QWizard10setStartIdEi'/>
<fun r='_ZNK7QWizard7startIdEv'/>
<fun r='_ZNK7QWizard11currentPageEv'/>
<fun r='_ZNK7QWizard9currentIdEv'/>
<fun r='_ZN7QWizard19validateCurrentPageEv'/>
<fun r='_ZNK7QWizard6nextIdEv'/>
<fun r='_ZN7QWizard8setFieldERK7QStringRK8QVariant'/>
<fun r='_ZNK7QWizard5fieldERK7QString'/>
<fun r='_ZN7QWizard14setWizardStyleENS_11WizardStyleE'/>
<fun r='_ZNK7QWizard11wizardStyleEv'/>
<fun r='_ZN7QWizard9setOptionENS_12WizardOptionEb'/>
<fun r='_ZNK7QWizard10testOptionENS_12WizardOptionE'/>
<fun r='_ZN7QWizard10setOptionsE6QFlagsINS_12WizardOptionEE'/>
<fun r='_ZNK7QWizard7optionsEv'/>
<fun r='_ZN7QWizard13setButtonTextENS_12WizardButtonERK7QString'/>
<fun r='_ZNK7QWizard10buttonTextENS_12WizardButtonE'/>
<fun r='_ZN7QWizard15setButtonLayoutERK5QListINS_12WizardButtonEE'/>
<fun r='_ZN7QWizard9setButtonENS_12WizardButtonEP15QAbstractButton'/>
<fun r='_ZNK7QWizard6buttonENS_12WizardButtonE'/>
<fun r='_ZN7QWizard14setTitleFormatEN2Qt10TextFormatE'/>
<fun r='_ZNK7QWizard11titleFormatEv'/>
<fun r='_ZN7QWizard17setSubTitleFormatEN2Qt10TextFormatE'/>
<fun r='_ZNK7QWizard14subTitleFormatEv'/>
<fun r='_ZN7QWizard9setPixmapENS_12WizardPixmapERK7QPixmap'/>
<fun r='_ZNK7QWizard6pixmapENS_12WizardPixmapE'/>
<fun r='_ZN7QWizard13setSideWidgetEP7QWidget'/>
<fun r='_ZNK7QWizard10sideWidgetEv'/>
<fun r='_ZN7QWizard18setDefaultPropertyEPKcS1_S1_'/>
<fun r='_ZN7QWizard10setVisibleEb'/>
<fun r='_ZNK7QWizard8sizeHintEv'/>
<fun r='_ZN7QWizard16currentIdChangedEi'/>
<fun r='_ZN7QWizard13helpRequestedEv'/>
<fun r='_ZN7QWizard19customButtonClickedEi'/>
<fun r='_ZN7QWizard9pageAddedEi'/>
<fun r='_ZN7QWizard11pageRemovedEi'/>
<fun r='_ZN7QWizard4backEv'/>
<fun r='_ZN7QWizard4nextEv'/>
<fun r='_ZN7QWizard12setCurrentIdEi'/>
<fun r='_ZN7QWizard7restartEv'/>
<fun r='_ZN7QWizard5eventEP6QEvent'/>
<fun r='_ZN7QWizard11resizeEventEP12QResizeEvent'/>
<fun r='_ZN7QWizard10paintEventEP11QPaintEvent'/>
<fun r='_ZN7QWizard4doneEi'/>
<fun r='_ZN7QWizard14initializePageEi'/>
<fun r='_ZN7QWizard11cleanupPageEi'/>
<fun r='_ZN7QWizardC1ERKS_'/>
<fun r='_ZN7QWizard6d_funcEv'/>
<fun r='_ZNK7QWizard6d_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='453'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='498' c='_ZN24QWizardAntiFlickerWidgetC1EP7QWizardP14QWizardPrivate'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='506' c='_ZN14QWizardPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='506' c='_ZN14QWizardPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='506' c='_ZNK14QWizardPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='506' c='_ZNK14QWizardPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='506'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='646' c='_ZN14QWizardPrivate4initEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='692' c='_ZN14QWizardPrivate5resetEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='709' c='_ZN14QWizardPrivate24cleanupPagesNotInHistoryEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='723' c='_ZN14QWizardPrivate8addFieldERK12QWizardField'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='745' c='_ZN14QWizardPrivate13removeFieldAtEi'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='760' c='_ZN14QWizardPrivate12switchToPageEiNS_9DirectionE'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='860' c='_ZN14QWizardPrivate24layoutInfoForCurrentPageEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='921' c='_ZN14QWizardPrivate14recreateLayoutERK17QWizardLayoutInfo'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1195' c='_ZN14QWizardPrivate12updateLayoutEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1280' c='_ZN14QWizardPrivate17updateMinMaxSizesERK17QWizardLayoutInfo'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1316' c='_ZN14QWizardPrivate17updateCurrentPageEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1356' c='_ZNK14QWizardPrivate12ensureButtonEN7QWizard12WizardButtonE'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1385' c='_ZNK14QWizardPrivate13connectButtonEN7QWizard12WizardButtonE'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1395' c='_ZN14QWizardPrivate17updateButtonTextsEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1503' c='_ZN14QWizardPrivate12updatePixmapEN7QWizard12WizardPixmapE'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1608' c='_ZN14QWizardPrivate14disableUpdatesEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1617' c='_ZN14QWizardPrivate13enableUpdatesEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1626' c='_ZN14QWizardPrivate26_q_emitCustomButtonClickedEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1638' c='_ZN14QWizardPrivate21_q_updateButtonStatesEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='3706' c='_ZN11QWizardPage12setFinalPageEb'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='3729' c='_ZNK11QWizardPage11isFinalPageEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='3756' c='_ZN11QWizardPage13setCommitPageEb'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='3969' c='_ZNK11QWizardPage6wizardEv'/>
<size>40</size>
<doc f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1764'>/*!
    \class QWizard
    \since 4.3
    \brief The QWizard class provides a framework for wizards.

    \inmodule QtWidgets

    A wizard (also called an assistant on \macos) is a special type
    of input dialog that consists of a sequence of pages. A wizard&apos;s
    purpose is to guide the user through a process step by step.
    Wizards are useful for complex or infrequent tasks that users may
    find difficult to learn.

    QWizard inherits QDialog and represents a wizard. Each page is a
    QWizardPage (a QWidget subclass). To create your own wizards, you
    can use these classes directly, or you can subclass them for more
    control.

    Topics:

    \tableofcontents

    \section1 A Trivial Example

    The following example illustrates how to create wizard pages and
    add them to a wizard. For more advanced examples, see
    \l{dialogs/classwizard}{Class Wizard} and \l{dialogs/licensewizard}{License
    Wizard}.

    \snippet dialogs/trivialwizard/trivialwizard.cpp 1
    \snippet dialogs/trivialwizard/trivialwizard.cpp 3
    \dots
    \snippet dialogs/trivialwizard/trivialwizard.cpp 4
    \codeline
    \snippet dialogs/trivialwizard/trivialwizard.cpp 5
    \snippet dialogs/trivialwizard/trivialwizard.cpp 7
    \dots
    \snippet dialogs/trivialwizard/trivialwizard.cpp 8
    \codeline
    \snippet dialogs/trivialwizard/trivialwizard.cpp 10

    \section1 Wizard Look and Feel

    QWizard supports four wizard looks:

    \list
    \li ClassicStyle
    \li ModernStyle
    \li MacStyle
    \li AeroStyle
    \endlist

    You can explicitly set the look to use using setWizardStyle()
    (e.g., if you want the same look on all platforms).

    \table
    \header \li ClassicStyle
            \li ModernStyle
            \li MacStyle
            \li AeroStyle
    \row    \li \inlineimage qtwizard-classic1.png
            \li \inlineimage qtwizard-modern1.png
            \li \inlineimage qtwizard-mac1.png
            \li \inlineimage qtwizard-aero1.png
    \row    \li \inlineimage qtwizard-classic2.png
            \li \inlineimage qtwizard-modern2.png
            \li \inlineimage qtwizard-mac2.png
            \li \inlineimage qtwizard-aero2.png
    \endtable

    Note: AeroStyle has effect only on a Windows Vista system with alpha compositing enabled.
    ModernStyle is used as a fallback when this condition is not met.

    In addition to the wizard style, there are several options that
    control the look and feel of the wizard. These can be set using
    setOption() or setOptions(). For example, HaveHelpButton makes
    QWizard show a \uicontrol Help button along with the other wizard
    buttons.

    You can even change the order of the wizard buttons to any
    arbitrary order using setButtonLayout(), and you can add up to
    three custom buttons (e.g., a \uicontrol Print button) to the button
    row. This is achieved by calling setButton() or setButtonText()
    with CustomButton1, CustomButton2, or CustomButton3 to set up the
    button, and by enabling the HaveCustomButton1, HaveCustomButton2,
    or HaveCustomButton3 options. Whenever the user clicks a custom
    button, customButtonClicked() is emitted. For example:

    \snippet dialogs/licensewizard/licensewizard.cpp 29

    \section1 Elements of a Wizard Page

    Wizards consist of a sequence of \l{QWizardPage}s. At any time,
    only one page is shown. A page has the following attributes:

    \list
    \li A \l{QWizardPage::}{title}.
    \li A \l{QWizardPage::}{subTitle}.
    \li A set of pixmaps, which may or may not be honored, depending
       on the wizard&apos;s style:
        \list
        \li WatermarkPixmap (used by ClassicStyle and ModernStyle)
        \li BannerPixmap (used by ModernStyle)
        \li LogoPixmap (used by ClassicStyle and ModernStyle)
        \li BackgroundPixmap (used by MacStyle)
        \endlist
    \endlist

    The diagram belows shows how QWizard renders these attributes,
    assuming they are all present and ModernStyle is used:

    \image qtwizard-nonmacpage.png

    When a \l{QWizardPage::}{subTitle} is set, QWizard displays it
    in a header, in which case it also uses the BannerPixmap and the
    LogoPixmap to decorate the header. The WatermarkPixmap is
    displayed on the left side, below the header. At the bottom,
    there is a row of buttons allowing the user to navigate through
    the pages.

    The page itself (the \l{QWizardPage} widget) occupies the area
    between the header, the watermark, and the button row. Typically,
    the page is a QWizardPage on which a QGridLayout is installed,
    with standard child widgets (\l{QLabel}s, \l{QLineEdit}s, etc.).

    If the wizard&apos;s style is MacStyle, the page looks radically
    different:

    \image qtwizard-macpage.png

    The watermark, banner, and logo pixmaps are ignored by the
    MacStyle. If the BackgroundPixmap is set, it is used as the
    background for the wizard; otherwise, a default &quot;assistant&quot; image
    is used.

    The title and subtitle are set by calling
    QWizardPage::setTitle() and QWizardPage::setSubTitle() on the
    individual pages. They may be plain text or HTML (see titleFormat
    and subTitleFormat). The pixmaps can be set globally for the
    entire wizard using setPixmap(), or on a per-page basis using
    QWizardPage::setPixmap().

    \target field mechanism
    \section1 Registering and Using Fields

    In many wizards, the contents of a page may affect the default
    values of the fields of a later page. To make it easy to
    communicate between pages, QWizard supports a &quot;field&quot; mechanism
    that allows you to register a field (e.g., a QLineEdit) on a page
    and to access its value from any page. It is also possible to
    specify mandatory fields (i.e., fields that must be filled before
    the user can advance to the next page).

    To register a field, call QWizardPage::registerField() field.
    For example:

    \snippet dialogs/classwizard/classwizard.cpp 8
    \dots
    \snippet dialogs/classwizard/classwizard.cpp 10
    \snippet dialogs/classwizard/classwizard.cpp 11
    \dots
    \snippet dialogs/classwizard/classwizard.cpp 13

    The above code registers three fields, \c className, \c
    baseClass, and \c qobjectMacro, which are associated with three
    child widgets. The asterisk (\c *) next to \c className denotes a
    mandatory field.

    \target initialize page
    The fields of any page are accessible from any other page. For
    example:

    \snippet dialogs/classwizard/classwizard.cpp 17

    Here, we call QWizardPage::field() to access the contents of the
    \c className field (which was defined in the \c ClassInfoPage)
    and use it to initialize the \c OutputFilePage. The field&apos;s
    contents is returned as a QVariant.

    When we create a field using QWizardPage::registerField(), we
    pass a unique field name and a widget. We can also provide a Qt
    property name and a &quot;changed&quot; signal (a signal that is emitted
    when the property changes) as third and fourth arguments;
    however, this is not necessary for the most common Qt widgets,
    such as QLineEdit, QCheckBox, and QComboBox, because QWizard
    knows which properties to look for.

    \target mandatory fields

    If an asterisk (\c *) is appended to the name when the property
    is registered, the field is a \e{mandatory field}. When a page has
    mandatory fields, the \uicontrol Next and/or \uicontrol Finish buttons are
    enabled only when all mandatory fields are filled.

    To consider a field &quot;filled&quot;, QWizard simply checks that the
    field&apos;s current value doesn&apos;t equal the original value (the value
    it had when initializePage() was called). For QLineEdit and
    QAbstractSpinBox subclasses, QWizard also checks that
    \l{QLineEdit::hasAcceptableInput()}{hasAcceptableInput()} returns
    true, to honor any validator or mask.

    QWizard&apos;s mandatory field mechanism is provided for convenience.
    A more powerful (but also more cumbersome) alternative is to
    reimplement QWizardPage::isComplete() and to emit the
    QWizardPage::completeChanged() signal whenever the page becomes
    complete or incomplete.

    The enabled/disabled state of the \uicontrol Next and/or \uicontrol Finish
    buttons is one way to perform validation on the user input.
    Another way is to reimplement validateCurrentPage() (or
    QWizardPage::validatePage()) to perform some last-minute
    validation (and show an error message if the user has entered
    incomplete or invalid information). If the function returns \c true,
    the next page is shown (or the wizard finishes); otherwise, the
    current page stays up.

    \section1 Creating Linear Wizards

    Most wizards have a linear structure, with page 1 followed by
    page 2 and so on until the last page. The \l{dialogs/classwizard}{Class
    Wizard} example is such a wizard. With QWizard, linear wizards
    are created by instantiating the \l{QWizardPage}s and inserting
    them using addPage(). By default, the pages are shown in the
    order in which they were added. For example:

    \snippet dialogs/classwizard/classwizard.cpp 0
    \dots
    \snippet dialogs/classwizard/classwizard.cpp 2

    When a page is about to be shown, QWizard calls initializePage()
    (which in turn calls QWizardPage::initializePage()) to fill the
    page with default values. By default, this function does nothing,
    but it can be reimplemented to initialize the page&apos;s contents
    based on other pages&apos; fields (see the \l{initialize page}{example
    above}).

    If the user presses \uicontrol Back, cleanupPage() is called (which in
    turn calls QWizardPage::cleanupPage()). The default
    implementation resets the page&apos;s fields to their original values
    (the values they had before initializePage() was called). If you
    want the \uicontrol Back button to be non-destructive and keep the
    values entered by the user, simply enable the IndependentPages
    option.

    \section1 Creating Non-Linear Wizards

    Some wizards are more complex in that they allow different
    traversal paths based on the information provided by the user.
    The \l{dialogs/licensewizard}{License Wizard} example illustrates this.
    It provides five wizard pages; depending on which options are
    selected, the user can reach different pages.

    \image licensewizard-flow.png

    In complex wizards, pages are identified by IDs. These IDs are
    typically defined using an enum. For example:

    \snippet dialogs/licensewizard/licensewizard.h 0
    \dots
    \snippet dialogs/licensewizard/licensewizard.h 2
    \dots
    \snippet dialogs/licensewizard/licensewizard.h 3

    The pages are inserted using setPage(), which takes an ID and an
    instance of QWizardPage (or of a subclass):

    \snippet dialogs/licensewizard/licensewizard.cpp 1
    \dots
    \snippet dialogs/licensewizard/licensewizard.cpp 8

    By default, the pages are shown in increasing ID order. To
    provide a dynamic order that depends on the options chosen by the
    user, we must reimplement QWizardPage::nextId(). For example:

    \snippet dialogs/licensewizard/licensewizard.cpp 18
    \codeline
    \snippet dialogs/licensewizard/licensewizard.cpp 23
    \codeline
    \snippet dialogs/licensewizard/licensewizard.cpp 24
    \codeline
    \snippet dialogs/licensewizard/licensewizard.cpp 25
    \codeline
    \snippet dialogs/licensewizard/licensewizard.cpp 26

    It would also be possible to put all the logic in one place, in a
    QWizard::nextId() reimplementation. For example:

    \snippet code/src_gui_dialogs_qwizard.cpp 0

    To start at another page than the page with the lowest ID, call
    setStartId().

    To test whether a page has been visited or not, call
    hasVisitedPage(). For example:

    \snippet dialogs/licensewizard/licensewizard.cpp 27

    \sa QWizardPage, {Class Wizard Example}, {License Wizard Example}
*/</doc>
<fun r='_ZN7QWizardC1EP7QWidget6QFlagsIN2Qt10WindowTypeEE'/>
<fun r='_ZN7QWizardD1Ev'/>
<fun r='_ZN7QWizard7addPageEP11QWizardPage'/>
<fun r='_ZN7QWizard7setPageEiP11QWizardPage'/>
<fun r='_ZN7QWizard10removePageEi'/>
<fun r='_ZNK7QWizard4pageEi'/>
<fun r='_ZNK7QWizard14hasVisitedPageEi'/>
<fun r='_ZNK7QWizard10visitedIdsEv'/>
<fun r='_ZNK7QWizard7pageIdsEv'/>
<fun r='_ZN7QWizard10setStartIdEi'/>
<fun r='_ZNK7QWizard7startIdEv'/>
<fun r='_ZNK7QWizard11currentPageEv'/>
<fun r='_ZNK7QWizard9currentIdEv'/>
<fun r='_ZN7QWizard8setFieldERK7QStringRK8QVariant'/>
<fun r='_ZNK7QWizard5fieldERK7QString'/>
<fun r='_ZN7QWizard14setWizardStyleENS_11WizardStyleE'/>
<fun r='_ZNK7QWizard11wizardStyleEv'/>
<fun r='_ZN7QWizard9setOptionENS_12WizardOptionEb'/>
<fun r='_ZNK7QWizard10testOptionENS_12WizardOptionE'/>
<fun r='_ZN7QWizard10setOptionsE6QFlagsINS_12WizardOptionEE'/>
<fun r='_ZNK7QWizard7optionsEv'/>
<fun r='_ZN7QWizard13setButtonTextENS_12WizardButtonERK7QString'/>
<fun r='_ZNK7QWizard10buttonTextENS_12WizardButtonE'/>
<fun r='_ZN7QWizard15setButtonLayoutERK5QListINS_12WizardButtonEE'/>
<fun r='_ZN7QWizard9setButtonENS_12WizardButtonEP15QAbstractButton'/>
<fun r='_ZNK7QWizard6buttonENS_12WizardButtonE'/>
<fun r='_ZN7QWizard14setTitleFormatEN2Qt10TextFormatE'/>
<fun r='_ZNK7QWizard11titleFormatEv'/>
<fun r='_ZN7QWizard17setSubTitleFormatEN2Qt10TextFormatE'/>
<fun r='_ZNK7QWizard14subTitleFormatEv'/>
<fun r='_ZN7QWizard9setPixmapENS_12WizardPixmapERK7QPixmap'/>
<fun r='_ZNK7QWizard6pixmapENS_12WizardPixmapE'/>
<fun r='_ZN7QWizard18setDefaultPropertyEPKcS1_S1_'/>
<fun r='_ZN7QWizard13setSideWidgetEP7QWidget'/>
<fun r='_ZNK7QWizard10sideWidgetEv'/>
<fun r='_ZN7QWizard10setVisibleEb'/>
<fun r='_ZNK7QWizard8sizeHintEv'/>
<fun r='_ZN7QWizard4backEv'/>
<fun r='_ZN7QWizard4nextEv'/>
<fun r='_ZN7QWizard12setCurrentIdEi'/>
<fun r='_ZN7QWizard7restartEv'/>
<fun r='_ZN7QWizard5eventEP6QEvent'/>
<fun r='_ZN7QWizard11resizeEventEP12QResizeEvent'/>
<fun r='_ZN7QWizard10paintEventEP11QPaintEvent'/>
<fun r='_ZN7QWizard4doneEi'/>
<fun r='_ZN7QWizard14initializePageEi'/>
<fun r='_ZN7QWizard11cleanupPageEi'/>
<fun r='_ZN7QWizard19validateCurrentPageEv'/>
<fun r='_ZNK7QWizard6nextIdEv'/>
