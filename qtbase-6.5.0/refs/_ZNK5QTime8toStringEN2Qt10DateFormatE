<dec f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='205' type='QString QTime::toString(Qt::DateFormat f = Qt::TextDate) const'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1197' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<def f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='1932' ll='1946' type='QString QTime::toString(Qt::DateFormat format = Qt::TextDate) const'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='4064' u='c' c='_ZNK9QDateTime8toStringEN2Qt10DateFormatE'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='4092' u='c' c='_ZNK9QDateTime8toStringEN2Qt10DateFormatE'/>
<doc f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='1908'>/*!
    \overload

    Returns the time as a string. The \a format parameter determines
    the format of the string.

    If \a format is Qt::TextDate, the string format is HH:mm:ss;
    e.g. 1 second before midnight would be &quot;23:59:59&quot;.

    If \a format is Qt::ISODate, the string format corresponds to the
    ISO 8601 extended specification for representations of dates,
    represented by HH:mm:ss. To include milliseconds in the ISO 8601
    date, use the \a format Qt::ISODateWithMs, which corresponds to
    HH:mm:ss.zzz.

    If the \a format is Qt::RFC2822Date, the string is formatted in
    an \l{RFC 2822} compatible way. An example of this formatting is
    &quot;23:59:20&quot;.

    If the time is invalid, an empty string will be returned.

    \sa fromString(), QDate::toString(), QDateTime::toString(), QLocale::toString()
*/</doc>
<use f='qtbase-6.5.0/src/sql/kernel/qsqldriver.cpp' l='585' u='c' c='_ZNK10QSqlDriver11formatValueERK9QSqlFieldb'/>
