<dec f='qtbase-6.5.0/src/xml/dom/qdom.h' l='69' type='QDomDocumentType QDomImplementation::createDocumentType(const QString &amp; qName, const QString &amp; publicId, const QString &amp; systemId)'/>
<def f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='486' ll='512' type='QDomDocumentType QDomImplementation::createDocumentType(const QString &amp; qName, const QString &amp; publicId, const QString &amp; systemId)'/>
<doc f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='454'>/*!
    Creates a document type node for the name \a qName.

    \a publicId specifies the public identifier of the external
    subset. If you specify an empty string (QString()) as the \a
    publicId, this means that the document type has no public
    identifier.

    \a systemId specifies the system identifier of the external
    subset. If you specify an empty string as the \a systemId, this
    means that the document type has no system identifier.

    Since you cannot have a public identifier without a system
    identifier, the public identifier is set to an empty string if
    there is no system identifier.

    DOM level 2 does not support any other document type declaration
    features.

    The only way you can use a document type that was created this
    way, is in combination with the createDocument() function to
    create a QDomDocument with this document type.

    In the DOM specification, this is the only way to create a non-null
    document. For historical reasons, Qt also allows to create the
    document using the default empty constructor. The resulting document
    is null, but becomes non-null when a factory function, for example
    QDomDocument::createElement(), is called. The document also becomes
    non-null when setContent() is called.

    \sa createDocument()
*/</doc>
