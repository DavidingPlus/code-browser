<dec f='qtbase-6.5.0/src/gui/math3d/qmatrix4x4.h' l='149' type='void QMatrix4x4::optimize()'/>
<def f='qtbase-6.5.0/src/gui/math3d/qmatrix4x4.cpp' l='1921' ll='1971' type='void QMatrix4x4::optimize()'/>
<use f='qtbase-6.5.0/src/gui/math3d/qmatrix4x4.cpp' l='2058' u='c' c='_ZrsR11QDataStreamR10QMatrix4x4'/>
<doc f='qtbase-6.5.0/src/gui/math3d/qmatrix4x4.cpp' l='1901'>/*!
    Optimize the usage of this matrix from its current elements.

    Some operations such as translate(), scale(), and rotate() can be
    performed more efficiently if the matrix being modified is already
    known to be the identity, a previous translate(), a previous
    scale(), etc.

    Normally the QMatrix4x4 class keeps track of this special type internally
    as operations are performed.  However, if the matrix is modified
    directly with operator()(int, int) or data(), then QMatrix4x4 will
    lose track of the special type and will revert to the safest but least
    efficient operations thereafter.

    By calling optimize() after directly modifying the matrix,
    the programmer can force QMatrix4x4 to recover the special type if
    the elements appear to conform to one of the known optimized types.

    \sa operator()(int, int), data(), translate()
*/</doc>
