<dec f='qtbase-6.5.0/src/sql/kernel/qsqlquery.h' l='84' type='bool QSqlQuery::prepare(const QString &amp; query)'/>
<def f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='963' ll='992' type='bool QSqlQuery::prepare(const QString &amp; query)'/>
<doc f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='937'>/*!
  Prepares the SQL query \a query for execution. Returns \c true if the
  query is prepared successfully; otherwise returns \c false.

  The query may contain placeholders for binding values. Both Oracle
  style colon-name (e.g., \c{:surname}), and ODBC style (\c{?})
  placeholders are supported; but they cannot be mixed in the same
  query. See the \l{QSqlQuery examples}{Detailed Description} for
  examples.

  Portability notes: Some databases choose to delay preparing a query
  until it is executed the first time. In this case, preparing a
  syntactically wrong query succeeds, but every consecutive exec()
  will fail.
  When the database does not support named placeholders directly,
  the placeholder can only contain characters in the range [a-zA-Z0-9_].

  For SQLite, the query string can contain only one statement at a time.
  If more than one statement is given, the function returns \c false.

  Example:

  \snippet sqldatabase/sqldatabase.cpp 9

  \sa exec(), bindValue(), addBindValue()
*/</doc>
<use f='qtbase-6.5.0/src/sql/models/qsqltablemodel.cpp' l='141' u='c' c='_ZN21QSqlTableModelPrivate4execERK7QStringbRK10QSqlRecordS5_'/>
