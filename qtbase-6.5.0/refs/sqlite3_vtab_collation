<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='9957' type='const char * sqlite3_vtab_collation(sqlite3_index_info * , int )'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='133176'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='160928' ll='160941' type='const char * sqlite3_vtab_collation(sqlite3_index_info * pIdxInfo, int iCons)'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='9924'>/*
** CAPI3REF: Determine The Collation For a Virtual Table Constraint
** METHOD: sqlite3_index_info
**
** This function may only be called from within a call to the [xBestIndex]
** method of a [virtual table].  This function returns a pointer to a string
** that is the name of the appropriate collation sequence to use for text
** comparisons on the constraint identified by its arguments.
**
** The first argument must be the pointer to the [sqlite3_index_info] object
** that is the first parameter to the xBestIndex() method. The second argument
** must be an index into the aConstraint[] array belonging to the
** sqlite3_index_info structure passed to xBestIndex.
**
** Important:
** The first parameter must be the same pointer that is passed into the
** xBestMethod() method.  The first parameter may not be a pointer to a
** different [sqlite3_index_info] object, even an exact copy.
**
** The return value is computed as follows:
**
** &lt;ol&gt;
** &lt;li&gt;&lt;p&gt; If the constraint comes from a WHERE clause expression that contains
**         a [COLLATE operator], then the name of the collation specified by
**         that COLLATE operator is returned.
** &lt;li&gt;&lt;p&gt; If there is no COLLATE operator, but the column that is the subject
**         of the constraint specifies an alternative collating sequence via
**         a [COLLATE clause] on the column definition within the CREATE TABLE
**         statement that was passed into [sqlite3_declare_vtab()], then the
**         name of that alternative collating sequence is returned.
** &lt;li&gt;&lt;p&gt; Otherwise, &quot;BINARY&quot; is returned.
** &lt;/ol&gt;
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='160913'>/*
** Return the collating sequence for a constraint passed into xBestIndex.
**
** pIdxInfo must be an sqlite3_index_info structure passed into xBestIndex.
** This routine depends on there being a HiddenIndexInfo structure immediately
** following the sqlite3_index_info structure.
**
** Return a pointer to the collation name:
**
**    1. If there is an explicit COLLATE operator on the constaint, return it.
**
**    2. Else, if the column has an alternative collation, return that.
**
**    3. Otherwise, return &quot;BINARY&quot;.
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='9651' type='const char * sqlite3_vtab_collation(sqlite3_index_info * , int )'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='9618'>/*
** CAPI3REF: Determine The Collation For a Virtual Table Constraint
** METHOD: sqlite3_index_info
**
** This function may only be called from within a call to the [xBestIndex]
** method of a [virtual table].  This function returns a pointer to a string
** that is the name of the appropriate collation sequence to use for text
** comparisons on the constraint identified by its arguments.
**
** The first argument must be the pointer to the [sqlite3_index_info] object
** that is the first parameter to the xBestIndex() method. The second argument
** must be an index into the aConstraint[] array belonging to the
** sqlite3_index_info structure passed to xBestIndex.
**
** Important:
** The first parameter must be the same pointer that is passed into the
** xBestMethod() method.  The first parameter may not be a pointer to a
** different [sqlite3_index_info] object, even an exact copy.
**
** The return value is computed as follows:
**
** &lt;ol&gt;
** &lt;li&gt;&lt;p&gt; If the constraint comes from a WHERE clause expression that contains
**         a [COLLATE operator], then the name of the collation specified by
**         that COLLATE operator is returned.
** &lt;li&gt;&lt;p&gt; If there is no COLLATE operator, but the column that is the subject
**         of the constraint specifies an alternative collating sequence via
**         a [COLLATE clause] on the column definition within the CREATE TABLE
**         statement that was passed into [sqlite3_declare_vtab()], then the
**         name of that alternative collating sequence is returned.
** &lt;li&gt;&lt;p&gt; Otherwise, &quot;BINARY&quot; is returned.
** &lt;/ol&gt;
*/</doc>
