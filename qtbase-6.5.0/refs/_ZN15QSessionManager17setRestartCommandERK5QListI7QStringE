<dec f='qtbase-6.5.0/src/gui/kernel/qsessionmanager.h' l='47' type='void QSessionManager::setRestartCommand(const QStringList &amp; )'/>
<def f='qtbase-6.5.0/src/gui/kernel/qsessionmanager.cpp' l='275' ll='279' type='void QSessionManager::setRestartCommand(const QStringList &amp; command)'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qsessionmanager.cpp' l='254'>/*!
    If the session manager is capable of restoring sessions it will execute
    \a command in order to restore the application. The command defaults to

    \snippet code/src_gui_kernel_qguiapplication.cpp 2

    The \c -session option is mandatory; otherwise QGuiApplication cannot
    tell whether it has been restored or what the current session identifier
    is.
    See QGuiApplication::isSessionRestored() and
    QGuiApplication::sessionId() for details.

    If your application is very simple, it may be possible to store the entire
    application state in additional command line options. This is usually a
    very bad idea because command lines are often limited to a few hundred
    bytes. Instead, use QSettings, temporary files, or a database for this
    purpose. By marking the data with the unique sessionId(), you will be able
    to restore the application in a future  session.

    \sa restartCommand(), setDiscardCommand(), setRestartHint()
*/</doc>
