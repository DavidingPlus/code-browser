<dec f='qtbase-6.5.0/src/corelib/text/qlocale.h' l='905' type='void QLocale::QLocale(QStringView name)'/>
<use f='qtbase-6.5.0/src/corelib/text/qlocale.h' l='1143' u='c' c='_ZN7QLocaleC1ERK7QString'/>
<def f='qtbase-6.5.0/src/corelib/text/qlocale.cpp' l='1011' ll='1014' type='void QLocale::QLocale(QStringView name)'/>
<doc f='qtbase-6.5.0/src/corelib/text/qlocale.cpp' l='982'>/*!
    \since 6.3

    Constructs a QLocale object with the specified \a name.

    The name has the format &quot;language[_script][_territory][.codeset][@modifier]&quot;
    or &quot;C&quot;, where:

    \list
    \li language is a lowercase, two-letter, ISO 639 language code (some
        three-letter codes are also recognized),
    \li script is a capitalized, four-letter, ISO 15924 script code,
    \li territory is an uppercase, two-letter, ISO 3166 territory code
        (some numeric codes are also recognized), and
    \li codeset and modifier are ignored.
    \endlist

    The separator can be either underscore \c{&apos;_&apos;} (U+005F, &quot;low line&quot;) or a
    dash \c{&apos;-&apos;} (U+002D, &quot;hyphen-minus&quot;). If QLocale has no data for the
    specified combination of language, script, and territory, then it uses the
    most suitable match it can find instead. If the string violates the locale
    format, or no suitable data can be found for the specified keys, the &quot;C&quot;
    locale is used instead.

    This constructor is much slower than QLocale(Language, Script, Territory) or
    QLocale(Language, Territory).

    \sa bcp47Name(), {Matching combinations of language, script and territory}
*/</doc>
<use f='qtbase-6.5.0/src/corelib/text/qlocale_unix.cpp' l='120' u='c' c='_ZNK13QSystemLocale14fallbackLocaleEv'/>
