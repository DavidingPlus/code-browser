<dec f='qtbase-6.5.0/src/xml/dom/qdom_p.h' l='490' type='long'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='658' u='r' c='_ZN19QDomNodeListPrivate10createListEv'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='659' u='r' c='_ZN19QDomNodeListPrivate10createListEv'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='712' u='r' c='_ZN19QDomNodeListPrivate4itemEi'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='727' u='r' c='_ZNK19QDomNodeListPrivate6lengthEv'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='1001' u='w' c='_ZN15QDomNodePrivate12insertBeforeEPS_S0_'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='1096' u='w' c='_ZN15QDomNodePrivate11insertAfterEPS_S0_'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='1187' u='w' c='_ZN15QDomNodePrivate12replaceChildEPS_S0_'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='1276' u='w' c='_ZN15QDomNodePrivate11removeChildEPS_'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='5609' u='w' c='_ZN19QDomDocumentPrivateC1Ev'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='5620' u='w' c='_ZN19QDomDocumentPrivateC1ERK7QString'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='5632' u='w' c='_ZN19QDomDocumentPrivateC1EP23QDomDocumentTypePrivate'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='5647' u='w' c='_ZN19QDomDocumentPrivateC1EPS_b'/>
<offset>1472</offset>
<doc f='qtbase-6.5.0/src/xml/dom/qdom_p.h' l='463'>/* \internal
       Counter for the QDomNodeListPrivate timestamps.

       This is a cache optimization, that might in some cases be effective. The
       dilemma is that QDomNode::childNodes() returns a list, but the
       implementation stores the children in a linked list. Hence, in order to
       get the children out through childNodes(), a list must be populated each
       time, which is O(N).

       DOM has the requirement of node references being live, see DOM Core
       Level 3, 1.1.1 The DOM Structure Model, which means that changes to the
       underlying documents must be reflected in node lists.

       This mechanism, nodeListTime, is a caching optimization that reduces the
       amount of times the node list is rebuilt, by only doing so when the
       document actually changes. However, a change to anywhere in any document
       invalidate all lists, since no dependency tracking is done.

       It functions by that all modifying functions(insertBefore() and so on)
       increment the count; each QDomNodeListPrivate copies nodeListTime on
       construction, and compares its own value to nodeListTime in order to
       determine whether it needs to rebuild.

       This is reentrant. The nodeListTime may overflow, but that&apos;s ok since we
       check for equalness, not whether nodeListTime is smaller than the list&apos;s
       stored timestamp.
    */</doc>
