<inh f='qtbase-6.5.0/src/gui/kernel/qpaintdevicewindow.h' l='16' c='QPaintDeviceWindow'/>
<def f='qtbase-6.5.0/src/opengl/qopenglwindow.h' l='19' ll='65'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.h' l='64' c='_ZN13QOpenGLWindowC1ERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.h' l='64' c='_ZN13QOpenGLWindowaSERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.h' l='64' c='_ZN13QOpenGLWindowaSERKS_'/>
<size>56</size>
<smbr r='QOpenGLWindow::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK13QOpenGLWindow10metaObjectEv'/>
<fun r='_ZN13QOpenGLWindow11qt_metacastEPKc'/>
<fun r='_ZN13QOpenGLWindow11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QOpenGLWindow2trEPKcS1_i'/>
<fun r='_ZN13QOpenGLWindow18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QOpenGLWindow6d_funcEv'/>
<fun r='_ZNK13QOpenGLWindow6d_funcEv'/>
<fun r='_ZN13QOpenGLWindowC1ENS_14UpdateBehaviorEP7QWindow'/>
<fun r='_ZN13QOpenGLWindowC1EP14QOpenGLContextNS_14UpdateBehaviorEP7QWindow'/>
<fun r='_ZN13QOpenGLWindowD1Ev'/>
<fun r='_ZNK13QOpenGLWindow14updateBehaviorEv'/>
<fun r='_ZNK13QOpenGLWindow7isValidEv'/>
<fun r='_ZN13QOpenGLWindow11makeCurrentEv'/>
<fun r='_ZN13QOpenGLWindow11doneCurrentEv'/>
<fun r='_ZNK13QOpenGLWindow7contextEv'/>
<fun r='_ZNK13QOpenGLWindow12shareContextEv'/>
<fun r='_ZNK13QOpenGLWindow24defaultFramebufferObjectEv'/>
<fun r='_ZN13QOpenGLWindow15grabFramebufferEv'/>
<fun r='_ZN13QOpenGLWindow12frameSwappedEv'/>
<fun r='_ZN13QOpenGLWindow12initializeGLEv'/>
<fun r='_ZN13QOpenGLWindow8resizeGLEii'/>
<fun r='_ZN13QOpenGLWindow7paintGLEv'/>
<fun r='_ZN13QOpenGLWindow12paintUnderGLEv'/>
<fun r='_ZN13QOpenGLWindow11paintOverGLEv'/>
<fun r='_ZN13QOpenGLWindow10paintEventEP11QPaintEvent'/>
<fun r='_ZN13QOpenGLWindow11resizeEventEP12QResizeEvent'/>
<fun r='_ZNK13QOpenGLWindow6metricEN12QPaintDevice17PaintDeviceMetricE'/>
<fun r='_ZNK13QOpenGLWindow10redirectedEP6QPoint'/>
<fun r='_ZN13QOpenGLWindowC1ERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='131' c='_ZN24QOpenGLWindowPaintDeviceC1EP13QOpenGLWindow'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='134'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='139' c='_ZN20QOpenGLWindowPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='139' c='_ZN20QOpenGLWindowPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='139' c='_ZNK20QOpenGLWindowPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='139' c='_ZNK20QOpenGLWindowPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='139'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='152' c='_ZN20QOpenGLWindowPrivate3getEP13QOpenGLWindow'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='174' c='_ZN20QOpenGLWindowPrivateD1Ev'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='186' c='_ZN20QOpenGLWindowPrivate10initializeEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='212' c='_ZN20QOpenGLWindowPrivate10beginPaintERK7QRegion'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='252' c='_ZN20QOpenGLWindowPrivate8endPaintEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='300' c='_ZN20QOpenGLWindowPrivate5flushERK7QRegion'/>
<size>56</size>
<doc f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='19'>/*!
  \class QOpenGLWindow
  \inmodule QtOpenGL
  \since 5.4
  \brief The QOpenGLWindow class is a convenience subclass of QWindow to perform OpenGL painting.

  QOpenGLWindow is an enhanced QWindow that allows easily creating windows that
  perform OpenGL rendering using an API that is compatible with QOpenGLWidget
  Unlike QOpenGLWidget, QOpenGLWindow has no dependency on the widgets module
  and offers better performance.

  A typical application will subclass QOpenGLWindow and reimplement the following
  virtual functions:

  \list

  \li initializeGL() to perform OpenGL resource initialization

  \li resizeGL() to set up the transformation matrices and other window size dependent resources

  \li paintGL() to issue OpenGL commands or draw using QPainter

  \endlist

  To schedule a repaint, call the update() function. Note that this will not
  immediately result in a call to paintGL(). Calling update() multiple times in
  a row will not change the behavior in any way.

  This is a slot so it can be connected to a \l QTimer::timeout() signal to
  perform animation. Note however that in the modern OpenGL world it is a much
  better choice to rely on synchronization to the vertical refresh rate of the
  display. See \l{QSurfaceFormat::setSwapInterval()}{setSwapInterval()} on a
  description of the swap interval. With a swap interval of \c 1, which is the
  case on most systems by default, the
  \l{QOpenGLContext::swapBuffers()}{swapBuffers()} call, that is executed
  internally by QOpenGLWindow after each repaint, will block and wait for
  vsync. This means that whenever the swap is done, an update can be scheduled
  again by calling update(), without relying on timers.

  To request a specific configuration for the context, use setFormat()
  like for any other QWindow. This allows, among others, requesting a
  given OpenGL version and profile, or enabling depth and stencil
  buffers.

  Unlike QWindow, QOpenGLWindow allows opening a painter on itself and perform
  QPainter-based drawing.

  QOpenGLWindow supports multiple update behaviors. The default,
  \c NoPartialUpdate is equivalent to a regular, OpenGL-based QWindow. In
  contrast, \c PartialUpdateBlit and \c PartialUpdateBlend are
  more in line with QOpenGLWidget&apos;s way of working, where there is always an
  extra, dedicated framebuffer object present. These modes allow, by
  sacrificing some performance, redrawing only a smaller area on each paint and
  having the rest of the content preserved from of the previous frame. This is
  useful for applications than render incrementally using QPainter, because
  this way they do not have to redraw the entire window content on each
  paintGL() call.

  Similarly to QOpenGLWidget, QOpenGLWindow supports the Qt::AA_ShareOpenGLContexts
  attribute. When enabled, the OpenGL contexts of all QOpenGLWindow instances will share
  with each other. This allows accessing each other&apos;s shareable OpenGL resources.

  For more information on graphics in Qt, see \l {Graphics}.
 */</doc>
<fun r='_ZN13QOpenGLWindowC1ENS_14UpdateBehaviorEP7QWindow'/>
<fun r='_ZN13QOpenGLWindowC1EP14QOpenGLContextNS_14UpdateBehaviorEP7QWindow'/>
<fun r='_ZN13QOpenGLWindowD1Ev'/>
<fun r='_ZNK13QOpenGLWindow14updateBehaviorEv'/>
<fun r='_ZNK13QOpenGLWindow7isValidEv'/>
<fun r='_ZN13QOpenGLWindow11makeCurrentEv'/>
<fun r='_ZN13QOpenGLWindow11doneCurrentEv'/>
<fun r='_ZNK13QOpenGLWindow7contextEv'/>
<fun r='_ZNK13QOpenGLWindow12shareContextEv'/>
<fun r='_ZNK13QOpenGLWindow24defaultFramebufferObjectEv'/>
<fun r='_ZN13QOpenGLWindow15grabFramebufferEv'/>
<fun r='_ZN13QOpenGLWindow12initializeGLEv'/>
<fun r='_ZN13QOpenGLWindow8resizeGLEii'/>
<fun r='_ZN13QOpenGLWindow7paintGLEv'/>
<fun r='_ZN13QOpenGLWindow12paintUnderGLEv'/>
<fun r='_ZN13QOpenGLWindow11paintOverGLEv'/>
<fun r='_ZN13QOpenGLWindow10paintEventEP11QPaintEvent'/>
<fun r='_ZN13QOpenGLWindow11resizeEventEP12QResizeEvent'/>
<fun r='_ZNK13QOpenGLWindow6metricEN12QPaintDevice17PaintDeviceMetricE'/>
<fun r='_ZNK13QOpenGLWindow10redirectedEP6QPoint'/>
