<dec f='qtbase-6.5.0/src/widgets/widgets/qlineedit.h' l='133' type='QString QLineEdit::inputMask() const'/>
<def f='qtbase-6.5.0/src/widgets/widgets/qlineedit.cpp' l='1220' ll='1224' type='QString QLineEdit::inputMask() const'/>
<doc f='qtbase-6.5.0/src/widgets/widgets/qlineedit.cpp' l='1138'>/*!
    \property QLineEdit::inputMask
    \brief The validation input mask.

    If no mask is set, inputMask() returns an empty string.

    Sets the QLineEdit&apos;s validation mask. Validators can be used
    instead of, or in conjunction with masks; see setValidator().

    Unset the mask and return to normal QLineEdit operation by passing
    an empty string (&quot;&quot;).

    The input mask is an input template string. It can contain the following elements:
    \table
    \row \li Mask Characters \li Defines the \l {QChar::} {Category} of input characters
    that are considered valid in this position
    \row \li Meta Characters \li Various special meanings
    \row \li Separators \li All other characters are regarded as immutable separators
    \endtable

    The following table shows the mask and meta characters that can be used in an input mask.

    \table
    \header \li Mask Character \li Meaning
    \row \li \c A \li character of the Letter category required, such as A-Z, a-z.
    \row \li \c a \li character of the Letter category permitted but not required.
    \row \li \c N \li character of the Letter or Number category required, such as
                      A-Z, a-z, 0-9.
    \row \li \c n \li character of the Letter or Number category permitted but not required.
    \row \li \c X \li Any non-blank character required.
    \row \li \c x \li Any non-blank character permitted but not required.
    \row \li \c 9 \li character of the Number category required, e.g 0-9.
    \row \li \c 0 \li character of the Number category permitted but not required.
    \row \li \c D \li character of the Number category and larger than zero required,
                      such as 1-9
    \row \li \c d \li character of the Number category and larger than zero permitted but not
                      required, such as 1-9.
    \row \li \c # \li character of the Number category, or plus/minus sign permitted but not
                      required.
    \row \li \c H \li Hexadecimal character required. A-F, a-f, 0-9.
    \row \li \c h \li Hexadecimal character permitted but not required.
    \row \li \c B \li Binary character required. 0-1.
    \row \li \c b \li Binary character permitted but not required.
    \header \li Meta Character \li Meaning
    \row \li \c &gt; \li All following alphabetic characters are uppercased.
    \row \li \c &lt; \li All following alphabetic characters are lowercased.
    \row \li \c ! \li Switch off case conversion.
    \row \li \c {;c} \li Terminates the input mask and sets the \e{blank} character to \e{c}.
    \row \li \c {[ ] { }} \li Reserved.
    \row \li \tt{\\} \li Use \tt{\\} to escape the special
                           characters listed above to use them as
                           separators.
    \endtable

    When created or cleared, the line edit will be filled with a copy of the
    input mask string where the meta characters have been removed, and the mask
    characters have been replaced with the \e{blank} character (by default, a
    \c space).

    When an input mask is set, the text() method returns a modified copy of the
    line edit content where all the \e{blank} characters have been removed. The
    unmodified content can be read using displayText().

    The hasAcceptableInput() method returns false if the current content of the
    line edit does not fulfil the requirements of the input mask.

    Examples:
    \table
    \header \li Mask \li Notes
    \row \li \c 000.000.000.000;_ \li IP address; blanks are \c{_}.
    \row \li \c HH:HH:HH:HH:HH:HH;_ \li MAC address
    \row \li \c 0000-00-00 \li ISO Date; blanks are \c space
    \row \li \c &gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;# \li License number;
    blanks are \c{#} and all (alphabetic) characters are converted to
    uppercase.
    \endtable

    To get range control (e.g., for an IP address) use masks together
    with \l{setValidator()}{validators}.

    \sa maxLength, QChar::isLetter(), QChar::isNumber(), QChar::digitValue()
*/</doc>
