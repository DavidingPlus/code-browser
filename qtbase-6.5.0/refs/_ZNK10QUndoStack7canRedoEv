<dec f='qtbase-6.5.0/src/gui/util/qundostack.h' l='71' type='bool QUndoStack::canRedo() const'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='196' u='c' c='_ZN10QUndoGroup14setActiveStackEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='359' u='c' c='_ZNK10QUndoGroup7canRedoEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='426' u='c' c='_ZN17QUndoStackPrivate8setIndexEib'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='609' u='c' c='_ZN10QUndoStack4pushEP12QUndoCommand'/>
<def f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='937' ll='943' type='bool QUndoStack::canRedo() const'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='1076' u='c' c='_ZNK10QUndoStack16createRedoActionEP7QObjectRK7QString'/>
<doc f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='915'>/*!
    \since 5.12
    \property QUndoStack::canRedo
    \brief whether this stack can redo.

    This property indicates whether or not there is a command that can be
    redone.

    \sa canRedo(), index(), canUndo()
*/</doc>
<doc f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='926'>/*!
    Returns \c true if there is a command available for redo; otherwise returns \c false.

    This function returns \c false if the stack is empty or if the top command
    on the stack has already been redone.

    Synonymous with index() == count().

    \sa index(), canUndo()
*/</doc>
