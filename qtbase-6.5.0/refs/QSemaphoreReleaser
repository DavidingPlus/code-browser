<def f='qtbase-6.5.0/src/corelib/thread/qsemaphore.h' l='56' ll='91'/>
<use f='qtbase-6.5.0/src/corelib/thread/qsemaphore.h' l='64' c='_ZN18QSemaphoreReleaserC1EOS_'/>
<use f='qtbase-6.5.0/src/corelib/thread/qsemaphore.h' l='66' c='_ZN18QSemaphoreReleaseraSEOS_'/>
<use f='qtbase-6.5.0/src/corelib/thread/qsemaphore.h' l='66' c='_ZN18QSemaphoreReleaseraSEOS_'/>
<use f='qtbase-6.5.0/src/corelib/thread/qsemaphore.h' l='66' c='_ZN18QSemaphoreReleaseraSEOS_'/>
<use f='qtbase-6.5.0/src/corelib/thread/qsemaphore.h' l='74' c='_ZN18QSemaphoreReleaser4swapERS_'/>
<size>16</size>
<fun r='_ZN18QSemaphoreReleaserC1Ev'/>
<fun r='_ZN18QSemaphoreReleaserC1ER10QSemaphorei'/>
<fun r='_ZN18QSemaphoreReleaserC1EP10QSemaphorei'/>
<fun r='_ZN18QSemaphoreReleaserC1EOS_'/>
<fun r='_ZN18QSemaphoreReleaserD1Ev'/>
<fun r='_ZN18QSemaphoreReleaser4swapERS_'/>
<fun r='_ZNK18QSemaphoreReleaser9semaphoreEv'/>
<fun r='_ZN18QSemaphoreReleaser6cancelEv'/>
<mbr r='QSemaphoreReleaser::m_sem' o='0' t='QSemaphore *'/>
<mbr r='QSemaphoreReleaser::m_n' o='64' t='int'/>
<doc f='qtbase-6.5.0/src/corelib/thread/qsemaphore.cpp' l='507'>/*!
    \class QSemaphoreReleaser
    \brief The QSemaphoreReleaser class provides exception-safe deferral of a QSemaphore::release() call.
    \since 5.10
    \ingroup thread
    \inmodule QtCore

    \reentrant

    QSemaphoreReleaser can be used wherever you would otherwise use
    QSemaphore::release(). Constructing a QSemaphoreReleaser defers the
    release() call on the semaphore until the QSemaphoreReleaser is
    destroyed (see
    \l{http://en.cppreference.com/w/cpp/language/raii}{RAII pattern}).

    You can use this to reliably release a semaphore to avoid dead-lock
    in the face of exceptions or early returns:

    \snippet code/src_corelib_thread_qsemaphore.cpp 4

    If an early return is taken or an exception is thrown before the
    \c{sem.release()} call is reached, the semaphore is not released,
    possibly preventing the thread waiting in the corresponding
    \c{sem.acquire()} call from ever continuing execution.

    When using RAII instead:

    \snippet code/src_corelib_thread_qsemaphore.cpp 5

    this can no longer happen, because the compiler will make sure that
    the QSemaphoreReleaser destructor is always called, and therefore
    the semaphore is always released.

    QSemaphoreReleaser is move-enabled and can therefore be returned
    from functions to transfer responsibility for releasing a semaphore
    out of a function or a scope:

    \snippet code/src_corelib_thread_qsemaphore.cpp 6

    A QSemaphoreReleaser can be canceled by a call to cancel(). A canceled
    semaphore releaser will no longer call QSemaphore::release() in its
    destructor.

    \sa QMutexLocker
*/</doc>
