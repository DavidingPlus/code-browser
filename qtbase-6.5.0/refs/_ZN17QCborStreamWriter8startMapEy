<dec f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.h' l='78' type='void QCborStreamWriter::startMap(quint64 count)'/>
<def f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.cpp' l='807' ll='810' type='void QCborStreamWriter::startMap(quint64 count)'/>
<doc f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.cpp' l='781'>/*!
   \overload

   Starts a CBOR Map with explicit length of \a count items in the CBOR
   stream. Each startMap call must be paired with one endMap() call and the
   current CBOR element extends until the end of the map.

   The map created by this function has an explicit length and therefore
   exactly \a count pairs of items must be added to the CBOR stream. Adding
   fewer or more items will result in failure during endMap() and the CBOR
   stream will be corrupt. However, explicit-length map are required by
   canonical CBOR encoding.

   The following example appends all strings found in the \l QMap passed as input:

   \snippet code/src_corelib_serialization_qcborstream.cpp 23

   \b{Size limitations}: The parameter to this function is quint64, which would
   seem to allow up to 2\sup{64}-1 pairs in the map. However, both
   QCborStreamWriter and QCborStreamReader are currently limited to 2\sup{31}-1
   items on 32-bit systems and 2\sup{63}-1 items on 64-bit ones. Also note that
   QCborMap is currently limited to 2\sup{26} elements in any platform.

   \sa startMap(), endMap(), startArray(), QCborStreamReader::isMap(),
       QCborStreamReader::isLengthKnown()
 */</doc>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='1346' u='c' c='_ZL12encodeToCborR17QCborStreamWriterPK21QCborContainerPrivatex6QFlagsIN10QCborValue14EncodingOptionEE'/>
