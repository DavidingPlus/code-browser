<dec f='qtbase-6.5.0/src/gui/util/qundostack.h' l='70' type='bool QUndoStack::canUndo() const'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='194' u='c' c='_ZN10QUndoGroup14setActiveStackEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='344' u='c' c='_ZNK10QUndoGroup7canUndoEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='424' u='c' c='_ZN17QUndoStackPrivate8setIndexEib'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='607' u='c' c='_ZN10QUndoStack4pushEP12QUndoCommand'/>
<def f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='907' ll='913' type='bool QUndoStack::canUndo() const'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='1039' u='c' c='_ZNK10QUndoStack16createUndoActionEP7QObjectRK7QString'/>
<doc f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='885'>/*!
    \since 5.12
    \property QUndoStack::canUndo
    \brief whether this stack can undo.

    This property indicates whether or not there is a command that can be
    undone.

    \sa canUndo(), index(), canRedo()
*/</doc>
<doc f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='896'>/*!
    Returns \c true if there is a command available for undo; otherwise returns \c false.

    This function returns \c false if the stack is empty, or if the bottom command
    on the stack has already been undone.

    Synonymous with index() == 0.

    \sa index(), canRedo()
*/</doc>
