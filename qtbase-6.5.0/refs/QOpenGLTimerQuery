<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/opengl/qopengltimerquery.h' l='18' ll='41'/>
<use f='qtbase-6.5.0/src/opengl/qopengltimerquery.h' l='40' c='_ZN17QOpenGLTimerQueryC1ERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopengltimerquery.h' l='40' c='_ZN17QOpenGLTimerQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopengltimerquery.h' l='40' c='_ZN17QOpenGLTimerQueryaSERKS_'/>
<size>16</size>
<smbr r='QOpenGLTimerQuery::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK17QOpenGLTimerQuery10metaObjectEv'/>
<fun r='_ZN17QOpenGLTimerQuery11qt_metacastEPKc'/>
<fun r='_ZN17QOpenGLTimerQuery11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN17QOpenGLTimerQuery2trEPKcS1_i'/>
<fun r='_ZN17QOpenGLTimerQuery18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN17QOpenGLTimerQueryC1EP7QObject'/>
<fun r='_ZN17QOpenGLTimerQueryD1Ev'/>
<fun r='_ZN17QOpenGLTimerQuery6createEv'/>
<fun r='_ZN17QOpenGLTimerQuery7destroyEv'/>
<fun r='_ZNK17QOpenGLTimerQuery9isCreatedEv'/>
<fun r='_ZNK17QOpenGLTimerQuery8objectIdEv'/>
<fun r='_ZN17QOpenGLTimerQuery5beginEv'/>
<fun r='_ZN17QOpenGLTimerQuery3endEv'/>
<fun r='_ZNK17QOpenGLTimerQuery16waitForTimestampEv'/>
<fun r='_ZN17QOpenGLTimerQuery15recordTimestampEv'/>
<fun r='_ZNK17QOpenGLTimerQuery17isResultAvailableEv'/>
<fun r='_ZNK17QOpenGLTimerQuery13waitForResultEv'/>
<fun r='_ZN17QOpenGLTimerQuery6d_funcEv'/>
<fun r='_ZNK17QOpenGLTimerQuery6d_funcEv'/>
<fun r='_ZN17QOpenGLTimerQueryC1ERKS_'/>
<doc f='qtbase-6.5.0/src/opengl/qopengltimerquery.cpp' l='202'>/*!
    \class QOpenGLTimerQuery
    \brief The QOpenGLTimerQuery class wraps an OpenGL timer query object.
    \inmodule QtOpenGL
    \since 5.1
    \ingroup painting-3D

    OpenGL timer query objects are OpenGL managed resources to measure the
    execution times of sequences of OpenGL commands on the GPU.

    OpenGL offers various levels of support for timer queries, depending on
    the version of OpenGL you have and the presence of the ARB_timer_query or
    EXT_timer_query extensions. The support can be summarized as:

    \list
        \li OpenGL &gt;=3.3 offers full support for all timer query functionality.
        \li OpenGL 3.2 with the ARB_timer_query extension offers full support
            for all timer query functionality.
        \li OpenGL &lt;=3.2 with the EXT_timer_query extension offers limited support
            in that the timestamp of the GPU cannot be queried. Places where this
            impacts functions provided by Qt classes will be highlighted in the
            function documentation.
        \li OpenGL ES 2 (and OpenGL ES 3) do not provide any support for OpenGL
            timer queries.
    \endlist

    OpenGL represents time with a granularity of 1 nanosecond (1e-9 seconds). As a
    consequence of this, 32-bit integers would only give a total possible duration
    of approximately 4 seconds, which would not be difficult to exceed in poorly
    performing or lengthy operations. OpenGL therefore uses 64 bit integer types
    to represent times. A GLuint64 variable has enough width to contain a duration
    of hundreds of years, which is plenty for real-time rendering needs.

    As with the other Qt OpenGL classes, QOpenGLTimerQuery has a create()
    function to create the underlying OpenGL object. This is to allow the developer to
    ensure that there is a valid current OpenGL context at the time.

    Once created, timer queries can be issued in one of several ways. The simplest
    method is to delimit a block of commands with calls to begin() and end(). This
    instructs OpenGL to measure the time taken from completing all commands issued
    prior to begin() until the completion of all commands issued prior to end().

    At the end of a frame we can retrieve the results by calling waitForResult().
    As this function&apos;s name implies, it blocks CPU execution until OpenGL notifies
    that the timer query result is available. To avoid blocking, you can check
    if the query result is available by calling isResultAvailable(). Note that
    modern GPUs are deeply pipelined and query results may not become available for
    between 1-5 frames after they were issued.

    Note that OpenGL does not permit nesting or interleaving of multiple timer queries
    using begin() and end(). Using multiple timer queries and recordTimestamp() avoids
    this limitation. When using recordTimestamp() the result can be obtained at
    some later time using isResultAvailable() and waitForResult(). Qt provides the
    convenience class QOpenGLTimeMonitor that helps with using multiple query objects.

    \sa QOpenGLTimeMonitor
*/</doc>
<fun r='_ZN17QOpenGLTimerQueryC1EP7QObject'/>
<fun r='_ZN17QOpenGLTimerQueryD1Ev'/>
<fun r='_ZN17QOpenGLTimerQuery6createEv'/>
<fun r='_ZN17QOpenGLTimerQuery7destroyEv'/>
<fun r='_ZNK17QOpenGLTimerQuery9isCreatedEv'/>
<fun r='_ZNK17QOpenGLTimerQuery8objectIdEv'/>
<fun r='_ZN17QOpenGLTimerQuery5beginEv'/>
<fun r='_ZN17QOpenGLTimerQuery3endEv'/>
<fun r='_ZN17QOpenGLTimerQuery15recordTimestampEv'/>
<fun r='_ZNK17QOpenGLTimerQuery16waitForTimestampEv'/>
<fun r='_ZNK17QOpenGLTimerQuery17isResultAvailableEv'/>
<fun r='_ZNK17QOpenGLTimerQuery13waitForResultEv'/>
