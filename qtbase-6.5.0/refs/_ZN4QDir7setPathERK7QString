<dec f='qtbase-6.5.0/src/corelib/io/qdir.h' l='93' type='void QDir::setPath(const QString &amp; path)'/>
<use f='qtbase-6.5.0/qmake/main.cpp' l='477' u='c' c='_Z8runQMakeiPPc'/>
<def f='qtbase-6.5.0/src/corelib/io/qdir.cpp' l='593' ll='596' type='void QDir::setPath(const QString &amp; path)'/>
<doc f='qtbase-6.5.0/src/corelib/io/qdir.cpp' l='577'>/*!
    Sets the path of the directory to \a path. The path is cleaned of
    redundant &quot;.&quot;, &quot;..&quot; and of multiple separators. No check is made
    to see whether a directory with this path actually exists; but you
    can check for yourself using exists().

    The path can be either absolute or relative. Absolute paths begin
    with the directory separator &quot;/&quot; (optionally preceded by a drive
    specification under Windows). Relative file names begin with a
    directory name or a file name and specify a path relative to the
    current directory. An example of an absolute path is the string
    &quot;/tmp/quartz&quot;, a relative path might look like &quot;src/fatlib&quot;.

    \sa path(), absolutePath(), exists(), cleanPath(), dirName(),
      absoluteFilePath(), isRelative(), makeAbsolute()
*/</doc>
<doc f='qtbase-6.5.0/src/corelib/io/qdir.cpp' l='2493'>/*!
    \fn void QDir::setPath(const std::filesystem::path &amp;path)
    \since 6.0
    \overload
*/</doc>
<use f='qtbase-6.5.0/src/gui/itemmodels/qfilesystemmodel.cpp' l='1490' u='c' c='_ZN16QFileSystemModel11setRootPathERK7QString'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='3780' u='c' c='_ZN18QFileDialogPrivate16_q_goToDirectoryERK7QString'/>
