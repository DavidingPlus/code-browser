<dec f='qtbase-6.5.0/src/widgets/kernel/qwidget.h' l='225' type='void QWidget::setStyle(QStyle * )'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1364' u='c' c='_ZNK14QWizardPrivate12ensureButtonEN7QWizard12WizardButtonE'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1718' u='c' c='_ZN14QWizardPrivate8setStyleEP6QStyle'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qwizard.cpp' l='1721' u='c' c='_ZN14QWizardPrivate8setStyleEP6QStyle'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsproxywidget.cpp' l='809' u='c' c='_ZN20QGraphicsProxyWidget5eventEP6QEvent'/>
<def f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='2637' ll='2654' type='void QWidget::setStyle(QStyle * style)'/>
<doc f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='2616'>/*!
    Sets the widget&apos;s GUI style to \a style. The ownership of the style
    object is not transferred.

    If no style is set, the widget uses the application&apos;s style,
    QApplication::style() instead.

    Setting a widget&apos;s style has no effect on existing or future child
    widgets.

    \warning This function is particularly useful for demonstration
    purposes, where you want to show Qt&apos;s styling capabilities. Real
    applications should avoid it and use one consistent GUI style
    instead.

    \warning Qt style sheets are currently not supported for custom QStyle
    subclasses. We plan to address this in some future release.

    \sa style(), QStyle, QApplication::style(), QApplication::setStyle()
*/</doc>
<use f='qtbase-6.5.0/src/widgets/widgets/qdialogbuttonbox.cpp' l='383' u='c' c='_ZN23QDialogButtonBoxPrivate12createButtonEN16QDialogButtonBox14StandardButtonEb'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qdialogbuttonbox.cpp' l='906' u='c' c='_ZN16QDialogButtonBox11changeEventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qmenu.cpp' l='107' u='c' c='_ZN12QTornOffMenuC1EP5QMenu'/>
