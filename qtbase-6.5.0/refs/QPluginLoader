<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/corelib/plugin/qpluginloader.h' l='20' ll='52'/>
<use f='qtbase-6.5.0/src/corelib/plugin/qpluginloader.h' l='51' c='_ZN13QPluginLoaderC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/plugin/qpluginloader.h' l='51' c='_ZN13QPluginLoaderaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/plugin/qpluginloader.h' l='51' c='_ZN13QPluginLoaderaSERKS_'/>
<size>32</size>
<smbr r='QPluginLoader::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK13QPluginLoader10metaObjectEv'/>
<fun r='_ZN13QPluginLoader11qt_metacastEPKc'/>
<fun r='_ZN13QPluginLoader11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QPluginLoader2trEPKcS1_i'/>
<fun r='_ZN13QPluginLoader18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QPluginLoaderC1EP7QObject'/>
<fun r='_ZN13QPluginLoaderC1ERK7QStringP7QObject'/>
<fun r='_ZN13QPluginLoaderD1Ev'/>
<fun r='_ZN13QPluginLoader8instanceEv'/>
<fun r='_ZNK13QPluginLoader8metaDataEv'/>
<fun r='_ZN13QPluginLoader15staticInstancesEv'/>
<fun r='_ZN13QPluginLoader13staticPluginsEv'/>
<fun r='_ZN13QPluginLoader4loadEv'/>
<fun r='_ZN13QPluginLoader6unloadEv'/>
<fun r='_ZNK13QPluginLoader8isLoadedEv'/>
<fun r='_ZN13QPluginLoader11setFileNameERK7QString'/>
<fun r='_ZNK13QPluginLoader8fileNameEv'/>
<fun r='_ZNK13QPluginLoader11errorStringEv'/>
<fun r='_ZN13QPluginLoader12setLoadHintsE6QFlagsIN8QLibrary8LoadHintEE'/>
<fun r='_ZNK13QPluginLoader9loadHintsEv'/>
<mbr r='QPluginLoader::d' o='128' t='QLibraryPrivate *'/>
<mbr r='QPluginLoader::did_load' o='192' t='bool'/>
<fun r='_ZN13QPluginLoaderC1ERKS_'/>
<doc f='qtbase-6.5.0/src/corelib/plugin/qpluginloader.cpp' l='24'>/*!
    \class QPluginLoader
    \inmodule QtCore
    \reentrant
    \brief The QPluginLoader class loads a plugin at run-time.


    \ingroup plugins

    QPluginLoader provides access to a \l{How to Create Qt
    Plugins}{Qt plugin}. A Qt plugin is stored in a shared library (a
    DLL) and offers these benefits over shared libraries accessed
    using QLibrary:

    \list
    \li QPluginLoader checks that a plugin is linked against the same
       version of Qt as the application.
    \li QPluginLoader provides direct access to a root component object
       (instance()), instead of forcing you to resolve a C function manually.
    \endlist

    An instance of a QPluginLoader object operates on a single shared
    library file, which we call a plugin. It provides access to the
    functionality in the plugin in a platform-independent way. To
    specify which plugin to load, either pass a file name in
    the constructor or set it with setFileName().

    The most important functions are load() to dynamically load the
    plugin file, isLoaded() to check whether loading was successful,
    and instance() to access the root component in the plugin. The
    instance() function implicitly tries to load the plugin if it has
    not been loaded yet. Multiple instances of QPluginLoader can be
    used to access the same physical plugin.

    Once loaded, plugins remain in memory until all instances of
    QPluginLoader has been unloaded, or until the application
    terminates. You can attempt to unload a plugin using unload(),
    but if other instances of QPluginLoader are using the same
    library, the call will fail, and unloading will only happen when
    every instance has called unload(). Right before the unloading
    happens, the root component will also be deleted.

    See \l{How to Create Qt Plugins} for more information about
    how to make your application extensible through plugins.

    Note that the QPluginLoader cannot be used if your application is
    statically linked against Qt. In this case, you will also have to
    link to plugins statically. You can use QLibrary if you need to
    load dynamic libraries in a statically linked application.

    \sa QLibrary, {Plug &amp; Paint Example}
*/</doc>
<fun r='_ZN13QPluginLoaderC1EP7QObject'/>
<fun r='_ZN13QPluginLoaderC1ERK7QStringP7QObject'/>
<fun r='_ZN13QPluginLoaderD1Ev'/>
<fun r='_ZN13QPluginLoader8instanceEv'/>
<fun r='_ZNK13QPluginLoader8metaDataEv'/>
<fun r='_ZN13QPluginLoader4loadEv'/>
<fun r='_ZN13QPluginLoader6unloadEv'/>
<fun r='_ZNK13QPluginLoader8isLoadedEv'/>
<fun r='_ZN13QPluginLoader11setFileNameERK7QString'/>
<fun r='_ZNK13QPluginLoader8fileNameEv'/>
<fun r='_ZNK13QPluginLoader11errorStringEv'/>
<fun r='_ZN13QPluginLoader12setLoadHintsE6QFlagsIN8QLibrary8LoadHintEE'/>
<fun r='_ZNK13QPluginLoader9loadHintsEv'/>
<fun r='_ZN13QPluginLoader15staticInstancesEv'/>
<fun r='_ZN13QPluginLoader13staticPluginsEv'/>
