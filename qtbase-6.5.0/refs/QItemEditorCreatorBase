<def f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='19' ll='26'/>
<ovr f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='29' c='QItemEditorCreator'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='29'/>
<ovr f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='41' c='QStandardItemEditorCreator'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='41'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='68' c='_ZN18QItemEditorFactory14registerEditorEiP22QItemEditorCreatorBase'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='74'/>
<size>8</size>
<fun r='_ZN22QItemEditorCreatorBaseD1Ev'/>
<fun r='_ZNK22QItemEditorCreatorBase12createWidgetEP7QWidget'/>
<fun r='_ZNK22QItemEditorCreatorBase17valuePropertyNameEv'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.cpp' l='140' c='_ZNK18QItemEditorFactory12createEditorEiP7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.cpp' l='153' c='_ZNK18QItemEditorFactory17valuePropertyNameEi'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.cpp' l='168' c='_ZN18QItemEditorFactoryD1Ev'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.cpp' l='182' c='_ZN18QItemEditorFactory14registerEditorEiP22QItemEditorCreatorBase'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.cpp' l='186' c='_ZN18QItemEditorFactory14registerEditorEiP22QItemEditorCreatorBase'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.cpp' l='335'>/*!
    \class QItemEditorCreatorBase
    \brief The QItemEditorCreatorBase class provides an abstract base class that
    must be subclassed when implementing new item editor creators.
    \since 4.2
    \ingroup model-view
    \inmodule QtWidgets

    QItemEditorCreatorBase objects are specialized widget factories that
    provide editor widgets for one particular QVariant data type. They
    are used by QItemEditorFactory to create editors for
    \l{QStyledItemDelegate}s. Creator bases must be registered with
    QItemEditorFactory::registerEditor().

    An editor should provide a user property for the data it edits.
    QItemDelagates can then access the property using Qt&apos;s
    \l{Meta-Object System}{meta-object system} to set and retrieve the
    editing data. A property is set as the user property with the USER
    keyword:

    \snippet code/src_gui_itemviews_qitemeditorfactory.cpp 0

    If the editor does not provide a user property, it must return the
    name of the property from valuePropertyName(); delegates will then
    use the name to access the property. If a user property exists,
    item delegates will not call valuePropertyName().

    QStandardItemEditorCreator is a convenience template class that can be used
    to register widgets without the need to subclass QItemEditorCreatorBase.

    \sa QStandardItemEditorCreator, QItemEditorFactory,
    {Model/View Programming}, {Color Editor Factory Example}
*/</doc>
<fun r='_ZN22QItemEditorCreatorBaseD1Ev'/>
