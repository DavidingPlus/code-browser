<def f='include/linux/input.h' l='448' ll='462'/>
<size>48</size>
<doc f='include/linux/input.h' l='425'>/**
 * struct ff_effect - defines force feedback effect
 * @type: type of the effect (FF_CONSTANT, FF_PERIODIC, FF_RAMP, FF_SPRING,
 *	FF_FRICTION, FF_DAMPER, FF_RUMBLE, FF_INERTIA, or FF_CUSTOM)
 * @id: an unique id assigned to an effect
 * @direction: direction of the effect
 * @trigger: trigger conditions (struct ff_trigger)
 * @replay: scheduling of the effect (struct ff_replay)
 * @u: effect-specific structure (one of ff_constant_effect, ff_ramp_effect,
 *	ff_periodic_effect, ff_condition_effect, ff_rumble_effect) further
 *	defining effect parameters
 *
 * This structure is sent through ioctl from the application to the driver.
 * To create a new effect application should set its @id to -1; the kernel
 * will return assigned @id which can later be used to update or delete
 * this effect.
 *
 * Direction of the effect is encoded as follows:
 *	0 deg -&gt; 0x0000 (down)
 *	90 deg -&gt; 0x4000 (left)
 *	180 deg -&gt; 0x8000 (up)
 *	270 deg -&gt; 0xC000 (right)
 */</doc>
<mbr r='ff_effect::type' o='0' t='__u16'/>
<mbr r='ff_effect::id' o='16' t='__s16'/>
<mbr r='ff_effect::direction' o='32' t='__u16'/>
<mbr r='ff_effect::trigger' o='48' t='struct ff_trigger'/>
<mbr r='ff_effect::replay' o='80' t='struct ff_replay'/>
<mbr r='ff_effect::u' o='128' t='union (unnamed union at /usr/include/linux/input.h:455:2)'/>
