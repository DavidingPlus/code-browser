<dec f='qtbase-6.5.0/src/corelib/kernel/qsystemsemaphore.h' l='44' type='void QSystemSemaphore::setKey(const QString &amp; key, int initialValue = 0, QSystemSemaphore::AccessMode mode = Open)'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.cpp' l='356' u='c' c='_ZN20QSharedMemoryPrivate7initKeyEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.cpp' l='357' u='c' c='_ZN20QSharedMemoryPrivate7initKeyEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.cpp' l='446' u='c' c='_ZN13QSharedMemory6createExNS_10AccessModeE'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsystemsemaphore.cpp' l='140' u='c' c='_ZN16QSystemSemaphoreC1ERK7QStringiNS_10AccessModeE'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qsystemsemaphore.cpp' l='197' ll='217' type='void QSystemSemaphore::setKey(const QString &amp; key, int initialValue = 0, QSystemSemaphore::AccessMode mode = Open)'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qsystemsemaphore.cpp' l='187'>/*!
  This function works the same as the constructor. It reconstructs
  this QSystemSemaphore object. If the new \a key is different from
  the old key, calling this function is like calling the destructor of
  the semaphore with the old key, then calling the constructor to
  create a new semaphore with the new \a key. The \a initialValue and
  \a mode parameters are as defined for the constructor.

  \sa QSystemSemaphore(), key()
 */</doc>
