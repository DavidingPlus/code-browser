<dec f='qtbase-6.5.0/src/gui/text/qrawfont.h' l='70' type='bool QRawFont::advancesForGlyphIndexes(const quint32 * glyphIndexes, QPointF * advances, int numGlyphs, QRawFont::LayoutFlags layoutFlags) const'/>
<use f='qtbase-6.5.0/src/gui/text/qrawfont.h' l='130' u='c' c='_ZNK8QRawFont23advancesForGlyphIndexesERK5QListIjE6QFlagsINS_10LayoutFlagEE'/>
<def f='qtbase-6.5.0/src/gui/text/qrawfont.cpp' l='583' ll='606' type='bool QRawFont::advancesForGlyphIndexes(const quint32 * glyphIndexes, QPointF * advances, int numGlyphs, QRawFont::LayoutFlags layoutFlags) const'/>
<use f='qtbase-6.5.0/src/gui/text/qrawfont.cpp' l='621' u='c' c='_ZNK8QRawFont23advancesForGlyphIndexesEPKjP7QPointFi'/>
<doc f='qtbase-6.5.0/src/gui/text/qrawfont.cpp' l='567'>/*!
   \since 5.1

   Returns the QRawFont&apos;s advances for each of the \a glyphIndexes in pixel units. The advances
   give the distance from the position of a given glyph to where the next glyph should be drawn
   to make it appear as if the two glyphs are unspaced. The glyph indexes are given with the
   array \a glyphIndexes while the results are returned through \a advances, both of them must
   have \a numGlyphs elements. How the advances are calculated is controlled by \a layoutFlags.

   \note When \c KernedAdvances is requested, this function will apply kerning rules from the
   TrueType table \c{KERN}, if this is available in the font. In many modern fonts, kerning is
   handled through OpenType rules or AAT rules, which requires a full shaping step to be applied.
   To get the results of fully shaping the text, use \l{QTextLayout}.

   \sa QTextLine::horizontalAdvance(), QFontMetricsF::horizontalAdvance(), QTextLayout::glyphRuns()
*/</doc>
