<inh f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='72' c='QPointerEvent'/>
<def f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='912' ll='945'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='914' c='_ZN11QTouchEventC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='914' c='_ZN11QTouchEventC1EOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='914' c='_ZN11QTouchEventaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='914' c='_ZN11QTouchEventaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='914' c='_ZN11QTouchEventaSEOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='914' c='_ZN11QTouchEventaSEOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='914' c='_ZNK11QTouchEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qwindow.h' l='345' c='_ZN7QWindow10touchEventEP11QTouchEvent'/>
<size>80</size>
<fun r='_ZN11QTouchEventC1ERKS_'/>
<fun r='_ZN11QTouchEventC1EOS_'/>
<fun r='_ZNK11QTouchEvent5cloneEv'/>
<fun r='_ZN11QTouchEventC1EN6QEvent4TypeEPK15QPointingDevice6QFlagsIN2Qt16KeyboardModifierEERK5QListI11QEventPointE'/>
<fun r='_ZN11QTouchEventC1EN6QEvent4TypeEPK15QPointingDevice6QFlagsIN2Qt16KeyboardModifierEES5_IN11QEventPoint5StateEERK5QListIS9_E'/>
<fun r='_ZNK11QTouchEvent6targetEv'/>
<fun r='_ZNK11QTouchEvent16touchPointStatesEv'/>
<fun r='_ZNK11QTouchEvent11touchPointsEv'/>
<fun r='_ZNK11QTouchEvent12isBeginEventEv'/>
<fun r='_ZNK11QTouchEvent13isUpdateEventEv'/>
<fun r='_ZNK11QTouchEvent10isEndEventEv'/>
<mbr r='QTouchEvent::m_target' o='512' t='QObject *'/>
<mbr r='QTouchEvent::m_touchPointStates' o='576' t='QEventPoint::States'/>
<mbr r='QTouchEvent::m_reserved' o='608' t='quint32'/>
<ovr f='qtbase-6.5.0/src/gui/kernel/qevent_p.h' l='27' c='QMutableTouchEvent'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent_p.h' l='27'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent_p.h' l='34' c='_ZN18QMutableTouchEventC1EN6QEvent4TypeEPK15QPointingDevice6QFlagsIN2Qt16KeyboardModifierEERK5QListI11QEventPointE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent_p.h' l='37' c='_ZN18QMutableTouchEvent4fromEP11QTouchEvent'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent_p.h' l='39' c='_ZN18QMutableTouchEvent4fromER11QTouchEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/gui/kernel/qpointingdevice_p.h' l='48' c='_ZN22QPointingDevicePrivate20sendTouchCancelEventEP11QTouchEvent'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='49'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='3743' c='_ZL16formatTouchEvent6QDebugRK11QTouchEvent'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4170' c='_Zls6QDebugPK6QEvent'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4501' c='_ZN11QTouchEventC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4501' c='_ZNK11QTouchEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4501' c='_ZNK11QTouchEvent5cloneEv'/>
<size>80</size>
<doc f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4328'>/*!
    \class QTouchEvent
    \brief The QTouchEvent class contains parameters that describe a touch event.
    \since 4.6
    \ingroup events
    \ingroup touch
    \inmodule QtGui

    \section1 Enabling Touch Events

    Touch events occur when pressing, releasing, or moving one or more touch points on a touch
    device (such as a touch-screen or track-pad). To receive touch events, widgets have to have the
    Qt::WA_AcceptTouchEvents attribute set and graphics items need to have the
    \l{QGraphicsItem::setAcceptTouchEvents()}{acceptTouchEvents} attribute set to true.

    When using QAbstractScrollArea based widgets, you should enable the Qt::WA_AcceptTouchEvents
    attribute on the scroll area&apos;s \l{QAbstractScrollArea::viewport()}{viewport}.

    Similarly to QMouseEvent, Qt automatically grabs each touch point on the first press inside a
    widget, and the widget will receive all updates for the touch point until it is released.
    Note that it is possible for a widget to receive events for numerous touch points, and that
    multiple widgets may be receiving touch events at the same time.

    \section1 Event Handling

    All touch events are of type QEvent::TouchBegin, QEvent::TouchUpdate, QEvent::TouchEnd or
    QEvent::TouchCancel. Reimplement QWidget::event() or QAbstractScrollArea::viewportEvent() for
    widgets and QGraphicsItem::sceneEvent() for items in a graphics view to receive touch events.

    Unlike widgets, QWindows receive touch events always, there is no need to opt in. When working
    directly with a QWindow, it is enough to reimplement QWindow::touchEvent().

    The QEvent::TouchUpdate and QEvent::TouchEnd events are sent to the widget or item that
    accepted the QEvent::TouchBegin event. If the QEvent::TouchBegin event is not accepted and not
    filtered by an event filter, then no further touch events are sent until the next
    QEvent::TouchBegin.

    Some systems may send an event of type QEvent::TouchCancel. Upon receiving this event
    applications are requested to ignore the entire active touch sequence. For example in a
    composited system the compositor may decide to treat certain gestures as system-wide
    gestures. Whenever such a decision is made (the gesture is recognized), the clients will be
    notified with a QEvent::TouchCancel event so they can update their state accordingly.

    The pointCount() and point() functions can be used to access and iterate individual
    touch points.

    The points() function returns a list of all touch points contained in the event.
    Note that this list may be empty, for example in case of a QEvent::TouchCancel event.
    Each point is an instance of the QEventPoint class. The QEventPoint::State enum
    describes the different states that a touch point may have.

    \note The list of points() will never be partial: A touch event will always contain a touch
    point for each existing physical touch contacts targeting the window or widget to which the
    event is sent. For instance, assuming that all touches target the same window or widget, an
    event with a condition of points().count()==2 is guaranteed to imply that the number of
    fingers touching the touchscreen or touchpad is exactly two.

    \section1 Event Delivery and Propagation

    By default, QGuiApplication translates the first touch point in a QTouchEvent into
    a QMouseEvent. This makes it possible to enable touch events on existing widgets that do not
    normally handle QTouchEvent. See below for information on some special considerations needed
    when doing this.

    QEvent::TouchBegin is the first touch event sent to a widget. The QEvent::TouchBegin event
    contains a special accept flag that indicates whether the receiver wants the event. By default,
    the event is accepted. You should call ignore() if the touch event is not handled by your
    widget. The QEvent::TouchBegin event is propagated up the parent widget chain until a widget
    accepts it with accept(), or an event filter consumes it. For QGraphicsItems, the
    QEvent::TouchBegin event is propagated to items under the mouse (similar to mouse event
    propagation for QGraphicsItems).

    \section1 Touch Point Grouping

    As mentioned above, it is possible that several widgets can be receiving QTouchEvents at the
    same time. However, Qt makes sure to never send duplicate QEvent::TouchBegin events to the same
    widget, which could theoretically happen during propagation if, for example, the user touched 2
    separate widgets in a QGroupBox and both widgets ignored the QEvent::TouchBegin event.

    To avoid this, Qt will group new touch points together using the following rules:

    \list

    \li When the first touch point is detected, the destination widget is determined firstly by the
    location on screen and secondly by the propagation rules.

    \li When additional touch points are detected, Qt first looks to see if there are any active
    touch points on any ancestor or descendent of the widget under the new touch point. If there
    are, the new touch point is grouped with the first, and the new touch point will be sent in a
    single QTouchEvent to the widget that handled the first touch point. (The widget under the new
    touch point will not receive an event).

    \endlist

    This makes it possible for sibling widgets to handle touch events independently while making
    sure that the sequence of QTouchEvents is always correct.

    \section1 Mouse Events and Touch Event Synthesizing

    QTouchEvent delivery is independent from that of QMouseEvent. The application flags
    Qt::AA_SynthesizeTouchForUnhandledMouseEvents and Qt::AA_SynthesizeMouseForUnhandledTouchEvents
    can be used to enable or disable automatic synthesizing of touch events to mouse events and
    mouse events to touch events.

    \section1 Caveats

    \list

    \li As mentioned above, enabling touch events means multiple widgets can be receiving touch
    events simultaneously. Combined with the default QWidget::event() handling for QTouchEvents,
    this gives you great flexibility in designing touch user interfaces. Be aware of the
    implications. For example, it is possible that the user is moving a QSlider with one finger and
    pressing a QPushButton with another. The signals emitted by these widgets will be
    interleaved.

    \li Recursion into the event loop using one of the exec() methods (e.g., QDialog::exec() or
    QMenu::exec()) in a QTouchEvent event handler is not supported. Since there are multiple event
    recipients, recursion may cause problems, including but not limited to lost events
    and unexpected infinite recursion.

    \li QTouchEvents are not affected by a \l{QWidget::grabMouse()}{mouse grab} or an
    \l{QApplication::activePopupWidget()}{active pop-up widget}. The behavior of QTouchEvents is
    undefined when opening a pop-up or grabbing the mouse while there are more than one active touch
    points.

    \endlist

    \sa QEventPoint, QEventPoint::State, Qt::WA_AcceptTouchEvents,
    QGraphicsItem::acceptTouchEvents()
*/</doc>
<fun r='_ZN11QTouchEventC1EN6QEvent4TypeEPK15QPointingDevice6QFlagsIN2Qt16KeyboardModifierEERK5QListI11QEventPointE'/>
<fun r='_ZN11QTouchEventC1EN6QEvent4TypeEPK15QPointingDevice6QFlagsIN2Qt16KeyboardModifierEES5_IN11QEventPoint5StateEERK5QListIS9_E'/>
<fun r='_ZN11QTouchEventC1ERKS_'/>
<fun r='_ZNK11QTouchEvent5cloneEv'/>
<fun r='_ZNK11QTouchEvent12isBeginEventEv'/>
<fun r='_ZNK11QTouchEvent13isUpdateEventEv'/>
<fun r='_ZNK11QTouchEvent10isEndEventEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='2880' c='_ZN22QGuiApplicationPrivate17processTouchEventEPN29QWindowSystemInterfacePrivate10TouchEventE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='3022' c='_ZN22QGuiApplicationPrivate17processTouchEventEPN29QWindowSystemInterfacePrivate10TouchEventE'/>
<size>80</size>
<use f='qtbase-6.5.0/src/gui/kernel/qpointingdevice.cpp' l='401' c='_ZN22QPointingDevicePrivate20sendTouchCancelEventEP11QTouchEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/gui/kernel/qwindow.cpp' l='2424' c='_ZN7QWindow5eventEP6QEvent'/>
<use f='qtbase-6.5.0/src/gui/kernel/qwindow.cpp' l='2697' c='_ZN7QWindow10touchEventEP11QTouchEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication_p.h' l='208' c='_ZN19QApplicationPrivate26updateTouchPointsForWidgetEP7QWidgetP11QTouchEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication_p.h' l='217' c='_ZN19QApplicationPrivate25activateImplicitTouchGrabEP7QWidgetP11QTouchEventNS_21ImplicitTouchGrabModeE'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication_p.h' l='219' c='_ZN19QApplicationPrivate22translateRawTouchEventEP7QWidgetPK11QTouchEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview_p.h' l='182' c='_ZN20QGraphicsViewPrivate19translateTouchEventEPS_P11QTouchEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene_p.h' l='278' c='_ZN21QGraphicsScenePrivate24updateTouchPointsForItemEP13QGraphicsItemP11QTouchEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene_p.h' l='280' c='_ZN21QGraphicsScenePrivate17touchEventHandlerEP11QTouchEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene_p.h' l='281' c='_ZN21QGraphicsScenePrivate19sendTouchBeginEventEP13QGraphicsItemP11QTouchEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsproxywidget.cpp' l='889' c='_ZN20QGraphicsProxyWidget5eventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsproxywidget.cpp' l='889' c='_ZN20QGraphicsProxyWidget5eventEP6QEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene.cpp' l='3431' c='_ZN14QGraphicsScene5eventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene.cpp' l='5809' c='_ZN21QGraphicsScenePrivate24updateTouchPointsForItemEP13QGraphicsItemP11QTouchEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene.cpp' l='5834' c='_ZN21QGraphicsScenePrivate17touchEventHandlerEP11QTouchEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsscene.cpp' l='5959' c='_ZN21QGraphicsScenePrivate19sendTouchBeginEventEP13QGraphicsItemP11QTouchEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='286' c='_ZN20QGraphicsViewPrivate19translateTouchEventEPS_P11QTouchEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='2908' c='_ZN13QGraphicsView13viewportEventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='2908' c='_ZN13QGraphicsView13viewportEventEP6QEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidgetwindow_p.h' l='57' c='_ZN13QWidgetWindow16handleTouchEventEP11QTouchEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication.cpp' l='3059' c='_ZN12QApplication6notifyEP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication.cpp' l='3748' c='_ZN19QApplicationPrivate26updateTouchPointsForWidgetEP7QWidgetP11QTouchEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication.cpp' l='3803' c='_ZN19QApplicationPrivate25activateImplicitTouchGrabEP7QWidgetP11QTouchEventNS_21ImplicitTouchGrabModeE'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication.cpp' l='3820' c='_ZN19QApplicationPrivate22translateRawTouchEventEP7QWidgetPK11QTouchEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='64' c='_ZN21QPanGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='64' c='_ZN21QPanGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='76' c='_ZN21QPanGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='76' c='_ZN21QPanGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='147' c='_ZN23QPinchGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='147' c='_ZN23QPinchGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='275' c='_ZN23QSwipeGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='275' c='_ZN23QSwipeGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='398' c='_ZN21QTapGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='398' c='_ZN21QTapGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='499' c='_ZN28QTapAndHoldGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='499' c='_ZN28QTapAndHoldGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='514' c='_ZN28QTapAndHoldGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures.cpp' l='514' c='_ZN28QTapAndHoldGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidgetwindow.cpp' l='255' c='_ZN13QWidgetWindow5eventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidgetwindow.cpp' l='638' c='_ZN13QWidgetWindow16handleTouchEventEP11QTouchEvent'/>
<size>80</size>
<use f='qtbase-6.5.0/src/widgets/util/qflickgesture.cpp' l='353' c='_ZN23QFlickGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/util/qflickgesture.cpp' l='391' c='_ZN23QFlickGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<size>80</size>
