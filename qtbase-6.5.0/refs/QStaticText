<use f='qtbase-6.5.0/src/gui/painting/qpainter.h' l='354' c='_ZN8QPainter14drawStaticTextERK7QPointFRK11QStaticText'/>
<use f='qtbase-6.5.0/src/gui/painting/qpainter.h' l='355' c='_ZN8QPainter14drawStaticTextERK6QPointRK11QStaticText'/>
<use f='qtbase-6.5.0/src/gui/painting/qpainter.h' l='356' c='_ZN8QPainter14drawStaticTextEiiRK11QStaticText'/>
<use f='qtbase-6.5.0/src/gui/painting/qpainter.h' l='813' c='_ZN8QPainter14drawStaticTextERK6QPointRK11QStaticText'/>
<use f='qtbase-6.5.0/src/gui/painting/qpainter.h' l='818' c='_ZN8QPainter14drawStaticTextEiiRK11QStaticText'/>
<def f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='20' ll='64'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='30' c='_ZN11QStaticTextC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='31' c='_ZN11QStaticTextaSEOS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='31' c='_ZN11QStaticTextaSEOS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='32' c='_ZN11QStaticTextaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='32' c='_ZN11QStaticTextaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='35' c='_ZN11QStaticText4swapERS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='56' c='_ZNK11QStaticTexteqERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='57' c='_ZNK11QStaticTextneERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='66'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='66'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='66'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='66'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='66'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='66' c='_Z4swapR11QStaticTextS0_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='66' c='_Z4swapR11QStaticTextS0_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='70' c='_Z27qRegisterNormalizedMetaTypeRK10QByteArray'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='70'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='70'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='70' c='_ZN11QMetaTypeIdI11QStaticTextE14qt_metatype_idEv'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='70' c='_ZN11QMetaTypeIdI11QStaticTextE14qt_metatype_idEv'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.h' l='70' c='_ZN11QMetaTypeIdI11QStaticTextE14qt_metatype_idEv'/>
<size>8</size>
<fun r='_ZN11QStaticTextC1Ev'/>
<fun r='_ZN11QStaticTextC1ERK7QString'/>
<fun r='_ZN11QStaticTextC1ERKS_'/>
<fun r='_ZN11QStaticTextaSERKS_'/>
<fun r='_ZN11QStaticTextD1Ev'/>
<fun r='_ZN11QStaticText4swapERS_'/>
<fun r='_ZN11QStaticText7setTextERK7QString'/>
<fun r='_ZNK11QStaticText4textEv'/>
<fun r='_ZN11QStaticText13setTextFormatEN2Qt10TextFormatE'/>
<fun r='_ZNK11QStaticText10textFormatEv'/>
<fun r='_ZN11QStaticText12setTextWidthEd'/>
<fun r='_ZNK11QStaticText9textWidthEv'/>
<fun r='_ZN11QStaticText13setTextOptionERK11QTextOption'/>
<fun r='_ZNK11QStaticText10textOptionEv'/>
<fun r='_ZNK11QStaticText4sizeEv'/>
<fun r='_ZN11QStaticText7prepareERK10QTransformRK5QFont'/>
<fun r='_ZN11QStaticText18setPerformanceHintENS_15PerformanceHintE'/>
<fun r='_ZNK11QStaticText15performanceHintEv'/>
<fun r='_ZNK11QStaticTexteqERKS_'/>
<fun r='_ZNK11QStaticTextneERKS_'/>
<fun r='_ZN11QStaticText6detachEv'/>
<mbr r='QStaticText::data' o='0' t='QExplicitlySharedDataPointer&lt;QStaticTextPrivate&gt;'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext_p.h' l='128' c='_ZN18QStaticTextPrivate3getEPK11QStaticText'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/painting/qpainter.cpp' l='5442' c='_ZN8QPainter14drawStaticTextERK7QPointFRK11QStaticText'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.cpp' l='13' c='_Z39qRegisterNormalizedMetaType_QStaticTextRK10QByteArray'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.cpp' l='140' c='_ZN11QStaticTextC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.cpp' l='189' c='_ZN11QStaticTextaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.cpp' l='189' c='_ZN11QStaticTextaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.cpp' l='207' c='_ZNK11QStaticTexteqERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.cpp' l='219' c='_ZNK11QStaticTextneERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qstatictext.cpp' l='393' c='_ZN18QStaticTextPrivate3getEPK11QStaticText'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/gui/text/qstatictext.cpp' l='19'>/*!
    \class QStaticText
    \brief The QStaticText class enables optimized drawing of text when the text and its layout
    is updated rarely.
    \since 4.7
    \inmodule QtGui

    \ingroup multimedia
    \ingroup text
    \ingroup shared

    QStaticText provides a way to cache layout data for a block of text so that it can be drawn
    more efficiently than by using QPainter::drawText() in which the layout information is
    recalculated with every call.

    The class primarily provides an optimization for cases where the text, its font and the
    transformations on the painter are static over several paint events. If the text or its layout
    is changed for every iteration, QPainter::drawText() is the more efficient alternative, since
    the static text&apos;s layout would have to be recalculated to take the new state into consideration.

    Translating the painter will not cause the layout of the text to be recalculated, but will cause
    a very small performance impact on drawStaticText(). Altering any other parts of the painter&apos;s
    transformation or the painter&apos;s font will cause the layout of the static text to be
    recalculated. This should be avoided as often as possible to maximize the performance
    benefit of using QStaticText.

    In addition, only affine transformations are supported by drawStaticText(). Calling
    drawStaticText() on a projected painter will perform slightly worse than using the regular
    drawText() call, so this should be avoided.

    \code
    class MyWidget: public QWidget
    {
    public:
        MyWidget(QWidget *parent = nullptr) : QWidget(parent), m_staticText(&quot;This is static text&quot;)

    protected:
        void paintEvent(QPaintEvent *)
        {
            QPainter painter(this);
            painter.drawStaticText(0, 0, m_staticText);
        }

    private:
        QStaticText m_staticText;
    };
    \endcode

    The QStaticText class can be used to mimic the behavior of QPainter::drawText() to a specific
    point with no boundaries, and also when QPainter::drawText() is called with a bounding
    rectangle.

    If a bounding rectangle is not required, create a QStaticText object without setting a preferred
    text width. The text will then occupy a single line.

    If you set a text width on the QStaticText object, this will bound the text. The text will
    be formatted so that no line exceeds the given width. The text width set for QStaticText will
    not automatically be used for clipping. To achieve clipping in addition to line breaks, use
    QPainter::setClipRect(). The position of the text is decided by the argument passed to
    QPainter::drawStaticText() and can change from call to call with a minimal impact on
    performance.

    For extra convenience, it is possible to apply formatting to the text using the HTML subset
    supported by QTextDocument. QStaticText will attempt to guess the format of the input text using
    Qt::mightBeRichText(), and interpret it as rich text if this function returns \c true. To force
    QStaticText to display its contents as either plain text or rich text, use the function
    QStaticText::setTextFormat() and pass in, respectively, Qt::PlainText and Qt::RichText.

    QStaticText can only represent text, so only HTML tags which alter the layout or appearance of
    the text will be respected. Adding an image to the input HTML, for instance, will cause the
    image to be included as part of the layout, affecting the positions of the text glyphs, but it
    will not be displayed. The result will be an empty area the size of the image in the output.
    Similarly, using tables will cause the text to be laid out in table format, but the borders
    will not be drawn.

    If it&apos;s the first time the static text is drawn, or if the static text, or the painter&apos;s font
    has been altered since the last time it was drawn, the text&apos;s layout has to be
    recalculated. On some paint engines, changing the matrix of the painter will also cause the
    layout to be recalculated. In particular, this will happen for any engine except for the
    OpenGL2 paint engine. Recalculating the layout will impose an overhead on the
    QPainter::drawStaticText() call where it occurs. To avoid this overhead in the paint event, you
    can call prepare() ahead of time to ensure that the layout is calculated.

    \sa QPainter::drawText(), QPainter::drawStaticText(), QTextLayout, QTextDocument
*/</doc>
<fun r='_ZN11QStaticTextC1Ev'/>
<fun r='_ZN11QStaticTextC1ERK7QString'/>
<fun r='_ZN11QStaticTextC1ERKS_'/>
<fun r='_ZN11QStaticTextD1Ev'/>
<fun r='_ZN11QStaticText6detachEv'/>
<fun r='_ZN11QStaticText7prepareERK10QTransformRK5QFont'/>
<fun r='_ZN11QStaticTextaSERKS_'/>
<fun r='_ZNK11QStaticTexteqERKS_'/>
<fun r='_ZNK11QStaticTextneERKS_'/>
<fun r='_ZN11QStaticText7setTextERK7QString'/>
<fun r='_ZN11QStaticText13setTextFormatEN2Qt10TextFormatE'/>
<fun r='_ZNK11QStaticText10textFormatEv'/>
<fun r='_ZNK11QStaticText4textEv'/>
<fun r='_ZN11QStaticText18setPerformanceHintENS_15PerformanceHintE'/>
<fun r='_ZNK11QStaticText15performanceHintEv'/>
<fun r='_ZN11QStaticText13setTextOptionERK11QTextOption'/>
<fun r='_ZNK11QStaticText10textOptionEv'/>
<fun r='_ZN11QStaticText12setTextWidthEd'/>
<fun r='_ZNK11QStaticText9textWidthEv'/>
<fun r='_ZNK11QStaticText4sizeEv'/>
