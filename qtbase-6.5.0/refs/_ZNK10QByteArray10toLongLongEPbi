<dec f='qtbase-6.5.0/src/corelib/text/qbytearray.h' l='343' type='qlonglong QByteArray::toLongLong(bool * ok = nullptr, int base = 10) const'/>
<use f='qtbase-6.5.0/src/corelib/io/qlockfile.cpp' l='389' u='c' c='_ZL18getLockInfo_helperRK7QStringPN12_GLOBAL__N_112LockFileInfoE'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1076' u='c' c='_ZNK3$_07convertEPKviPvi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qvariant.cpp' l='133' u='c' c='_ZN12_GLOBAL__N_116qConvertToNumberEPKN8QVariant7PrivateEb'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qjsonparser.cpp' l='732' u='c' c='_ZN12QJsonPrivate6Parser11parseNumberEv'/>
<def f='qtbase-6.5.0/src/corelib/text/qbytearray.cpp' l='3739' ll='3742' type='qlonglong QByteArray::toLongLong(bool * ok = nullptr, int base = 10) const'/>
<doc f='qtbase-6.5.0/src/corelib/text/qbytearray.cpp' l='3714'>/*!
    Returns the byte array converted to a \c {long long} using base \a base,
    which is ten by default. Bases 0 and 2 through 36 are supported, using
    letters for digits beyond 9; A is ten, B is eleven and so on.

    If \a base is 0, the base is determined automatically using the following
    rules: If the byte array begins with &quot;0x&quot;, it is assumed to be hexadecimal
    (base 16); otherwise, if it begins with &quot;0b&quot;, it is assumed to be binary
    (base 2); otherwise, if it begins with &quot;0&quot;, it is assumed to be octal
    (base 8); otherwise it is assumed to be decimal.

    Returns 0 if the conversion fails.

    If \a ok is not \nullptr, failure is reported by setting *\a{ok}
    to \c false, and success by setting *\a{ok} to \c true.

    \note The conversion of the number is performed in the default C locale,
    regardless of the user&apos;s locale. Use QLocale to perform locale-aware
    conversions between numbers and strings.

    \note Support for the &quot;0b&quot; prefix was added in Qt 6.4.

    \sa number()
*/</doc>
<use f='qtbase-6.5.0/src/network/access/qhsts.cpp' l='453' u='c' c='_ZN17QHstsHeaderParser16processDirectiveERK10QByteArrayS2_'/>
<use f='qtbase-6.5.0/src/network/access/qhttp2protocolhandler.cpp' l='1120' u='c' c='_ZN21QHttp2ProtocolHandler12updateStreamERN5Http26StreamERKSt6vectorIN5HPack11HeaderFieldESaIS5_EEN2Qt14ConnectionTypeE'/>
<use f='qtbase-6.5.0/src/network/access/qhttpnetworkreply.cpp' l='374' u='c' c='_ZN24QHttpNetworkReplyPrivate26removeAutoDecompressHeaderEv'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkdiskcache.cpp' l='162' u='c' c='_ZN17QNetworkDiskCache7prepareERK21QNetworkCacheMetaData'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkdiskcache.cpp' l='600' u='c' c='_ZNK10QCacheItem11canCompressEv'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyhttpimpl.cpp' l='544' u='c' c='_ZN28QNetworkReplyHttpImplPrivate22loadFromCacheIfAllowedER19QHttpNetworkRequest'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkrequest.cpp' l='1279' u='c' c='_ZL16parseHeaderValueN15QNetworkRequest12KnownHeadersERK10QByteArray'/>
