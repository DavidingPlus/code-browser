<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='8025' type='sqlite3_vfs * sqlite3_vfs_find(const char * zVfsName)'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='25210' ll='25229' type='sqlite3_vfs * sqlite3_vfs_find(const char * zVfs)'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='32735' u='c' c='sqlite3_randomness'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='52183' u='c' c='sqlite3MemdbInit'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='116700' u='c' c='attachFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='133057'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='177098' u='c' c='sqlite3ParseUri'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='177864' u='c' c='sqlite3_sleep'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='7996'>/*
** CAPI3REF: Virtual File System Objects
**
** A virtual filesystem (VFS) is an [sqlite3_vfs] object
** that SQLite uses to interact
** with the underlying operating system.  Most SQLite builds come with a
** single default VFS that is appropriate for the host computer.
** New VFSes can be registered and existing VFSes can be unregistered.
** The following interfaces are provided.
**
** ^The sqlite3_vfs_find() interface returns a pointer to a VFS given its name.
** ^Names are case sensitive.
** ^Names are zero-terminated UTF-8 strings.
** ^If there is no match, a NULL pointer is returned.
** ^If zVfsName is NULL then the default VFS is returned.
**
** ^New VFSes are registered with sqlite3_vfs_register().
** ^Each new VFS becomes the default VFS if the makeDflt flag is set.
** ^The same VFS can be registered multiple times without injury.
** ^To make an existing VFS into the default VFS, register it again
** with the makeDflt flag set.  If two different VFSes with the
** same name are registered, the behavior is undefined.  If a
** VFS is registered with a name that is NULL or an empty string,
** then the behavior is undefined.
**
** ^Unregister a VFS with the sqlite3_vfs_unregister() interface.
** ^(If the default VFS is unregistered, another VFS is chosen as
** the default.  The choice for the new VFS is arbitrary.)^
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='25206'>/*
** Locate a VFS by name.  If no name is given, simply return the
** first VFS on the list.
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='7719' type='sqlite3_vfs * sqlite3_vfs_find(const char * zVfsName)'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='7690'>/*
** CAPI3REF: Virtual File System Objects
**
** A virtual filesystem (VFS) is an [sqlite3_vfs] object
** that SQLite uses to interact
** with the underlying operating system.  Most SQLite builds come with a
** single default VFS that is appropriate for the host computer.
** New VFSes can be registered and existing VFSes can be unregistered.
** The following interfaces are provided.
**
** ^The sqlite3_vfs_find() interface returns a pointer to a VFS given its name.
** ^Names are case sensitive.
** ^Names are zero-terminated UTF-8 strings.
** ^If there is no match, a NULL pointer is returned.
** ^If zVfsName is NULL then the default VFS is returned.
**
** ^New VFSes are registered with sqlite3_vfs_register().
** ^Each new VFS becomes the default VFS if the makeDflt flag is set.
** ^The same VFS can be registered multiple times without injury.
** ^To make an existing VFS into the default VFS, register it again
** with the makeDflt flag set.  If two different VFSes with the
** same name are registered, the behavior is undefined.  If a
** VFS is registered with a name that is NULL or an empty string,
** then the behavior is undefined.
**
** ^Unregister a VFS with the sqlite3_vfs_unregister() interface.
** ^(If the default VFS is unregistered, another VFS is chosen as
** the default.  The choice for the new VFS is arbitrary.)^
*/</doc>
