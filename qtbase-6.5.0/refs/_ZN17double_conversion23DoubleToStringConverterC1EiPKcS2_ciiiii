<def f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.h' l='140' ll='164' type='void double_conversion::DoubleToStringConverter::DoubleToStringConverter(int flags, const char * infinity_symbol, const char * nan_symbol, char exponent_character, int decimal_in_shortest_low, int decimal_in_shortest_high, int max_leading_padding_zeroes_in_precision_mode, int max_trailing_padding_zeroes_in_precision_mode, int min_exponent_width = 0)'/>
<use f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.cc' l='44' u='c' c='_ZN17double_conversion23DoubleToStringConverter19EcmaScriptConverterEv'/>
<doc f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/double-to-string.h' l='84'>// Flags should be a bit-or combination of the possible Flags-enum.
  //  - NO_FLAGS: no special flags.
  //  - EMIT_POSITIVE_EXPONENT_SIGN: when the number is converted into exponent
  //    form, emits a &apos;+&apos; for positive exponents. Example: 1.2e+2.
  //  - EMIT_TRAILING_DECIMAL_POINT: when the input number is an integer and is
  //    converted into decimal format then a trailing decimal point is appended.
  //    Example: 2345.0 is converted to &quot;2345.&quot;.
  //  - EMIT_TRAILING_ZERO_AFTER_POINT: in addition to a trailing decimal point
  //    emits a trailing &apos;0&apos;-character. This flag requires the
  //    EMIT_TRAILING_DECIMAL_POINT flag.
  //    Example: 2345.0 is converted to &quot;2345.0&quot;.
  //  - UNIQUE_ZERO: &quot;-0.0&quot; is converted to &quot;0.0&quot;.
  //  - NO_TRAILING_ZERO: Trailing zeros are removed from the fractional portion
  //    of the result in precision mode. Matches printf&apos;s %g.
  //    When EMIT_TRAILING_ZERO_AFTER_POINT is also given, one trailing zero is
  //    preserved.
  //
  // Infinity symbol and nan_symbol provide the string representation for these
  // special values. If the string is NULL and the special value is encountered
  // then the conversion functions return false.
  //
  // The exponent_character is used in exponential representations. It is
  // usually &apos;e&apos; or &apos;E&apos;.
  //
  // When converting to the shortest representation the converter will
  // represent input numbers in decimal format if they are in the interval
  // [10^decimal_in_shortest_low; 10^decimal_in_shortest_high[
  //    (lower boundary included, greater boundary excluded).
  // Example: with decimal_in_shortest_low = -6 and
  //               decimal_in_shortest_high = 21:
  //   ToShortest(0.000001)  -&gt; &quot;0.000001&quot;
  //   ToShortest(0.0000001) -&gt; &quot;1e-7&quot;
  //   ToShortest(111111111111111111111.0)  -&gt; &quot;111111111111111110000&quot;
  //   ToShortest(100000000000000000000.0)  -&gt; &quot;100000000000000000000&quot;
  //   ToShortest(1111111111111111111111.0) -&gt; &quot;1.1111111111111111e+21&quot;
  //
  // When converting to precision mode the converter may add
  // max_leading_padding_zeroes before returning the number in exponential
  // format.
  // Example with max_leading_padding_zeroes_in_precision_mode = 6.
  //   ToPrecision(0.0000012345, 2) -&gt; &quot;0.0000012&quot;
  //   ToPrecision(0.00000012345, 2) -&gt; &quot;1.2e-7&quot;
  // Similarly the converter may add up to
  // max_trailing_padding_zeroes_in_precision_mode in precision mode to avoid
  // returning an exponential representation. A zero added by the
  // EMIT_TRAILING_ZERO_AFTER_POINT flag is counted for this limit.
  // Examples for max_trailing_padding_zeroes_in_precision_mode = 1:
  //   ToPrecision(230.0, 2) -&gt; &quot;230&quot;
  //   ToPrecision(230.0, 2) -&gt; &quot;230.&quot;  with EMIT_TRAILING_DECIMAL_POINT.
  //   ToPrecision(230.0, 2) -&gt; &quot;2.3e2&quot; with EMIT_TRAILING_ZERO_AFTER_POINT.
  //
  // The min_exponent_width is used for exponential representations.
  // The converter adds leading &apos;0&apos;s to the exponent until the exponent
  // is at least min_exponent_width digits long.
  // The min_exponent_width is clamped to 5.
  // As such, the exponent may never have more than 5 digits in total.</doc>
