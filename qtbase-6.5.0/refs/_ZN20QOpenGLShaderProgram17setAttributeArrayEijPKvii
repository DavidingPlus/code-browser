<dec f='qtbase-6.5.0/src/opengl/qopenglshaderprogram.h' l='150' type='void QOpenGLShaderProgram::setAttributeArray(int location, GLenum type, const void * values, int tupleSize, int stride = 0)'/>
<def f='qtbase-6.5.0/src/opengl/qopenglshaderprogram.cpp' l='1897' ll='1906' type='void QOpenGLShaderProgram::setAttributeArray(int location, GLenum type, const void * values, int tupleSize, int stride = 0)'/>
<use f='qtbase-6.5.0/src/opengl/qopenglshaderprogram.cpp' l='2018' u='c' c='_ZN20QOpenGLShaderProgram17setAttributeArrayEPKcjPKvii'/>
<doc f='qtbase-6.5.0/src/opengl/qopenglshaderprogram.cpp' l='1874'>/*!
    Sets an array of vertex \a values on the attribute at \a location
    in this shader program.  The \a stride indicates the number of bytes
    between vertices.  A default \a stride value of zero indicates that
    the vertices are densely packed in \a values.

    The \a type indicates the type of elements in the \a values array,
    usually \c{GL_FLOAT}, \c{GL_UNSIGNED_BYTE}, etc.  The \a tupleSize
    indicates the number of components per vertex: 1, 2, 3, or 4.

    The array will become active when enableAttributeArray() is called
    on the \a location.  Otherwise the value specified with
    setAttributeValue() for \a location will be used.

    The setAttributeBuffer() function can be used to set the attribute
    array to an offset within a vertex buffer.

    \note Normalization will be enabled. If this is not desired, call
    glVertexAttribPointer directly through QOpenGLFunctions.

    \sa setAttributeValue(), setUniformValue(), enableAttributeArray()
    \sa disableAttributeArray(), setAttributeBuffer()
*/</doc>
