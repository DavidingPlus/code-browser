<dec f='qtbase-6.5.0/src/gui/kernel/qguiapplication.h' l='131' type='static int QGuiApplication::exec()'/>
<def f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='1881' ll='1887' type='static int QGuiApplication::exec()'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='1858'>/*!
    Enters the main event loop and waits until exit() is called, and then
    returns the value that was set to exit() (which is 0 if exit() is called
    via quit()).

    It is necessary to call this function to start event handling. The main
    event loop receives events from the window system and dispatches these to
    the application widgets.

    Generally, no user interaction can take place before calling exec().

    To make your application perform idle processing, e.g., executing a special
    function whenever there are no pending events, use a QTimer with 0 timeout.
    More advanced idle processing schemes can be achieved using processEvents().

    We recommend that you connect clean-up code to the
    \l{QCoreApplication::}{aboutToQuit()} signal, instead of putting it in your
    application&apos;s \c{main()} function. This is because, on some platforms, the
    QApplication::exec() call may not return.

    \sa quitOnLastWindowClosed, quit(), exit(), processEvents(),
        QCoreApplication::exec()
*/</doc>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication.cpp' l='2564' u='c' c='_ZN12QApplication4execEv'/>
