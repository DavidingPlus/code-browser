<dec f='include/unicode/unistr.h' l='1646' type='int32_t icu_66::UnicodeString::extract(int32_t start, int32_t startLength, char * target, uint32_t targetLength, const char * codepage) const'/>
<use f='include/unicode/unistr.h' l='4486' u='c' c='_ZNK6icu_6613UnicodeString7extractEiiPcPKc'/>
<doc f='include/unicode/unistr.h' l='1617'>/**
   * Copy the characters in the range
   * [`start`, `start + length`) into an array of characters
   * in a specified codepage.
   * This function does not write any more than `targetLength`
   * characters but returns the length of the entire output string
   * so that one can allocate a larger buffer and call the function again
   * if necessary.
   * The output string is NUL-terminated if possible.
   *
   * Recommendation: For invariant-character strings use
   * extract(int32_t start, int32_t length, char *target, int32_t targetCapacity, enum EInvariant inv) const
   * because it avoids object code dependencies of UnicodeString on
   * the conversion code.
   *
   * @param start offset of first character which will be copied
   * @param startLength the number of characters to extract
   * @param target the target buffer for extraction
   * @param targetLength the length of the target buffer
   * @param codepage the desired codepage for the characters.  0 has
   * the special meaning of the default codepage
   * If `codepage` is an empty string (`&quot;&quot;`),
   * then a simple conversion is performed on the codepage-invariant
   * subset (&quot;invariant characters&quot;) of the platform encoding. See utypes.h.
   * If `target` is NULL, then the number of bytes required for
   * `target` is returned.
   * @return the output string length, not including the terminating NUL
   * @stable ICU 2.0
   */</doc>
