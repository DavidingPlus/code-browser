<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.h' l='257' c='_ZNK10QCborValue6toCborER17QCborStreamWriter6QFlagsINS_14EncodingOptionEE'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.h' l='395' c='_ZNK18QCborValueConstRef6toCborER17QCborStreamWriter6QFlagsIN10QCborValue14EncodingOptionEE'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.h' l='549' c='_ZN13QCborValueRef6toCborER17QCborStreamWriter6QFlagsIN10QCborValue14EncodingOptionEE'/>
<def f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.h' l='29' ll='85'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.h' l='35' c='_ZN17QCborStreamWriterC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.h' l='35' c='_ZN17QCborStreamWriteraSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.h' l='35' c='_ZN17QCborStreamWriteraSERKS_'/>
<size>8</size>
<fun r='_ZN17QCborStreamWriterC1EP9QIODevice'/>
<fun r='_ZN17QCborStreamWriterC1EP10QByteArray'/>
<fun r='_ZN17QCborStreamWriterD1Ev'/>
<fun r='_ZN17QCborStreamWriterC1ERKS_'/>
<fun r='_ZN17QCborStreamWriter9setDeviceEP9QIODevice'/>
<fun r='_ZNK17QCborStreamWriter6deviceEv'/>
<fun r='_ZN17QCborStreamWriter6appendEy'/>
<fun r='_ZN17QCborStreamWriter6appendEx'/>
<fun r='_ZN17QCborStreamWriter6appendE20QCborNegativeInteger'/>
<fun r='_ZN17QCborStreamWriter6appendERK10QByteArray'/>
<fun r='_ZN17QCborStreamWriter6appendE13QLatin1String'/>
<fun r='_ZN17QCborStreamWriter6appendE11QStringView'/>
<fun r='_ZN17QCborStreamWriter6appendE8QCborTag'/>
<fun r='_ZN17QCborStreamWriter6appendE14QCborKnownTags'/>
<fun r='_ZN17QCborStreamWriter6appendE15QCborSimpleType'/>
<fun r='_ZN17QCborStreamWriter6appendEDn'/>
<fun r='_ZN17QCborStreamWriter6appendE8qfloat16'/>
<fun r='_ZN17QCborStreamWriter6appendEf'/>
<fun r='_ZN17QCborStreamWriter6appendEd'/>
<fun r='_ZN17QCborStreamWriter16appendByteStringEPKcx'/>
<fun r='_ZN17QCborStreamWriter16appendTextStringEPKcx'/>
<fun r='_ZN17QCborStreamWriter6appendEb'/>
<fun r='_ZN17QCborStreamWriter10appendNullEv'/>
<fun r='_ZN17QCborStreamWriter15appendUndefinedEv'/>
<fun r='_ZN17QCborStreamWriter6appendEi'/>
<fun r='_ZN17QCborStreamWriter6appendEj'/>
<fun r='_ZN17QCborStreamWriter6appendEPKcx'/>
<fun r='_ZN17QCborStreamWriter10startArrayEv'/>
<fun r='_ZN17QCborStreamWriter10startArrayEy'/>
<fun r='_ZN17QCborStreamWriter8endArrayEv'/>
<fun r='_ZN17QCborStreamWriter8startMapEv'/>
<fun r='_ZN17QCborStreamWriter8startMapEy'/>
<fun r='_ZN17QCborStreamWriter6endMapEv'/>
<mbr r='QCborStreamWriter::d' o='0' t='QScopedPointer&lt;QCborStreamWriterPrivate&gt;'/>
<doc f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.cpp' l='42'>/*!
   \class QCborStreamWriter
   \inmodule QtCore
   \ingroup cbor
   \ingroup qtserialization
   \reentrant
   \since 5.12

   \brief The QCborStreamWriter class is a simple CBOR encoder operating on a
   one-way stream.

   This class can be used to quickly encode a stream of CBOR content directly
   to either a QByteArray or QIODevice. CBOR is the Concise Binary Object
   Representation, a very compact form of binary data encoding that is
   compatible with JSON. It was created by the IETF Constrained RESTful
   Environments (CoRE) WG, which has used it in many new RFCs. It is meant to
   be used alongside the \l{RFC 7252}{CoAP protocol}.

   QCborStreamWriter provides a StAX-like API, similar to that of
   \l{QXmlStreamWriter}. It is rather low-level and requires a bit of knowledge
   of CBOR encoding. For a simpler API, see \l{QCborValue} and especially the
   encoding function QCborValue::toCbor().

   The typical use of QCborStreamWriter is to create the object on the target
   QByteArray or QIODevice, then call one of the append() overloads with the
   desired type to be encoded. To create arrays and maps, QCborStreamWriter
   provides startArray() and startMap() overloads, which must be terminated by
   the corresponding endArray() and endMap() functions.

   The following example encodes the equivalent of this JSON content:

   \div{class=&quot;pre&quot;}
     {
       &quot;label&quot;: &quot;journald&quot;,
       &quot;autoDetect&quot;: false,
       &quot;condition&quot;: &quot;libs.journald&quot;,
       &quot;output&quot;: [ &quot;privateFeature&quot; ]
     }
   \enddiv

   \snippet code/src_corelib_serialization_qcborstream.cpp 1

   \section1 CBOR support

   QCborStreamWriter supports all CBOR features required to create canonical
   and strict streams. It implements almost all of the features specified in
   \l {RFC 7049}.

   The following table lists the CBOR features that QCborStreamWriter supports.

   \table
     \header \li Feature                        \li Support
     \row   \li Unsigned numbers                \li Yes (full range)
     \row   \li Negative numbers                \li Yes (full range)
     \row   \li Byte strings                    \li Yes
     \row   \li Text strings                    \li Yes
     \row   \li Chunked strings                 \li No
     \row   \li Tags                            \li Yes (arbitrary)
     \row   \li Booleans                        \li Yes
     \row   \li Null                            \li Yes
     \row   \li Undefined                       \li Yes
     \row   \li Arbitrary simple values         \li Yes
     \row   \li Half-precision float (16-bit)   \li Yes
     \row   \li Single-precision float (32-bit) \li Yes
     \row   \li Double-precision float (64-bit) \li Yes
     \row   \li Infinities and NaN floating point \li Yes
     \row   \li Determinate-length arrays and maps \li Yes
     \row   \li Indeterminate-length arrays and maps \li Yes
     \row   \li Map key types other than strings and integers \li Yes (arbitrary)
   \endtable

   \section2 Canonical CBOR encoding

   Canonical CBOR encoding is defined by
   \l{RFC 7049, section 3.9}{Section 3.9 of RFC
   7049}. Canonical encoding is not a requirement for Qt&apos;s CBOR decoding
   functionality, but it may be required for some protocols. In particular,
   protocols that require the ability to reproduce the same stream identically
   may require this.

   In order to be considered &quot;canonical&quot;, a CBOR stream must meet the
   following requirements:

   \list
     \li Integers must be as small as possible. QCborStreamWriter always
         does this (no user action is required and it is not possible
         to write overlong integers).
     \li Array, map and string lengths must be as short as possible. As
         above, QCborStreamWriter automatically does this.
     \li Arrays, maps and strings must use explicit length. QCborStreamWriter
         always does this for strings; for arrays and maps, be sure to call
         startArray() and startMap() overloads with explicit length.
     \li Keys in every map must be sorted in ascending order. QCborStreamWriter
         offers no help in this item: the developer must ensure that before
         calling append() for the map pairs.
     \li Floating point values should be as small as possible. QCborStreamWriter
         will not convert floating point values; it is up to the developer
         to perform this check prior to calling append() (see those functions&apos;
         examples).
   \endlist

   \section2 Strict CBOR mode

   Strict mode is defined by
   \l{RFC 7049, section 3.10}{Section 3.10 of RFC
   7049}. As for Canonical encoding above, QCborStreamWriter makes it possible
   to create strict CBOR streams, but does not require them or validate that
   the output is so.

   \list
     \li Keys in a map must be unique. QCborStreamWriter performs no validation
         of map keys.
     \li Tags may be required to be paired only with the correct types,
         according to their specification. QCborStreamWriter performs no
         validation of tag usage.
     \li Text Strings must be properly-encoded UTF-8. QCborStreamWriter always
         writes proper UTF-8 for strings added with append(), but performs no
         validation for strings added with appendTextString().
   \endlist

   \section2 Invalid CBOR stream

   It is also possible to misuse QCborStreamWriter and produce invalid CBOR
   streams that will fail to be decoded by a receiver. The following actions
   will produce invalid streams:

   \list
     \li Append a tag and not append the corresponding tagged value
         (QCborStreamWriter produces no diagnostic).
     \li Append too many or too few items to an array or map with explicit
         length (endMap() and endArray() will return false and
         QCborStreamWriter will log with qWarning()).
   \endlist

   \sa QCborStreamReader, QCborValue, QXmlStreamWriter
   \sa {Cbordump Example}, {Convert Example}, {JSON Save Game Example}
 */</doc>
<fun r='_ZN17QCborStreamWriterC1EP9QIODevice'/>
<fun r='_ZN17QCborStreamWriterC1EP10QByteArray'/>
<fun r='_ZN17QCborStreamWriterD1Ev'/>
<fun r='_ZN17QCborStreamWriter9setDeviceEP9QIODevice'/>
<fun r='_ZNK17QCborStreamWriter6deviceEv'/>
<fun r='_ZN17QCborStreamWriter6appendEy'/>
<fun r='_ZN17QCborStreamWriter6appendEx'/>
<fun r='_ZN17QCborStreamWriter6appendE20QCborNegativeInteger'/>
<fun r='_ZN17QCborStreamWriter6appendE17QLatin1StringView'/>
<fun r='_ZN17QCborStreamWriter6appendE11QStringView'/>
<fun r='_ZN17QCborStreamWriter6appendE8QCborTag'/>
<fun r='_ZN17QCborStreamWriter6appendE15QCborSimpleType'/>
<fun r='_ZN17QCborStreamWriter6appendEf'/>
<fun r='_ZN17QCborStreamWriter6appendEd'/>
<fun r='_ZN17QCborStreamWriter16appendByteStringEPKcx'/>
<fun r='_ZN17QCborStreamWriter16appendTextStringEPKcx'/>
<fun r='_ZN17QCborStreamWriter10startArrayEv'/>
<fun r='_ZN17QCborStreamWriter10startArrayEy'/>
<fun r='_ZN17QCborStreamWriter8endArrayEv'/>
<fun r='_ZN17QCborStreamWriter8startMapEv'/>
<fun r='_ZN17QCborStreamWriter8startMapEy'/>
<fun r='_ZN17QCborStreamWriter6endMapEv'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='862' c='_ZL17writeDoubleToCborR17QCborStreamWriterd6QFlagsIN10QCborValue14EncodingOptionEE'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='1337' c='_ZL12encodeToCborR17QCborStreamWriterPK21QCborContainerPrivatex6QFlagsIN10QCborValue14EncodingOptionEE'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='2522' c='_ZNK10QCborValue6toCborE6QFlagsINS_14EncodingOptionEE'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='2556' c='_ZNK10QCborValue6toCborER17QCborStreamWriter6QFlagsINS_14EncodingOptionEE'/>
<size>8</size>
