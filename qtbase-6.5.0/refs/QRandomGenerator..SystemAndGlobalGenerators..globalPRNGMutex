<dec f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='325' type='QBasicMutex'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='333' u='w' c='_ZN16QRandomGenerator25SystemAndGlobalGeneratorsC1Ev'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='385' u='m' c='_ZN16QRandomGenerator25SystemAndGlobalGenerators10PRNGLockerC1EPKS_'/>
<use f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='390' u='m' c='_ZN16QRandomGenerator25SystemAndGlobalGenerators10PRNGLockerD1Ev'/>
<offset>0</offset>
<doc f='qtbase-6.5.0/src/corelib/global/qrandom.cpp' l='314'>// Construction notes:
    // 1) The global PRNG state is in a different cacheline compared to the
    //    mutex that protects it. This avoids any false cacheline sharing of
    //    the state in case another thread tries to lock the mutex. It&apos;s not
    //    a common scenario, but since sizeof(QRandomGenerator) &gt;= 2560, the
    //    overhead is actually acceptable.
    // 2) We use both alignas(T) and alignas(64) because some implementations
    //    can&apos;t align to more than a primitive type&apos;s alignment.
    // 3) We don&apos;t store the entire system QRandomGenerator, only the space
    //    used by the QRandomGenerator::type member. This is fine because we
    //    (ab)use the common initial sequence exclusion to aliasing rules.</doc>
