<inh f='qtbase-6.5.0/src/corelib/kernel/qproperty.h' l='245' c='QPropertyObserver'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qproperty.h' l='871' ll='992'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qproperty.h' l='894' c='_ZN14QPropertyAliasC1EP14QPropertyAliasIT_E'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qproperty.h' l='926' c='_ZN14QPropertyAliasaSERKT_'/>
<fun r='_ZN14QPropertyAliasC1ERK14QPropertyAliasIT_E'/>
<fun r='_ZN14QPropertyAliasC1EO14QPropertyAliasIT_E'/>
<mbr r='QPropertyAlias::iface' t='const QtPrivate::QBindableInterface *'/>
<fun r='_ZN14QPropertyAliasC1EP9QPropertyIT_E'/>
<fun r='_ZN14QPropertyAliasC1EPTL0__'/>
<fun r='_ZN14QPropertyAliasC1EP14QPropertyAliasIT_E'/>
<fun r='_ZN14QPropertyAliasC1ERK9QBindableIT_E'/>
<fun r='_ZNK14QPropertyAlias5valueEv'/>
<fun r='_ZNK14QPropertyAliascvT_Ev'/>
<fun r='_ZN14QPropertyAlias8setValueERKT_'/>
<fun r='_ZN14QPropertyAliasaSERKT_'/>
<fun r='_ZN14QPropertyAlias10setBindingERK16QPropertyBindingIT_E'/>
<fun r='_ZN14QPropertyAlias10setBindingERK23QUntypedPropertyBinding'/>
<fun r='_ZN14QPropertyAlias10setBindingEOTL0__RK30QPropertyBindingSourceLocationPNSt9enable_ifIXsr3stdE14is_invocable_vIS0_EEvE4typeE'/>
<fun r='_ZNK14QPropertyAlias10hasBindingEv'/>
<fun r='_ZNK14QPropertyAlias7bindingEv'/>
<fun r='_ZN14QPropertyAlias11takeBindingEv'/>
<fun r='_ZN14QPropertyAlias14onValueChangedETL0__'/>
<fun r='_ZN14QPropertyAlias9subscribeETL0__'/>
<fun r='_ZN14QPropertyAlias11addNotifierETL0__'/>
<fun r='_ZNK14QPropertyAlias7isValidEv'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qproperty.cpp' l='1930'>/*!
  \class QPropertyAlias
  \inmodule QtCore
  \internal

  \brief The QPropertyAlias class is a safe alias for a QProperty with same
  template parameter.

  \ingroup tools

  QPropertyAlias\&lt;T\&gt; wraps a pointer to a QProperty\&lt;T\&gt; and automatically
  invalidates itself when the QProperty\&lt;T\&gt; is destroyed. It forwards all
  method invocations to the wrapped property. For example:

  \code
    QProperty&lt;QString&gt; *name = new QProperty&lt;QString&gt;(&quot;John&quot;);
    QProperty&lt;int&gt; age(41);

    QPropertyAlias&lt;QString&gt; nameAlias(name);
    QPropertyAlias&lt;int&gt; ageAlias(&amp;age);

    QProperty&lt;QString&gt; fullname;
    fullname.setBinding([&amp;]() { return nameAlias.value() + &quot; age: &quot; + QString::number(ageAlias.value()); });

    qDebug() &lt;&lt; fullname.value(); // Prints &quot;John age: 41&quot;

    *name = &quot;Emma&quot;; // Marks binding expression as dirty

    qDebug() &lt;&lt; fullname.value(); // Re-evaluates the binding expression and prints &quot;Emma age: 41&quot;

    // Birthday is coming up
    ageAlias.setValue(age.value() + 1); // Writes the age property through the alias

    qDebug() &lt;&lt; fullname.value(); // Re-evaluates the binding expression and prints &quot;Emma age: 42&quot;

    delete name; // Leaves the alias in an invalid, but accessible state
    nameAlias.setValue(&quot;Eve&quot;); // Ignored: nameAlias carries a default-constructed QString now

    ageAlias.setValue(92);
    qDebug() &lt;&lt; fullname.value(); // Re-evaluates the binding expression and prints &quot; age: 92&quot;
  \endcode
*/</doc>
