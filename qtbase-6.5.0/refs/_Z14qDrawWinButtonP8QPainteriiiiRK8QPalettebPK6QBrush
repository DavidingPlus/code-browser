<dec f='qtbase-6.5.0/src/widgets/styles/qdrawutil.h' l='52' type='void qDrawWinButton(QPainter * p, int x, int y, int w, int h, const QPalette &amp; pal, bool sunken = false, const QBrush * fill = nullptr)'/>
<def f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='500' ll='512' type='void qDrawWinButton(QPainter * p, int x, int y, int w, int h, const QPalette &amp; pal, bool sunken = false, const QBrush * fill = nullptr)'/>
<use f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='760' u='c' c='_Z14qDrawWinButtonP8QPainterRK5QRectRK8QPalettebPK6QBrush'/>
<doc f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='476'>/*!
    \fn void qDrawWinButton(QPainter *painter, int x, int y, int width, int height,
                     const QPalette &amp;palette, bool sunken,
                     const QBrush *fill)
    \relates &lt;qdrawutil.h&gt;

    Draws the Windows-style button specified by the given point (\a x,
    \a y}, \a width and \a height using the provided \a painter with a
    line width of 2 pixels. The button&apos;s interior is filled with the
    \a{fill} brush unless \a fill is \nullptr.

    The given \a palette specifies the shading colors (\l
    {QPalette::light()}{light}, \l {QPalette::dark()}{dark} and \l
    {QPalette::mid()}{middle} colors).

    The button appears sunken if \a sunken is true, otherwise raised.

    \warning This function does not look at QWidget::style() or
    QApplication::style()-&gt; Use the drawing functions in QStyle to make
    widgets that follow the current GUI style.

    \sa qDrawWinPanel(), QStyle
*/</doc>
