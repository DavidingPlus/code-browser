<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='6049' type='void * sqlite3_aggregate_context(sqlite3_context * , int nBytes)'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='88762' ll='88771' type='void * sqlite3_aggregate_context(sqlite3_context * p, int nByte)'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126396' u='c' c='sumStep'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126418' u='c' c='sumInverse'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126440' u='c' c='sumFinalize'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126453' u='c' c='avgFinalize'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126460' u='c' c='totalFinalize'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126482' u='c' c='countStep'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126498' u='c' c='countFinalize'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126504' u='c' c='countInverse'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126529' u='c' c='minmaxStep'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126560' u='c' c='minMaxValueFinalize'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126613' u='c' c='groupConcatStep'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126682' u='c' c='groupConcatInverse'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126721' u='c' c='groupConcatFinalize'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='126732' u='c' c='groupConcatValue'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='132872'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163824' u='c' c='row_numberStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163830' u='c' c='row_numberValueFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163856' u='c' c='dense_rankStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163863' u='c' c='dense_rankValueFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163888' u='c' c='nth_valueStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163925' u='c' c='nth_valueFinalizeFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163941' u='c' c='first_valueStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163953' u='c' c='first_valueFinalizeFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163975' u='c' c='rankStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163987' u='c' c='rankValueFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164008' u='c' c='percent_rankStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164021' u='c' c='percent_rankInvFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164026' u='c' c='percent_rankValueFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164053' u='c' c='cume_distStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164066' u='c' c='cume_distInvFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164071' u='c' c='cume_distValueFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164101' u='c' c='ntileStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164122' u='c' c='ntileInvFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164127' u='c' c='ntileValueFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164167' u='c' c='last_valueStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164186' u='c' c='last_valueInvFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164197' u='c' c='last_valueValueFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164204' u='c' c='last_valueFinalizeFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='200732' u='c' c='jsonArrayStep'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='200746' u='c' c='jsonArrayCompute'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='200793' u='c' c='jsonGroupInverse'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='200837' u='c' c='jsonObjectStep'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='200855' u='c' c='jsonObjectCompute'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='206619' u='c' c='geopolyBBoxStep'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='206637' u='c' c='geopolyBBoxFinal'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='6006'>/*
** CAPI3REF: Obtain Aggregate Function Context
** METHOD: sqlite3_context
**
** Implementations of aggregate SQL functions use this
** routine to allocate memory for storing their state.
**
** ^The first time the sqlite3_aggregate_context(C,N) routine is called
** for a particular aggregate function, SQLite allocates
** N bytes of memory, zeroes out that memory, and returns a pointer
** to the new memory. ^On second and subsequent calls to
** sqlite3_aggregate_context() for the same aggregate function instance,
** the same buffer is returned.  Sqlite3_aggregate_context() is normally
** called once for each invocation of the xStep callback and then one
** last time when the xFinal callback is invoked.  ^(When no rows match
** an aggregate query, the xStep() callback of the aggregate function
** implementation is never called and xFinal() is called exactly once.
** In those cases, sqlite3_aggregate_context() might be called for the
** first time from within xFinal().)^
**
** ^The sqlite3_aggregate_context(C,N) routine returns a NULL pointer
** when first called if N is less than or equal to zero or if a memory
** allocation error occurs.
**
** ^(The amount of space allocated by sqlite3_aggregate_context(C,N) is
** determined by the N parameter on first successful call.  Changing the
** value of N in any subsequent call to sqlite3_aggregate_context() within
** the same aggregate function instance will not resize the memory
** allocation.)^  Within the xFinal callback, it is customary to set
** N=0 in calls to sqlite3_aggregate_context(C,N) so that no
** pointless memory allocations occur.
**
** ^SQLite automatically frees the memory allocated by
** sqlite3_aggregate_context() when the aggregate query concludes.
**
** The first parameter must be a copy of the
** [sqlite3_context | SQL function context] that is the first parameter
** to the xStep or xFinal callback routine that implements the aggregate
** function.
**
** This routine must be called from the same thread in which
** the aggregate SQL function is running.
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='88757'>/*
** Allocate or return the aggregate context for a user function.  A new
** context is allocated on the first call.  Subsequent calls return the
** same context that was returned on prior calls.
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='5743' type='void * sqlite3_aggregate_context(sqlite3_context * , int nBytes)'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='5700'>/*
** CAPI3REF: Obtain Aggregate Function Context
** METHOD: sqlite3_context
**
** Implementations of aggregate SQL functions use this
** routine to allocate memory for storing their state.
**
** ^The first time the sqlite3_aggregate_context(C,N) routine is called
** for a particular aggregate function, SQLite allocates
** N bytes of memory, zeroes out that memory, and returns a pointer
** to the new memory. ^On second and subsequent calls to
** sqlite3_aggregate_context() for the same aggregate function instance,
** the same buffer is returned.  Sqlite3_aggregate_context() is normally
** called once for each invocation of the xStep callback and then one
** last time when the xFinal callback is invoked.  ^(When no rows match
** an aggregate query, the xStep() callback of the aggregate function
** implementation is never called and xFinal() is called exactly once.
** In those cases, sqlite3_aggregate_context() might be called for the
** first time from within xFinal().)^
**
** ^The sqlite3_aggregate_context(C,N) routine returns a NULL pointer
** when first called if N is less than or equal to zero or if a memory
** allocation error occurs.
**
** ^(The amount of space allocated by sqlite3_aggregate_context(C,N) is
** determined by the N parameter on first successful call.  Changing the
** value of N in any subsequent call to sqlite3_aggregate_context() within
** the same aggregate function instance will not resize the memory
** allocation.)^  Within the xFinal callback, it is customary to set
** N=0 in calls to sqlite3_aggregate_context(C,N) so that no
** pointless memory allocations occur.
**
** ^SQLite automatically frees the memory allocated by
** sqlite3_aggregate_context() when the aggregate query concludes.
**
** The first parameter must be a copy of the
** [sqlite3_context | SQL function context] that is the first parameter
** to the xStep or xFinal callback routine that implements the aggregate
** function.
**
** This routine must be called from the same thread in which
** the aggregate SQL function is running.
*/</doc>
