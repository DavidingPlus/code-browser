<dec f='qtbase-6.5.0/src/gui/kernel/qwindow.h' l='293' type='void QWindow::requestUpdate()'/>
<use f='qtbase-6.5.0/src/gui/kernel/qpaintdevicewindow.cpp' l='62' u='c' c='_ZN18QPaintDeviceWindow6updateERK5QRect'/>
<use f='qtbase-6.5.0/src/gui/kernel/qpaintdevicewindow.cpp' l='79' u='c' c='_ZN18QPaintDeviceWindow6updateERK7QRegion'/>
<use f='qtbase-6.5.0/src/gui/kernel/qwindow.cpp' l='554' u='c' c='_ZN14QWindowPrivate6createEby'/>
<def f='qtbase-6.5.0/src/gui/kernel/qwindow.cpp' l='2590' ll='2600' type='void QWindow::requestUpdate()'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qwindow.cpp' l='2565'>/*!
    Schedules a QEvent::UpdateRequest event to be delivered to this window.

    The event is delivered in sync with the display vsync on platforms
    where this is possible. Otherwise, the event is delivered after a
    delay of 5 ms. The additional time is there to give the event loop
    a bit of idle time to gather system events, and can be overridden
    using the QT_QPA_UPDATE_IDLE_TIME environment variable.

    When driving animations, this function should be called once after drawing
    has completed. Calling this function multiple times will result in a single
    event being delivered to the window.

    Subclasses of QWindow should reimplement event(), intercept the event and
    call the application&apos;s rendering code, then call the base class
    implementation.

    \note The subclass&apos; reimplementation of event() must invoke the base class
    implementation, unless it is absolutely sure that the event does not need to
    be handled by the base class. For example, the default implementation of
    this function relies on QEvent::Timer events. Filtering them away would
    therefore break the delivery of the update events.

    \since 5.5
*/</doc>
<use f='qtbase-6.5.0/src/platformsupport/input/evdevtouch/qevdevtouchhandler.cpp' l='864' u='c' c='_ZN30QEvdevTouchScreenHandlerThread24scheduleTouchPointUpdateEv'/>
