<dec f='qtbase-6.5.0/src/corelib/kernel/qmetaobject.h' l='34' type='const char * QMetaMethod::tag() const'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qmetaobject.cpp' l='2232' ll='2237' type='const char * QMetaMethod::tag() const'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qmetaobject.cpp' l='2207'>/*!
    Returns the tag associated with this method.

    Tags are special macros recognized by \c moc that make it
    possible to add extra information about a method.

    Tag information can be added in the following
    way in the function declaration:

    \snippet code/src_corelib_kernel_qmetaobject.cpp 10

    and the information can be accessed by using:

    \snippet code/src_corelib_kernel_qmetaobject.cpp 11

    For the moment, \c moc will extract and record all tags, but it will not
    handle any of them specially. You can use the tags to annotate your methods
    differently, and treat them according to the specific needs of your
    application.

    \note Since Qt 5.0, \c moc expands preprocessor macros, so it is necessary
    to surround the definition with \c #ifndef \c Q_MOC_RUN, as shown in the
    example above. This was not required in Qt 4. The code as shown above works
    with Qt 4 too.
*/</doc>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetaobjectbuilder.cpp' l='435' u='c' c='_ZN18QMetaObjectBuilder9addMethodERK11QMetaMethod'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetaobjectbuilder.cpp' l='507' u='c' c='_ZN18QMetaObjectBuilder14addConstructorERK11QMetaMethod'/>
<use f='qtbase-6.5.0/src/dbus/qdbusabstractinterface.cpp' l='445' u='c' c='_ZN22QDBusAbstractInterface20callWithArgumentListEN5QDBus8CallModeERK7QStringRK5QListI8QVariantE'/>
<use f='qtbase-6.5.0/src/dbus/qdbusintegrator.cpp' l='659' u='c' c='_ZL8findSlotPK11QMetaObjectRK10QByteArrayiRK7QStringR5QListI9QMetaTypeE'/>
<use f='qtbase-6.5.0/src/dbus/qdbusxmlgenerator.cpp' l='201' u='c' c='_ZL20generateInterfaceXmlPK11QMetaObjectiii'/>
