<use f='qtbase-6.5.0/src/corelib/kernel/qobjectdefs.h' l='579'/>
<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qtimer.h' l='19' ll='200'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer.h' l='180' c='_ZN6QTimerC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer.h' l='180' c='_ZN6QTimeraSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer.h' l='180' c='_ZN6QTimeraSERKS_'/>
<size>16</size>
<smbr r='QTimer::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK6QTimer10metaObjectEv'/>
<fun r='_ZN6QTimer11qt_metacastEPKc'/>
<fun r='_ZN6QTimer11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN6QTimer2trEPKcS1_i'/>
<fun r='_ZN6QTimer18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN6QTimerC1EP7QObject'/>
<fun r='_ZN6QTimerD1Ev'/>
<fun r='_ZNK6QTimer8isActiveEv'/>
<fun r='_ZN6QTimer14bindableActiveEv'/>
<fun r='_ZNK6QTimer7timerIdEv'/>
<fun r='_ZN6QTimer11setIntervalEi'/>
<fun r='_ZNK6QTimer8intervalEv'/>
<fun r='_ZN6QTimer16bindableIntervalEv'/>
<fun r='_ZNK6QTimer13remainingTimeEv'/>
<fun r='_ZN6QTimer12setTimerTypeEN2Qt9TimerTypeE'/>
<fun r='_ZNK6QTimer9timerTypeEv'/>
<fun r='_ZN6QTimer17bindableTimerTypeEv'/>
<fun r='_ZN6QTimer13setSingleShotEb'/>
<fun r='_ZNK6QTimer12isSingleShotEv'/>
<fun r='_ZN6QTimer18bindableSingleShotEv'/>
<fun r='_ZN6QTimer10singleShotEiPK7QObjectPKc'/>
<fun r='_ZN6QTimer10singleShotEiN2Qt9TimerTypeEPK7QObjectPKc'/>
<fun r='_ZN6QTimer10singleShotET_PKN9QtPrivate15FunctionPointerIT0_E6ObjectES3_'/>
<fun r='_ZN6QTimer10singleShotET_N2Qt9TimerTypeEPKN9QtPrivate15FunctionPointerIT0_E6ObjectES5_'/>
<fun r='_ZN6QTimer10singleShotET_T0_'/>
<fun r='_ZN6QTimer10singleShotET_N2Qt9TimerTypeET0_'/>
<fun r='_ZN6QTimer10singleShotET_PK7QObjectT0_'/>
<fun r='_ZN6QTimer10singleShotET_N2Qt9TimerTypeEPK7QObjectT0_'/>
<fun r='_ZN6QTimer13callOnTimeoutEDpOT_'/>
<fun r='_ZN6QTimer5startEi'/>
<fun r='_ZN6QTimer5startEv'/>
<fun r='_ZN6QTimer4stopEv'/>
<fun r='_ZN6QTimer7timeoutENS_14QPrivateSignalE'/>
<fun r='_ZN6QTimer11setIntervalENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE'/>
<fun r='_ZNK6QTimer18intervalAsDurationEv'/>
<fun r='_ZNK6QTimer23remainingTimeAsDurationEv'/>
<fun r='_ZN6QTimer10singleShotENSt6chrono8durationIlSt5ratioILl1ELl1000EEEEPK7QObjectPKc'/>
<fun r='_ZN6QTimer10singleShotENSt6chrono8durationIlSt5ratioILl1ELl1000EEEEN2Qt9TimerTypeEPK7QObjectPKc'/>
<fun r='_ZN6QTimer5startENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE'/>
<fun r='_ZN6QTimer10timerEventEP11QTimerEvent'/>
<fun r='_ZN6QTimerC1ERKS_'/>
<fun r='_ZN6QTimer6d_funcEv'/>
<fun r='_ZNK6QTimer6d_funcEv'/>
<fun r='_ZN6QTimer10startTimerEi'/>
<fun r='_ZN6QTimer9killTimerEi'/>
<fun r='_ZN6QTimer14defaultTypeForEi'/>
<fun r='_ZN6QTimer14singleShotImplEiN2Qt9TimerTypeEPK7QObjectPN9QtPrivate15QSlotObjectBaseE'/>
<fun r='_ZN6QTimer14defaultTypeForENSt6chrono8durationIlSt5ratioILl1ELl1000EEEE'/>
<fun r='_ZN6QTimer14singleShotImplENSt6chrono8durationIlSt5ratioILl1ELl1000EEEEN2Qt9TimerTypeEPK7QObjectPN9QtPrivate15QSlotObjectBaseE'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher_polling_p.h' l='84'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer_p.h' l='23' c='_ZN13QTimerPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer_p.h' l='23' c='_ZN13QTimerPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer_p.h' l='23' c='_ZNK13QTimerPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer_p.h' l='23' c='_ZNK13QTimerPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtimer_p.h' l='23'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/corelib/kernel/qtimer.cpp' l='17'>/*!
    \class QTimer
    \inmodule QtCore
    \brief The QTimer class provides repetitive and single-shot timers.

    \ingroup events


    The QTimer class provides a high-level programming interface for
    timers. To use it, create a QTimer, connect its timeout() signal
    to the appropriate slots, and call start(). From then on, it will
    emit the timeout() signal at constant intervals.

    Example for a one second (1000 millisecond) timer (from the
    \l{widgets/analogclock}{Analog Clock} example):

    \snippet ../widgets/widgets/analogclock/analogclock.cpp 4
    \snippet ../widgets/widgets/analogclock/analogclock.cpp 5
    \snippet ../widgets/widgets/analogclock/analogclock.cpp 6

    From then on, the \c update() slot is called every second.

    You can set a timer to time out only once by calling
    setSingleShot(true). You can also use the static
    QTimer::singleShot() function to call a slot after a specified
    interval:

    \snippet timers/timers.cpp 3

    In multithreaded applications, you can use QTimer in any thread
    that has an event loop. To start an event loop from a non-GUI
    thread, use QThread::exec(). Qt uses the timer&apos;s
    \l{QObject::thread()}{thread affinity} to determine which thread
    will emit the \l{QTimer::}{timeout()} signal. Because of this, you
    must start and stop the timer in its thread; it is not possible to
    start a timer from another thread.

    As a special case, a QTimer with a timeout of 0 will time out as soon as
    possible, though the ordering between zero timers and other sources of
    events is unspecified. Zero timers can be used to do some work while still
    providing a snappy user interface:

    \snippet timers/timers.cpp 4
    \snippet timers/timers.cpp 5
    \snippet timers/timers.cpp 6

    From then on, \c processOneThing() will be called repeatedly. It
    should be written in such a way that it always returns quickly
    (typically after processing one data item) so that Qt can deliver
    events to the user interface and stop the timer as soon as it has done all
    its work. This is the traditional way of implementing heavy work
    in GUI applications, but as multithreading is nowadays becoming available on
    more and more platforms, we expect that zero-millisecond
    QTimer objects will gradually be replaced by \l{QThread}s.

    \section1 Accuracy and Timer Resolution

    The accuracy of timers depends on the underlying operating system
    and hardware. Most platforms support a resolution of 1 millisecond,
    though the accuracy of the timer will not equal this resolution
    in many real-world situations.

    The accuracy also depends on the \l{Qt::TimerType}{timer type}. For
    Qt::PreciseTimer, QTimer will try to keep the accuracy at 1 millisecond.
    Precise timers will also never time out earlier than expected.

    For Qt::CoarseTimer and Qt::VeryCoarseTimer types, QTimer may wake up
    earlier than expected, within the margins for those types: 5% of the
    interval for Qt::CoarseTimer and 500 ms for Qt::VeryCoarseTimer.

    All timer types may time out later than expected if the system is busy or
    unable to provide the requested accuracy. In such a case of timeout
    overrun, Qt will emit timeout() only once, even if multiple timeouts have
    expired, and then will resume the original interval.

    \section1 Alternatives to QTimer

    An alternative to using QTimer is to call QObject::startTimer()
    for your object and reimplement the QObject::timerEvent() event
    handler in your class (which must inherit QObject). The
    disadvantage is that timerEvent() does not support such
    high-level features as single-shot timers or signals.

    Another alternative is QBasicTimer. It is typically less
    cumbersome than using QObject::startTimer()
    directly. See \l{Timers} for an overview of all three approaches.

    Some operating systems limit the number of timers that may be
    used; Qt tries to work around these limitations.

    \sa QBasicTimer, QTimerEvent, QObject::timerEvent(), Timers,
        {Analog Clock}, {Tetrix Example}
*/</doc>
<fun r='_ZN6QTimerC1EP7QObject'/>
<fun r='_ZN6QTimerD1Ev'/>
<fun r='_ZNK6QTimer8isActiveEv'/>
<fun r='_ZN6QTimer14bindableActiveEv'/>
<fun r='_ZNK6QTimer7timerIdEv'/>
<fun r='_ZN6QTimer5startEv'/>
<fun r='_ZN6QTimer5startEi'/>
<fun r='_ZN6QTimer4stopEv'/>
<fun r='_ZN6QTimer10timerEventEP11QTimerEvent'/>
<fun r='_ZN6QTimer14singleShotImplEiN2Qt9TimerTypeEPK7QObjectPN9QtPrivate15QSlotObjectBaseE'/>
<fun r='_ZN6QTimer10singleShotEiPK7QObjectPKc'/>
<fun r='_ZN6QTimer10singleShotEiN2Qt9TimerTypeEPK7QObjectPKc'/>
<fun r='_ZN6QTimer13setSingleShotEb'/>
<fun r='_ZNK6QTimer12isSingleShotEv'/>
<fun r='_ZN6QTimer18bindableSingleShotEv'/>
<fun r='_ZN6QTimer11setIntervalEi'/>
<fun r='_ZNK6QTimer8intervalEv'/>
<fun r='_ZN6QTimer16bindableIntervalEv'/>
<fun r='_ZNK6QTimer13remainingTimeEv'/>
<fun r='_ZN6QTimer12setTimerTypeEN2Qt9TimerTypeE'/>
<fun r='_ZNK6QTimer9timerTypeEv'/>
<fun r='_ZN6QTimer17bindableTimerTypeEv'/>
<use f='qtbase-6.5.0/src/gui/image/qmovie.cpp' l='236'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/itemmodels/qfilesystemmodel_p.h' l='260'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/platform/unix/dbustray/qdbustrayicon_p.h' l='126'/>
<size>16</size>
<use f='qtbase-6.5.0/src/network/access/qhttpnetworkconnection_p.h' l='217'/>
<size>16</size>
<use f='qtbase-6.5.0/src/network/socket/qabstractsocket_p.h' l='114'/>
<size>16</size>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyhttpimpl_p.h' l='208'/>
<size>16</size>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyhttpimpl.cpp' l='2012' c='_ZN28QNetworkReplyHttpImplPrivate20setupTransferTimeoutEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/network/socket/qabstractsocket.cpp' l='1055' c='_ZN22QAbstractSocketPrivate23_q_connectToNextAddressEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/network/socket/qlocalsocket_p.h' l='122'/>
<size>16</size>
<use f='qtbase-6.5.0/src/network/socket/qlocalsocket_unix.cpp' l='304' c='_ZN19QLocalSocketPrivate18_q_connectToSocketEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/opengl/qopenglcompositor_p.h' l='84'/>
<size>16</size>
<use f='qtbase-6.5.0/src/plugins/platforminputcontexts/ibus/qibusplatforminputcontext.h' l='88'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='48'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qprogressdialog.cpp' l='76' c='_ZN22QProgressDialogPrivate4initERK7QStringS2_ii'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qcombobox_p.h' l='191'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qeffects.cpp' l='57'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qeffects.cpp' l='337'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qstatusbar.cpp' l='53'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qstatusbar.cpp' l='497' c='_ZN10QStatusBar11showMessageERK7QStringi'/>
<size>16</size>
