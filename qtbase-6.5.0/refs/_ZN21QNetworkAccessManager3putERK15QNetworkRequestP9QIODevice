<dec f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.h' l='85' type='QNetworkReply * QNetworkAccessManager::put(const QNetworkRequest &amp; request, QIODevice * data)'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.cpp' l='855' u='c' c='_ZN21QNetworkAccessManager3putERK15QNetworkRequestP14QHttpMultiPart'/>
<def f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.cpp' l='879' ll='882' type='QNetworkReply * QNetworkAccessManager::put(const QNetworkRequest &amp; request, QIODevice * data)'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.cpp' l='896' u='c' c='_ZN21QNetworkAccessManager3putERK15QNetworkRequestRK10QByteArray'/>
<doc f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.cpp' l='860'>/*!
    Uploads the contents of \a data to the destination \a request and
    returns a new QNetworkReply object that will be open for reply.

    \a data must be opened for reading when this function is called
    and must remain valid until the finished() signal is emitted for
    this reply.

    Whether anything will be available for reading from the returned
    object is protocol dependent. For HTTP, the server may send a
    small HTML page indicating the upload was successful (or not).
    Other protocols will probably have content in their replies.

    \note For HTTP, this request will send a PUT request, which most servers
    do not allow. Form upload mechanisms, including that of uploading
    files through HTML forms, use the POST mechanism.

    \sa get(), post(), deleteResource(), sendCustomRequest()
*/</doc>
