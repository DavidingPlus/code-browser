<inh f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='233' c='QAbstractItemModel'/>
<def f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='451' ll='476'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='472' c='_ZN18QAbstractListModelC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='472' c='_ZN18QAbstractListModelaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='472' c='_ZN18QAbstractListModelaSERKS_'/>
<ovr f='qtbase-6.5.0/src/corelib/itemmodels/qstringlistmodel.h' l='14' c='QStringListModel'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qstringlistmodel.h' l='14'/>
<size>16</size>
<smbr r='QAbstractListModel::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK18QAbstractListModel10metaObjectEv'/>
<fun r='_ZN18QAbstractListModel11qt_metacastEPKc'/>
<fun r='_ZN18QAbstractListModel11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QAbstractListModel2trEPKcS1_i'/>
<fun r='_ZN18QAbstractListModel18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QAbstractListModelC1EP7QObject'/>
<fun r='_ZN18QAbstractListModelD1Ev'/>
<fun r='_ZNK18QAbstractListModel5indexEiiRK11QModelIndex'/>
<fun r='_ZNK18QAbstractListModel7siblingEiiRK11QModelIndex'/>
<fun r='_ZN18QAbstractListModel12dropMimeDataEPK9QMimeDataN2Qt10DropActionEiiRK11QModelIndex'/>
<fun r='_ZNK18QAbstractListModel5flagsERK11QModelIndex'/>
<fun r='_ZN18QAbstractListModelC1ER25QAbstractItemModelPrivateP7QObject'/>
<fun r='_ZN18QAbstractListModelC1ERKS_'/>
<fun r='_ZNK18QAbstractListModel6parentERK11QModelIndex'/>
<fun r='_ZNK18QAbstractListModel11columnCountERK11QModelIndex'/>
<fun r='_ZNK18QAbstractListModel11hasChildrenERK11QModelIndex'/>
<doc f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.cpp' l='3818'>/*!
    \class QAbstractListModel
    \inmodule QtCore
    \brief The QAbstractListModel class provides an abstract model that can be
    subclassed to create one-dimensional list models.

    \ingroup model-view

    QAbstractListModel provides a standard interface for models that represent
    their data as a simple non-hierarchical sequence of items. It is not used
    directly, but must be subclassed.

    Since the model provides a more specialized interface than
    QAbstractItemModel, it is not suitable for use with tree views; you will
    need to subclass QAbstractItemModel if you want to provide a model for
    that purpose. If you need to use a number of list models to manage data,
    it may be more appropriate to subclass QAbstractTableModel instead.

    Simple models can be created by subclassing this class and implementing
    the minimum number of required functions. For example, we could implement
    a simple read-only QStringList-based model that provides a list of strings
    to a QListView widget. In such a case, we only need to implement the
    rowCount() function to return the number of items in the list, and the
    data() function to retrieve items from the list.

    Since the model represents a one-dimensional structure, the rowCount()
    function returns the total number of items in the model. The columnCount()
    function is implemented for interoperability with all kinds of views, but
    by default informs views that the model contains only one column.

    \section1 Subclassing

    When subclassing QAbstractListModel, you must provide implementations
    of the rowCount() and data() functions. Well behaved models also provide
    a headerData() implementation.

    If your model is used within QML and requires roles other than the
    default ones provided by the roleNames() function, you must override it.

    For editable list models, you must also provide an implementation of
    setData(), and implement the flags() function so that it returns a value
    containing \l{Qt::ItemFlags}{Qt::ItemIsEditable}.

    Note that QAbstractListModel provides a default implementation of
    columnCount() that informs views that there is only a single column
    of items in this model.

    Models that provide interfaces to resizable list-like data structures
    can provide implementations of insertRows() and removeRows(). When
    implementing these functions, it is important to call the appropriate
    functions so that all connected views are aware of any changes:

    \list
    \li An insertRows() implementation must call beginInsertRows()
       \e before inserting new rows into the data structure, and it must
       call endInsertRows() \e{immediately afterwards}.
    \li A removeRows() implementation must call beginRemoveRows()
       \e before the rows are removed from the data structure, and it must
       call endRemoveRows() \e{immediately afterwards}.
    \endlist

    \note Some general guidelines for subclassing models are available in the
    \l{Model Subclassing Reference}.

    \sa {Model Classes}, {Model Subclassing Reference}, QAbstractItemView,
        QAbstractTableModel, {Item Views Puzzle Example}
*/</doc>
<fun r='_ZN18QAbstractListModelC1EP7QObject'/>
<fun r='_ZN18QAbstractListModelC1ER25QAbstractItemModelPrivateP7QObject'/>
<fun r='_ZN18QAbstractListModelD1Ev'/>
<fun r='_ZNK18QAbstractListModel5indexEiiRK11QModelIndex'/>
<fun r='_ZNK18QAbstractListModel6parentERK11QModelIndex'/>
<fun r='_ZNK18QAbstractListModel7siblingEiiRK11QModelIndex'/>
<fun r='_ZNK18QAbstractListModel5flagsERK11QModelIndex'/>
<fun r='_ZNK18QAbstractListModel11columnCountERK11QModelIndex'/>
<fun r='_ZNK18QAbstractListModel11hasChildrenERK11QModelIndex'/>
<fun r='_ZN18QAbstractListModel12dropMimeDataEPK9QMimeDataN2Qt10DropActionEiiRK11QModelIndex'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qstringlistmodel.cpp' l='59' c='_ZN16QStringListModelC1EP7QObject'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qstringlistmodel.cpp' l='69' c='_ZN16QStringListModelC1ERK5QListI7QStringEP7QObject'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfontdialog.cpp' l='41' c='_ZN13QFontListView14setCurrentItemEi'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/widgets/itemviews/qlistwidget_p.h' l='43' c='QListModel'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qlistwidget_p.h' l='43'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qlistwidget.cpp' l='27' c='_ZN10QListModelC1EP11QListWidget'/>
<size>16</size>
