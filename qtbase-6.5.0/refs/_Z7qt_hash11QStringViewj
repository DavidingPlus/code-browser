<dec f='qtbase-6.5.0/src/corelib/tools/qhashfunctions.h' l='160' type='uint qt_hash(QStringView key, uint chained = 0)'/>
<use f='qtbase-6.5.0/src/corelib/io/qresource.cpp' l='802' u='c' c='_ZNK13QResourceRoot8findNodeERK7QStringRK7QLocale'/>
<def f='qtbase-6.5.0/src/corelib/tools/qhash.cpp' l='1146' ll='1159' type='uint qt_hash(QStringView key, uint chained = 0)'/>
<doc f='qtbase-6.5.0/src/corelib/tools/qhash.cpp' l='1131'>/*!
    \internal

    Private copy of the implementation of the Qt 4 qHash algorithm for strings,
    (that is, QChar-based arrays, so all QString-like classes),
    to be used wherever the result is somehow stored or reused across multiple
    Qt versions. The public qHash implementation can change at any time,
    therefore one must not rely on the fact that it will always give the same
    results.

    The qt_hash functions must *never* change their results.

    This function can hash discontiguous memory by invoking it on each chunk,
    passing the previous&apos;s result in the next call&apos;s \a chained argument.
*/</doc>
<use f='qtbase-6.5.0/src/tools/rcc/rcc.cpp' l='382' u='c' c='_ZN11RCCFileInfo13writeDataNameER18RCCResourceLibraryx'/>
<use f='qtbase-6.5.0/src/tools/rcc/rcc.cpp' l='1212' u='c' c='_ZNK19qt_rcc_compare_hashclEPK11RCCFileInfoS2_'/>
<use f='qtbase-6.5.0/src/tools/rcc/rcc.cpp' l='1212' u='c' c='_ZNK19qt_rcc_compare_hashclEPK11RCCFileInfoS2_'/>
