<dec f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.h' l='72' type='void QNetworkAccessManager::setCookieJar(QNetworkCookieJar * cookieJar)'/>
<def f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.cpp' l='615' ll='626' type='void QNetworkAccessManager::setCookieJar(QNetworkCookieJar * cookieJar)'/>
<doc f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.cpp' l='586'>/*!
    Sets the manager&apos;s cookie jar to be the \a cookieJar specified.
    The cookie jar is used by all requests dispatched by the manager.

    Use this function to set the cookie jar object to a class that
    implements additional features, like saving the cookies to permanent
    storage.

    \note QNetworkAccessManager takes ownership of the \a cookieJar object.

    If \a cookieJar is in the same thread as this QNetworkAccessManager,
    it will set the parent of the \a cookieJar
    so that the cookie jar is deleted when this
    object is deleted as well. If you want to share cookie jars
    between different QNetworkAccessManager objects, you may want to
    set the cookie jar&apos;s parent to 0 after calling this function.

    QNetworkAccessManager by default does not implement any cookie
    policy of its own: it accepts all cookies sent by the server, as
    long as they are well formed and meet the minimum security
    requirements (cookie domain matches the request&apos;s and cookie path
    matches the request&apos;s). In order to implement your own security
    policy, override the QNetworkCookieJar::cookiesForUrl() and
    QNetworkCookieJar::setCookiesFromUrl() virtual functions. Those
    functions are called by QNetworkAccessManager when it detects a
    new cookie.

    \sa cookieJar(), QNetworkCookieJar::cookiesForUrl(), QNetworkCookieJar::setCookiesFromUrl()
*/</doc>
