<def f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='20' ll='72'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='41' c='_ZN18QNetworkProxyQueryC1ERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='42' c='_ZN18QNetworkProxyQueryaSEOS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='42' c='_ZN18QNetworkProxyQueryaSEOS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='43' c='_ZN18QNetworkProxyQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='43' c='_ZN18QNetworkProxyQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='46' c='_ZN18QNetworkProxyQuery4swapERS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='48' c='_ZNK18QNetworkProxyQueryeqERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='49' c='_ZNK18QNetworkProxyQueryneERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='74'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='74'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='74'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='74'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='74'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='74' c='_Z4swapR18QNetworkProxyQueryS0_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='74' c='_Z4swapR18QNetworkProxyQueryS0_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='161' c='_ZN20QNetworkProxyFactory10queryProxyERK18QNetworkProxyQuery'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='161' c='_ZN20QNetworkProxyFactory10queryProxyERK18QNetworkProxyQuery'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='166' c='_ZN20QNetworkProxyFactory13proxyForQueryERK18QNetworkProxyQuery'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='167' c='_ZN20QNetworkProxyFactory19systemProxyForQueryERK18QNetworkProxyQuery'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='167' c='_ZN20QNetworkProxyFactory19systemProxyForQueryERK18QNetworkProxyQuery'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.h' l='172' c='_Zls6QDebugRK18QNetworkProxyQuery'/>
<size>8</size>
<smbr r='QNetworkProxyQuery::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZN18QNetworkProxyQuery26qt_check_for_QGADGET_macroEv'/>
<fun r='_ZN18QNetworkProxyQuery18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QNetworkProxyQueryC1Ev'/>
<fun r='_ZN18QNetworkProxyQueryC1ERK4QUrlNS_9QueryTypeE'/>
<fun r='_ZN18QNetworkProxyQueryC1ERK7QStringiS2_NS_9QueryTypeE'/>
<fun r='_ZN18QNetworkProxyQueryC1EtRK7QStringNS_9QueryTypeE'/>
<fun r='_ZN18QNetworkProxyQueryC1ERKS_'/>
<fun r='_ZN18QNetworkProxyQueryaSEOS_'/>
<fun r='_ZN18QNetworkProxyQueryaSERKS_'/>
<fun r='_ZN18QNetworkProxyQueryD1Ev'/>
<fun r='_ZN18QNetworkProxyQuery4swapERS_'/>
<fun r='_ZNK18QNetworkProxyQueryeqERKS_'/>
<fun r='_ZNK18QNetworkProxyQueryneERKS_'/>
<fun r='_ZNK18QNetworkProxyQuery9queryTypeEv'/>
<fun r='_ZN18QNetworkProxyQuery12setQueryTypeENS_9QueryTypeE'/>
<fun r='_ZNK18QNetworkProxyQuery8peerPortEv'/>
<fun r='_ZN18QNetworkProxyQuery11setPeerPortEi'/>
<fun r='_ZNK18QNetworkProxyQuery12peerHostNameEv'/>
<fun r='_ZN18QNetworkProxyQuery15setPeerHostNameERK7QString'/>
<fun r='_ZNK18QNetworkProxyQuery9localPortEv'/>
<fun r='_ZN18QNetworkProxyQuery12setLocalPortEi'/>
<fun r='_ZNK18QNetworkProxyQuery11protocolTagEv'/>
<fun r='_ZN18QNetworkProxyQuery14setProtocolTagERK7QString'/>
<fun r='_ZNK18QNetworkProxyQuery3urlEv'/>
<fun r='_ZN18QNetworkProxyQuery6setUrlERK4QUrl'/>
<mbr r='QNetworkProxyQuery::d' o='0' t='QSharedDataPointer&lt;QNetworkProxyQueryPrivate&gt;'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager_p.h' l='87' c='_ZN28QNetworkAccessManagerPrivate10queryProxyERK18QNetworkProxyQuery'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend.cpp' l='305' c='_ZN21QNetworkAccessBackend5startEv'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessmanager.cpp' l='1584' c='_ZN28QNetworkAccessManagerPrivate10queryProxyERK18QNetworkProxyQuery'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyhttpimpl.cpp' l='642' c='_ZN28QNetworkReplyHttpImplPrivate11postRequestERK15QNetworkRequest'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='298' c='_ZN19QGlobalNetworkProxy16applicationProxyEv'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='301' c='_ZN19QGlobalNetworkProxy13proxyForQueryERK18QNetworkProxyQuery'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='316' c='_ZN19QGlobalNetworkProxy13proxyForQueryERK18QNetworkProxyQuery'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='1096' c='_ZN18QNetworkProxyQueryC1ERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='1112' c='_ZN18QNetworkProxyQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='1112' c='_ZN18QNetworkProxyQueryaSERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='1130' c='_ZNK18QNetworkProxyQueryeqERKS_'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='1506' c='_ZN20QNetworkProxyFactory13proxyForQueryERK18QNetworkProxyQuery'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='1563' c='_Zls6QDebugRK18QNetworkProxyQuery'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/network/kernel/qnetworkproxy.cpp' l='901'>/*!
    \class QNetworkProxyQuery
    \since 4.5
    \ingroup shared
    \inmodule QtNetwork
    \brief The QNetworkProxyQuery class is used to query the proxy
    settings for a socket.

    QNetworkProxyQuery holds the details of a socket being created or
    request being made. It is used by QNetworkProxy and
    QNetworkProxyFactory to allow applications to have a more
    fine-grained control over which proxy servers are used, depending
    on the details of the query. This allows an application to apply
    different settings, according to the protocol or destination
    hostname, for instance.

    QNetworkProxyQuery supports the following criteria for selecting
    the proxy:

    \list
      \li the type of query
      \li the local port number to use
      \li the destination host name
      \li the destination port number
      \li the protocol name, such as &quot;http&quot; or &quot;ftp&quot;
      \li the URL being requested
    \endlist

    The destination host name is the host in the connection in the
    case of outgoing connection sockets. It is the \c hostName
    parameter passed to QTcpSocket::connectToHost() or the host
    component of a URL requested with QNetworkRequest.

    The destination port number is the requested port to connect to in
    the case of outgoing sockets, while the local port number is the
    port the socket wishes to use locally before attempting the
    external connection. In most cases, the local port number is used
    by listening sockets only (QTcpSocket) or by datagram sockets
    (QUdpSocket).

    The protocol name is an arbitrary string that indicates the type
    of connection being attempted. For example, it can match the
    scheme of a URL, like &quot;http&quot;, &quot;https&quot; and &quot;ftp&quot;. In most cases,
    the proxy selection will not change depending on the protocol, but
    this information is provided in case a better choice can be made,
    like choosing an caching HTTP proxy for HTTP-based connections,
    but a more powerful SOCKSv5 proxy for all others.

    Some of the criteria may not make sense in all of the types of
    query. The following table lists the criteria that are most
    commonly used, according to the type of query.

    \table
    \header
      \li Query type
      \li Description

    \row
      \li TcpSocket
      \li Normal sockets requesting a connection to a remote server,
         like QTcpSocket. The peer hostname and peer port match the
         values passed to QTcpSocket::connectToHost(). The local port
         is usually -1, indicating the socket has no preference in
         which port should be used. The URL component is not used.

    \row
      \li UdpSocket
      \li Datagram-based sockets, which can both send and
         receive. The local port, remote host or remote port fields
         can all be used or be left unused, depending on the
         characteristics of the socket. The URL component is not used.

    \row
      \li SctpSocket
      \li Message-oriented sockets requesting a connection to a remote
         server. The peer hostname and peer port match the values passed
         to QSctpSocket::connectToHost(). The local port is usually -1,
         indicating the socket has no preference in which port should be
         used. The URL component is not used.

    \row
      \li TcpServer
      \li Passive server sockets that listen on a port and await
         incoming connections from the network. Normally, only the
         local port is used, but the remote address could be used in
         specific circumstances, for example to indicate which remote
         host a connection is expected from. The URL component is not used.

    \row
      \li UrlRequest
      \li A more high-level request, such as those coming from
         QNetworkAccessManager. These requests will inevitably use an
         outgoing TCP socket, but the this query type is provided to
         indicate that more detailed information is present in the URL
         component. For ease of implementation, the URL&apos;s host and
         port are set as the destination address.

    \row
      \li SctpServer
      \li Passive server sockets that listen on an SCTP port and await
         incoming connections from the network. Normally, only the
         local port is used, but the remote address could be used in
         specific circumstances, for example to indicate which remote
         host a connection is expected from. The URL component is not used.
    \endtable

    It should be noted that any of the criteria may be missing or
    unknown (an empty QString for the hostname or protocol name, -1
    for the port numbers). If that happens, the functions executing
    the query should make their best guess or apply some
    implementation-defined default values.

    \sa QNetworkProxy, QNetworkProxyFactory, QNetworkAccessManager,
        QAbstractSocket::setProxy()
*/</doc>
<fun r='_ZN18QNetworkProxyQueryC1Ev'/>
<fun r='_ZN18QNetworkProxyQueryC1ERK4QUrlNS_9QueryTypeE'/>
<fun r='_ZN18QNetworkProxyQueryC1ERK7QStringiS2_NS_9QueryTypeE'/>
<fun r='_ZN18QNetworkProxyQueryC1EtRK7QStringNS_9QueryTypeE'/>
<fun r='_ZN18QNetworkProxyQueryC1ERKS_'/>
<fun r='_ZN18QNetworkProxyQueryD1Ev'/>
<fun r='_ZN18QNetworkProxyQueryaSERKS_'/>
<fun r='_ZNK18QNetworkProxyQueryeqERKS_'/>
<fun r='_ZNK18QNetworkProxyQuery9queryTypeEv'/>
<fun r='_ZN18QNetworkProxyQuery12setQueryTypeENS_9QueryTypeE'/>
<fun r='_ZNK18QNetworkProxyQuery8peerPortEv'/>
<fun r='_ZN18QNetworkProxyQuery11setPeerPortEi'/>
<fun r='_ZNK18QNetworkProxyQuery12peerHostNameEv'/>
<fun r='_ZN18QNetworkProxyQuery15setPeerHostNameERK7QString'/>
<fun r='_ZNK18QNetworkProxyQuery9localPortEv'/>
<fun r='_ZN18QNetworkProxyQuery12setLocalPortEi'/>
<fun r='_ZNK18QNetworkProxyQuery11protocolTagEv'/>
<fun r='_ZN18QNetworkProxyQuery14setProtocolTagERK7QString'/>
<fun r='_ZNK18QNetworkProxyQuery3urlEv'/>
<fun r='_ZN18QNetworkProxyQuery6setUrlERK4QUrl'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy_generic.cpp' l='20' c='_ZL14ignoreProxyForRK18QNetworkProxyQuery'/>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkproxy_generic.cpp' l='59' c='_ZN20QNetworkProxyFactory19systemProxyForQueryERK18QNetworkProxyQuery'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/socket/qabstractsocket.cpp' l='829' c='_ZN22QAbstractSocketPrivate12resolveProxyERK7QStringt'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/socket/qnativesocketengine.cpp' l='362' c='_ZN26QNativeSocketEnginePrivate10checkProxyERK12QHostAddress'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/socket/qtcpserver.cpp' l='128' c='_ZN17QTcpServerPrivate12resolveProxyERK12QHostAddresst'/>
<size>8</size>
