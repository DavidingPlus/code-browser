<dec f='qtbase-6.5.0/src/opengl/qopenglframebufferobject.h' l='53' type='void QOpenGLFramebufferObject::addColorAttachment(const QSize &amp; size, GLenum internalFormat = 0)'/>
<def f='qtbase-6.5.0/src/opengl/qopenglframebufferobject.cpp' l='1055' ll='1074' type='void QOpenGLFramebufferObject::addColorAttachment(const QSize &amp; size, GLenum internalFormat = 0)'/>
<use f='qtbase-6.5.0/src/opengl/qopenglframebufferobject.cpp' l='1087' u='c' c='_ZN24QOpenGLFramebufferObject18addColorAttachmentEiij'/>
<doc f='qtbase-6.5.0/src/opengl/qopenglframebufferobject.cpp' l='1026'>/*!
    Creates and attaches an additional texture or renderbuffer of \a size width
    and height.

    There is always an attachment at GL_COLOR_ATTACHMENT0. Call this function
    to set up additional attachments at GL_COLOR_ATTACHMENT1,
    GL_COLOR_ATTACHMENT2, ...

    When \a internalFormat is not \c 0, it specifies the internal format of the
    texture or renderbuffer. Otherwise a default of GL_RGBA or GL_RGBA8 is
    used.

    \note This is only functional when multiple render targets are supported by
    the OpenGL implementation. When that is not the case, the function will not
    add any additional color attachments. Call
    QOpenGLFunctions::hasOpenGLFeature() with
    QOpenGLFunctions::MultipleRenderTargets at runtime to check if MRT is
    supported.

    \note The internal format of the color attachments may differ but there may
    be limitations on the supported combinations, depending on the drivers.

    \note The size of the color attachments may differ but rendering is limited
    to the area that fits all the attachments, according to the OpenGL
    specification. Some drivers may not be fully conformant in this respect,
    however.

    \since 5.6
 */</doc>
