<dec f='qtbase-6.5.0/src/gui/kernel/qdrag.h' l='42' type='Qt::DropAction QDrag::exec(Qt::DropActions supportedActions, Qt::DropAction defaultAction)'/>
<use f='qtbase-6.5.0/src/gui/kernel/qdrag.cpp' l='201' u='c' c='_ZN5QDrag4execE6QFlagsIN2Qt10DropActionEE'/>
<def f='qtbase-6.5.0/src/gui/kernel/qdrag.cpp' l='223' ll='251' type='Qt::DropAction QDrag::exec(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction)'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qdrag.cpp' l='204'>/*!
    \since 4.3

    Starts the drag and drop operation and returns a value indicating the requested
    drop action when it is completed. The drop actions that the user can choose
    from are specified in \a supportedActions.

    The \a defaultDropAction determines which action will be proposed when the user performs a
    drag without using modifier keys.

    \b{Note:} On Linux and \macos, the drag and drop operation
    can take some time, but this function does not block the event
    loop. Other events are still delivered to the application while
    the operation is performed. On Windows, the Qt event loop is
    blocked during the operation. However, QDrag::exec() on
    Windows causes processEvents() to be called frequently to keep the GUI responsive.
    If any loops or operations are called while a drag operation is active, it will block the drag operation.
*/</doc>
<use f='qtbase-6.5.0/src/widgets/itemviews/qabstractitemview.cpp' l='3826' u='c' c='_ZN17QAbstractItemView9startDragE6QFlagsIN2Qt10DropActionEE'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qlistview.cpp' l='2905' u='c' c='_ZN17QIconModeViewBase15filterStartDragE6QFlagsIN2Qt10DropActionEE'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qwidgettextcontrol.cpp' l='521' u='c' c='_ZN25QWidgetTextControlPrivate9startDragEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qwidgettextcontrol.cpp' l='523' u='c' c='_ZN25QWidgetTextControlPrivate9startDragEv'/>
