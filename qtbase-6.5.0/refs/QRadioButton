<inh f='qtbase-6.5.0/src/widgets/widgets/qabstractbutton.h' l='22' c='QAbstractButton'/>
<def f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.h' l='18' ll='42'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.h' l='40' c='_ZN12QRadioButtonC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.h' l='40' c='_ZN12QRadioButtonaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.h' l='40' c='_ZN12QRadioButtonaSERKS_'/>
<size>40</size>
<smbr r='QRadioButton::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK12QRadioButton10metaObjectEv'/>
<fun r='_ZN12QRadioButton11qt_metacastEPKc'/>
<fun r='_ZN12QRadioButton11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN12QRadioButton2trEPKcS1_i'/>
<fun r='_ZN12QRadioButton18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN12QRadioButtonC1EP7QWidget'/>
<fun r='_ZN12QRadioButtonC1ERK7QStringP7QWidget'/>
<fun r='_ZN12QRadioButtonD1Ev'/>
<fun r='_ZNK12QRadioButton8sizeHintEv'/>
<fun r='_ZNK12QRadioButton15minimumSizeHintEv'/>
<fun r='_ZN12QRadioButton5eventEP6QEvent'/>
<fun r='_ZNK12QRadioButton9hitButtonERK6QPoint'/>
<fun r='_ZN12QRadioButton10paintEventEP11QPaintEvent'/>
<fun r='_ZN12QRadioButton14mouseMoveEventEP11QMouseEvent'/>
<fun r='_ZNK12QRadioButton15initStyleOptionEP18QStyleOptionButton'/>
<fun r='_ZN12QRadioButton6d_funcEv'/>
<fun r='_ZNK12QRadioButton6d_funcEv'/>
<fun r='_ZN12QRadioButtonC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/accessible/simplewidgets.cpp' l='180' c='_ZNK17QAccessibleButton4rectEv'/>
<use f='qtbase-6.5.0/src/widgets/accessible/simplewidgets.cpp' l='180' c='_ZNK17QAccessibleButton4rectEv'/>
<size>40</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qgroupbox.cpp' l='405' c='_ZN16QGroupBoxPrivate11_q_fixFocusEN2Qt11FocusReasonE'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qgroupbox.cpp' l='405' c='_ZN16QGroupBoxPrivate11_q_fixFocusEN2Qt11FocusReasonE'/>
<size>40</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.cpp' l='21' c='_ZN19QRadioButtonPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.cpp' l='21' c='_ZN19QRadioButtonPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.cpp' l='21' c='_ZNK19QRadioButtonPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.cpp' l='21' c='_ZNK19QRadioButtonPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.cpp' l='21'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.cpp' l='34' c='_ZN19QRadioButtonPrivate4initEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.cpp' l='117' c='_ZN12QRadioButtonC1ERK7QStringP7QWidget'/>
<size>40</size>
<doc f='qtbase-6.5.0/src/widgets/widgets/qradiobutton.cpp' l='43'>/*!
    \class QRadioButton
    \brief The QRadioButton widget provides a radio button with a text label.

    \ingroup basicwidgets
    \inmodule QtWidgets

    \image windows-radiobutton.png

    A QRadioButton is an option button that can be switched on (checked) or
    off (unchecked). Radio buttons typically present the user with a &quot;one
    of many&quot; choice. In a group of radio buttons, only one radio button at
    a time can be checked; if the user selects another button, the
    previously selected button is switched off.

    Radio buttons are autoExclusive by default. If auto-exclusive is
    enabled, radio buttons that belong to the same parent widget
    behave as if they were part of the same exclusive button group. If
    you need multiple exclusive button groups for radio buttons that
    belong to the same parent widget, put them into a QButtonGroup.

    Whenever a button is switched on or off, it emits the toggled() signal.
    Connect to this signal if you want to trigger an action each time the
    button changes state. Use isChecked() to see if a particular button is
    selected.

    Just like QPushButton, a radio button displays text, and
    optionally a small icon. The icon is set with setIcon(). The text
    can be set in the constructor or with setText(). A shortcut key
    can be specified by preceding the preferred character with an
    ampersand in the text. For example:

    \snippet code/src_gui_widgets_qradiobutton.cpp 0

    In this example the shortcut is \e{Alt+c}. See the \l
    {QShortcut#mnemonic}{QShortcut} documentation for details. To
    display an actual ampersand, use &apos;&amp;&amp;&apos;.

    Important inherited members: text(), setText(), text(),
    setDown(), isDown(), autoRepeat(), group(), setAutoRepeat(),
    toggle(), pressed(), released(), clicked(), and toggled().

    \sa QPushButton, QToolButton, QCheckBox, {Group Box Example}
*/</doc>
<fun r='_ZN12QRadioButtonC1EP7QWidget'/>
<fun r='_ZN12QRadioButtonD1Ev'/>
<fun r='_ZN12QRadioButtonC1ERK7QStringP7QWidget'/>
<fun r='_ZNK12QRadioButton15initStyleOptionEP18QStyleOptionButton'/>
<fun r='_ZNK12QRadioButton8sizeHintEv'/>
<fun r='_ZNK12QRadioButton15minimumSizeHintEv'/>
<fun r='_ZNK12QRadioButton9hitButtonERK6QPoint'/>
<fun r='_ZN12QRadioButton14mouseMoveEventEP11QMouseEvent'/>
<fun r='_ZN12QRadioButton10paintEventEP11QPaintEvent'/>
<fun r='_ZN12QRadioButton5eventEP6QEvent'/>
