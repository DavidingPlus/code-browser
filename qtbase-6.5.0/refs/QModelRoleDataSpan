<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='61'/>
<def f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='65' ll='116'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='118'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='118'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='118'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='118'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='118'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='139' c='_ZNK11QModelIndex9multiDataE18QModelRoleDataSpan'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='202' c='_ZNK21QPersistentModelIndex9multiDataE18QModelRoleDataSpan'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='328' c='_ZNK18QAbstractItemModel9multiDataERK11QModelIndex18QModelRoleDataSpan'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='495' c='_ZNK11QModelIndex9multiDataE18QModelRoleDataSpan'/>
<size>16</size>
<mbr r='QModelRoleDataSpan::m_modelRoleData' o='0' t='QModelRoleData *'/>
<mbr r='QModelRoleDataSpan::m_len' o='64' t='qsizetype'/>
<fun r='_ZN18QModelRoleDataSpanC1Ev'/>
<fun r='_ZN18QModelRoleDataSpanC1ER14QModelRoleData'/>
<fun r='_ZN18QModelRoleDataSpanC1EP14QModelRoleDatax'/>
<fun r='_ZN18QModelRoleDataSpanC1ERT_'/>
<fun r='_ZNK18QModelRoleDataSpan4sizeEv'/>
<fun r='_ZNK18QModelRoleDataSpan6lengthEv'/>
<fun r='_ZNK18QModelRoleDataSpan4dataEv'/>
<fun r='_ZNK18QModelRoleDataSpan5beginEv'/>
<fun r='_ZNK18QModelRoleDataSpan3endEv'/>
<fun r='_ZNK18QModelRoleDataSpanixEx'/>
<fun r='_ZNK18QModelRoleDataSpan11dataForRoleEi'/>
<use f='qtbase-6.5.0/src/gui/itemmodels/qstandarditemmodel.h' l='33' c='_ZNK13QStandardItem9multiDataE18QModelRoleDataSpan'/>
<use f='qtbase-6.5.0/src/gui/itemmodels/qstandarditemmodel.h' l='299' c='_ZNK18QStandardItemModel9multiDataERK11QModelIndex18QModelRoleDataSpan'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.cpp' l='621' c='_ZNK21QPersistentModelIndex9multiDataE18QModelRoleDataSpan'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.cpp' l='3664' c='_ZNK18QAbstractItemModel9multiDataERK11QModelIndex18QModelRoleDataSpan'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.cpp' l='131'>/*!
    \class QModelRoleDataSpan
    \inmodule QtCore
    \since 6.0
    \ingroup model-view
    \brief The QModelRoleDataSpan class provides a span over QModelRoleData objects.

    A QModelRoleDataSpan is used as an abstraction over an array of
    QModelRoleData objects.

    Like a view, QModelRoleDataSpan provides a small object (pointer
    and size) that can be passed to functions that need to examine the
    contents of the array. A QModelRoleDataSpan can be constructed from
    any array-like sequence (plain arrays, QVector, std::vector,
    QVarLengthArray, and so on). Moreover, it does not own the
    sequence, which must therefore be kept alive longer than any
    QModelRoleDataSpan objects referencing it.

    Unlike a view, QModelRoleDataSpan is a span, so it allows for
    modifications to the underlying elements.

    QModelRoleDataSpan&apos;s main use case is making it possible
    for a model to return the data corresponding to different roles
    in one call.

    In order to draw one element from a model, a view (through its
    delegates) will generally request multiple roles for the same index
    by calling \c{data()} as many times as needed:

    \snippet code/src_corelib_kernel_qabstractitemmodel.cpp 13

    QModelRoleDataSpan allows a view to request the same data
    using just one function call.

    This is achieved by having the view prepare a suitable array of
    QModelRoleData objects, each initialized with the role that should
    be fetched. The array is then wrapped in a QModelRoleDataSpan
    object, which is then passed to a model&apos;s \c{multiData()} function.

    \snippet code/src_corelib_kernel_qabstractitemmodel.cpp 14

    Views are encouraged to store the array of QModelRoleData objects
    (and, possibly, the corresponding span) and re-use it in subsequent
    calls to the model. This allows to reduce the memory allocations
    related with creating and returning QVariant objects.

    Finally, given a QModelRoleDataSpan object, the model&apos;s
    responsibility is to fill in the data corresponding to each role in
    the span. How this is done depends on the concrete model class.
    Here&apos;s a sketch of a possible implementation that iterates over the
    span and uses \c{setData()} on each element:

    \snippet code/src_corelib_kernel_qabstractitemmodel.cpp 15

    \sa {Model/View Programming}, QAbstractItemModel::multiData()
*/</doc>
<use f='qtbase-6.5.0/src/gui/itemmodels/qstandarditemmodel.cpp' l='951' c='_ZNK13QStandardItem9multiDataE18QModelRoleDataSpan'/>
<use f='qtbase-6.5.0/src/gui/itemmodels/qstandarditemmodel.cpp' l='2837' c='_ZNK18QStandardItemModel9multiDataERK11QModelIndex18QModelRoleDataSpan'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.cpp' l='258' c='_ZNK19QStyledItemDelegate15initStyleOptionEP20QStyleOptionViewItemRK11QModelIndex'/>
<size>16</size>
