<dec f='qtbase-6.5.0/src/corelib/serialization/qcborstreamreader.h' l='123' type='StringResult&lt;qsizetype&gt; QCborStreamReader::readStringChunk(char * ptr, qsizetype maxlen)'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborstreamreader.cpp' l='1026' u='c' c='_ZN17QCborStreamReader4nextEi'/>
<def f='qtbase-6.5.0/src/corelib/serialization/qcborstreamreader.cpp' l='1410' ll='1417' type='QCborStreamReader::StringResult&lt;qsizetype&gt; QCborStreamReader::readStringChunk(char * ptr, qsizetype maxlen)'/>
<doc f='qtbase-6.5.0/src/corelib/serialization/qcborstreamreader.cpp' l='1382'>/*!
    Reads the current string chunk into the buffer pointed to by \a ptr, whose
    size is \a maxlen. This function returns a \l StringResult object, with the
    number of bytes copied into \a ptr saved in the \c \l StringResult::data
    member. The \c \l StringResult::status member indicates whether there was
    an error reading the string, whether data was copied or whether this was
    the last chunk.

    This function can be called for both \l String and \l ByteArray types.
    For the latter, this function will read the same data that readByteArray()
    would have returned. For strings, it returns the UTF-8 equivalent of the \l
    QString that would have been returned.

    This function is usually used alongside currentStringChunkSize() in a loop.
    For example:

   \snippet code/src_corelib_serialization_qcborstream.cpp 29

    Unlike readByteArray() and readString(), this function is not limited by
    implementation limits of QByteArray and QString.

    \note This function does not perform verification that the UTF-8 contents
    are properly formatted. That means this function does not produce the
    QCborError::InvalidUtf8String error, even when readString() does.

    \sa currentStringChunkSize(), readString(), readByteArray(),
        isString(), isByteArray()
 */</doc>
