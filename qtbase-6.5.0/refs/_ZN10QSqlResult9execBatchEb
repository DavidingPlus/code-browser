<dec f='qtbase-6.5.0/src/sql/kernel/qsqlresult.h' l='95' type='bool QSqlResult::execBatch(bool arrayBind = false)'/>
<ovr f='qtbase-6.5.0/src/plugins/sqldrivers/sqlite/qsql_sqlite.cpp' l='379' c='_ZN13QSQLiteResult9execBatchEb'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqlquery.cpp' l='1075' u='c' c='_ZN9QSqlQuery9execBatchENS_18BatchExecutionModeE'/>
<def f='qtbase-6.5.0/src/sql/kernel/qsqlresult.cpp' l='946' ll='961' type='bool QSqlResult::execBatch(bool arrayBind = false)'/>
<doc f='qtbase-6.5.0/src/sql/kernel/qsqlresult.cpp' l='918'>/*! \internal
    \since 4.2

    Executes a prepared query in batch mode if the driver supports it,
    otherwise emulates a batch execution using bindValue() and exec().
    QSqlDriver::hasFeature() can be used to find out whether a driver
    supports batch execution.

    Batch execution can be faster for large amounts of data since it
    reduces network roundtrips.

    For batch executions, bound values have to be provided as lists
    of variants (QVariantList).

    Each list must contain values of the same type. All lists must
    contain equal amount of values (rows).

    NULL values are passed in as typed QVariants, for example
    \c {QVariant(QMetaType::fromType&lt;int&gt;())} for an integer NULL value.

    Example:

    \snippet code/src_sql_kernel_qsqlresult.cpp 0

    Here, we insert two rows into a SQL table, with each row containing three values.

    \sa exec(), QSqlDriver::hasFeature()
*/</doc>
