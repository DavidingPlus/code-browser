<def f='qtbase-6.5.0/src/corelib/tools/qtimeline.h' l='30' ll='34'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.h' l='43' c='_ZNK9QTimeLine5stateEv'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.h' l='90' c='_ZN9QTimeLine12stateChangedENS_5StateENS_14QPrivateSignalE'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='40'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='41' c='_ZN16QTimeLinePrivate8setStateEN9QTimeLine5StateE'/>
<use f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='283' c='_ZNK9QTimeLine5stateEv'/>
<doc f='qtbase-6.5.0/src/corelib/tools/qtimeline.cpp' l='189'>/*!
    \enum QTimeLine::State

    This enum describes the state of the timeline.

    \value NotRunning The timeline is not running. This is the initial state
    of QTimeLine, and the state QTimeLine reenters when finished. The current
    time, frame and value remain unchanged until either setCurrentTime() is
    called, or the timeline is started by calling start().

    \value Paused The timeline is paused (i.e., temporarily
    suspended). Calling setPaused(false) will resume timeline activity.

    \value Running The timeline is running. While control is in the event
    loop, QTimeLine will update its current time at regular intervals,
    emitting valueChanged() and frameChanged() when appropriate.

    \sa state(), stateChanged()
*/</doc>
