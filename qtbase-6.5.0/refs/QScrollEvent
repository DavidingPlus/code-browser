<inh f='qtbase-6.5.0/src/corelib/kernel/qcoreevent.h' l='44' c='QEvent'/>
<def f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='971' ll='992'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='973' c='_ZN12QScrollEventC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='973' c='_ZN12QScrollEventC1EOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='973' c='_ZN12QScrollEventaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='973' c='_ZN12QScrollEventaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='973' c='_ZN12QScrollEventaSEOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='973' c='_ZN12QScrollEventaSEOS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.h' l='973' c='_ZNK12QScrollEvent5cloneEv'/>
<size>56</size>
<fun r='_ZN12QScrollEventC1ERKS_'/>
<fun r='_ZN12QScrollEventC1EOS_'/>
<fun r='_ZNK12QScrollEvent5cloneEv'/>
<fun r='_ZN12QScrollEventC1ERK7QPointFS2_NS_11ScrollStateE'/>
<fun r='_ZNK12QScrollEvent10contentPosEv'/>
<fun r='_ZNK12QScrollEvent17overshootDistanceEv'/>
<fun r='_ZNK12QScrollEvent11scrollStateEv'/>
<mbr r='QScrollEvent::m_contentPos' o='128' t='QPointF'/>
<mbr r='QScrollEvent::m_overshoot' o='256' t='QPointF'/>
<mbr r='QScrollEvent::m_state' o='384' t='QScrollEvent::ScrollState'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4241' c='_Zls6QDebugPK6QEvent'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4241' c='_Zls6QDebugPK6QEvent'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4673' c='_ZN12QScrollEventC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4673' c='_ZNK12QScrollEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4673' c='_ZNK12QScrollEvent5cloneEv'/>
<size>56</size>
<doc f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='4631'>/*!
    \class QScrollEvent
    \since 4.8
    \ingroup events
    \inmodule QtGui

    \brief The QScrollEvent class is sent when scrolling.

    The scroll event is sent to indicate that the receiver should be scrolled.
    Usually the receiver should be something visual like QWidget or QGraphicsObject.

    Some care should be taken that no conflicting QScrollEvents are sent from two
    sources. Using QScroller::scrollTo is save however.

    \sa QScrollPrepareEvent, QScroller
*/</doc>
<fun r='_ZN12QScrollEventC1ERK7QPointFS2_NS_11ScrollStateE'/>
<fun r='_ZN12QScrollEventC1ERKS_'/>
<fun r='_ZNK12QScrollEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qscroller.cpp' l='1710' c='_ZN16QScrollerPrivate8setStateEN9QScroller5StateE'/>
<use f='qtbase-6.5.0/src/widgets/util/qscroller.cpp' l='1787' c='_ZN16QScrollerPrivate32setContentPositionHelperDraggingERK7QPointF'/>
<use f='qtbase-6.5.0/src/widgets/util/qscroller.cpp' l='1840' c='_ZN16QScrollerPrivate33setContentPositionHelperScrollingEv'/>
<size>56</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qabstractscrollarea.cpp' l='991' c='_ZN19QAbstractScrollArea5eventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qabstractscrollarea.cpp' l='991' c='_ZN19QAbstractScrollArea5eventEP6QEvent'/>
<size>56</size>
