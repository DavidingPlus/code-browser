<inh f='qtbase-6.5.0/src/widgets/itemviews/qabstractitemdelegate.h' l='22' c='QAbstractItemDelegate'/>
<def f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.h' l='20' ll='65'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.h' l='64' c='_ZN19QStyledItemDelegateC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.h' l='64' c='_ZN19QStyledItemDelegateaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.h' l='64' c='_ZN19QStyledItemDelegateaSERKS_'/>
<size>16</size>
<smbr r='QStyledItemDelegate::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK19QStyledItemDelegate10metaObjectEv'/>
<fun r='_ZN19QStyledItemDelegate11qt_metacastEPKc'/>
<fun r='_ZN19QStyledItemDelegate11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN19QStyledItemDelegate2trEPKcS1_i'/>
<fun r='_ZN19QStyledItemDelegate18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN19QStyledItemDelegateC1EP7QObject'/>
<fun r='_ZN19QStyledItemDelegateD1Ev'/>
<fun r='_ZNK19QStyledItemDelegate5paintEP8QPainterRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate8sizeHintERK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate12createEditorEP7QWidgetRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate13setEditorDataEP7QWidgetRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate12setModelDataEP7QWidgetP18QAbstractItemModelRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate20updateEditorGeometryEP7QWidgetRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate17itemEditorFactoryEv'/>
<fun r='_ZN19QStyledItemDelegate20setItemEditorFactoryEP18QItemEditorFactory'/>
<fun r='_ZNK19QStyledItemDelegate11displayTextERK8QVariantRK7QLocale'/>
<fun r='_ZNK19QStyledItemDelegate15initStyleOptionEP20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZN19QStyledItemDelegate11eventFilterEP7QObjectP6QEvent'/>
<fun r='_ZN19QStyledItemDelegate11editorEventEP6QEventP18QAbstractItemModelRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZN19QStyledItemDelegate6d_funcEv'/>
<fun r='_ZNK19QStyledItemDelegate6d_funcEv'/>
<fun r='_ZN19QStyledItemDelegateC1ERKS_'/>
<ovr f='qtbase-6.5.0/src/widgets/util/qcompleter_p.h' l='162' c='QCompleterItemDelegate'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter_p.h' l='162'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter_p.h' l='166' c='_ZN22QCompleterItemDelegateC1EP17QAbstractItemView'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/widgets/dialogs/qsidebar_p.h' l='31' c='QSideBarDelegate'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qsidebar_p.h' l='31'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qsidebar_p.h' l='34' c='_ZN16QSideBarDelegateC1EP7QWidget'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/itemviews/qabstractitemview.cpp' l='100' c='_ZN24QAbstractItemViewPrivate4initEv'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/widgets/itemviews/qcolumnview_p.h' l='148' c='QColumnViewDelegate'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qcolumnview_p.h' l='148'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qcolumnview_p.h' l='152' c='_ZN19QColumnViewDelegateC1EP7QObject'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/itemviews/qdatawidgetmapper.cpp' l='294' c='_ZN17QDataWidgetMapperC1EP7QObject'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.cpp' l='49' c='_ZN26QStyledItemDelegatePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.cpp' l='49' c='_ZN26QStyledItemDelegatePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.cpp' l='49' c='_ZNK26QStyledItemDelegatePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.cpp' l='49' c='_ZNK26QStyledItemDelegatePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.cpp' l='49'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/widgets/itemviews/qstyleditemdelegate.cpp' l='77'>/*!
    \class QStyledItemDelegate

    \brief The QStyledItemDelegate class provides display and editing facilities for
    data items from a model.

    \ingroup model-view
    \inmodule QtWidgets

    \since 4.4

    When displaying data from models in Qt item views, e.g., a
    QTableView, the individual items are drawn by a delegate. Also,
    when an item is edited, it provides an editor widget, which is
    placed on top of the item view while editing takes place.
    QStyledItemDelegate is the default delegate for all Qt item
    views, and is installed upon them when they are created.

    The QStyledItemDelegate class is one of the \l{Model/View Classes}
    and is part of Qt&apos;s \l{Model/View Programming}{model/view
    framework}. The delegate allows the display and editing of items
    to be developed independently from the model and view.

    The data of items in models are assigned an
    \l{Qt::}{ItemDataRole}; each item can store a QVariant for each
    role. QStyledItemDelegate implements display and editing for the
    most common datatypes expected by users, including booleans,
    integers, and strings.

    The data will be drawn differently depending on which role they
    have in the model. The following table describes the roles and the
    data types the delegate can handle for each of them. It is often
    sufficient to ensure that the model returns appropriate data for
    each of the roles to determine the appearance of items in views.

    \table
    \header \li Role \li Accepted Types
    \omit
    \row    \li \l Qt::AccessibleDescriptionRole \li QString
    \row    \li \l Qt::AccessibleTextRole \li QString
    \endomit
    \row    \li \l Qt::BackgroundRole \li QBrush \since 4.2
    \row    \li \l Qt::CheckStateRole \li Qt::CheckState
    \row    \li \l Qt::DecorationRole \li QIcon, QPixmap, QImage and QColor
    \row    \li \l Qt::DisplayRole \li QString and types with a string representation
    \row    \li \l Qt::EditRole \li See QItemEditorFactory for details
    \row    \li \l Qt::FontRole \li QFont
    \row    \li \l Qt::SizeHintRole \li QSize
    \omit
    \row    \li \l Qt::StatusTipRole \li
    \endomit
    \row    \li \l Qt::TextAlignmentRole \li Qt::Alignment
    \row    \li \l Qt::ForegroundRole \li QBrush \since 4.2
    \omit
    \row    \li \l Qt::ToolTipRole
    \row    \li \l Qt::WhatsThisRole
    \endomit
    \endtable

    Editors are created with a QItemEditorFactory; a default static
    instance provided by QItemEditorFactory is installed on all item
    delegates. You can set a custom factory using
    setItemEditorFactory() or set a new default factory with
    QItemEditorFactory::setDefaultFactory(). It is the data stored in
    the item model with the \l{Qt::}{EditRole} that is edited. See the
    QItemEditorFactory class for a more high-level introduction to
    item editor factories. The \l{Color Editor Factory Example}{Color
    Editor Factory} example shows how to create custom editors with a
    factory.

    \section1 Subclassing QStyledItemDelegate

    If the delegate does not support painting of the data types you
    need or you want to customize the drawing of items, you need to
    subclass QStyledItemDelegate, and reimplement paint() and possibly
    sizeHint(). The paint() function is called individually for each
    item, and with sizeHint(), you can specify the hint for each
    of them.

    When reimplementing paint(), one would typically handle the
    datatypes one would like to draw and use the superclass
    implementation for other types.

    The painting of check box indicators are performed by the current
    style. The style also specifies the size and the bounding
    rectangles in which to draw the data for the different data roles.
    The bounding rectangle of the item itself is also calculated by
    the style. When drawing already supported datatypes, it is
    therefore a good idea to ask the style for these bounding
    rectangles. The QStyle class description describes this in
    more detail.

    If you wish to change any of the bounding rectangles calculated by
    the style or the painting of check box indicators, you can
    subclass QStyle. Note, however, that the size of the items can
    also be affected by reimplementing sizeHint().

    It is possible for a custom delegate to provide editors
    without the use of an editor item factory. In this case, the
    following virtual functions must be reimplemented:

    \list
        \li createEditor() returns the widget used to change data from the model
           and can be reimplemented to customize editing behavior.
        \li setEditorData() provides the widget with data to manipulate.
        \li updateEditorGeometry() ensures that the editor is displayed correctly
           with respect to the item view.
        \li setModelData() returns updated data to the model.
    \endlist

    The \l{Star Delegate Example}{Star Delegate} example creates
    editors by reimplementing these methods.

    \section1 QStyledItemDelegate vs. QItemDelegate

    Since Qt 4.4, there are two delegate classes: QItemDelegate and
    QStyledItemDelegate. However, the default delegate is QStyledItemDelegate.
    These two classes are independent alternatives to painting and providing
    editors for items in views. The difference between them is that
    QStyledItemDelegate uses the current style to paint its items. We therefore
    recommend using QStyledItemDelegate as the base class when implementing
    custom delegates or when working with Qt style sheets. The code required
    for either class should be equal unless the custom delegate needs to use
    the style for drawing.

    If you wish to customize the painting of item views, you should
    implement a custom style. Please see the QStyle class
    documentation for details.

    \sa {Delegate Classes}, QItemDelegate, QAbstractItemDelegate, QStyle,
        {Spin Box Delegate Example}, {Star Delegate Example}, {Color
         Editor Factory Example}
*/</doc>
<fun r='_ZN19QStyledItemDelegateC1EP7QObject'/>
<fun r='_ZN19QStyledItemDelegateD1Ev'/>
<fun r='_ZNK19QStyledItemDelegate11displayTextERK8QVariantRK7QLocale'/>
<fun r='_ZNK19QStyledItemDelegate15initStyleOptionEP20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate5paintEP8QPainterRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate8sizeHintERK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate12createEditorEP7QWidgetRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate13setEditorDataEP7QWidgetRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate12setModelDataEP7QWidgetP18QAbstractItemModelRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate20updateEditorGeometryEP7QWidgetRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK19QStyledItemDelegate17itemEditorFactoryEv'/>
<fun r='_ZN19QStyledItemDelegate20setItemEditorFactoryEP18QItemEditorFactory'/>
<fun r='_ZN19QStyledItemDelegate11eventFilterEP7QObjectP6QEvent'/>
<fun r='_ZN19QStyledItemDelegate11editorEventEP6QEventP18QAbstractItemModelRK20QStyleOptionViewItemRK11QModelIndex'/>
<use f='qtbase-6.5.0/src/widgets/styles/qpixmapstyle.cpp' l='135' c='_ZN12QPixmapStyle6polishEP7QWidget'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/widgets/widgets/qcalendarwidget.cpp' l='1551' c='QtPrivate::QCalendarDelegate'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcalendarwidget.cpp' l='1551'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcalendarwidget.cpp' l='1556' c='_ZN9QtPrivate17QCalendarDelegateC1EP22QCalendarWidgetPrivateP7QObject'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/widgets/widgets/qcombobox_p.h' l='261' c='QComboBoxDelegate'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcombobox_p.h' l='261'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcombobox_p.h' l='266' c='_ZN17QComboBoxDelegateC1EP7QObjectP9QComboBox'/>
<size>16</size>
