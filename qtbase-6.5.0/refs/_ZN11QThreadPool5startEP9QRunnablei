<dec f='qtbase-6.5.0/src/corelib/thread/qthreadpool.h' l='36' type='void QThreadPool::start(QRunnable * runnable, int priority = 0)'/>
<def f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='507' ll='517' type='void QThreadPool::start(QRunnable * runnable, int priority = 0)'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='532' u='c' c='_ZN11QThreadPool5startESt8functionIFvvEEi'/>
<doc f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='492'>/*!
    Reserves a thread and uses it to run \a runnable, unless this thread will
    make the current thread count exceed maxThreadCount().  In that case,
    \a runnable is added to a run queue instead. The \a priority argument can
    be used to control the run queue&apos;s order of execution.

    Note that the thread pool takes ownership of the \a runnable if
    \l{QRunnable::autoDelete()}{runnable-&gt;autoDelete()} returns \c true,
    and the \a runnable will be deleted automatically by the thread
    pool after the \l{QRunnable::run()}{runnable-&gt;run()} returns. If
    \l{QRunnable::autoDelete()}{runnable-&gt;autoDelete()} returns \c false,
    ownership of \a runnable remains with the caller. Note that
    changing the auto-deletion on \a runnable after calling this
    functions results in undefined behavior.
*/</doc>
<use f='qtbase-6.5.0/src/network/kernel/qdnslookup.cpp' l='1026' u='c' c='_ZN20QDnsLookupThreadPool5startEP9QRunnable'/>
<use f='qtbase-6.5.0/src/network/kernel/qhostinfo.cpp' l='971' u='c' c='_ZN22QHostInfoLookupManager23rescheduleWithMutexHeldEv'/>
