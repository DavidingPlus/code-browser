<dec f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='54' type='void QDeadlineTimer::setPreciseDeadline(qint64 secs, qint64 nsecs = 0, Qt::TimerType type = Qt::CoarseTimer)'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='176' u='c' c='_ZN14QDeadlineTimer11setDeadlineENSt6chrono10time_pointIT_T0_EEN2Qt9TimerTypeE'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.cpp' l='797' ll='807' type='void QDeadlineTimer::setPreciseDeadline(qint64 secs, qint64 nsecs = 0, Qt::TimerType timerType = Qt::CoarseTimer)'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.cpp' l='785'>/*!
    Sets the deadline for this QDeadlineTimer object to be \a secs seconds and
    \a nsecs nanoseconds since the reference clock epoch (the same as
    QElapsedTimer::msecsSinceReference()), and the timer type to \a timerType.
    If the value is in the past, this QDeadlineTimer will be marked as expired.

    If \a secs or \a nsecs is \c{std::numeric_limits&lt;qint64&gt;::max()}, this
    QDeadlineTimer will be set to never expire. If \a nsecs is more than 1
    billion nanoseconds (1 second), then \a secs will be adjusted accordingly.

    \sa setDeadline(), deadline(), deadlineNSecs(), setRemainingTime()
*/</doc>
