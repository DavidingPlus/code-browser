<dec f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='191' type='bool QProcess::waitForStarted(int msecs = 30000)'/>
<def f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='1801' ll='1808' type='bool QProcess::waitForStarted(int msecs = 30000)'/>
<doc f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='1779'>/*!
    Blocks until the process has started and the started() signal has
    been emitted, or until \a msecs milliseconds have passed.

    Returns \c true if the process was started successfully; otherwise
    returns \c false (if the operation timed out or if an error
    occurred).

    This function can operate without an event loop. It is
    useful when writing non-GUI applications and when performing
    I/O operations in a non-GUI thread.

    \warning Calling this function from the main (GUI) thread
    might cause your user interface to freeze.

    If msecs is -1, this function will not time out.

    \note On some UNIX operating systems, this function may return true but
    the process may later report a QProcess::FailedToStart error.

    \sa started(), waitForReadyRead(), waitForBytesWritten(), waitForFinished()
*/</doc>
<use f='qtbase-6.5.0/src/testlib/qbenchmarkvalgrind.cpp' l='30' u='c' c='_ZN23QBenchmarkValgrindUtils12haveValgrindEv'/>
<use f='qtbase-6.5.0/src/testlib/qbenchmarkvalgrind.cpp' l='156' u='c' c='_ZN23QBenchmarkValgrindUtils22runCallgrindSubProcessERK5QListI7QStringERi'/>
