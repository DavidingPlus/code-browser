<dec f='qtbase-6.5.0/src/gui/kernel/qwindowsysteminterface_p.h' l='510' type='static QList&lt;QEventPoint&gt; QWindowSystemInterfacePrivate::fromNativeTouchPoints(const QList&lt;QWindowSystemInterface::TouchPoint&gt; &amp; points, const QWindow * window, QEvent::Type * type = nullptr)'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='2304' u='c' c='_ZN22QGuiApplicationPrivate17processMouseEventEPN29QWindowSystemInterfacePrivate10MouseEventE'/>
<def f='qtbase-6.5.0/src/gui/kernel/qwindowsysteminterface.cpp' l='631' ll='669' type='static QList&lt;QEventPoint&gt; QWindowSystemInterfacePrivate::fromNativeTouchPoints(const QList&lt;QWindowSystemInterface::TouchPoint&gt; &amp; points, const QWindow * window, QEvent::Type * type = nullptr)'/>
<use f='qtbase-6.5.0/src/gui/kernel/qwindowsysteminterface.cpp' l='704' u='c' c='_ZN22QWindowSystemInterface16handleTouchEventEP7QWindowmPK15QPointingDeviceRK5QListINS_10TouchPointEE6QFlagsIN2Qt16KeyboardModifierEE'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qwindowsysteminterface.cpp' l='604'>/*!
    \internal
    Convert a list of \l QWindowSystemInterface::TouchPoint \a points to a list
    of \e temporary QEventPoint instances, scaled (but not localized)
    for delivery to the given \a window.

    This is called from QWindowSystemInterface::handleTouchEvent():
    that is too early to update the QEventPoint instances in QPointingDevice,
    because we want those to hold &quot;current&quot; state from the applcation&apos;s
    point of view.  The QWindowSystemInterfacePrivate::TouchEvent, to which
    the returned touchpoints will &quot;belong&quot;, might go through the queue before
    being processed; the application doesn&apos;t see the equivalent QTouchEvent
    until later on.  Therefore the responsibility to update the QEventPoint
    instances in QPointingDevice is in QGuiApplication, not here.

    QGuiApplicationPrivate::processMouseEvent() also calls this function
    when it synthesizes a touch event from a mouse event.  But that&apos;s outside
    the normal use case.

    It might be better if we change all the platform plugins to create
    temporary instances of QEventPoint directly, and remove
    QWindowSystemInterface::TouchPoint completely. Then we will no longer need
    this function either. But that&apos;s only possible as long as QEventPoint
    remains a Q_GADGET, not a QObject, so that it continues to be small and
    suitable for temporary stack allocation.  QEventPoint is a little bigger
    than QWindowSystemInterface::TouchPoint, though.
*/</doc>
