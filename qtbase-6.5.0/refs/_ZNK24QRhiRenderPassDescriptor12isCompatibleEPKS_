<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='989' type='bool QRhiRenderPassDescriptor::isCompatible(const QRhiRenderPassDescriptor * other) const'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='2935'>/*!
    \fn bool QRhiRenderPassDescriptor::isCompatible(const QRhiRenderPassDescriptor *other) const

    \return true if the \a other QRhiRenderPassDescriptor is compatible with
    this one, meaning \c this and \a other can be used interchangebly in
    QRhiGraphicsPipeline::setRenderPassDescriptor().

    The concept of the compatibility of renderpass descriptors is similar to
    the \l{QRhiShaderResourceBindings::isLayoutCompatible}{layout
    compatibility} of QRhiShaderResourceBindings instances. They allow better
    reuse of QRhiGraphicsPipeline instances: for example, a
    QRhiGraphicsPipeline instance cache is expected to use these functions to
    look for a matching pipeline, instead of just comparing pointers, thus
    allowing a different QRhiRenderPassDescriptor and
    QRhiShaderResourceBindings to be used in combination with the pipeline, as
    long as they are compatible.

    The exact details of compatibility depend on the underlying graphics API.
    Two renderpass descriptors
    \l{QRhiTextureRenderTarget::newCompatibleRenderPassDescriptor()}{created}
    from the same QRhiTextureRenderTarget are always compatible.

    Similarly to QRhiShaderResourceBindings, compatibility can also be tested
    without having two existing objects available. Extracting the opaque blob by
    calling serializedFormat() allows testing for compatibility by comparing the
    returned vector to another QRhiRenderPassDescriptor&apos;s
    serializedFormat(). This has benefits in certain situations, because it
    allows testing the compatibility of a QRhiRenderPassDescriptor with a
    QRhiGraphicsPipeline even when the QRhiRenderPassDescriptor the pipeline was
    originally built was is no longer available (but the data returned from its
    serializedFormat() still is).

    \sa newCompatibleRenderPassDescriptor(), serializedFormat()
 */</doc>
<ovr f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='5340' c='_ZNK26QGles2RenderPassDescriptor12isCompatibleEPK24QRhiRenderPassDescriptor'/>
<ovr f='qtbase-6.5.0/src/gui/rhi/qrhinull.cpp' l='740' c='_ZNK25QNullRenderPassDescriptor12isCompatibleEPK24QRhiRenderPassDescriptor'/>
