<dec f='qtbase-6.5.0/src/widgets/kernel/qwidget.h' l='698' type='bool QWidget::nativeEvent(const QByteArray &amp; eventType, void * message, qintptr * result)'/>
<def f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='10116' ll='10122' type='bool QWidget::nativeEvent(const QByteArray &amp; eventType, void * message, qintptr * result)'/>
<doc f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='10089'>/*!
    This special event handler can be reimplemented in a subclass to
    receive native platform events identified by \a eventType
    which are passed in the \a message parameter.

    In your reimplementation of this function, if you want to stop the
    event being handled by Qt, return true and set \a result. The \a result
    parameter has meaning only on Windows. If you return false, this native
    event is passed back to Qt, which translates the event into a Qt event
    and sends it to the widget.

    \note Events are only delivered to this event handler if the widget
    has a native window handle.

    \note This function superseedes the event filter functions
    x11Event(), winEvent() and macEvent() of Qt 4.

    \sa QAbstractNativeEventFilter

    \table
    \header \li Platform \li Event Type Identifier \li Message Type \li Result Type
    \row \li Windows \li &quot;windows_generic_MSG&quot; \li MSG * \li LRESULT
    \row \li macOS \li &quot;NSEvent&quot; \li NSEvent * \li
    \row \li XCB \li &quot;xcb_generic_event_t&quot; \li xcb_generic_event_t * \li
    \endtable
*/</doc>
<use f='qtbase-6.5.0/src/widgets/kernel/qwidgetwindow.cpp' l='1044' u='c' c='_ZN13QWidgetWindow11nativeEventERK10QByteArrayPvPx'/>
