<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='121' u='c' c='_ZNK5QDate8toStringERK7QString9QCalendar'/>
<dec f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='122' type='QString QDate::toString(QStringView format, QCalendar cal = QCalendar()) const'/>
<def f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='1201' ll='1204' type='QString QDate::toString(QStringView format, QCalendar cal = QCalendar()) const'/>
<doc f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='1140'>/*!
    \fn QString QDate::toString(const QString &amp;format, QCalendar cal) const
    \fn QString QDate::toString(QStringView format, QCalendar cal) const

    Returns the date as a string. The \a format parameter determines the format
    of the result string. If \a cal is supplied, it determines the calendar used
    to represent the date; it defaults to Gregorian.

    These expressions may be used:

    \table
    \header \li Expression \li Output
    \row \li d \li The day as a number without a leading zero (1 to 31)
    \row \li dd \li The day as a number with a leading zero (01 to 31)
    \row \li ddd \li The abbreviated day name (&apos;Mon&apos; to &apos;Sun&apos;).
    \row \li dddd \li The long day name (&apos;Monday&apos; to &apos;Sunday&apos;).
    \row \li M \li The month as a number without a leading zero (1 to 12)
    \row \li MM \li The month as a number with a leading zero (01 to 12)
    \row \li MMM \li The abbreviated month name (&apos;Jan&apos; to &apos;Dec&apos;).
    \row \li MMMM \li The long month name (&apos;January&apos; to &apos;December&apos;).
    \row \li yy \li The year as a two digit number (00 to 99)
    \row \li yyyy \li The year as a four digit number. If the year is negative,
            a minus sign is prepended, making five characters.
    \endtable

    Any sequence of characters enclosed in single quotes will be included
    verbatim in the output string (stripped of the quotes), even if it contains
    formatting characters. Two consecutive single quotes (&quot;&apos;&apos;&quot;) are replaced by
    a single quote in the output. All other characters in the format string are
    included verbatim in the output string.

    Formats without separators (e.g. &quot;ddMM&quot;) are supported but must be used with
    care, as the resulting strings aren&apos;t always reliably readable (e.g. if &quot;dM&quot;
    produces &quot;212&quot; it could mean either the 2nd of December or the 21st of
    February).

    Example format strings (assuming that the QDate is the 20 July
    1969):

    \table
    \header \li Format            \li Result
    \row    \li dd.MM.yyyy        \li 20.07.1969
    \row    \li ddd MMMM d yy     \li Sun July 20 69
    \row    \li &apos;The day is&apos; dddd \li The day is Sunday
    \endtable

    If the datetime is invalid, an empty string will be returned.

    \note Day and month names are given in English (C locale). To get localized
    month and day names, use QLocale::system().toString().

    \note If a format character is repeated more times than the longest
    expression in the table above using it, this part of the format will be read
    as several expressions with no separator between them; the longest above,
    possibly repeated as many times as there are copies of it, ending with a
    residue that may be a shorter expression. Thus \c{&apos;MMMMMMMMMM&apos;} for a date
    in May will contribute \c{&quot;MayMay05&quot;} to the output.

    \sa fromString(), QDateTime::toString(), QTime::toString(), QLocale::toString()

*/</doc>
<use f='qtbase-6.5.0/src/testlib/qtest.h' l='92' u='c' c='_ZN5QTest8toStringERKT_'/>
