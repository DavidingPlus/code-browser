<dec f='qtbase-6.5.0/src/gui/util/qdesktopservices.h' l='22' type='static void QDesktopServices::setUrlHandler(const QString &amp; scheme, QObject * receiver, const char * method)'/>
<def f='qtbase-6.5.0/src/gui/util/qdesktopservices.cpp' l='290' ll='307' type='static void QDesktopServices::setUrlHandler(const QString &amp; scheme, QObject * receiver, const char * method)'/>
<use f='qtbase-6.5.0/src/gui/util/qdesktopservices.cpp' l='320' u='c' c='_ZN16QDesktopServices15unsetUrlHandlerERK7QString'/>
<doc f='qtbase-6.5.0/src/gui/util/qdesktopservices.cpp' l='208'>/*!
    Sets the handler for the given \a scheme to be the handler \a method provided by
    the \a receiver object.

    This function provides a way to customize the behavior of openUrl(). If openUrl()
    is called with a URL with the specified \a scheme then the given \a method on the
    \a receiver object is called instead of QDesktopServices launching an external
    application.

    The provided method must be implemented as a slot that only accepts a single QUrl
    argument.

    \snippet code/src_gui_util_qdesktopservices.cpp 0

    If setUrlHandler() is used to set a new handler for a scheme which already
    has a handler, the existing handler is simply replaced with the new one.
    Since QDesktopServices does not take ownership of handlers, no objects are
    deleted when a handler is replaced.

    Note that the handler will always be called from within the same thread that
    calls QDesktopServices::openUrl().

    You must call unsetUrlHandler() before destroying the handler object, so
    the destruction of the handler object does not overlap with concurrent
    invocations of openUrl() using it.

    \section1 iOS

    To use this function for receiving data from other apps on iOS you also need to
    add the custom scheme to the \c CFBundleURLSchemes list in your Info.plist file:

    \snippet code/src_gui_util_qdesktopservices.cpp 4

    For more information, see the Apple Developer Documentation for
    \l {iOS: Defining a Custom URL Scheme for Your App}{Defining a Custom URL Scheme for Your App}.
    \warning It is not possible to claim support for some well known URL schemes, including http and
    https. This is only allowed for Universal Links.

    To claim support for http and https the above entry in the Info.plist file
    is not allowed. This is only possible when you add your domain to the
    Entitlements file:

    \snippet code/src_gui_util_qdesktopservices.cpp 7

    iOS will search for /.well-known/apple-app-site-association on your domain,
    when the application is installed. If you want to listen to
    \c{https://your.domain.com/help?topic=ABCDEF} you need to provide the following
    content there:

    \snippet code/src_gui_util_qdesktopservices.cpp 8

    For more information, see the Apple Developer Documentation for
    \l {iOS: Supporting Associated Domains}{Supporting Associated Domains}.

    \section1 Android

    To use this function for receiving data from other apps on Android, you
    need to add one or more intent filter to the \c activity in your app manifest:

    \snippet code/src_gui_util_qdesktopservices.cpp 9

    For more information, see the Android Developer Documentation for
    \l {Android: Create Deep Links to App Content}{Create Deep Links to App Content}.

    To immediately open the corresponding content in your Android app, without
    requiring the user to select the app, you need to verify your link. To
    enable the verification, add an additional parameter to your intent filter:

    \snippet code/src_gui_util_qdesktopservices.cpp 10

    Android will look for \c{https://your.domain.com/.well-known/assetlinks.json},
    when the application is installed. If you want to listen to
    \c{https://your.domain.com:1337/help}, you need to provide the following
    content there:

    \snippet code/src_gui_util_qdesktopservices.cpp 11

    For more information, see the Android Developer Documentation for
    \l {Android: Verify Android App Links}{Verify Android App Links}.

    \sa openUrl(), unsetUrlHandler()
*/</doc>
