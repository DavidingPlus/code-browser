<dec f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.h' l='51' type='void QSharedMemory::setKey(const QString &amp; key)'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.cpp' l='275' u='c' c='_ZN13QSharedMemoryC1ERK7QStringP7QObject'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.cpp' l='289' u='c' c='_ZN13QSharedMemoryD1Ev'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.cpp' l='306' ll='317' type='void QSharedMemory::setKey(const QString &amp; key)'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.cpp' l='292'>/*!
  Sets the platform independent \a key for this shared memory object. If \a key
  is the same as the current key, the function returns without doing anything.

  You can call key() to retrieve the platform independent key. Internally,
  QSharedMemory converts this key into a platform specific key. If you instead
  call nativeKey(), you will get the platform specific, converted key.

  If the shared memory object is attached to an underlying shared memory
  segment, it will \l {detach()} {detach} from it before setting the new key.
  This function does not do an attach().

  \sa key(), nativeKey(), isAttached()
*/</doc>
