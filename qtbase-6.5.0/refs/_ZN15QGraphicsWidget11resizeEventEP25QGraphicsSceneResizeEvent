<dec f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicswidget.h' l='179' type='void QGraphicsWidget::resizeEvent(QGraphicsSceneResizeEvent * event)'/>
<doc f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicswidget.h' l='178'>//void resetInputContext ();</doc>
<ovr f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsproxywidget.cpp' l='1518' c='_ZN20QGraphicsProxyWidget11resizeEventEP25QGraphicsSceneResizeEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsproxywidget.cpp' l='1525' u='c' c='_ZN20QGraphicsProxyWidget11resizeEventEP25QGraphicsSceneResizeEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicswidget.cpp' l='1362' u='c' c='_ZN15QGraphicsWidget5eventEP6QEvent'/>
<def f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicswidget.cpp' l='1614' ll='1617' type='void QGraphicsWidget::resizeEvent(QGraphicsSceneResizeEvent * event)'/>
<doc f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicswidget.cpp' l='1598'>/*!
    This event handler, for
    \l{QEvent::GraphicsSceneResize}{GraphicsSceneResize} events, is
    delivered after the widget has been resized (i.e., its local size has
    changed). \a event contains both the old and the new size.

    This event is only delivered when the widget is resized locally; calling
    setTransform() on the widget or any of its ancestors or view, does not
    affect the widget&apos;s local size.

    You can reimplement this event handler to detect when your widget has been
    resized. Calling QEvent::accept() or QEvent::ignore() on \a event has no
    effect.

    \sa geometry(), setGeometry()
*/</doc>
