<dec f='qtbase-6.5.0/src/corelib/io/qfiledevice.h' l='69' type='bool QFileDevice::isSequential() const'/>
<use f='qtbase-6.5.0/src/corelib/io/qfile.cpp' l='615' u='c' c='_ZN5QFile6renameERK7QString'/>
<use f='qtbase-6.5.0/src/corelib/io/qfile.cpp' l='1013' u='c' c='_ZN5QFile4openEP8_IO_FILE6QFlagsIN13QIODeviceBase12OpenModeFlagEES2_IN11QFileDevice14FileHandleFlagEE'/>
<use f='qtbase-6.5.0/src/corelib/io/qfile.cpp' l='1065' u='c' c='_ZN5QFile4openEi6QFlagsIN13QIODeviceBase12OpenModeFlagEES0_IN11QFileDevice14FileHandleFlagEE'/>
<inh f='qtbase-6.5.0/src/corelib/io/qiodevice.h' l='53' c='_ZNK9QIODevice12isSequentialEv'/>
<def f='qtbase-6.5.0/src/corelib/io/qfiledevice.cpp' l='206' ll='210' type='bool QFileDevice::isSequential() const'/>
<doc f='qtbase-6.5.0/src/corelib/io/qfiledevice.cpp' l='198'>/*!
    Returns \c true if the file can only be manipulated sequentially;
    otherwise returns \c false.

    Most files support random-access, but some special files may not.

    \sa QIODevice::isSequential()
*/</doc>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessfilebackend.cpp' l='136' u='c' c='_ZN25QNetworkAccessFileBackend4openEv'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessfilebackend.cpp' l='248' u='c' c='_ZN25QNetworkAccessFileBackend4readEPcx'/>
