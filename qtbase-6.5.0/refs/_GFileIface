<use f='include/glib-2.0/gio/gfile.h' l='47'/>
<def f='include/glib-2.0/gio/gfile.h' l='162' ll='592'/>
<size>840</size>
<doc f='include/glib-2.0/gio/gfile.h' l='50'>/**
 * GFileIface:
 * @g_iface: The parent interface.
 * @dup: Duplicates a #GFile.
 * @hash: Creates a hash of a #GFile.
 * @equal: Checks equality of two given #GFiles.
 * @is_native: Checks to see if a file is native to the system.
 * @has_uri_scheme: Checks to see if a #GFile has a given URI scheme.
 * @get_uri_scheme: Gets the URI scheme for a #GFile.
 * @get_basename: Gets the basename for a given #GFile.
 * @get_path: Gets the current path within a #GFile.
 * @get_uri: Gets a URI for the path within a #GFile.
 * @get_parse_name: Gets the parsed name for the #GFile.
 * @get_parent: Gets the parent directory for the #GFile.
 * @prefix_matches: Checks whether a #GFile contains a specified file.
 * @get_relative_path: Gets the path for a #GFile relative to a given path.
 * @resolve_relative_path: Resolves a relative path for a #GFile to an absolute path.
 * @get_child_for_display_name: Gets the child #GFile for a given display name.
 * @enumerate_children: Gets a #GFileEnumerator with the children of a #GFile.
 * @enumerate_children_async: Asynchronously gets a #GFileEnumerator with the children of a #GFile.
 * @enumerate_children_finish: Finishes asynchronously enumerating the children.
 * @query_info: Gets the #GFileInfo for a #GFile.
 * @query_info_async: Asynchronously gets the #GFileInfo for a #GFile.
 * @query_info_finish: Finishes an asynchronous query info operation.
 * @query_filesystem_info: Gets a #GFileInfo for the file system #GFile is on.
 * @query_filesystem_info_async: Asynchronously gets a #GFileInfo for the file system #GFile is on.
 * @query_filesystem_info_finish: Finishes asynchronously getting the file system info.
 * @find_enclosing_mount: Gets a #GMount for the #GFile.
 * @find_enclosing_mount_async: Asynchronously gets the #GMount for a #GFile.
 * @find_enclosing_mount_finish: Finishes asynchronously getting the volume.
 * @set_display_name: Sets the display name for a #GFile.
 * @set_display_name_async: Asynchronously sets a #GFile&apos;s display name.
 * @set_display_name_finish: Finishes asynchronously setting a #GFile&apos;s display name.
 * @query_settable_attributes: Returns a list of #GFileAttributeInfos that can be set.
 * @_query_settable_attributes_async: Asynchronously gets a list of #GFileAttributeInfos that can be set.
 * @_query_settable_attributes_finish: Finishes asynchronously querying settable attributes.
 * @query_writable_namespaces: Returns a list of #GFileAttributeInfo namespaces that are writable.
 * @_query_writable_namespaces_async: Asynchronously gets a list of #GFileAttributeInfo namespaces that are writable.
 * @_query_writable_namespaces_finish: Finishes asynchronously querying the writable namespaces.
 * @set_attribute: Sets a #GFileAttributeInfo.
 * @set_attributes_from_info: Sets a #GFileAttributeInfo with information from a #GFileInfo.
 * @set_attributes_async: Asynchronously sets a file&apos;s attributes.
 * @set_attributes_finish: Finishes setting a file&apos;s attributes asynchronously.
 * @read_fn: Reads a file asynchronously.
 * @read_async: Asynchronously reads a file.
 * @read_finish: Finishes asynchronously reading a file.
 * @append_to: Writes to the end of a file.
 * @append_to_async: Asynchronously writes to the end of a file.
 * @append_to_finish: Finishes an asynchronous file append operation.
 * @create: Creates a new file.
 * @create_async: Asynchronously creates a file.
 * @create_finish: Finishes asynchronously creating a file.
 * @replace: Replaces the contents of a file.
 * @replace_async: Asynchronously replaces the contents of a file.
 * @replace_finish: Finishes asynchronously replacing a file.
 * @delete_file: Deletes a file.
 * @delete_file_async: Asynchronously deletes a file.
 * @delete_file_finish: Finishes an asynchronous delete.
 * @trash: Sends a #GFile to the Trash location.
 * @trash_async: Asynchronously sends a #GFile to the Trash location.
 * @trash_finish: Finishes an asynchronous file trashing operation.
 * @make_directory: Makes a directory.
 * @make_directory_async: Asynchronously makes a directory.
 * @make_directory_finish: Finishes making a directory asynchronously.
 * @make_symbolic_link: (nullable): Makes a symbolic link. %NULL if symbolic
 *    links are unsupported.
 * @_make_symbolic_link_async: Asynchronously makes a symbolic link
 * @_make_symbolic_link_finish: Finishes making a symbolic link asynchronously.
 * @copy: (nullable): Copies a file. %NULL if copying is unsupported, which will
 *     cause `GFile` to use a fallback copy method where it reads from the
 *     source and writes to the destination.
 * @copy_async: Asynchronously copies a file.
 * @copy_finish: Finishes an asynchronous copy operation.
 * @move: Moves a file.
 * @_move_async: Asynchronously moves a file.
 * @_move_finish: Finishes an asynchronous move operation.
 * @mount_mountable: Mounts a mountable object.
 * @mount_mountable_finish: Finishes a mounting operation.
 * @unmount_mountable: Unmounts a mountable object.
 * @unmount_mountable_finish: Finishes an unmount operation.
 * @eject_mountable: Ejects a mountable.
 * @eject_mountable_finish: Finishes an eject operation.
 * @mount_enclosing_volume: Mounts a specified location.
 * @mount_enclosing_volume_finish: Finishes mounting a specified location.
 * @monitor_dir: Creates a #GFileMonitor for the location.
 * @monitor_file: Creates a #GFileMonitor for the location.
 * @open_readwrite: Open file read/write. Since 2.22.
 * @open_readwrite_async: Asynchronously opens file read/write. Since 2.22.
 * @open_readwrite_finish: Finishes an asynchronous open read/write. Since 2.22.
 * @create_readwrite: Creates file read/write. Since 2.22.
 * @create_readwrite_async: Asynchronously creates file read/write. Since 2.22.
 * @create_readwrite_finish: Finishes an asynchronous creates read/write. Since 2.22.
 * @replace_readwrite: Replaces file read/write. Since 2.22.
 * @replace_readwrite_async: Asynchronously replaces file read/write. Since 2.22.
 * @replace_readwrite_finish: Finishes an asynchronous replace read/write. Since 2.22.
 * @start_mountable: Starts a mountable object. Since 2.22.
 * @start_mountable_finish: Finishes a start operation. Since 2.22.
 * @stop_mountable: Stops a mountable. Since 2.22.
 * @stop_mountable_finish: Finishes a stop operation. Since 2.22.
 * @supports_thread_contexts: a boolean that indicates whether the #GFile implementation supports thread-default contexts. Since 2.22.
 * @unmount_mountable_with_operation: Unmounts a mountable object using a #GMountOperation. Since 2.22.
 * @unmount_mountable_with_operation_finish: Finishes an unmount operation using a #GMountOperation. Since 2.22.
 * @eject_mountable_with_operation: Ejects a mountable object using a #GMountOperation. Since 2.22.
 * @eject_mountable_with_operation_finish: Finishes an eject operation using a #GMountOperation. Since 2.22.
 * @poll_mountable: Polls a mountable object for media changes. Since 2.22.
 * @poll_mountable_finish: Finishes a poll operation for media changes. Since 2.22.
 * @measure_disk_usage: Recursively measures the disk usage of @file. Since 2.38
 * @measure_disk_usage_async: Asynchronously recursively measures the disk usage of @file. Since 2.38
 * @measure_disk_usage_finish: Finishes an asynchronous recursive measurement of the disk usage of @file. Since 2.38
 *
 * An interface for writing VFS file handles.
 **/</doc>
<mbr r='_GFileIface::g_iface' o='0' t='GTypeInterface'/>
<mbr r='_GFileIface::dup' o='128' t='GFile *(*)(GFile *)'/>
<mbr r='_GFileIface::hash' o='192' t='guint (*)(GFile *)'/>
<mbr r='_GFileIface::equal' o='256' t='gboolean (*)(GFile *, GFile *)'/>
<mbr r='_GFileIface::is_native' o='320' t='gboolean (*)(GFile *)'/>
<mbr r='_GFileIface::has_uri_scheme' o='384' t='gboolean (*)(GFile *, const char *)'/>
<mbr r='_GFileIface::get_uri_scheme' o='448' t='char *(*)(GFile *)'/>
<mbr r='_GFileIface::get_basename' o='512' t='char *(*)(GFile *)'/>
<mbr r='_GFileIface::get_path' o='576' t='char *(*)(GFile *)'/>
<mbr r='_GFileIface::get_uri' o='640' t='char *(*)(GFile *)'/>
<mbr r='_GFileIface::get_parse_name' o='704' t='char *(*)(GFile *)'/>
<mbr r='_GFileIface::get_parent' o='768' t='GFile *(*)(GFile *)'/>
<mbr r='_GFileIface::prefix_matches' o='832' t='gboolean (*)(GFile *, GFile *)'/>
<mbr r='_GFileIface::get_relative_path' o='896' t='char *(*)(GFile *, GFile *)'/>
<mbr r='_GFileIface::resolve_relative_path' o='960' t='GFile *(*)(GFile *, const char *)'/>
<mbr r='_GFileIface::get_child_for_display_name' o='1024' t='GFile *(*)(GFile *, const char *, GError **)'/>
<mbr r='_GFileIface::enumerate_children' o='1088' t='GFileEnumerator *(*)(GFile *, const char *, GFileQueryInfoFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::enumerate_children_async' o='1152' t='void (*)(GFile *, const char *, GFileQueryInfoFlags, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::enumerate_children_finish' o='1216' t='GFileEnumerator *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::query_info' o='1280' t='GFileInfo *(*)(GFile *, const char *, GFileQueryInfoFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::query_info_async' o='1344' t='void (*)(GFile *, const char *, GFileQueryInfoFlags, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::query_info_finish' o='1408' t='GFileInfo *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::query_filesystem_info' o='1472' t='GFileInfo *(*)(GFile *, const char *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::query_filesystem_info_async' o='1536' t='void (*)(GFile *, const char *, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::query_filesystem_info_finish' o='1600' t='GFileInfo *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::find_enclosing_mount' o='1664' t='GMount *(*)(GFile *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::find_enclosing_mount_async' o='1728' t='void (*)(GFile *, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::find_enclosing_mount_finish' o='1792' t='GMount *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::set_display_name' o='1856' t='GFile *(*)(GFile *, const char *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::set_display_name_async' o='1920' t='void (*)(GFile *, const char *, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::set_display_name_finish' o='1984' t='GFile *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::query_settable_attributes' o='2048' t='GFileAttributeInfoList *(*)(GFile *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::_query_settable_attributes_async' o='2112' t='void (*)()'/>
<mbr r='_GFileIface::_query_settable_attributes_finish' o='2176' t='void (*)()'/>
<mbr r='_GFileIface::query_writable_namespaces' o='2240' t='GFileAttributeInfoList *(*)(GFile *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::_query_writable_namespaces_async' o='2304' t='void (*)()'/>
<mbr r='_GFileIface::_query_writable_namespaces_finish' o='2368' t='void (*)()'/>
<mbr r='_GFileIface::set_attribute' o='2432' t='gboolean (*)(GFile *, const char *, GFileAttributeType, gpointer, GFileQueryInfoFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::set_attributes_from_info' o='2496' t='gboolean (*)(GFile *, GFileInfo *, GFileQueryInfoFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::set_attributes_async' o='2560' t='void (*)(GFile *, GFileInfo *, GFileQueryInfoFlags, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::set_attributes_finish' o='2624' t='gboolean (*)(GFile *, GAsyncResult *, GFileInfo **, GError **)'/>
<mbr r='_GFileIface::read_fn' o='2688' t='GFileInputStream *(*)(GFile *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::read_async' o='2752' t='void (*)(GFile *, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::read_finish' o='2816' t='GFileInputStream *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::append_to' o='2880' t='GFileOutputStream *(*)(GFile *, GFileCreateFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::append_to_async' o='2944' t='void (*)(GFile *, GFileCreateFlags, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::append_to_finish' o='3008' t='GFileOutputStream *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::create' o='3072' t='GFileOutputStream *(*)(GFile *, GFileCreateFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::create_async' o='3136' t='void (*)(GFile *, GFileCreateFlags, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::create_finish' o='3200' t='GFileOutputStream *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::replace' o='3264' t='GFileOutputStream *(*)(GFile *, const char *, gboolean, GFileCreateFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::replace_async' o='3328' t='void (*)(GFile *, const char *, gboolean, GFileCreateFlags, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::replace_finish' o='3392' t='GFileOutputStream *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::delete_file' o='3456' t='gboolean (*)(GFile *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::delete_file_async' o='3520' t='void (*)(GFile *, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::delete_file_finish' o='3584' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::trash' o='3648' t='gboolean (*)(GFile *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::trash_async' o='3712' t='void (*)(GFile *, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::trash_finish' o='3776' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::make_directory' o='3840' t='gboolean (*)(GFile *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::make_directory_async' o='3904' t='void (*)(GFile *, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::make_directory_finish' o='3968' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::make_symbolic_link' o='4032' t='gboolean (*)(GFile *, const char *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::_make_symbolic_link_async' o='4096' t='void (*)()'/>
<mbr r='_GFileIface::_make_symbolic_link_finish' o='4160' t='void (*)()'/>
<mbr r='_GFileIface::copy' o='4224' t='gboolean (*)(GFile *, GFile *, GFileCopyFlags, GCancellable *, GFileProgressCallback, gpointer, GError **)'/>
<mbr r='_GFileIface::copy_async' o='4288' t='void (*)(GFile *, GFile *, GFileCopyFlags, int, GCancellable *, GFileProgressCallback, gpointer, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::copy_finish' o='4352' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::move' o='4416' t='gboolean (*)(GFile *, GFile *, GFileCopyFlags, GCancellable *, GFileProgressCallback, gpointer, GError **)'/>
<mbr r='_GFileIface::_move_async' o='4480' t='void (*)()'/>
<mbr r='_GFileIface::_move_finish' o='4544' t='void (*)()'/>
<mbr r='_GFileIface::mount_mountable' o='4608' t='void (*)(GFile *, GMountMountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::mount_mountable_finish' o='4672' t='GFile *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::unmount_mountable' o='4736' t='void (*)(GFile *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::unmount_mountable_finish' o='4800' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::eject_mountable' o='4864' t='void (*)(GFile *, GMountUnmountFlags, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::eject_mountable_finish' o='4928' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::mount_enclosing_volume' o='4992' t='void (*)(GFile *, GMountMountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::mount_enclosing_volume_finish' o='5056' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::monitor_dir' o='5120' t='GFileMonitor *(*)(GFile *, GFileMonitorFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::monitor_file' o='5184' t='GFileMonitor *(*)(GFile *, GFileMonitorFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::open_readwrite' o='5248' t='GFileIOStream *(*)(GFile *, GCancellable *, GError **)'/>
<mbr r='_GFileIface::open_readwrite_async' o='5312' t='void (*)(GFile *, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::open_readwrite_finish' o='5376' t='GFileIOStream *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::create_readwrite' o='5440' t='GFileIOStream *(*)(GFile *, GFileCreateFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::create_readwrite_async' o='5504' t='void (*)(GFile *, GFileCreateFlags, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::create_readwrite_finish' o='5568' t='GFileIOStream *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::replace_readwrite' o='5632' t='GFileIOStream *(*)(GFile *, const char *, gboolean, GFileCreateFlags, GCancellable *, GError **)'/>
<mbr r='_GFileIface::replace_readwrite_async' o='5696' t='void (*)(GFile *, const char *, gboolean, GFileCreateFlags, int, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::replace_readwrite_finish' o='5760' t='GFileIOStream *(*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::start_mountable' o='5824' t='void (*)(GFile *, GDriveStartFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::start_mountable_finish' o='5888' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::stop_mountable' o='5952' t='void (*)(GFile *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::stop_mountable_finish' o='6016' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::supports_thread_contexts' o='6080' t='gboolean'/>
<mbr r='_GFileIface::unmount_mountable_with_operation' o='6144' t='void (*)(GFile *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::unmount_mountable_with_operation_finish' o='6208' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::eject_mountable_with_operation' o='6272' t='void (*)(GFile *, GMountUnmountFlags, GMountOperation *, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::eject_mountable_with_operation_finish' o='6336' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::poll_mountable' o='6400' t='void (*)(GFile *, GCancellable *, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::poll_mountable_finish' o='6464' t='gboolean (*)(GFile *, GAsyncResult *, GError **)'/>
<mbr r='_GFileIface::measure_disk_usage' o='6528' t='gboolean (*)(GFile *, GFileMeasureFlags, GCancellable *, GFileMeasureProgressCallback, gpointer, guint64 *, guint64 *, guint64 *, GError **)'/>
<mbr r='_GFileIface::measure_disk_usage_async' o='6592' t='void (*)(GFile *, GFileMeasureFlags, gint, GCancellable *, GFileMeasureProgressCallback, gpointer, GAsyncReadyCallback, gpointer)'/>
<mbr r='_GFileIface::measure_disk_usage_finish' o='6656' t='gboolean (*)(GFile *, GAsyncResult *, guint64 *, guint64 *, guint64 *, GError **)'/>
