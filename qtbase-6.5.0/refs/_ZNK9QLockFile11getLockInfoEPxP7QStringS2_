<dec f='qtbase-6.5.0/src/corelib/io/qlockfile.h' l='41' type='bool QLockFile::getLockInfo(qint64 * pid, QString * hostname, QString * appname) const'/>
<def f='qtbase-6.5.0/src/corelib/io/qlockfile.cpp' l='338' ll='351' type='bool QLockFile::getLockInfo(qint64 * pid, QString * hostname, QString * appname) const'/>
<doc f='qtbase-6.5.0/src/corelib/io/qlockfile.cpp' l='313'>/*!
    Retrieves information about the current owner of the lock file.

    If tryLock() returns \c false, and error() returns LockFailedError,
    this function can be called to find out more information about the existing
    lock file:
    \list
    \li the PID of the application (returned in \a pid)
    \li the \a hostname it&apos;s running on (useful in case of networked filesystems),
    \li the name of the application which created it (returned in \a appname),
    \endlist

    Note that tryLock() automatically deleted the file if there is no
    running application with this PID, so LockFailedError can only happen if there is
    an application with this PID (it could be unrelated though).

    This can be used to inform users about the existing lock file and give them
    the choice to delete it. After removing the file using removeStaleLockFile(),
    the application can call tryLock() again.

    This function returns \c true if the information could be successfully retrieved, false
    if the lock file doesn&apos;t exist or doesn&apos;t contain the expected data.
    This can happen if the lock file was deleted between the time where tryLock() failed
    and the call to this function. Simply call tryLock() again if this happens.
*/</doc>
