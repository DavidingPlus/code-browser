<dec f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.h' l='53' type='void QSharedMemory::setNativeKey(const QString &amp; key)'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.cpp' l='338' ll='349' type='void QSharedMemory::setNativeKey(const QString &amp; key)'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qsharedmemory.cpp' l='319'>/*!
  \since 4.8

  Sets the native, platform specific, \a key for this shared memory object. If
  \a key is the same as the current native key, the function returns without
  doing anything. If all you want is to assign a key to a segment, you should
  call setKey() instead.

  You can call nativeKey() to retrieve the native key. If a native key has been
  assigned, calling key() will return a null string.

  If the shared memory object is attached to an underlying shared memory
  segment, it will \l {detach()} {detach} from it before setting the new key.
  This function does not do an attach().

  The application will not be portable if you set a native key.

  \sa nativeKey(), key(), isAttached()
*/</doc>
