<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher.h' l='16' ll='41'/>
<size>16</size>
<smbr r='QFileSystemWatcher::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK18QFileSystemWatcher10metaObjectEv'/>
<fun r='_ZN18QFileSystemWatcher11qt_metacastEPKc'/>
<fun r='_ZN18QFileSystemWatcher11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QFileSystemWatcher2trEPKcS1_i'/>
<fun r='_ZN18QFileSystemWatcher18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QFileSystemWatcher6d_funcEv'/>
<fun r='_ZNK18QFileSystemWatcher6d_funcEv'/>
<fun r='_ZN18QFileSystemWatcherC1EP7QObject'/>
<fun r='_ZN18QFileSystemWatcherC1ERK5QListI7QStringEP7QObject'/>
<fun r='_ZN18QFileSystemWatcherD1Ev'/>
<fun r='_ZN18QFileSystemWatcher7addPathERK7QString'/>
<fun r='_ZN18QFileSystemWatcher8addPathsERK5QListI7QStringE'/>
<fun r='_ZN18QFileSystemWatcher10removePathERK7QString'/>
<fun r='_ZN18QFileSystemWatcher11removePathsERK5QListI7QStringE'/>
<fun r='_ZNK18QFileSystemWatcher5filesEv'/>
<fun r='_ZNK18QFileSystemWatcher11directoriesEv'/>
<fun r='_ZN18QFileSystemWatcher11fileChangedERK7QStringNS_14QPrivateSignalE'/>
<fun r='_ZN18QFileSystemWatcher16directoryChangedERK7QStringNS_14QPrivateSignalE'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher_p.h' l='59' c='_ZN25QFileSystemWatcherPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher_p.h' l='59' c='_ZN25QFileSystemWatcherPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher_p.h' l='59' c='_ZNK25QFileSystemWatcherPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher_p.h' l='59' c='_ZNK25QFileSystemWatcherPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher_p.h' l='59'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher.cpp' l='63' c='_ZN25QFileSystemWatcherPrivate4initEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher.cpp' l='93' c='_ZN25QFileSystemWatcherPrivate16initPollerEngineEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher.cpp' l='107' c='_ZN25QFileSystemWatcherPrivate14_q_fileChangedERK7QStringb'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher.cpp' l='120' c='_ZN25QFileSystemWatcherPrivate19_q_directoryChangedERK7QStringb'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher.cpp' l='172'>/*!
    \class QFileSystemWatcher
    \inmodule QtCore
    \brief The QFileSystemWatcher class provides an interface for monitoring files and directories for modifications.
    \ingroup io
    \since 4.2
    \reentrant

    QFileSystemWatcher monitors the file system for changes to files
    and directories by watching a list of specified paths.

    Call addPath() to watch a particular file or directory. Multiple
    paths can be added using the addPaths() function. Existing paths can
    be removed by using the removePath() and removePaths() functions.

    QFileSystemWatcher examines each path added to it. Files that have
    been added to the QFileSystemWatcher can be accessed using the
    files() function, and directories using the directories() function.

    The fileChanged() signal is emitted when a file has been modified,
    renamed or removed from disk. Similarly, the directoryChanged()
    signal is emitted when a directory or its contents is modified or
    removed.  Note that QFileSystemWatcher stops monitoring files once
    they have been renamed or removed from disk, and directories once
    they have been removed from disk.

    \list
    \li \b Notes:
    \list
        \li On systems running a Linux kernel without inotify support,
        file systems that contain watched paths cannot be unmounted.

         \li The act of monitoring files and directories for
         modifications consumes system resources. This implies there is a
         limit to the number of files and directories your process can
         monitor simultaneously. On all BSD variants, for
         example, an open file descriptor is required for each monitored
         file. Some system limits the number of open file descriptors to 256
         by default. This means that addPath() and addPaths() will fail if
         your process tries to add more than 256 files or directories to
         the file system monitor. Also note that your process may have
         other file descriptors open in addition to the ones for files
         being monitored, and these other open descriptors also count in
         the total. \macos uses a different backend and does not
         suffer from this issue.
    \endlist
    \endlist

    \sa QFile, QDir
*/</doc>
<fun r='_ZN18QFileSystemWatcherC1EP7QObject'/>
<fun r='_ZN18QFileSystemWatcherC1ERK5QListI7QStringEP7QObject'/>
<fun r='_ZN18QFileSystemWatcherD1Ev'/>
<fun r='_ZN18QFileSystemWatcher7addPathERK7QString'/>
<fun r='_ZN18QFileSystemWatcher8addPathsERK5QListI7QStringE'/>
<fun r='_ZN18QFileSystemWatcher10removePathERK7QString'/>
<fun r='_ZN18QFileSystemWatcher11removePathsERK5QListI7QStringE'/>
<fun r='_ZNK18QFileSystemWatcher11directoriesEv'/>
<fun r='_ZNK18QFileSystemWatcher5filesEv'/>
<use f='qtbase-6.5.0/src/gui/itemmodels/qfileinfogatherer_p.h' l='181'/>
<use f='qtbase-6.5.0/src/gui/itemmodels/qfileinfogatherer.cpp' l='175' c='_ZN17QFileInfoGatherer13createWatcherEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/plugins/platforminputcontexts/ibus/qibusplatforminputcontext.h' l='86'/>
<size>16</size>
