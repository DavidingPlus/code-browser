<dec f='qtbase-6.5.0/src/widgets/kernel/qwidget.h' l='342' type='void QWidget::setMask(const QBitmap &amp; )'/>
<def f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='12999' ll='13002' type='void QWidget::setMask(const QBitmap &amp; bitmap)'/>
<doc f='qtbase-6.5.0/src/widgets/kernel/qwidget.cpp' l='12974'>/*!
    \fn void QWidget::setMask(const QBitmap &amp;bitmap)

    Causes only the pixels of the widget for which \a bitmap has a
    corresponding 1 bit to be visible. If the region includes pixels
    outside the rect() of the widget, window system controls in that
    area may or may not be visible, depending on the platform.

    Note that this effect can be slow if the region is particularly
    complex.

    The following code shows how an image with an alpha channel can be
    used to generate a mask for a widget:

    \snippet widget-mask/main.cpp 0

    The label shown by this code is masked using the image it contains,
    giving the appearance that an irregularly-shaped image is being drawn
    directly onto the screen.

    Masked widgets receive mouse events only on their visible
    portions.

    \sa clearMask(), windowOpacity(), {Shaped Clock Example}
*/</doc>
<use f='qtbase-6.5.0/src/widgets/util/qsystemtrayicon.cpp' l='639' u='c' c='_ZN11QBalloonTip7balloonERK6QPointib'/>
