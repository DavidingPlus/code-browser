<use f='qtbase-6.5.0/src/opengl/qopengldebug.h' l='100'/>
<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/opengl/qopengldebug.h' l='119' ll='176'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.h' l='173' c='_ZN18QOpenGLDebugLoggerC1ERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.h' l='173' c='_ZN18QOpenGLDebugLoggeraSERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.h' l='173' c='_ZN18QOpenGLDebugLoggeraSERKS_'/>
<size>16</size>
<smbr r='QOpenGLDebugLogger::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK18QOpenGLDebugLogger10metaObjectEv'/>
<fun r='_ZN18QOpenGLDebugLogger11qt_metacastEPKc'/>
<fun r='_ZN18QOpenGLDebugLogger11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QOpenGLDebugLogger2trEPKcS1_i'/>
<fun r='_ZN18QOpenGLDebugLogger18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QOpenGLDebugLoggerC1EP7QObject'/>
<fun r='_ZN18QOpenGLDebugLoggerD1Ev'/>
<fun r='_ZN18QOpenGLDebugLogger10initializeEv'/>
<fun r='_ZNK18QOpenGLDebugLogger9isLoggingEv'/>
<fun r='_ZNK18QOpenGLDebugLogger11loggingModeEv'/>
<fun r='_ZNK18QOpenGLDebugLogger20maximumMessageLengthEv'/>
<fun r='_ZN18QOpenGLDebugLogger9pushGroupERK7QStringjN19QOpenGLDebugMessage6SourceE'/>
<fun r='_ZN18QOpenGLDebugLogger8popGroupEv'/>
<fun r='_ZN18QOpenGLDebugLogger14enableMessagesE6QFlagsIN19QOpenGLDebugMessage6SourceEES0_INS1_4TypeEES0_INS1_8SeverityEE'/>
<fun r='_ZN18QOpenGLDebugLogger14enableMessagesERK5QListIjE6QFlagsIN19QOpenGLDebugMessage6SourceEES4_INS5_4TypeEE'/>
<fun r='_ZN18QOpenGLDebugLogger15disableMessagesE6QFlagsIN19QOpenGLDebugMessage6SourceEES0_INS1_4TypeEES0_INS1_8SeverityEE'/>
<fun r='_ZN18QOpenGLDebugLogger15disableMessagesERK5QListIjE6QFlagsIN19QOpenGLDebugMessage6SourceEES4_INS5_4TypeEE'/>
<fun r='_ZNK18QOpenGLDebugLogger14loggedMessagesEv'/>
<fun r='_ZN18QOpenGLDebugLogger10logMessageERK19QOpenGLDebugMessage'/>
<fun r='_ZN18QOpenGLDebugLogger12startLoggingENS_11LoggingModeE'/>
<fun r='_ZN18QOpenGLDebugLogger11stopLoggingEv'/>
<fun r='_ZN18QOpenGLDebugLogger13messageLoggedERK19QOpenGLDebugMessage'/>
<fun r='_ZN18QOpenGLDebugLoggerC1ERKS_'/>
<fun r='_ZN18QOpenGLDebugLogger6d_funcEv'/>
<fun r='_ZNK18QOpenGLDebugLogger6d_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.cpp' l='1041' c='_ZN25QOpenGLDebugLoggerPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.cpp' l='1041' c='_ZN25QOpenGLDebugLoggerPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.cpp' l='1041' c='_ZNK25QOpenGLDebugLoggerPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.cpp' l='1041' c='_ZNK25QOpenGLDebugLoggerPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.cpp' l='1041'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.cpp' l='1116' c='_ZN25QOpenGLDebugLoggerPrivate13handleMessageEjjjjiPKc'/>
<use f='qtbase-6.5.0/src/opengl/qopengldebug.cpp' l='1229' c='_ZN25QOpenGLDebugLoggerPrivate28_q_contextAboutToBeDestroyedEv'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/opengl/qopengldebug.cpp' l='38'>/*!
    \class QOpenGLDebugLogger
    \brief The QOpenGLDebugLogger enables logging of OpenGL debugging messages.
    \inmodule QtOpenGL
    \since 5.1
    \ingroup painting-3D

    \tableofcontents

    \section1 Introduction

    OpenGL programming can be very error prone. Most of the time, a single
    failing call to OpenGL can cause an entire portion of an application to
    stop working, with nothing being drawn on the screen.

    The only way to be sure that no errors are being returned from the OpenGL
    implementation is checking with \c{glGetError} after each and every API
    call. Moreover, OpenGL errors stack up, therefore glGetError should always
    be used in a loop like this:

    \snippet code/src_gui_opengl_qopengldebug.cpp 0

    If you try to clear the error stack, make sure not just keep going until
    GL_NO_ERROR is returned but also break on GL_CONTEXT_LOST as that error
    value will keep repeating.

    There are also many other information we are interested in (as application
    developers), for instance performance issues, or warnings about using
    deprecated APIs. Those kind of messages are not reported through the
    ordinary OpenGL error reporting mechanisms.

    QOpenGLDebugLogger aims at addressing these issues by providing access to
    the \e{OpenGL debug log}. If your OpenGL implementation supports it (by
    exposing the \c{GL_KHR_debug} extension), messages from the OpenGL server
    will be either logged in an internal OpenGL log, or passed in &quot;real-time&quot;
    to listeners as they&apos;re generated from OpenGL.

    QOpenGLDebugLogger supports both these modes of operation. Refer to the
    following sections to find out the differences between them.

    \section1 Creating an OpenGL Debug Context

    For efficiency reasons, OpenGL implementations are allowed not to create
    any debug output at all, unless the OpenGL context is a debug context. In order
    to create a debug context from Qt, you must set the QSurfaceFormat::DebugContext
    format option on the QSurfaceFormat used to create the QOpenGLContext object:

    \snippet code/src_gui_opengl_qopengldebug.cpp 1

    Note that requesting a 3.2 OpenGL Core Profile is just for the example&apos;s
    purposes; this class is not tied to any specific OpenGL or OpenGL ES
    version, as it relies on the availability of the \c{GL_KHR_debug} extension
    (see below).

    \section1 Creating and Initializing a QOpenGLDebugLogger

    QOpenGLDebugLogger is a simple QObject-derived class. Just like all QObject
    subclasses, you create an instance (and optionally specify a parent
    object), and like the other OpenGL functions in Qt you \e{must} initialize
    it before usage by calling initialize() whilst there is a current OpenGL context:

    \snippet code/src_gui_opengl_qopengldebug.cpp 2

    Note that the \c{GL_KHR_debug} extension \e{must} be available in the context
    in order to access the messages logged by OpenGL. You can check the
    presence of this extension by calling:

    \snippet code/src_gui_opengl_qopengldebug.cpp 3

    where \c{ctx} is a valid QOpenGLContext. If the extension is not available,
    initialize() will return false.

    \section1 Reading the Internal OpenGL Debug Log

    OpenGL implementations keep an internal log of debug messages. Messages
    stored in this log can be retrieved by using the loggedMessages() function:

    \snippet code/src_gui_opengl_qopengldebug.cpp 4

    The internal log has a limited size; when it fills up, older messages will
    get discarded to make room for the new incoming messages. When you call
    loggedMessages(), the internal log will be emptied as well.

    If you want to be sure not to lose any debug message, you must use real-time
    logging instead of calling this function. However, debug messages might
    still be generated in the timespan between context creation and activation
    of real-time logging (or, in general, when the real-time logging is disabled).

    \section1 Real-time logging of messages

    It is also possible to receive a stream of debug messages from the OpenGL
    server \e{as they are generated} by the implementation. In order to do so,
    you need to connect a suitable slot to the messageLogged() signal, and
    start logging by calling startLogging():

    \snippet code/src_gui_opengl_qopengldebug.cpp 5

    Similarly, logging can be disabled at any time by calling the stopLogging()
    function.

    Real-time logging can be either asynchronous or synchronous, depending on
    the parameter passed to startLogging(). When logging in asynchronous mode
    (the default, as it has a very small overhead), the OpenGL implementation
    can generate messages at any time, and/or in an order which is different from the
    order of the OpenGL commands which caused those messages to be logged.
    The messages could also be generated from a thread that it&apos;s different from
    the thread the context is currently bound to. This is because OpenGL
    implementations are usually highly threaded and asynchronous, and therefore
    no warranties are made about the relative order and the timings of the
    debug messages.

    On the other hand, logging in synchronous mode has a high overhead, but
    the OpenGL implementation guarantees that all the messages caused by a
    certain command are received in order, before the command returns,
    and from the same thread the OpenGL context is bound to.

    This means that when logging in synchronous mode you will be able to run
    your OpenGL application in a debugger, put a breakpoint on a slot connected
    to the messageLogged() signal, and see in the backtrace the exact call
    that caused the logged message. This can be extremely useful to debug
    an OpenGL problem. Note that if OpenGL rendering is happening in another
    thread, you must force the signal/slot connection type to Qt::DirectConnection
    in order to be able to see the actual backtrace.

    Refer to the LoggingMode enum documentation for more information about
    logging modes.

    \note When real-time logging is enabled, debug messages will \e{not} be
    inserted in the internal OpenGL debug log any more; messages already
    present in the internal log will not be deleted, nor they will be emitted
    through the messageLogged() signal. Since some messages might be generated
    before real-time logging is started (and therefore be kept in the internal
    OpenGL log), it is important to always check if it contains any message
    after calling startLogging().

    \section1 Inserting Messages in the Debug Log

    It is possible for applications and libraries to insert custom messages in
    the debug log, for instance for marking a group of related OpenGL commands
    and therefore being then able to identify eventual messages coming from them.

    In order to do so, you can create a QOpenGLDebugMessage object by calling
    \l{QOpenGLDebugMessage::}{createApplicationMessage()} or
    \l{QOpenGLDebugMessage::}{createThirdPartyMessage()}, and then inserting it
    into the log by calling logMessage():

    \snippet code/src_gui_opengl_qopengldebug.cpp 6

    Note that OpenGL implementations have a vendor-specific limit to the length
    of the messages that can be inserted in the debug log. You can retrieve
    this length by calling the maximumMessageLength() method; messages longer
    than the limit will automatically get truncated.

    \section1 Controlling the Debug Output

    QOpenGLDebugMessage is also able to apply filters to the debug messages, and
    therefore limit the amount of messages logged. You can enable or disable
    logging of messages by calling enableMessages() and disableMessages()
    respectively. By default, all messages are logged.

    It is possible to enable or disable messages by selecting them by:

    \list
    \li source, type and severity (and including all ids in the selection);
    \li id, source and type (and including all severities in the selection).
    \endlist

    Note that the &quot;enabled&quot; status for a given message is a property of the
    (id, source, type, severity) tuple; the message attributes \e{do not} form
    a hierarchy of any kind. You should be careful about the order of the calls
    to enableMessages() and disableMessages(), as it will change which
    messages will are enabled / disabled.

    It&apos;s not possible to filter by the message text itself; applications
    have to do that on their own (in slots connected to the messageLogged()
    signal, or after fetching the messages in the internal debug log
    through loggedMessages()).

    In order to simplify the management of the enabled / disabled statuses,
    QOpenGLDebugMessage also supports the concept of \c{debug groups}. A debug
    group contains the group of enabled / disabled configurations of debug
    messages. Moreover, debug groups are organized in a stack: it is possible
    to push and pop groups by calling pushGroup() and popGroup() respectively.
    (When an OpenGL context is created, there is already a group in the stack).

    The enableMessages() and disableMessages() functions will modify the
    configuration in the current debug group, that is, the one at the top of
    the debug groups stack.

    When a new group is pushed onto the debug groups stack, it will inherit
    the configuration of the group that was previously on the top of the stack.
    Vice versa, popping a debug group will restore the configuration of
    the debug group that becomes the new top.

    Pushing (respectively popping) debug groups will also automatically generate
    a debug message of type QOpenGLDebugMessage::GroupPushType (respectively
    \l{QOpenGLDebugMessage::}{GroupPopType}).

    \sa QOpenGLDebugMessage
*/</doc>
<fun r='_ZN18QOpenGLDebugLoggerC1EP7QObject'/>
<fun r='_ZN18QOpenGLDebugLoggerD1Ev'/>
<fun r='_ZN18QOpenGLDebugLogger10initializeEv'/>
<fun r='_ZNK18QOpenGLDebugLogger9isLoggingEv'/>
<fun r='_ZN18QOpenGLDebugLogger12startLoggingENS_11LoggingModeE'/>
<fun r='_ZNK18QOpenGLDebugLogger11loggingModeEv'/>
<fun r='_ZN18QOpenGLDebugLogger11stopLoggingEv'/>
<fun r='_ZN18QOpenGLDebugLogger10logMessageERK19QOpenGLDebugMessage'/>
<fun r='_ZN18QOpenGLDebugLogger9pushGroupERK7QStringjN19QOpenGLDebugMessage6SourceE'/>
<fun r='_ZN18QOpenGLDebugLogger8popGroupEv'/>
<fun r='_ZN18QOpenGLDebugLogger14enableMessagesE6QFlagsIN19QOpenGLDebugMessage6SourceEES0_INS1_4TypeEES0_INS1_8SeverityEE'/>
<fun r='_ZN18QOpenGLDebugLogger14enableMessagesERK5QListIjE6QFlagsIN19QOpenGLDebugMessage6SourceEES4_INS5_4TypeEE'/>
<fun r='_ZN18QOpenGLDebugLogger15disableMessagesE6QFlagsIN19QOpenGLDebugMessage6SourceEES0_INS1_4TypeEES0_INS1_8SeverityEE'/>
<fun r='_ZN18QOpenGLDebugLogger15disableMessagesERK5QListIjE6QFlagsIN19QOpenGLDebugMessage6SourceEES4_INS5_4TypeEE'/>
<fun r='_ZNK18QOpenGLDebugLogger14loggedMessagesEv'/>
<fun r='_ZNK18QOpenGLDebugLogger20maximumMessageLengthEv'/>
