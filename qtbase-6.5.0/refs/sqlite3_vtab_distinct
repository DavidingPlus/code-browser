<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='10030' type='int sqlite3_vtab_distinct(sqlite3_index_info * )'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='133230'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='161001' ll='161005' type='int sqlite3_vtab_distinct(sqlite3_index_info * pIdxInfo)'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='9959'>/*
** CAPI3REF: Determine if a virtual table query is DISTINCT
** METHOD: sqlite3_index_info
**
** This API may only be used from within an [xBestIndex|xBestIndex method]
** of a [virtual table] implementation. The result of calling this
** interface from outside of xBestIndex() is undefined and probably harmful.
**
** ^The sqlite3_vtab_distinct() interface returns an integer between 0 and
** 3.  The integer returned by sqlite3_vtab_distinct()
** gives the virtual table additional information about how the query
** planner wants the output to be ordered. As long as the virtual table
** can meet the ordering requirements of the query planner, it may set
** the &quot;orderByConsumed&quot; flag.
**
** &lt;ol&gt;&lt;li value=&quot;0&quot;&gt;&lt;p&gt;
** ^If the sqlite3_vtab_distinct() interface returns 0, that means
** that the query planner needs the virtual table to return all rows in the
** sort order defined by the &quot;nOrderBy&quot; and &quot;aOrderBy&quot; fields of the
** [sqlite3_index_info] object.  This is the default expectation.  If the
** virtual table outputs all rows in sorted order, then it is always safe for
** the xBestIndex method to set the &quot;orderByConsumed&quot; flag, regardless of
** the return value from sqlite3_vtab_distinct().
** &lt;li value=&quot;1&quot;&gt;&lt;p&gt;
** ^(If the sqlite3_vtab_distinct() interface returns 1, that means
** that the query planner does not need the rows to be returned in sorted order
** as long as all rows with the same values in all columns identified by the
** &quot;aOrderBy&quot; field are adjacent.)^  This mode is used when the query planner
** is doing a GROUP BY.
** &lt;li value=&quot;2&quot;&gt;&lt;p&gt;
** ^(If the sqlite3_vtab_distinct() interface returns 2, that means
** that the query planner does not need the rows returned in any particular
** order, as long as rows with the same values in all &quot;aOrderBy&quot; columns
** are adjacent.)^  ^(Furthermore, only a single row for each particular
** combination of values in the columns identified by the &quot;aOrderBy&quot; field
** needs to be returned.)^  ^It is always ok for two or more rows with the same
** values in all &quot;aOrderBy&quot; columns to be returned, as long as all such rows
** are adjacent.  ^The virtual table may, if it chooses, omit extra rows
** that have the same value for all columns identified by &quot;aOrderBy&quot;.
** ^However omitting the extra rows is optional.
** This mode is used for a DISTINCT query.
** &lt;li value=&quot;3&quot;&gt;&lt;p&gt;
** ^(If the sqlite3_vtab_distinct() interface returns 3, that means
** that the query planner needs only distinct rows but it does need the
** rows to be sorted.)^ ^The virtual table implementation is free to omit
** rows that are identical in all aOrderBy columns, if it wants to, but
** it is not required to omit any rows.  This mode is used for queries
** that have both DISTINCT and ORDER BY clauses.
** &lt;/ol&gt;
**
** ^For the purposes of comparing virtual table output values to see if the
** values are same value for sorting purposes, two NULL values are considered
** to be the same.  In other words, the comparison operator is &quot;IS&quot;
** (or &quot;IS NOT DISTINCT FROM&quot;) and not &quot;==&quot;.
**
** If a virtual table implementation is unable to meet the requirements
** specified above, then it must not set the &quot;orderByConsumed&quot; flag in the
** [sqlite3_index_info] object or an incorrect answer may result.
**
** ^A virtual table implementation is always free to return rows in any order
** it wants, as long as the &quot;orderByConsumed&quot; flag is not set.  ^When the
** the &quot;orderByConsumed&quot; flag is unset, the query planner will add extra
** [bytecode] to ensure that the final results returned by the SQL query are
** ordered correctly.  The use of the &quot;orderByConsumed&quot; flag and the
** sqlite3_vtab_distinct() interface is merely an optimization.  ^Careful
** use of the sqlite3_vtab_distinct() interface and the &quot;orderByConsumed&quot;
** flag might help queries against a virtual table to run faster.  Being
** overly aggressive and setting the &quot;orderByConsumed&quot; flag when it is not
** valid to do so, on the other hand, might cause SQLite to return incorrect
** results.
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='160998'>/*
** Return true if ORDER BY clause may be handled as DISTINCT.
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='9724' type='int sqlite3_vtab_distinct(sqlite3_index_info * )'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='9653'>/*
** CAPI3REF: Determine if a virtual table query is DISTINCT
** METHOD: sqlite3_index_info
**
** This API may only be used from within an [xBestIndex|xBestIndex method]
** of a [virtual table] implementation. The result of calling this
** interface from outside of xBestIndex() is undefined and probably harmful.
**
** ^The sqlite3_vtab_distinct() interface returns an integer between 0 and
** 3.  The integer returned by sqlite3_vtab_distinct()
** gives the virtual table additional information about how the query
** planner wants the output to be ordered. As long as the virtual table
** can meet the ordering requirements of the query planner, it may set
** the &quot;orderByConsumed&quot; flag.
**
** &lt;ol&gt;&lt;li value=&quot;0&quot;&gt;&lt;p&gt;
** ^If the sqlite3_vtab_distinct() interface returns 0, that means
** that the query planner needs the virtual table to return all rows in the
** sort order defined by the &quot;nOrderBy&quot; and &quot;aOrderBy&quot; fields of the
** [sqlite3_index_info] object.  This is the default expectation.  If the
** virtual table outputs all rows in sorted order, then it is always safe for
** the xBestIndex method to set the &quot;orderByConsumed&quot; flag, regardless of
** the return value from sqlite3_vtab_distinct().
** &lt;li value=&quot;1&quot;&gt;&lt;p&gt;
** ^(If the sqlite3_vtab_distinct() interface returns 1, that means
** that the query planner does not need the rows to be returned in sorted order
** as long as all rows with the same values in all columns identified by the
** &quot;aOrderBy&quot; field are adjacent.)^  This mode is used when the query planner
** is doing a GROUP BY.
** &lt;li value=&quot;2&quot;&gt;&lt;p&gt;
** ^(If the sqlite3_vtab_distinct() interface returns 2, that means
** that the query planner does not need the rows returned in any particular
** order, as long as rows with the same values in all &quot;aOrderBy&quot; columns
** are adjacent.)^  ^(Furthermore, only a single row for each particular
** combination of values in the columns identified by the &quot;aOrderBy&quot; field
** needs to be returned.)^  ^It is always ok for two or more rows with the same
** values in all &quot;aOrderBy&quot; columns to be returned, as long as all such rows
** are adjacent.  ^The virtual table may, if it chooses, omit extra rows
** that have the same value for all columns identified by &quot;aOrderBy&quot;.
** ^However omitting the extra rows is optional.
** This mode is used for a DISTINCT query.
** &lt;li value=&quot;3&quot;&gt;&lt;p&gt;
** ^(If the sqlite3_vtab_distinct() interface returns 3, that means
** that the query planner needs only distinct rows but it does need the
** rows to be sorted.)^ ^The virtual table implementation is free to omit
** rows that are identical in all aOrderBy columns, if it wants to, but
** it is not required to omit any rows.  This mode is used for queries
** that have both DISTINCT and ORDER BY clauses.
** &lt;/ol&gt;
**
** ^For the purposes of comparing virtual table output values to see if the
** values are same value for sorting purposes, two NULL values are considered
** to be the same.  In other words, the comparison operator is &quot;IS&quot;
** (or &quot;IS NOT DISTINCT FROM&quot;) and not &quot;==&quot;.
**
** If a virtual table implementation is unable to meet the requirements
** specified above, then it must not set the &quot;orderByConsumed&quot; flag in the
** [sqlite3_index_info] object or an incorrect answer may result.
**
** ^A virtual table implementation is always free to return rows in any order
** it wants, as long as the &quot;orderByConsumed&quot; flag is not set.  ^When the
** the &quot;orderByConsumed&quot; flag is unset, the query planner will add extra
** [bytecode] to ensure that the final results returned by the SQL query are
** ordered correctly.  The use of the &quot;orderByConsumed&quot; flag and the
** sqlite3_vtab_distinct() interface is merely an optimization.  ^Careful
** use of the sqlite3_vtab_distinct() interface and the &quot;orderByConsumed&quot;
** flag might help queries against a virtual table to run faster.  Being
** overly aggressive and setting the &quot;orderByConsumed&quot; flag when it is not
** valid to do so, on the other hand, might cause SQLite to return incorrect
** results.
*/</doc>
