<def f='qtbase-6.5.0/src/gui/kernel/qsurfaceformat.h' l='30' ll='35'/>
<use f='qtbase-6.5.0/src/gui/kernel/qsurfaceformat.h' l='36' c='_Z20qt_getEnumMetaObjectN14QSurfaceFormat12SwapBehaviorE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qsurfaceformat.h' l='36' c='_Z14qt_getEnumNameN14QSurfaceFormat12SwapBehaviorE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qsurfaceformat.h' l='85' c='_ZN14QSurfaceFormat15setSwapBehaviorENS_12SwapBehaviorE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qsurfaceformat.h' l='86' c='_ZNK14QSurfaceFormat12swapBehaviorEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qsurfaceformat.cpp' l='72'/>
<use f='qtbase-6.5.0/src/gui/kernel/qsurfaceformat.cpp' l='409' c='_ZN14QSurfaceFormat15setSwapBehaviorENS_12SwapBehaviorE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qsurfaceformat.cpp' l='422' c='_ZNK14QSurfaceFormat12swapBehaviorEv'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qsurfaceformat.cpp' l='124'>/*!
    \enum QSurfaceFormat::SwapBehavior

    This enum is used by QSurfaceFormat to specify the swap behaviour of a surface. The swap behaviour
    is mostly transparent to the application, but it affects factors such as rendering latency and
    throughput.

    \value DefaultSwapBehavior The default, unspecified swap behaviour of the platform.
    \value SingleBuffer Used to request single buffering, which might result in flickering
        when OpenGL rendering is done directly to screen without an intermediate offscreen
        buffer.
    \value DoubleBuffer This is typically the default swap behaviour on desktop platforms,
        consisting of one back buffer and one front buffer. Rendering is done to the back
        buffer, and then the back buffer and front buffer are swapped, or the contents of
        the back buffer are copied to the front buffer, depending on the implementation.
    \value TripleBuffer This swap behaviour is sometimes used in order to decrease the
        risk of skipping a frame when the rendering rate is just barely keeping up with
        the screen refresh rate. Depending on the platform it might also lead to slightly
        more efficient use of the GPU due to improved pipelining behaviour. Triple buffering
        comes at the cost of an extra frame of memory usage and latency, and might not be
        supported depending on the underlying platform.
*/</doc>
