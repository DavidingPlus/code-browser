<dec f='qtbase-6.5.0/src/gui/text/qtextobject.h' l='193' type='void QTextBlock::setUserData(QTextBlockUserData * data)'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='551' u='c' c='_ZN18QSyntaxHighlighter23setCurrentBlockUserDataEP18QTextBlockUserData'/>
<def f='qtbase-6.5.0/src/gui/text/qtextobject.cpp' l='1249' ll='1258' type='void QTextBlock::setUserData(QTextBlockUserData * data)'/>
<doc f='qtbase-6.5.0/src/gui/text/qtextobject.cpp' l='1224'>/*!
    \since 4.1

    Attaches the given \a data object to the text block.

    QTextBlockUserData can be used to store custom settings.  The
    ownership is passed to the underlying text document, i.e. the
    provided QTextBlockUserData object will be deleted if the
    corresponding text block gets deleted. The user data object is
    not stored in the undo history, so it will not be available after
    undoing the deletion of a text block.

    For example, if you write a programming editor in an IDE, you may
    want to let your user set breakpoints visually in your code for an
    integrated debugger. In a programming editor a line of text
    usually corresponds to one QTextBlock. The QTextBlockUserData
    interface allows the developer to store data for each QTextBlock,
    like for example in which lines of the source code the user has a
    breakpoint set. Of course this could also be stored externally,
    but by storing it inside the QTextDocument, it will for example be
    automatically deleted when the user deletes the associated
    line. It&apos;s really just a way to store custom information in the
    QTextDocument without using custom properties in QTextFormat which
    would affect the undo/redo stack.
*/</doc>
