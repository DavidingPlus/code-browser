<dec f='qtbase-6.5.0/src/gui/util/qundostack.h' l='68' type='void QUndoStack::push(QUndoCommand * cmd)'/>
<def f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='567' ll='624' type='void QUndoStack::push(QUndoCommand * cmd)'/>
<doc f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='539'>/*!
    Pushes \a cmd on the stack or merges it with the most recently executed command.
    In either case, executes \a cmd by calling its redo() function.

    If \a cmd&apos;s id is not -1, and if the id is the same as that of the
    most recently executed command, QUndoStack will attempt to merge the two
    commands by calling QUndoCommand::mergeWith() on the most recently executed
    command. If QUndoCommand::mergeWith() returns \c true, \a cmd is deleted.

    After calling QUndoCommand::redo() and, if applicable, QUndoCommand::mergeWith(),
    QUndoCommand::isObsolete() will be called for \a cmd or the merged command.
    If QUndoCommand::isObsolete() returns \c true, then \a cmd or the merged command
    will be deleted from the stack.

    In all other cases \a cmd is simply pushed on the stack.

    If commands were undone before \a cmd was pushed, the current command and
    all commands above it are deleted. Hence \a cmd always ends up being the
    top-most on the stack.

    Once a command is pushed, the stack takes ownership of it. There
    are no getters to return the command, since modifying it after it has
    been executed will almost always lead to corruption of the document&apos;s
    state.

    \sa QUndoCommand::id(), QUndoCommand::mergeWith()
*/</doc>
