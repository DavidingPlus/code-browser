<dec f='qtbase-6.5.0/src/testlib/qtestcase.h' l='435' type='bool QTest::compare_helper(bool success, const char * failureMsg, char * actualVal, char * expectedVal, const char * actual, const char * expected, const char * file, int line)'/>
<def f='qtbase-6.5.0/src/testlib/qtestcase.cpp' l='3119' ll='3126' type='bool QTest::compare_helper(bool success, const char * failureMsg, char * actualVal, char * expectedVal, const char * actual, const char * expected, const char * file, int line)'/>
<doc f='qtbase-6.5.0/src/testlib/qtestcase.cpp' l='3101'>/*! \internal
    \deprecated [6.4]
    This function is called by various specializations of QTest::qCompare
    to decide whether to report a failure and to produce verbose test output.

    The failureMsg parameter can be null, in which case a default message
    will be output if the compare fails.  If the compare succeeds, failureMsg
    will not be output.

    Using this function is not optimal, because it requires the string
    representations of \a actualVal and \a expectedVal to be pre-calculated,
    even though they will be used only if the comparison fails. Prefer using the
    \l compare_helper() overload that takes qxp::function_ref() for such cases.

    If the caller creates a custom failure message showing the compared values,
    or if those values cannot be stringified, use the overload of the function
    that takes no \a actualVal and \a expecetedVal parameters.
*/</doc>
