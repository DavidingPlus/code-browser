<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/opengl/qopengltimerquery.h' l='46' ll='74'/>
<use f='qtbase-6.5.0/src/opengl/qopengltimerquery.h' l='73' c='_ZN18QOpenGLTimeMonitorC1ERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopengltimerquery.h' l='73' c='_ZN18QOpenGLTimeMonitoraSERKS_'/>
<use f='qtbase-6.5.0/src/opengl/qopengltimerquery.h' l='73' c='_ZN18QOpenGLTimeMonitoraSERKS_'/>
<size>16</size>
<smbr r='QOpenGLTimeMonitor::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK18QOpenGLTimeMonitor10metaObjectEv'/>
<fun r='_ZN18QOpenGLTimeMonitor11qt_metacastEPKc'/>
<fun r='_ZN18QOpenGLTimeMonitor11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QOpenGLTimeMonitor2trEPKcS1_i'/>
<fun r='_ZN18QOpenGLTimeMonitor18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QOpenGLTimeMonitorC1EP7QObject'/>
<fun r='_ZN18QOpenGLTimeMonitorD1Ev'/>
<fun r='_ZN18QOpenGLTimeMonitor14setSampleCountEi'/>
<fun r='_ZNK18QOpenGLTimeMonitor11sampleCountEv'/>
<fun r='_ZN18QOpenGLTimeMonitor6createEv'/>
<fun r='_ZN18QOpenGLTimeMonitor7destroyEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor9isCreatedEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor9objectIdsEv'/>
<fun r='_ZN18QOpenGLTimeMonitor12recordSampleEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor17isResultAvailableEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor14waitForSamplesEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor16waitForIntervalsEv'/>
<fun r='_ZN18QOpenGLTimeMonitor5resetEv'/>
<fun r='_ZN18QOpenGLTimeMonitor6d_funcEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor6d_funcEv'/>
<fun r='_ZN18QOpenGLTimeMonitorC1ERKS_'/>
<doc f='qtbase-6.5.0/src/opengl/qopengltimerquery.cpp' l='609'>/*!
    \class QOpenGLTimeMonitor
    \brief The QOpenGLTimeMonitor class wraps a sequence of OpenGL timer query objects.
    \inmodule QtOpenGL
    \since 5.1
    \ingroup painting-3D

    The QOpenGLTimeMonitor class is a convenience wrapper around a collection of OpenGL
    timer query objects used to measure intervals of time on the GPU to the level of
    granularity required by your rendering application.

    The OpenGL timer queries objects are queried in sequence to record the GPU
    timestamps at positions of interest in your rendering code. Once the results for
    all issues timer queries become available, the results can be fetched and
    QOpenGLTimerMonitor will calculate the recorded time intervals for you.

    The typical use case of this class is to either profile your application&apos;s rendering
    algorithms or to adjust those algorithms in real-time for dynamic performance/quality
    balancing.

    Prior to using QOpenGLTimeMonitor in your rendering function you should set the
    required number of sample points that you wish to record by calling setSamples(). Note
    that measuring N sample points will produce N-1 time intervals. Once you have set the
    number of sample points, call the create() function with a valid current OpenGL context
    to create the necessary query timer objects. These steps are usually performed just
    once in an initialization function.

    Use the recordSample() function to delimit blocks of code containing OpenGL commands
    that you wish to time. You can check availability of the resulting time
    samples and time intervals with isResultAvailable(). The calculated time intervals and
    the raw timestamp samples can be retrieved with the blocking waitForIntervals() and
    waitForSamples() functions respectively.

    After retrieving the results and before starting a new round of taking samples
    (for example, in the next frame) be sure to call the reset() function which will clear
    the cached results and reset the timer index back to the first timer object.

    \sa QOpenGLTimerQuery
*/</doc>
<fun r='_ZN18QOpenGLTimeMonitorC1EP7QObject'/>
<fun r='_ZN18QOpenGLTimeMonitorD1Ev'/>
<fun r='_ZN18QOpenGLTimeMonitor14setSampleCountEi'/>
<fun r='_ZNK18QOpenGLTimeMonitor11sampleCountEv'/>
<fun r='_ZN18QOpenGLTimeMonitor6createEv'/>
<fun r='_ZN18QOpenGLTimeMonitor7destroyEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor9isCreatedEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor9objectIdsEv'/>
<fun r='_ZN18QOpenGLTimeMonitor12recordSampleEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor17isResultAvailableEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor14waitForSamplesEv'/>
<fun r='_ZNK18QOpenGLTimeMonitor16waitForIntervalsEv'/>
<fun r='_ZN18QOpenGLTimeMonitor5resetEv'/>
