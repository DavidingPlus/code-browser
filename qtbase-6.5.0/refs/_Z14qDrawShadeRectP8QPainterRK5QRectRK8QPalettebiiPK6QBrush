<dec f='qtbase-6.5.0/src/widgets/styles/qdrawutil.h' l='39' type='void qDrawShadeRect(QPainter * p, const QRect &amp; r, const QPalette &amp; pal, bool sunken = false, int lineWidth = 1, int midLineWidth = 0, const QBrush * fill = nullptr)'/>
<use f='qtbase-6.5.0/src/widgets/styles/qcommonstyle.cpp' l='153' u='c' c='_ZNK12QCommonStyle13drawPrimitiveEN6QStyle16PrimitiveElementEPK12QStyleOptionP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qcommonstyle.cpp' l='323' u='c' c='_ZNK12QCommonStyle13drawPrimitiveEN6QStyle16PrimitiveElementEPK12QStyleOptionP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qcommonstyle.cpp' l='2350' u='c' c='_ZNK12QCommonStyle11drawControlEN6QStyle14ControlElementEPK12QStyleOptionP8QPainterPK7QWidget'/>
<def f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='689' ll='696' type='void qDrawShadeRect(QPainter * p, const QRect &amp; r, const QPalette &amp; pal, bool sunken = false, int lineWidth = 1, int midLineWidth = 0, const QBrush * fill = nullptr)'/>
<doc f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='658'>/*!
    \fn void qDrawShadeRect(QPainter *painter, const QRect &amp;rect, const QPalette &amp;palette,
             bool sunken, int lineWidth, int midLineWidth, const QBrush *fill)
    \relates &lt;qdrawutil.h&gt;
    \overload

    Draws the shaded rectangle specified by \a rect using the given \a painter.

    The provide \a palette specifies the shading colors (\l
    {QPalette::light()}{light}, \l {QPalette::dark()}{dark} and \l
    {QPalette::mid()}{middle} colors.  The given \a lineWidth
    specifies the line width for each of the lines; it is not the
    total line width.  The \a midLineWidth specifies the width of a
    middle line drawn in the QPalette::mid() color.  The rectangle&apos;s
    interior is filled with the \a fill brush unless \a fill is \nullptr.

    The rectangle appears sunken if \a sunken is true, otherwise
    raised.

    \warning This function does not look at QWidget::style() or
    QApplication::style(). Use the drawing functions in QStyle to make
    widgets that follow the current GUI style.

    Alternatively you can use a QFrame widget and apply the
    QFrame::setFrameStyle() function to display a shaded rectangle:

    \snippet code/src_gui_painting_qdrawutil.cpp 6

    \sa qDrawShadeLine(), qDrawShadePanel(), qDrawPlainRect(), QStyle
*/</doc>
<use f='qtbase-6.5.0/src/widgets/styles/qwindowsstyle.cpp' l='723' u='c' c='_ZNK13QWindowsStyle13drawPrimitiveEN6QStyle16PrimitiveElementEPK12QStyleOptionP8QPainterPK7QWidget'/>
