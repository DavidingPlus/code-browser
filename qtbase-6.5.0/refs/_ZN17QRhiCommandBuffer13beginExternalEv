<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1531' type='void QRhiCommandBuffer::beginExternal()'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='6850' ll='6853' type='void QRhiCommandBuffer::beginExternal()'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='6811'>/*!
    To be called when the application before the application is about to
    enqueue commands to the current pass&apos; command buffer by calling graphics
    API functions directly.

    \note This is only available when the intent was declared upfront in
    beginPass() or beginComputePass(). Therefore this function must only be
    called when the pass recording was started with specifying
    QRhiCommandBuffer::ExternalContent.

    With Vulkan or Metal one can query the native command buffer or encoder
    objects via nativeHandles() and enqueue commands to them. With OpenGL or
    Direct3D 11 the (device) context can be retrieved from
    QRhi::nativeHandles(). However, this must never be done without ensuring
    the QRhiCommandBuffer&apos;s state stays up-to-date. Hence the requirement for
    wrapping any externally added command recording between beginExternal() and
    endExternal(). Conceptually this is the same as QPainter&apos;s
    \l{QPainter::beginNativePainting()}{beginNativePainting()} and
    \l{QPainter::endNativePainting()}{endNativePainting()} functions.

    For OpenGL in particular, this function has an additional task: it makes
    sure the context is made current on the current thread.

    \note Once beginExternal() is called, no other render pass specific
    functions (\c set* or \c draw*) must be called on the
    QRhiCommandBuffer until endExternal().

    \warning Some backends may return a native command buffer object from
    QRhiCommandBuffer::nativeHandles() that is different from the primary one
    when inside a beginExternal() - endExternal() block. Therefore it is
    important to (re)query the native command buffer object after calling
    beginExternal(). In practical terms this means that with Vulkan for example
    the externally recorded Vulkan commands are placed onto a secondary command
    buffer (with VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT).
    nativeHandles() returns this secondary command buffer when called between
    begin/endExternal.

    \sa endExternal(), nativeHandles()
 */</doc>
