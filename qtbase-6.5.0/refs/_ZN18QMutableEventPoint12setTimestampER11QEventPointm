<dec f='qtbase-6.5.0/src/gui/kernel/qeventpoint_p.h' l='109' type='static void QMutableEventPoint::setTimestamp(QEventPoint &amp; p, ulong t)'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='339' u='c' c='_ZN13QPointerEvent12setTimestampEy'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qeventpoint_p.h' l='108'>// not trivial:</doc>
<def f='qtbase-6.5.0/src/gui/kernel/qeventpoint.cpp' l='559' ll='603' type='static void QMutableEventPoint::setTimestamp(QEventPoint &amp; p, ulong t)'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qeventpoint.cpp' l='541'>/*! \internal
    Set the timestamp from the event that updated this point&apos;s positions,
    and calculate a new value for velocity().

    The velocity calculation is done here because none of the QPointerEvent
    subclass constructors take the timestamp directly, and because
    QGuiApplication traditionally constructs an event first and then sets its
    timestamp (see for example QGuiApplicationPrivate::processMouseEvent()).

    This function looks up the corresponding instance in QPointingDevicePrivate::activePoints,
    and assumes that its timestamp() still holds the previous time when this point
    was updated, its velocity() holds this point&apos;s last-known velocity, and
    its globalPosition() and globalLastPosition() hold this point&apos;s current
    and previous positions, respectively.  We assume timestamps are in milliseconds.

    The velocity calculation is skipped if the platform has promised to
    provide velocities already by setting the QInputDevice::Velocity capability.
*/</doc>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='2977' u='c' c='_ZN22QGuiApplicationPrivate17processTouchEventEPN29QWindowSystemInterfacePrivate10TouchEventE'/>
