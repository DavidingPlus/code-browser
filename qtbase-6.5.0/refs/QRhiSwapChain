<use f='qtbase-6.5.0/src/gui/painting/qplatformbackingstore.h' l='175' c='_ZNK21QPlatformBackingStore12rhiSwapChainEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1019' c='_ZNK25QRhiSwapChainRenderTarget9swapChainEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1022' c='_ZN25QRhiSwapChainRenderTargetC1EP18QRhiImplementationP13QRhiSwapChain'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1023'/>
<inh f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='657' c='QRhiResource'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1369' ll='1437'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1777' c='_ZN4QRhi12newSwapChainEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1778' c='_ZN4QRhi10beginFrameEP13QRhiSwapChain6QFlagsINS_14BeginFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1779' c='_ZN4QRhi8endFrameEP13QRhiSwapChain6QFlagsINS_12EndFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstoredefaultcompositor_p.h' l='38' c='_ZN30QBackingStoreDefaultCompositor5flushEP21QPlatformBackingStoreP4QRhiP13QRhiSwapChainP7QWindowdRK7QRegionRK6QPointP20QPlatformTextureListb'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstoredefaultcompositor_p.h' l='53' c='_ZN30QBackingStoreDefaultCompositor15ensureResourcesEP13QRhiSwapChainP23QRhiResourceUpdateBatch'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstoredefaultcompositor.cpp' l='282' c='_ZL22createGraphicsPipelineP4QRhiP26QRhiShaderResourceBindingsP13QRhiSwapChain13PipelineBlend'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstoredefaultcompositor.cpp' l='409' c='_ZN30QBackingStoreDefaultCompositor15ensureResourcesEP13QRhiSwapChainP23QRhiResourceUpdateBatch'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstoredefaultcompositor.cpp' l='449' c='_ZN30QBackingStoreDefaultCompositor5flushEP21QPlatformBackingStoreP4QRhiP13QRhiSwapChainP7QWindowdRK7QRegionRK6QPointP20QPlatformTextureListb'/>
<size>112</size>
<fun r='_ZNK13QRhiSwapChain12resourceTypeEv'/>
<fun r='_ZNK13QRhiSwapChain6windowEv'/>
<fun r='_ZN13QRhiSwapChain9setWindowEP7QWindow'/>
<fun r='_ZNK13QRhiSwapChain9proxyDataEv'/>
<fun r='_ZN13QRhiSwapChain12setProxyDataERK22QRhiSwapChainProxyData'/>
<fun r='_ZNK13QRhiSwapChain5flagsEv'/>
<fun r='_ZN13QRhiSwapChain8setFlagsE6QFlagsINS_4FlagEE'/>
<fun r='_ZNK13QRhiSwapChain6formatEv'/>
<fun r='_ZN13QRhiSwapChain9setFormatENS_6FormatE'/>
<fun r='_ZNK13QRhiSwapChain12depthStencilEv'/>
<fun r='_ZN13QRhiSwapChain15setDepthStencilEP16QRhiRenderBuffer'/>
<fun r='_ZNK13QRhiSwapChain11sampleCountEv'/>
<fun r='_ZN13QRhiSwapChain14setSampleCountEi'/>
<fun r='_ZNK13QRhiSwapChain20renderPassDescriptorEv'/>
<fun r='_ZN13QRhiSwapChain23setRenderPassDescriptorEP24QRhiRenderPassDescriptor'/>
<fun r='_ZNK13QRhiSwapChain16currentPixelSizeEv'/>
<fun r='_ZN13QRhiSwapChain25currentFrameCommandBufferEv'/>
<fun r='_ZN13QRhiSwapChain24currentFrameRenderTargetEv'/>
<fun r='_ZN13QRhiSwapChain24currentFrameRenderTargetENS_18StereoTargetBufferE'/>
<fun r='_ZN13QRhiSwapChain16surfacePixelSizeEv'/>
<fun r='_ZN13QRhiSwapChain17isFormatSupportedENS_6FormatE'/>
<fun r='_ZN13QRhiSwapChain33newCompatibleRenderPassDescriptorEv'/>
<fun r='_ZN13QRhiSwapChain14createOrResizeEv'/>
<fun r='_ZN13QRhiSwapChain7hdrInfoEv'/>
<fun r='_ZN13QRhiSwapChainC1EP18QRhiImplementation'/>
<mbr r='QRhiSwapChain::m_window' o='384' t='QWindow *'/>
<mbr r='QRhiSwapChain::m_flags' o='448' t='QRhiSwapChain::Flags'/>
<mbr r='QRhiSwapChain::m_format' o='480' t='QRhiSwapChain::Format'/>
<mbr r='QRhiSwapChain::m_depthStencil' o='512' t='QRhiRenderBuffer *'/>
<mbr r='QRhiSwapChain::m_sampleCount' o='576' t='int'/>
<mbr r='QRhiSwapChain::m_renderPassDesc' o='640' t='QRhiRenderPassDescriptor *'/>
<mbr r='QRhiSwapChain::m_currentPixelSize' o='704' t='QSize'/>
<mbr r='QRhiSwapChain::m_proxyData' o='768' t='QRhiSwapChainProxyData'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstorerhisupport_p.h' l='40' c='_ZN23QBackingStoreRhiSupport18swapChainForWindowEP7QWindow'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstorerhisupport_p.h' l='57'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstorerhisupport.cpp' l='134' c='_ZN23QBackingStoreRhiSupport18swapChainForWindowEP7QWindow'/>
<use f='qtbase-6.5.0/src/gui/painting/qbackingstorerhisupport.cpp' l='140' c='_ZN23QBackingStoreRhiSupport18swapChainForWindowEP7QWindow'/>
<size>112</size>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p_p.h' l='68' c='_ZN18QRhiImplementation15createSwapChainEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p_p.h' l='69' c='_ZN18QRhiImplementation10beginFrameEP13QRhiSwapChain6QFlagsIN4QRhi14BeginFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p_p.h' l='70' c='_ZN18QRhiImplementation8endFrameEP13QRhiSwapChain6QFlagsIN4QRhi12EndFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull_p_p.h' l='93' c='_ZN26QNullSwapChainRenderTargetC1EP18QRhiImplementationP13QRhiSwapChain'/>
<ovr f='qtbase-6.5.0/src/gui/rhi/qrhinull_p_p.h' l='152' c='QNullSwapChain'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull_p_p.h' l='152'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull_p_p.h' l='208' c='_ZN8QRhiNull15createSwapChainEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull_p_p.h' l='209' c='_ZN8QRhiNull10beginFrameEP13QRhiSwapChain6QFlagsIN4QRhi14BeginFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull_p_p.h' l='210' c='_ZN8QRhiNull8endFrameEP13QRhiSwapChain6QFlagsIN4QRhi12EndFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull_p_p.h' l='289'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='192' c='_ZN27QGles2SwapChainRenderTargetC1EP18QRhiImplementationP13QRhiSwapChain'/>
<ovr f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='691' c='QGles2SwapChain'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='691'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='753' c='_ZN9QRhiGles215createSwapChainEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='754' c='_ZN9QRhiGles210beginFrameEP13QRhiSwapChain6QFlagsIN4QRhi14BeginFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='755' c='_ZN9QRhiGles28endFrameEP13QRhiSwapChain6QFlagsIN4QRhi12EndFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='3068' c='_ZN25QRhiSwapChainRenderTargetC1EP18QRhiImplementationP13QRhiSwapChain'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='7491' c='_ZN4QRhi12newSwapChainEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='7543' c='_ZN4QRhi10beginFrameEP13QRhiSwapChain6QFlagsINS_14BeginFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='7578' c='_ZN4QRhi8endFrameEP13QRhiSwapChain6QFlagsINS_12EndFrameFlagEE'/>
<size>112</size>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='4545'>/*!
    \class QRhiSwapChain
    \internal
    \inmodule QtGui
    \brief Swapchain resource.

    A swapchain enables presenting rendering results to a surface. A swapchain
    is typically backed by a set of color buffers. Of these, one is displayed
    at a time.

    Below is a typical pattern for creating and managing a swapchain and some
    associated resources in order to render onto a QWindow:

    \badcode
      void init()
      {
          sc = rhi-&gt;newSwapChain();
          ds = rhi-&gt;newRenderBuffer(QRhiRenderBuffer::DepthStencil,
                                    QSize(), // no need to set the size here due to UsedWithSwapChainOnly
                                    1,
                                    QRhiRenderBuffer::UsedWithSwapChainOnly);
          sc-&gt;setWindow(window);
          sc-&gt;setDepthStencil(ds);
          rp = sc-&gt;newCompatibleRenderPassDescriptor();
          sc-&gt;setRenderPassDescriptor(rp);
          resizeSwapChain();
      }

      void resizeSwapChain()
      {
          hasSwapChain = sc-&gt;createOrResize();
      }

      void render()
      {
          if (!hasSwapChain || notExposed)
              return;

          if (sc-&gt;currentPixelSize() != sc-&gt;surfacePixelSize() || newlyExposed) {
              resizeSwapChain();
              if (!hasSwapChain)
                  return;
              newlyExposed = false;
          }

          rhi-&gt;beginFrame(sc);
          // ...
          rhi-&gt;endFrame(sc);
      }
    \endcode

    Avoid relying on QWindow resize events to resize swapchains, especially
    considering that surface sizes may not always fully match the QWindow
    reported dimensions. The safe, cross-platform approach is to do the check
    via surfacePixelSize() whenever starting a new frame.

    Releasing the swapchain must happen while the QWindow and the underlying
    native window is fully up and running. Building on the previous example:

    \badcode
        void releaseSwapChain()
        {
            if (hasSwapChain) {
                sc-&gt;destroy();
                hasSwapChain = false;
            }
        }

        // assuming Window is our QWindow subclass
        bool Window::event(QEvent *e)
        {
            switch (e-&gt;type()) {
            case QEvent::UpdateRequest: // for QWindow::requestUpdate()
                render();
                break;
            case QEvent::PlatformSurface:
                if (static_cast&lt;QPlatformSurfaceEvent *&gt;(e)-&gt;surfaceEventType() == QPlatformSurfaceEvent::SurfaceAboutToBeDestroyed)
                    releaseSwapChain();
                break;
            default:
                break;
            }
            return QWindow::event(e);
        }
    \endcode

    Initializing the swapchain and starting to render the first frame cannot
    start at any time. The safe, cross-platform approach is to rely on expose
    events. QExposeEvent is a loosely specified event that is sent whenever a
    window gets mapped, obscured, and resized, depending on the platform.

    \badcode
        void Window::exposeEvent(QExposeEvent *)
        {
            // initialize and start rendering when the window becomes usable for graphics purposes
            if (isExposed() &amp;&amp; !running) {
                running = true;
                init();
            }

            // stop pushing frames when not exposed or size becomes 0
            if ((!isExposed() || (hasSwapChain &amp;&amp; sc-&gt;surfacePixelSize().isEmpty())) &amp;&amp; running)
                notExposed = true;

            // continue when exposed again and the surface has a valid size
            if (isExposed() &amp;&amp; running &amp;&amp; notExposed &amp;&amp; !sc-&gt;surfacePixelSize().isEmpty()) {
                notExposed = false;
                newlyExposed = true;
            }

            if (isExposed() &amp;&amp; !sc-&gt;surfacePixelSize().isEmpty())
                render();
        }
    \endcode

    Once the rendering has started, a simple way to request a new frame is
    QWindow::requestUpdate(). While on some platforms this is merely a small
    timer, on others it has a specific implementation: for instance on macOS or
    iOS it may be backed by
    \l{https://developer.apple.com/documentation/corevideo/cvdisplaylink?language=objc}{CVDisplayLink}.
    The example above is already prepared for update requests by handling
    QEvent::UpdateRequest.

    While acting as a QRhiRenderTarget, QRhiSwapChain also manages a
    QRhiCommandBuffer. Calling QRhi::endFrame() submits the recorded commands
    and also enqueues a \c present request. The default behavior is to do this
    with a swap interval of 1, meaning synchronizing to the display&apos;s vertical
    refresh is enabled. Thus the rendering thread calling beginFrame() and
    endFrame() will get throttled to vsync. On some backends this can be
    disabled by passing QRhiSwapChain:NoVSync in flags().

    Multisampling (MSAA) is handled transparently to the applications when
    requested via setSampleCount(). Where applicable, QRhiSwapChain will take
    care of creating additional color buffers and issuing a multisample resolve
    command at the end of a frame. For OpenGL, it is necessary to request the
    appropriate sample count also via QSurfaceFormat, by calling
    QSurfaceFormat::setDefaultFormat() before initializing the QRhi.
 */</doc>
<fun r='_ZN13QRhiSwapChainC1EP18QRhiImplementation'/>
<fun r='_ZNK13QRhiSwapChain12resourceTypeEv'/>
<fun r='_ZN13QRhiSwapChain24currentFrameRenderTargetENS_18StereoTargetBufferE'/>
<fun r='_ZN13QRhiSwapChain7hdrInfoEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='1045' c='_ZN9QRhiGles215createSwapChainEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='1956' c='_ZN9QRhiGles210beginFrameEP13QRhiSwapChain6QFlagsIN4QRhi14BeginFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='1974' c='_ZN9QRhiGles28endFrameEP13QRhiSwapChain6QFlagsIN4QRhi12EndFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='5356' c='_ZN27QGles2SwapChainRenderTargetC1EP18QRhiImplementationP13QRhiSwapChain'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='5902' c='_ZN15QGles2SwapChainC1EP18QRhiImplementation'/>
<size>112</size>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull.cpp' l='57' c='_ZN8QRhiNull15createSwapChainEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull.cpp' l='347' c='_ZN8QRhiNull10beginFrameEP13QRhiSwapChain6QFlagsIN4QRhi14BeginFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull.cpp' l='354' c='_ZN8QRhiNull8endFrameEP13QRhiSwapChain6QFlagsIN4QRhi12EndFrameFlagEE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull.cpp' l='756' c='_ZN26QNullSwapChainRenderTargetC1EP18QRhiImplementationP13QRhiSwapChain'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull.cpp' l='932' c='_ZN14QNullSwapChainC1EP18QRhiImplementation'/>
<size>112</size>
