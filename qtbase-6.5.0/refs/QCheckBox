<inh f='qtbase-6.5.0/src/widgets/widgets/qabstractbutton.h' l='22' c='QAbstractButton'/>
<def f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.h' l='18' ll='55'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.h' l='53' c='_ZN9QCheckBoxC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.h' l='53' c='_ZN9QCheckBoxaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.h' l='53' c='_ZN9QCheckBoxaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qmessagebox.h' l='149' c='_ZN11QMessageBox11setCheckBoxEP9QCheckBox'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qmessagebox.h' l='150' c='_ZNK11QMessageBox8checkBoxEv'/>
<size>40</size>
<smbr r='QCheckBox::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK9QCheckBox10metaObjectEv'/>
<fun r='_ZN9QCheckBox11qt_metacastEPKc'/>
<fun r='_ZN9QCheckBox11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN9QCheckBox2trEPKcS1_i'/>
<fun r='_ZN9QCheckBox18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN9QCheckBoxC1EP7QWidget'/>
<fun r='_ZN9QCheckBoxC1ERK7QStringP7QWidget'/>
<fun r='_ZN9QCheckBoxD1Ev'/>
<fun r='_ZNK9QCheckBox8sizeHintEv'/>
<fun r='_ZNK9QCheckBox15minimumSizeHintEv'/>
<fun r='_ZN9QCheckBox11setTristateEb'/>
<fun r='_ZNK9QCheckBox10isTristateEv'/>
<fun r='_ZNK9QCheckBox10checkStateEv'/>
<fun r='_ZN9QCheckBox13setCheckStateEN2Qt10CheckStateE'/>
<fun r='_ZN9QCheckBox12stateChangedEi'/>
<fun r='_ZN9QCheckBox5eventEP6QEvent'/>
<fun r='_ZNK9QCheckBox9hitButtonERK6QPoint'/>
<fun r='_ZN9QCheckBox13checkStateSetEv'/>
<fun r='_ZN9QCheckBox14nextCheckStateEv'/>
<fun r='_ZN9QCheckBox10paintEventEP11QPaintEvent'/>
<fun r='_ZN9QCheckBox14mouseMoveEventEP11QMouseEvent'/>
<fun r='_ZNK9QCheckBox15initStyleOptionEP18QStyleOptionButton'/>
<fun r='_ZN9QCheckBox6d_funcEv'/>
<fun r='_ZNK9QCheckBox6d_funcEv'/>
<fun r='_ZN9QCheckBoxC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/accessible/simplewidgets.cpp' l='138' c='_ZNK17QAccessibleButton5stateEv'/>
<use f='qtbase-6.5.0/src/widgets/accessible/simplewidgets.cpp' l='138' c='_ZNK17QAccessibleButton5stateEv'/>
<use f='qtbase-6.5.0/src/widgets/accessible/simplewidgets.cpp' l='172' c='_ZNK17QAccessibleButton4rectEv'/>
<use f='qtbase-6.5.0/src/widgets/accessible/simplewidgets.cpp' l='172' c='_ZNK17QAccessibleButton4rectEv'/>
<size>40</size>
<use f='qtbase-6.5.0/src/widgets/dialogs/qerrormessage.cpp' l='41'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qerrormessage.cpp' l='246' c='_ZN13QErrorMessageC1EP7QWidget'/>
<size>40</size>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfontdialog_p.h' l='80'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfontdialog_p.h' l='81'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfontdialog.cpp' l='185' c='_ZN18QFontDialogPrivate4initEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfontdialog.cpp' l='187' c='_ZN18QFontDialogPrivate4initEv'/>
<size>40</size>
<use f='qtbase-6.5.0/src/widgets/dialogs/qmessagebox.cpp' l='218'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qmessagebox.cpp' l='1190' c='_ZN11QMessageBox11setCheckBoxEP9QCheckBox'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qmessagebox.cpp' l='1221' c='_ZNK11QMessageBox8checkBoxEv'/>
<size>40</size>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='5069' c='_ZNK16QStyleSheetStyle11pixelMetricEN6QStyle11PixelMetricEPK12QStyleOptionPK7QWidget'/>
<size>40</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.cpp' l='22' c='_ZN16QCheckBoxPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.cpp' l='22' c='_ZN16QCheckBoxPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.cpp' l='22' c='_ZNK16QCheckBoxPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.cpp' l='22' c='_ZNK16QCheckBoxPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.cpp' l='22'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.cpp' l='110' c='_ZN16QCheckBoxPrivate4initEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.cpp' l='165' c='_ZN9QCheckBoxC1ERK7QStringP7QWidget'/>
<size>40</size>
<doc f='qtbase-6.5.0/src/widgets/widgets/qcheckbox.cpp' l='36'>/*!
    \class QCheckBox
    \brief The QCheckBox widget provides a checkbox with a text label.

    \ingroup basicwidgets
    \inmodule QtWidgets

    \image windows-checkbox.png

    A QCheckBox is an option button that can be switched on (checked) or off
    (unchecked). Checkboxes are typically used to represent features in an
    application that can be enabled or disabled without affecting others.
    Different types of behavior can be implemented. For example, a
    QButtonGroup can be used to group check buttons logically, allowing
    exclusive checkboxes. However, QButtonGroup does not provide any visual
    representation.

    The image below further illustrates the differences between exclusive and
    non-exclusive checkboxes.

    \table
    \row \li \inlineimage checkboxes-exclusive.png
         \li \inlineimage checkboxes-non-exclusive.png
    \endtable

    Whenever a checkbox is checked or cleared, it emits the signal
    stateChanged(). Connect to this signal if you want to trigger an action
    each time the checkbox changes state. You can use isChecked() to query
    whether or not a checkbox is checked.

    In addition to the usual checked and unchecked states, QCheckBox optionally
    provides a third state to indicate &quot;no change&quot;. This is useful whenever you
    need to give the user the option of neither checking nor unchecking a
    checkbox. If you need this third state, enable it with setTristate(), and
    use checkState() to query the current toggle state.

    Just like QPushButton, a checkbox displays text, and optionally a small
    icon. The icon is set with setIcon(). The text can be set in the
    constructor or with setText(). A shortcut key can be specified by preceding
    the preferred character with an ampersand. For example:

    \snippet code/src_gui_widgets_qcheckbox.cpp 0

    In this example, the shortcut is \e{Alt+A}. See the \l{QShortcut#mnemonic}
    {QShortcut} documentation for details. To display an actual ampersand,
    use &apos;&amp;&amp;&apos;.

    Important inherited functions: text(), setText(), text(), pixmap(),
    setPixmap(), accel(), setAccel(), isToggleButton(), setDown(), isDown(),
    isOn(), checkState(), autoRepeat(), isExclusiveToggle(), group(),
    setAutoRepeat(), toggle(), pressed(), released(), clicked(), toggled(),
    checkState(), and stateChanged().

    \sa QAbstractButton, QRadioButton
*/</doc>
<fun r='_ZNK9QCheckBox15initStyleOptionEP18QStyleOptionButton'/>
<fun r='_ZN9QCheckBoxC1EP7QWidget'/>
<fun r='_ZN9QCheckBoxC1ERK7QStringP7QWidget'/>
<fun r='_ZN9QCheckBoxD1Ev'/>
<fun r='_ZN9QCheckBox11setTristateEb'/>
<fun r='_ZNK9QCheckBox10isTristateEv'/>
<fun r='_ZNK9QCheckBox10checkStateEv'/>
<fun r='_ZN9QCheckBox13setCheckStateEN2Qt10CheckStateE'/>
<fun r='_ZNK9QCheckBox8sizeHintEv'/>
<fun r='_ZNK9QCheckBox15minimumSizeHintEv'/>
<fun r='_ZN9QCheckBox10paintEventEP11QPaintEvent'/>
<fun r='_ZN9QCheckBox14mouseMoveEventEP11QMouseEvent'/>
<fun r='_ZNK9QCheckBox9hitButtonERK6QPoint'/>
<fun r='_ZN9QCheckBox13checkStateSetEv'/>
<fun r='_ZN9QCheckBox14nextCheckStateEv'/>
<fun r='_ZN9QCheckBox5eventEP6QEvent'/>
