<dec f='qtbase-6.5.0/src/corelib/io/qlockfile.h' l='24' type='bool QLockFile::lock()'/>
<def f='qtbase-6.5.0/src/corelib/io/qlockfile.cpp' l='217' ll='220' type='bool QLockFile::lock()'/>
<doc f='qtbase-6.5.0/src/corelib/io/qlockfile.cpp' l='202'>/*!
    Creates the lock file.

    If another process (or another thread) has created the lock file already,
    this function will block until that process (or thread) releases it.

    Calling this function multiple times on the same lock from the same
    thread without unlocking first is not allowed. This function will
    \e dead-lock when the file is locked recursively.

    Returns \c true if the lock was acquired, false if it could not be acquired
    due to an unrecoverable error, such as no permissions in the parent directory.

    \sa unlock(), tryLock()
*/</doc>
<use f='qtbase-6.5.0/src/corelib/io/qsettings.cpp' l='1345' u='c' c='_ZN24QConfFileSettingsPrivate12syncConfFileEP9QConfFile'/>
