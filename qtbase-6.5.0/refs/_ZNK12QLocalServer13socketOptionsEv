<dec f='qtbase-6.5.0/src/network/socket/qlocalserver.h' l='64' type='QLocalServer::SocketOptions QLocalServer::socketOptions() const'/>
<def f='qtbase-6.5.0/src/network/socket/qlocalserver.cpp' l='159' ll='163' type='QLocalServer::SocketOptions QLocalServer::socketOptions() const'/>
<doc f='qtbase-6.5.0/src/network/socket/qlocalserver.cpp' l='109'>/*!
    \property QLocalServer::socketOptions
    \since 5.0

    \brief the socket options that control how the socket operates.

    For example, the socket may restrict access to what user ids can
    connect to the socket.

    These options must be set before listen() is called.

    In some cases, such as with Unix domain sockets on Linux, the
    access to the socket will be determined by file system permissions,
    and are created based on the umask. Setting the access flags will
    override this and will restrict or permit access as specified.

    Other Unix-based operating systems, such as \macos, do not
    honor file permissions for Unix domain sockets and by default
    have WorldAccess and these permission flags will have no effect.

    On Windows, UserAccessOption is sufficient to allow a non
    elevated process to connect to a local server created by an
    elevated process run by the same user. GroupAccessOption
    refers to the primary group of the process (see TokenPrimaryGroup
    in the Windows documentation). OtherAccessOption refers to
    the well known &quot;Everyone&quot; group.

    On Linux platforms it is possible to create a socket in the abstract
    namespace, which is independent of the filesystem. Using this kind
    of socket implies ignoring permission options. On other platforms
    AbstractNamespaceOption is equivalent to WorldAccessOption.

    By default none of the flags are set, access permissions
    are the platform default.

    \sa listen()
*/</doc>
<doc f='qtbase-6.5.0/src/network/socket/qlocalserver.cpp' l='153'>/*!
    \since 5.0
    Returns the socket options set on the socket.

    \sa setSocketOptions()
 */</doc>
