<use f='qtbase-6.5.0/src/gui/util/qundogroup.h' l='28' c='_ZN10QUndoGroup8addStackEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.h' l='29' c='_ZN10QUndoGroup11removeStackEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.h' l='30' c='_ZNK10QUndoGroup6stacksEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.h' l='31' c='_ZNK10QUndoGroup11activeStackEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.h' l='47' c='_ZN10QUndoGroup14setActiveStackEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.h' l='50' c='_ZN10QUndoGroup18activeStackChangedEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='46'/>
<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/gui/util/qundostack.h' l='51' ll='115'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='113' c='_ZN10QUndoStackC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='113' c='_ZN10QUndoStackaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='113' c='_ZN10QUndoStackaSERKS_'/>
<size>16</size>
<smbr r='QUndoStack::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK10QUndoStack10metaObjectEv'/>
<fun r='_ZN10QUndoStack11qt_metacastEPKc'/>
<fun r='_ZN10QUndoStack11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN10QUndoStack2trEPKcS1_i'/>
<fun r='_ZN10QUndoStack18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN10QUndoStack6d_funcEv'/>
<fun r='_ZNK10QUndoStack6d_funcEv'/>
<fun r='_ZN10QUndoStackC1EP7QObject'/>
<fun r='_ZN10QUndoStackD1Ev'/>
<fun r='_ZN10QUndoStack5clearEv'/>
<fun r='_ZN10QUndoStack4pushEP12QUndoCommand'/>
<fun r='_ZNK10QUndoStack7canUndoEv'/>
<fun r='_ZNK10QUndoStack7canRedoEv'/>
<fun r='_ZNK10QUndoStack8undoTextEv'/>
<fun r='_ZNK10QUndoStack8redoTextEv'/>
<fun r='_ZNK10QUndoStack5countEv'/>
<fun r='_ZNK10QUndoStack5indexEv'/>
<fun r='_ZNK10QUndoStack4textEi'/>
<fun r='_ZNK10QUndoStack16createUndoActionEP7QObjectRK7QString'/>
<fun r='_ZNK10QUndoStack16createRedoActionEP7QObjectRK7QString'/>
<fun r='_ZNK10QUndoStack8isActiveEv'/>
<fun r='_ZNK10QUndoStack7isCleanEv'/>
<fun r='_ZNK10QUndoStack10cleanIndexEv'/>
<fun r='_ZN10QUndoStack10beginMacroERK7QString'/>
<fun r='_ZN10QUndoStack8endMacroEv'/>
<fun r='_ZN10QUndoStack12setUndoLimitEi'/>
<fun r='_ZNK10QUndoStack9undoLimitEv'/>
<fun r='_ZNK10QUndoStack7commandEi'/>
<fun r='_ZN10QUndoStack8setCleanEv'/>
<fun r='_ZN10QUndoStack10resetCleanEv'/>
<fun r='_ZN10QUndoStack8setIndexEi'/>
<fun r='_ZN10QUndoStack4undoEv'/>
<fun r='_ZN10QUndoStack4redoEv'/>
<fun r='_ZN10QUndoStack9setActiveEb'/>
<fun r='_ZN10QUndoStack12indexChangedEi'/>
<fun r='_ZN10QUndoStack12cleanChangedEb'/>
<fun r='_ZN10QUndoStack14canUndoChangedEb'/>
<fun r='_ZN10QUndoStack14canRedoChangedEb'/>
<fun r='_ZN10QUndoStack15undoTextChangedERK7QString'/>
<fun r='_ZN10QUndoStack15redoTextChangedERK7QString'/>
<fun r='_ZN10QUndoStackC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.h' l='30' c='_ZN9QUndoViewC1EP10QUndoStackP7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.h' l='36' c='_ZNK9QUndoView5stackEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.h' l='48' c='_ZN9QUndoView8setStackEP10QUndoStack'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/util/qundostack_p.h' l='47' c='_ZN17QUndoStackPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack_p.h' l='47' c='_ZN17QUndoStackPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack_p.h' l='47' c='_ZNK17QUndoStackPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack_p.h' l='47' c='_ZNK17QUndoStackPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack_p.h' l='47'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='16'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='17'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='94' c='_ZN10QUndoGroup8addStackEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='114' c='_ZN10QUndoGroup11removeStackEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='131' c='_ZNK10QUndoGroup6stacksEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='151' c='_ZN10QUndoGroup14setActiveStackEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/gui/util/qundogroup.cpp' l='214' c='_ZNK10QUndoGroup11activeStackEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='417' c='_ZN17QUndoStackPrivate8setIndexEib'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='309'>/*!
    \class QUndoStack
    \brief The QUndoStack class is a stack of QUndoCommand objects.
    \since 4.2

    \inmodule QtGui

    For an overview of Qt&apos;s Undo Framework, see the
    \l{Overview of Qt&apos;s Undo Framework}{overview document}.

    An undo stack maintains a stack of commands that have been applied to a
    document.

    New commands are pushed on the stack using push(). Commands can be
    undone and redone using undo() and redo(), or by triggering the
    actions returned by createUndoAction() and createRedoAction().

    QUndoStack keeps track of the \a current command. This is the command
    which will be executed by the next call to redo(). The index of this
    command is returned by index(). The state of the edited object can be
    rolled forward or back using setIndex(). If the top-most command on the
    stack has already been redone, index() is equal to count().

    QUndoStack provides support for undo and redo actions, command
    compression, command macros, and supports the concept of a
    \e{clean state}.

    \section1 Undo and Redo Actions

    QUndoStack provides convenient undo and redo QAction objects, which
    can be inserted into a menu or a toolbar. When commands are undone or
    redone, QUndoStack updates the text properties of these actions
    to reflect what change they will trigger. The actions are also disabled
    when no command is available for undo or redo. These actions
    are returned by QUndoStack::createUndoAction() and QUndoStack::createRedoAction().

    \section1 Command Compression and Macros

    Command compression is useful when several commands can be compressed
    into a single command that can be undone and redone in a single operation.
    For example, when a user types a character in a text editor, a new command
    is created. This command inserts the character into the document at the
    cursor position. However, it is more convenient for the user to be able
    to undo or redo typing of whole words, sentences, or paragraphs.
    Command compression allows these single-character commands to be merged
    into a single command which inserts or deletes sections of text.
    For more information, see QUndoCommand::mergeWith() and push().

    A command macro is a sequence of commands, all of which are undone and
    redone in one go. Command macros are created by giving a command a list
    of child commands.
    Undoing or redoing the parent command will cause the child commands to
    be undone or redone. Command macros may be created explicitly
    by specifying a parent in the QUndoCommand constructor, or by using the
    convenience functions beginMacro() and endMacro().

    Although command compression and macros appear to have the same effect to the
    user, they often have different uses in an application. Commands that
    perform small changes to a document may be usefully compressed if there is
    no need to individually record them, and if only larger changes are relevant
    to the user.
    However, for commands that need to be recorded individually, or those that
    cannot be compressed, it is useful to use macros to provide a more convenient
    user experience while maintaining a record of each command.

    \section1 Clean State

    QUndoStack supports the concept of a clean state. When the
    document is saved to disk, the stack can be marked as clean using
    setClean(). Whenever the stack returns to this state through undoing and
    redoing commands, it emits the signal cleanChanged(). This signal
    is also emitted when the stack leaves the clean state. This signal is
    usually used to enable and disable the save actions in the application,
    and to update the document&apos;s title to reflect that it contains unsaved
    changes.

    \section1 Obsolete Commands

    QUndoStack is able to delete commands from the stack if the command is no
    longer needed. One example may be to delete a command when two commands are
    merged together in such a way that the merged command has no function. This
    can be seen with move commands where the user moves their mouse to one part
    of the screen and then moves it to the original position. The merged command
    results in a mouse movement of 0. This command can be deleted since it serves
    no purpose. Another example is with networking commands that fail due to connection
    issues. In this case, the command is to be removed from the stack because the redo()
    and undo() functions have no function since there was connection issues.

    A command can be marked obsolete with the QUndoCommand::setObsolete() function.
    The QUndoCommand::isObsolete() flag is checked in QUndoStack::push(),
    QUndoStack::undo(), QUndoStack::redo(), and QUndoStack::setIndex() after calling
    QUndoCommand::undo(), QUndoCommand::redo() and QUndoCommand:mergeWith() where
    applicable.

    If a command is set obsolete and the clean index is greater than or equal to the
    current command index, then the clean index will be reset when the command is
    deleted from the stack.

    \sa QUndoCommand, QUndoView
*/</doc>
<fun r='_ZN10QUndoStackC1EP7QObject'/>
<fun r='_ZN10QUndoStackD1Ev'/>
<fun r='_ZN10QUndoStack5clearEv'/>
<fun r='_ZN10QUndoStack4pushEP12QUndoCommand'/>
<fun r='_ZN10QUndoStack8setCleanEv'/>
<fun r='_ZN10QUndoStack10resetCleanEv'/>
<fun r='_ZNK10QUndoStack7isCleanEv'/>
<fun r='_ZNK10QUndoStack10cleanIndexEv'/>
<fun r='_ZN10QUndoStack4undoEv'/>
<fun r='_ZN10QUndoStack4redoEv'/>
<fun r='_ZNK10QUndoStack5countEv'/>
<fun r='_ZNK10QUndoStack5indexEv'/>
<fun r='_ZN10QUndoStack8setIndexEi'/>
<fun r='_ZNK10QUndoStack7canUndoEv'/>
<fun r='_ZNK10QUndoStack7canRedoEv'/>
<fun r='_ZNK10QUndoStack8undoTextEv'/>
<fun r='_ZNK10QUndoStack8redoTextEv'/>
<fun r='_ZNK10QUndoStack16createUndoActionEP7QObjectRK7QString'/>
<fun r='_ZNK10QUndoStack16createRedoActionEP7QObjectRK7QString'/>
<fun r='_ZN10QUndoStack10beginMacroERK7QString'/>
<fun r='_ZN10QUndoStack8endMacroEv'/>
<fun r='_ZNK10QUndoStack7commandEi'/>
<fun r='_ZNK10QUndoStack4textEi'/>
<fun r='_ZN10QUndoStack12setUndoLimitEi'/>
<fun r='_ZNK10QUndoStack9undoLimitEv'/>
<fun r='_ZN10QUndoStack9setActiveEb'/>
<fun r='_ZNK10QUndoStack8isActiveEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.cpp' l='23' c='_ZNK10QUndoModel5stackEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.cpp' l='42' c='_ZN10QUndoModel8setStackEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.cpp' l='50'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.cpp' l='71' c='_ZNK10QUndoModel5stackEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.cpp' l='76' c='_ZN10QUndoModel8setStackEP10QUndoStack'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.cpp' l='277' c='_ZN9QUndoViewC1EP10QUndoStackP7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.cpp' l='318' c='_ZNK9QUndoView5stackEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qundoview.cpp' l='333' c='_ZN9QUndoView8setStackEP10QUndoStack'/>
<size>16</size>
