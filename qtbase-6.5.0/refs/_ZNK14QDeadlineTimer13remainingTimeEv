<dec f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='45' type='qint64 QDeadlineTimer::remainingTime() const'/>
<use f='qtbase-6.5.0/src/corelib/io/qlockfile.cpp' l='271' u='c' c='_ZN9QLockFile7tryLockEi'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_unix.cpp' l='148' u='c' c='_ZN12_GLOBAL__N_114QProcessPoller4pollERK14QDeadlineTimer'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_unix.cpp' l='729' u='c' c='_ZN15QProcessPrivate14waitForStartedERK14QDeadlineTimer'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.cpp' l='634' ll='652' type='qint64 QDeadlineTimer::remainingTime() const'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.cpp' l='618'>/*!
    Returns the remaining time in this QDeadlineTimer object in milliseconds.
    If the timer has already expired, this function will return zero and it is
    not possible to obtain the amount of time overdue with this function (to do
    that, see deadline()). If the timer was set to never expire, this function
    returns -1.

    This function is suitable for use in Qt APIs that take a millisecond
    timeout, such as the many \l QIODevice \c waitFor functions or the timed
    lock functions in \l QMutex, \l QWaitCondition, \l QSemaphore, or
    \l QReadWriteLock. For example:

    \snippet code/src_corelib_kernel_qdeadlinetimer.cpp 5

    \sa remainingTimeNSecs(), isForever(), hasExpired()
*/</doc>
<use f='qtbase-6.5.0/src/corelib/kernel/qtestsupport_core.h' l='45' u='c' c='_ZN5QTestL8qWaitForET_i'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtestsupport_core.h' l='48' u='c' c='_ZN5QTestL8qWaitForET_i'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtestsupport_core.cpp' l='87' u='c' c='_ZN5QTest5qWaitEi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qtestsupport_core.cpp' l='91' u='c' c='_ZN5QTest5qWaitEi'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccesscache.cpp' l='191' u='c' c='_ZN19QNetworkAccessCache11updateTimerEv'/>
