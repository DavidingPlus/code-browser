<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='5938' type='const void * sqlite3_value_blob(sqlite3_value * )'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='87921' ll='87933' type='const void * sqlite3_value_blob(sqlite3_value * pVal)'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='88988' u='c' c='sqlite3_column_blob'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='115358' u='c' c='statPush'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='115467' u='c' c='statGet'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='124968' u='c' c='instrFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='124969' u='c' c='instrFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='125070' u='c' c='substrFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='125821' u='c' c='sqlite3QuoteValue'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='125948' u='c' c='hexFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='132990'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='189272' u='c' c='fts3TokenizerFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='205353' u='c' c='rtreenode'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='205398' u='c' c='rtreedepth'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='206187' u='c' c='geopolyFuncParam'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='5810'>/*
** CAPI3REF: Obtaining SQL Values
** METHOD: sqlite3_value
**
** &lt;b&gt;Summary:&lt;/b&gt;
** &lt;blockquote&gt;&lt;table border=0 cellpadding=0 cellspacing=0&gt;
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_blob&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;BLOB value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_double&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;REAL value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_int&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;32-bit INTEGER value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_int64&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;64-bit INTEGER value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_pointer&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Pointer value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-8 TEXT value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text16&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-16 TEXT value in
** the native byteorder
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text16be&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-16be TEXT value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text16le&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-16le TEXT value
** &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;td&gt;&amp;nbsp;&lt;td&gt;&amp;nbsp;
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_bytes&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Size of a BLOB
** or a UTF-8 TEXT in bytes
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_bytes16&amp;nbsp;&amp;nbsp;&lt;/b&gt;
** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;Size of UTF-16
** TEXT in bytes
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_type&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Default
** datatype of the value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_numeric_type&amp;nbsp;&amp;nbsp;&lt;/b&gt;
** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;Best numeric datatype of the value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_nochange&amp;nbsp;&amp;nbsp;&lt;/b&gt;
** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;True if the column is unchanged in an UPDATE
** against a virtual table.
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_frombind&amp;nbsp;&amp;nbsp;&lt;/b&gt;
** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;True if value originated from a [bound parameter]
** &lt;/table&gt;&lt;/blockquote&gt;
**
** &lt;b&gt;Details:&lt;/b&gt;
**
** These routines extract type, size, and content information from
** [protected sqlite3_value] objects.  Protected sqlite3_value objects
** are used to pass parameter information into the functions that
** implement [application-defined SQL functions] and [virtual tables].
**
** These routines work only with [protected sqlite3_value] objects.
** Any attempt to use these routines on an [unprotected sqlite3_value]
** is not threadsafe.
**
** ^These routines work just like the corresponding [column access functions]
** except that these routines take a single [protected sqlite3_value] object
** pointer instead of a [sqlite3_stmt*] pointer and an integer column number.
**
** ^The sqlite3_value_text16() interface extracts a UTF-16 string
** in the native byte-order of the host machine.  ^The
** sqlite3_value_text16be() and sqlite3_value_text16le() interfaces
** extract UTF-16 strings as big-endian and little-endian respectively.
**
** ^If [sqlite3_value] object V was initialized
** using [sqlite3_bind_pointer(S,I,P,X,D)] or [sqlite3_result_pointer(C,P,X,D)]
** and if X and Y are strings that compare equal according to strcmp(X,Y),
** then sqlite3_value_pointer(V,Y) will return the pointer P.  ^Otherwise,
** sqlite3_value_pointer(V,Y) returns a NULL. The sqlite3_bind_pointer()
** routine is part of the [pointer passing interface] added for SQLite 3.20.0.
**
** ^(The sqlite3_value_type(V) interface returns the
** [SQLITE_INTEGER | datatype code] for the initial datatype of the
** [sqlite3_value] object V. The returned value is one of [SQLITE_INTEGER],
** [SQLITE_FLOAT], [SQLITE_TEXT], [SQLITE_BLOB], or [SQLITE_NULL].)^
** Other interfaces might change the datatype for an sqlite3_value object.
** For example, if the datatype is initially SQLITE_INTEGER and
** sqlite3_value_text(V) is called to extract a text value for that
** integer, then subsequent calls to sqlite3_value_type(V) might return
** SQLITE_TEXT.  Whether or not a persistent internal datatype conversion
** occurs is undefined and may change from one release of SQLite to the next.
**
** ^(The sqlite3_value_numeric_type() interface attempts to apply
** numeric affinity to the value.  This means that an attempt is
** made to convert the value to an integer or floating point.  If
** such a conversion is possible without loss of information (in other
** words, if the value is a string that looks like a number)
** then the conversion is performed.  Otherwise no conversion occurs.
** The [SQLITE_INTEGER | datatype] after conversion is returned.)^
**
** ^Within the [xUpdate] method of a [virtual table], the
** sqlite3_value_nochange(X) interface returns true if and only if
** the column corresponding to X is unchanged by the UPDATE operation
** that the xUpdate method call was invoked to implement and if
** and the prior [xColumn] method call that was invoked to extracted
** the value for that column returned without setting a result (probably
** because it queried [sqlite3_vtab_nochange()] and found that the column
** was unchanging).  ^Within an [xUpdate] method, any value for which
** sqlite3_value_nochange(X) is true will in all other respects appear
** to be a NULL value.  If sqlite3_value_nochange(X) is invoked anywhere other
** than within an [xUpdate] method call for an UPDATE statement, then
** the return value is arbitrary and meaningless.
**
** ^The sqlite3_value_frombind(X) interface returns non-zero if the
** value X originated from one of the [sqlite3_bind_int|sqlite3_bind()]
** interfaces.  ^If X comes from an SQL literal value, or a table column,
** or an expression, then sqlite3_value_frombind(X) returns zero.
**
** Please pay particular attention to the fact that the pointer returned
** from [sqlite3_value_blob()], [sqlite3_value_text()], or
** [sqlite3_value_text16()] can be invalidated by a subsequent call to
** [sqlite3_value_bytes()], [sqlite3_value_bytes16()], [sqlite3_value_text()],
** or [sqlite3_value_text16()].
**
** These routines must be called from the same thread as
** the SQL function that supplied the [sqlite3_value*] parameters.
**
** As long as the input parameter is correct, these routines can only
** fail if an out-of-memory error occurs during a format conversion.
** Only the following subset of interfaces are subject to out-of-memory
** errors:
**
** &lt;ul&gt;
** &lt;li&gt; sqlite3_value_blob()
** &lt;li&gt; sqlite3_value_text()
** &lt;li&gt; sqlite3_value_text16()
** &lt;li&gt; sqlite3_value_text16le()
** &lt;li&gt; sqlite3_value_text16be()
** &lt;li&gt; sqlite3_value_bytes()
** &lt;li&gt; sqlite3_value_bytes16()
** &lt;/ul&gt;
**
** If an out-of-memory error occurs, then the return value from these
** routines is the same as if the column had contained an SQL NULL value.
** Valid SQL NULL returns can be distinguished from out-of-memory errors
** by invoking the [sqlite3_errcode()] immediately after the suspect
** return value is obtained and before any
** other SQLite interface is called on the same [database connection].
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='87917'>/**************************** sqlite3_value_  *******************************
** The following routines extract information from a Mem or sqlite3_value
** structure.
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='5632' type='const void * sqlite3_value_blob(sqlite3_value * )'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='5504'>/*
** CAPI3REF: Obtaining SQL Values
** METHOD: sqlite3_value
**
** &lt;b&gt;Summary:&lt;/b&gt;
** &lt;blockquote&gt;&lt;table border=0 cellpadding=0 cellspacing=0&gt;
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_blob&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;BLOB value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_double&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;REAL value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_int&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;32-bit INTEGER value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_int64&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;64-bit INTEGER value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_pointer&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Pointer value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-8 TEXT value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text16&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-16 TEXT value in
** the native byteorder
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text16be&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-16be TEXT value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_text16le&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;UTF-16le TEXT value
** &lt;tr&gt;&lt;td&gt;&amp;nbsp;&lt;td&gt;&amp;nbsp;&lt;td&gt;&amp;nbsp;
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_bytes&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Size of a BLOB
** or a UTF-8 TEXT in bytes
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_bytes16&amp;nbsp;&amp;nbsp;&lt;/b&gt;
** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;Size of UTF-16
** TEXT in bytes
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_type&lt;/b&gt;&lt;td&gt;&amp;rarr;&lt;td&gt;Default
** datatype of the value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_numeric_type&amp;nbsp;&amp;nbsp;&lt;/b&gt;
** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;Best numeric datatype of the value
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_nochange&amp;nbsp;&amp;nbsp;&lt;/b&gt;
** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;True if the column is unchanged in an UPDATE
** against a virtual table.
** &lt;tr&gt;&lt;td&gt;&lt;b&gt;sqlite3_value_frombind&amp;nbsp;&amp;nbsp;&lt;/b&gt;
** &lt;td&gt;&amp;rarr;&amp;nbsp;&amp;nbsp;&lt;td&gt;True if value originated from a [bound parameter]
** &lt;/table&gt;&lt;/blockquote&gt;
**
** &lt;b&gt;Details:&lt;/b&gt;
**
** These routines extract type, size, and content information from
** [protected sqlite3_value] objects.  Protected sqlite3_value objects
** are used to pass parameter information into the functions that
** implement [application-defined SQL functions] and [virtual tables].
**
** These routines work only with [protected sqlite3_value] objects.
** Any attempt to use these routines on an [unprotected sqlite3_value]
** is not threadsafe.
**
** ^These routines work just like the corresponding [column access functions]
** except that these routines take a single [protected sqlite3_value] object
** pointer instead of a [sqlite3_stmt*] pointer and an integer column number.
**
** ^The sqlite3_value_text16() interface extracts a UTF-16 string
** in the native byte-order of the host machine.  ^The
** sqlite3_value_text16be() and sqlite3_value_text16le() interfaces
** extract UTF-16 strings as big-endian and little-endian respectively.
**
** ^If [sqlite3_value] object V was initialized
** using [sqlite3_bind_pointer(S,I,P,X,D)] or [sqlite3_result_pointer(C,P,X,D)]
** and if X and Y are strings that compare equal according to strcmp(X,Y),
** then sqlite3_value_pointer(V,Y) will return the pointer P.  ^Otherwise,
** sqlite3_value_pointer(V,Y) returns a NULL. The sqlite3_bind_pointer()
** routine is part of the [pointer passing interface] added for SQLite 3.20.0.
**
** ^(The sqlite3_value_type(V) interface returns the
** [SQLITE_INTEGER | datatype code] for the initial datatype of the
** [sqlite3_value] object V. The returned value is one of [SQLITE_INTEGER],
** [SQLITE_FLOAT], [SQLITE_TEXT], [SQLITE_BLOB], or [SQLITE_NULL].)^
** Other interfaces might change the datatype for an sqlite3_value object.
** For example, if the datatype is initially SQLITE_INTEGER and
** sqlite3_value_text(V) is called to extract a text value for that
** integer, then subsequent calls to sqlite3_value_type(V) might return
** SQLITE_TEXT.  Whether or not a persistent internal datatype conversion
** occurs is undefined and may change from one release of SQLite to the next.
**
** ^(The sqlite3_value_numeric_type() interface attempts to apply
** numeric affinity to the value.  This means that an attempt is
** made to convert the value to an integer or floating point.  If
** such a conversion is possible without loss of information (in other
** words, if the value is a string that looks like a number)
** then the conversion is performed.  Otherwise no conversion occurs.
** The [SQLITE_INTEGER | datatype] after conversion is returned.)^
**
** ^Within the [xUpdate] method of a [virtual table], the
** sqlite3_value_nochange(X) interface returns true if and only if
** the column corresponding to X is unchanged by the UPDATE operation
** that the xUpdate method call was invoked to implement and if
** and the prior [xColumn] method call that was invoked to extracted
** the value for that column returned without setting a result (probably
** because it queried [sqlite3_vtab_nochange()] and found that the column
** was unchanging).  ^Within an [xUpdate] method, any value for which
** sqlite3_value_nochange(X) is true will in all other respects appear
** to be a NULL value.  If sqlite3_value_nochange(X) is invoked anywhere other
** than within an [xUpdate] method call for an UPDATE statement, then
** the return value is arbitrary and meaningless.
**
** ^The sqlite3_value_frombind(X) interface returns non-zero if the
** value X originated from one of the [sqlite3_bind_int|sqlite3_bind()]
** interfaces.  ^If X comes from an SQL literal value, or a table column,
** or an expression, then sqlite3_value_frombind(X) returns zero.
**
** Please pay particular attention to the fact that the pointer returned
** from [sqlite3_value_blob()], [sqlite3_value_text()], or
** [sqlite3_value_text16()] can be invalidated by a subsequent call to
** [sqlite3_value_bytes()], [sqlite3_value_bytes16()], [sqlite3_value_text()],
** or [sqlite3_value_text16()].
**
** These routines must be called from the same thread as
** the SQL function that supplied the [sqlite3_value*] parameters.
**
** As long as the input parameter is correct, these routines can only
** fail if an out-of-memory error occurs during a format conversion.
** Only the following subset of interfaces are subject to out-of-memory
** errors:
**
** &lt;ul&gt;
** &lt;li&gt; sqlite3_value_blob()
** &lt;li&gt; sqlite3_value_text()
** &lt;li&gt; sqlite3_value_text16()
** &lt;li&gt; sqlite3_value_text16le()
** &lt;li&gt; sqlite3_value_text16be()
** &lt;li&gt; sqlite3_value_bytes()
** &lt;li&gt; sqlite3_value_bytes16()
** &lt;/ul&gt;
**
** If an out-of-memory error occurs, then the return value from these
** routines is the same as if the column had contained an SQL NULL value.
** Valid SQL NULL returns can be distinguished from out-of-memory errors
** by invoking the [sqlite3_errcode()] immediately after the suspect
** return value is obtained and before any
** other SQLite interface is called on the same [database connection].
*/</doc>
