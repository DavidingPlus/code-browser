<dec f='qtbase-6.5.0/src/opengl/qopengltexture.h' l='411' type='void QOpenGLTexture::allocateStorage()'/>
<def f='qtbase-6.5.0/src/opengl/qopengltexture.cpp' l='3258' ll='3266' type='void QOpenGLTexture::allocateStorage()'/>
<doc f='qtbase-6.5.0/src/opengl/qopengltexture.cpp' l='3232'>/*!
    Allocates server-side storage for this texture object taking
    into account, the format, dimensions, mipmap levels, array
    layers and cubemap faces.

    Once storage has been allocated it is no longer possible to change
    these properties.

    If supported QOpenGLTexture makes use of immutable texture
    storage.

    Once storage has been allocated for the texture then pixel data
    can be uploaded via one of the setData() overloads.

    \note If immutable texture storage is not available,
    then a default pixel format and pixel type will be used to
    create the mutable storage. You can use the other
    allocateStorage() overload to specify exactly the pixel format
    and the pixel type to use when allocating mutable storage;
    this is particularly useful under certain OpenGL ES implementations
    (notably, OpenGL ES 2), where the pixel format and the pixel type
    used at allocation time must perfectly match the format
    and the type passed to any subsequent setData() call.

    \sa isStorageAllocated(), setData()
*/</doc>
