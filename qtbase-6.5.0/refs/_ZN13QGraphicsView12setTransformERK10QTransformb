<dec f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.h' l='136' type='void QGraphicsView::setTransform(const QTransform &amp; matrix, bool combine = false)'/>
<use f='qtbase-6.5.0/src/printsupport/widgets/qprintpreviewwidget.cpp' l='225' u='c' c='_ZN26QPrintPreviewWidgetPrivate6_q_fitEb'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='1828' u='c' c='_ZN13QGraphicsView6rotateEd'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='1841' u='c' c='_ZN13QGraphicsView5scaleEdd'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='1854' u='c' c='_ZN13QGraphicsView5shearEdd'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='1867' u='c' c='_ZN13QGraphicsView9translateEdd'/>
<def f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='3849' ll='3875' type='void QGraphicsView::setTransform(const QTransform &amp; matrix, bool combine = false)'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='3884' u='c' c='_ZN13QGraphicsView14resetTransformEv'/>
<doc f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='3823'>/*!
    Sets the view&apos;s current transformation matrix to \a matrix.

    If \a combine is true, then \a matrix is combined with the current matrix;
    otherwise, \a matrix \e replaces the current matrix. \a combine is false
    by default.

    The transformation matrix transforms the scene into view coordinates. Using
    the default transformation, provided by the identity matrix, one pixel in
    the view represents one unit in the scene (e.g., a 10x10 rectangular item
    is drawn using 10x10 pixels in the view). If a 2x2 scaling matrix is
    applied, the scene will be drawn in 1:2 (e.g., a 10x10 rectangular item is
    then drawn using 20x20 pixels in the view).

    Example:

    \snippet code/src_gui_graphicsview_qgraphicsview.cpp 7

    To simplify interaction with items using a transformed view, QGraphicsView
    provides mapTo... and mapFrom... functions that can translate between
    scene and view coordinates. For example, you can call mapToScene() to map
    a view coordinate to a floating point scene coordinate, or mapFromScene()
    to map from floating point scene coordinates to view coordinates.

    \sa transform(), resetTransform(), rotate(), scale(), shear(), translate()
*/</doc>
