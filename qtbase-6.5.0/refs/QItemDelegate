<inh f='qtbase-6.5.0/src/widgets/itemviews/qabstractitemdelegate.h' l='22' c='QAbstractItemDelegate'/>
<def f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.h' l='20' ll='91'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.h' l='90' c='_ZN13QItemDelegateC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.h' l='90' c='_ZN13QItemDelegateaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.h' l='90' c='_ZN13QItemDelegateaSERKS_'/>
<size>16</size>
<smbr r='QItemDelegate::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK13QItemDelegate10metaObjectEv'/>
<fun r='_ZN13QItemDelegate11qt_metacastEPKc'/>
<fun r='_ZN13QItemDelegate11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QItemDelegate2trEPKcS1_i'/>
<fun r='_ZN13QItemDelegate18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN13QItemDelegateC1EP7QObject'/>
<fun r='_ZN13QItemDelegateD1Ev'/>
<fun r='_ZNK13QItemDelegate11hasClippingEv'/>
<fun r='_ZN13QItemDelegate11setClippingEb'/>
<fun r='_ZNK13QItemDelegate5paintEP8QPainterRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate8sizeHintERK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate12createEditorEP7QWidgetRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate13setEditorDataEP7QWidgetRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate12setModelDataEP7QWidgetP18QAbstractItemModelRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate20updateEditorGeometryEP7QWidgetRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate17itemEditorFactoryEv'/>
<fun r='_ZN13QItemDelegate20setItemEditorFactoryEP18QItemEditorFactory'/>
<fun r='_ZNK13QItemDelegate11drawDisplayEP8QPainterRK20QStyleOptionViewItemRK5QRectRK7QString'/>
<fun r='_ZNK13QItemDelegate14drawDecorationEP8QPainterRK20QStyleOptionViewItemRK5QRectRK7QPixmap'/>
<fun r='_ZNK13QItemDelegate9drawFocusEP8QPainterRK20QStyleOptionViewItemRK5QRect'/>
<fun r='_ZNK13QItemDelegate9drawCheckEP8QPainterRK20QStyleOptionViewItemRK5QRectN2Qt10CheckStateE'/>
<fun r='_ZNK13QItemDelegate14drawBackgroundEP8QPainterRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate8doLayoutERK20QStyleOptionViewItemP5QRectS4_S4_b'/>
<fun r='_ZNK13QItemDelegate4rectERK20QStyleOptionViewItemRK11QModelIndexi'/>
<fun r='_ZN13QItemDelegate11eventFilterEP7QObjectP6QEvent'/>
<fun r='_ZN13QItemDelegate11editorEventEP6QEventP18QAbstractItemModelRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate10setOptionsERK11QModelIndexRK20QStyleOptionViewItem'/>
<fun r='_ZNK13QItemDelegate10decorationERK20QStyleOptionViewItemRK8QVariant'/>
<fun r='_ZN13QItemDelegate14selectedPixmapERK7QPixmapRK8QPaletteb'/>
<fun r='_ZNK13QItemDelegate7doCheckERK20QStyleOptionViewItemRK5QRectRK8QVariant'/>
<fun r='_ZNK13QItemDelegate13textRectangleEP8QPainterRK5QRectRK5QFontRK7QString'/>
<fun r='_ZN13QItemDelegate6d_funcEv'/>
<fun r='_ZNK13QItemDelegate6d_funcEv'/>
<fun r='_ZN13QItemDelegateC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.cpp' l='42' c='_ZN20QItemDelegatePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.cpp' l='42' c='_ZN20QItemDelegatePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.cpp' l='42' c='_ZNK20QItemDelegatePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.cpp' l='42' c='_ZNK20QItemDelegatePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.cpp' l='42'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.cpp' l='95' c='_ZNK20QItemDelegatePrivate11displayRectERK11QModelIndexRK20QStyleOptionViewItemRK5QRectS8_'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/widgets/itemviews/qitemdelegate.cpp' l='160'>/*!
    \class QItemDelegate

    \brief The QItemDelegate class provides display and editing facilities for
    data items from a model.

    \ingroup model-view
    \inmodule QtWidgets

    QItemDelegate can be used to provide custom display features and editor
    widgets for item views based on QAbstractItemView subclasses. Using a
    delegate for this purpose allows the display and editing mechanisms to be
    customized and developed independently from the model and view.

    The QItemDelegate class is one of the \l{Model/View Classes} and
    is part of Qt&apos;s \l{Model/View Programming}{model/view framework}.
    Note that QStyledItemDelegate has taken over the job of drawing
    Qt&apos;s item views. We recommend the use of QStyledItemDelegate when
    creating new delegates.

    When displaying items from a custom model in a standard view, it is
    often sufficient to simply ensure that the model returns appropriate
    data for each of the \l{Qt::ItemDataRole}{roles} that determine the
    appearance of items in views. The default delegate used by Qt&apos;s
    standard views uses this role information to display items in most
    of the common forms expected by users. However, it is sometimes
    necessary to have even more control over the appearance of items than
    the default delegate can provide.

    This class provides default implementations of the functions for
    painting item data in a view and editing data from item models.
    Default implementations of the paint() and sizeHint() virtual
    functions, defined in QAbstractItemDelegate, are provided to
    ensure that the delegate implements the correct basic behavior
    expected by views. You can reimplement these functions in
    subclasses to customize the appearance of items.

    When editing data in an item view, QItemDelegate provides an
    editor widget, which is a widget that is placed on top of the view
    while editing takes place. Editors are created with a
    QItemEditorFactory; a default static instance provided by
    QItemEditorFactory is installed on all item delegates. You can set
    a custom factory using setItemEditorFactory() or set a new default
    factory with QItemEditorFactory::setDefaultFactory(). It is the
    data stored in the item model with the Qt::EditRole that is edited.

    Only the standard editing functions for widget-based delegates are
    reimplemented here:

    \list
        \li createEditor() returns the widget used to change data from the model
           and can be reimplemented to customize editing behavior.
        \li setEditorData() provides the widget with data to manipulate.
        \li updateEditorGeometry() ensures that the editor is displayed correctly
           with respect to the item view.
        \li setModelData() returns updated data to the model.
    \endlist

    The closeEditor() signal indicates that the user has completed editing the data,
    and that the editor widget can be destroyed.

    \section1 Standard Roles and Data Types

    The default delegate used by the standard views supplied with Qt
    associates each standard role (defined by Qt::ItemDataRole) with certain
    data types. Models that return data in these types can influence the
    appearance of the delegate as described in the following table.

    \table
    \header \li Role \li Accepted Types
    \omit
    \row    \li \l Qt::AccessibleDescriptionRole \li QString
    \row    \li \l Qt::AccessibleTextRole \li QString
    \endomit
    \row    \li \l Qt::BackgroundRole \li QBrush (\since 4.2)
    \row    \li \l Qt::CheckStateRole \li Qt::CheckState
    \row    \li \l Qt::DecorationRole \li QIcon, QPixmap and QColor
    \row    \li \l Qt::DisplayRole \li QString and types with a string representation
    \row    \li \l Qt::EditRole \li See QItemEditorFactory for details
    \row    \li \l Qt::FontRole \li QFont
    \row    \li \l Qt::SizeHintRole \li QSize
    \omit
    \row    \li \l Qt::StatusTipRole \li
    \endomit
    \row    \li \l Qt::TextAlignmentRole \li Qt::Alignment
    \row    \li \l Qt::ForegroundRole \li QBrush (\since 4.2)
    \omit
    \row    \li \l Qt::ToolTipRole
    \row    \li \l Qt::WhatsThisRole
    \endomit
    \endtable

    If the default delegate does not allow the level of customization that
    you need, either for display purposes or for editing data, it is possible to
    subclass QItemDelegate to implement the desired behavior.

    \section1 Subclassing

    When subclassing QItemDelegate to create a delegate that displays items
    using a custom renderer, it is important to ensure that the delegate can
    render items suitably for all the required states; e.g. selected,
    disabled, checked. The documentation for the paint() function contains
    some hints to show how this can be achieved.

    You can provide custom editors by using a QItemEditorFactory. The
    \l{Color Editor Factory Example} shows how a custom editor can be
    made available to delegates with the default item editor
    factory. This way, there is no need to subclass QItemDelegate.  An
    alternative is to reimplement createEditor(), setEditorData(),
    setModelData(), and updateEditorGeometry(). This process is
    described in the \l{Spin Box Delegate Example}.

    \section1 QStyledItemDelegate vs. QItemDelegate

    Since Qt 4.4, there are two delegate classes: QItemDelegate and
    QStyledItemDelegate. However, the default delegate is QStyledItemDelegate.
    These two classes are independent alternatives to painting and providing
    editors for items in views. The difference between them is that
    QStyledItemDelegate uses the current style to paint its items. We therefore
    recommend using QStyledItemDelegate as the base class when implementing
    custom delegates or when working with Qt style sheets. The code required
    for either class should be equal unless the custom delegate needs to use
    the style for drawing.

    \sa {Delegate Classes}, QStyledItemDelegate, QAbstractItemDelegate,
        {Spin Box Delegate Example}, {Settings Editor Example},
        {Icons Example}
*/</doc>
<fun r='_ZN13QItemDelegateC1EP7QObject'/>
<fun r='_ZN13QItemDelegateD1Ev'/>
<fun r='_ZNK13QItemDelegate11hasClippingEv'/>
<fun r='_ZN13QItemDelegate11setClippingEb'/>
<fun r='_ZNK13QItemDelegate5paintEP8QPainterRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate8sizeHintERK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate12createEditorEP7QWidgetRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate13setEditorDataEP7QWidgetRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate12setModelDataEP7QWidgetP18QAbstractItemModelRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate20updateEditorGeometryEP7QWidgetRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate17itemEditorFactoryEv'/>
<fun r='_ZN13QItemDelegate20setItemEditorFactoryEP18QItemEditorFactory'/>
<fun r='_ZNK13QItemDelegate11drawDisplayEP8QPainterRK20QStyleOptionViewItemRK5QRectRK7QString'/>
<fun r='_ZNK13QItemDelegate14drawDecorationEP8QPainterRK20QStyleOptionViewItemRK5QRectRK7QPixmap'/>
<fun r='_ZNK13QItemDelegate9drawFocusEP8QPainterRK20QStyleOptionViewItemRK5QRect'/>
<fun r='_ZNK13QItemDelegate9drawCheckEP8QPainterRK20QStyleOptionViewItemRK5QRectN2Qt10CheckStateE'/>
<fun r='_ZNK13QItemDelegate14drawBackgroundEP8QPainterRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate8doLayoutERK20QStyleOptionViewItemP5QRectS4_S4_b'/>
<fun r='_ZNK13QItemDelegate10decorationERK20QStyleOptionViewItemRK8QVariant'/>
<fun r='_ZN13QItemDelegate14selectedPixmapERK7QPixmapRK8QPaletteb'/>
<fun r='_ZNK13QItemDelegate4rectERK20QStyleOptionViewItemRK11QModelIndexi'/>
<fun r='_ZNK13QItemDelegate7doCheckERK20QStyleOptionViewItemRK5QRectRK8QVariant'/>
<fun r='_ZNK13QItemDelegate13textRectangleEP8QPainterRK5QRectRK5QFontRK7QString'/>
<fun r='_ZN13QItemDelegate11eventFilterEP7QObjectP6QEvent'/>
<fun r='_ZN13QItemDelegate11editorEventEP6QEventP18QAbstractItemModelRK20QStyleOptionViewItemRK11QModelIndex'/>
<fun r='_ZNK13QItemDelegate10setOptionsERK11QModelIndexRK20QStyleOptionViewItem'/>
