<use f='qtbase-6.5.0/src/corelib/global/qendian.h' l='372'/>
<use f='qtbase-6.5.0/src/corelib/global/qendian.h' l='373'/>
<use f='qtbase-6.5.0/src/corelib/global/qendian.h' l='382'/>
<use f='qtbase-6.5.0/src/corelib/global/qendian.h' l='383'/>
<use f='qtbase-6.5.0/src/corelib/global/qendian.h' l='384'/>
<use f='qtbase-6.5.0/src/corelib/global/qendian.h' l='385'/>
<use f='qtbase-6.5.0/src/corelib/global/qendian.h' l='386'/>
<use f='qtbase-6.5.0/src/corelib/global/qendian.h' l='387'/>
<doc f='qtbase-6.5.0/src/corelib/global/qendian.cpp' l='439'>/*!
    \class QBEInteger
    \inmodule QtCore
    \brief The QBEInteger class provides platform-independent big-endian integers.
    \since 5.10

    The template parameter \c T must be a C++ integer type:
    \list
       \li 8-bit: char, signed char, unsigned char, qint8, quint8
       \li 16-bit: short, unsigned short, qint16, quint16, char16_t (C++11)
       \li 32-bit: int, unsigned int, qint32, quint32, char32_t (C++11)
       \li 64-bit: long long, unsigned long long, qint64, quint64
       \li platform-specific size: long, unsigned long
       \li pointer size: qintptr, quintptr, qptrdiff
    \endlist

    \note Using this class may be slower than using native integers, so only use it when
    an exact endianness is needed.
*/</doc>
<doc f='qtbase-6.5.0/src/corelib/global/qendian.cpp' l='459'>/*! \fn template &lt;typename T&gt; QBEInteger&lt;T&gt;::QBEInteger(T value)

    Constructs a QBEInteger with the given \a value.
*/</doc>
