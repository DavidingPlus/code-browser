<dec f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/bignum.h' l='68' type='uint16_t double_conversion::Bignum::DivideModuloIntBignum(const double_conversion::Bignum &amp; other)'/>
<use f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/bignum-dtoa.cc' l='197' u='c' c='_ZN17double_conversionL22GenerateShortestDigitsEPNS_6BignumES1_S1_S1_bNS_6VectorIcEEPi'/>
<use f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/bignum-dtoa.cc' l='289' u='c' c='_ZN17double_conversionL21GenerateCountedDigitsEiPiPNS_6BignumES2_NS_6VectorIcEES0_'/>
<use f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/bignum-dtoa.cc' l='299' u='c' c='_ZN17double_conversionL21GenerateCountedDigitsEiPiPNS_6BignumES2_NS_6VectorIcEES0_'/>
<doc f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/bignum.h' l='64'>// Pseudocode:
  //  int result = this / other;
  //  this = this % other;
  // In the worst case this function is in O(this/other).</doc>
<def f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/bignum.cc' l='502' ll='565' type='uint16_t double_conversion::Bignum::DivideModuloIntBignum(const double_conversion::Bignum &amp; other)'/>
<doc f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/bignum.cc' l='501'>// Precondition: this/other &lt; 16bit.</doc>
