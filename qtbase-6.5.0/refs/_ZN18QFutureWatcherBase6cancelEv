<dec f='qtbase-6.5.0/src/corelib/thread/qfuturewatcher.h' l='67' type='void QFutureWatcherBase::cancel()'/>
<def f='qtbase-6.5.0/src/corelib/thread/qfuturewatcher.cpp' l='95' ll='98' type='void QFutureWatcherBase::cancel()'/>
<doc f='qtbase-6.5.0/src/corelib/thread/qfuturewatcher.cpp' l='78'>/*! \fn template &lt;typename T&gt; void QFutureWatcher&lt;T&gt;::cancel()

    Cancels the asynchronous computation represented by the future(). Note that
    the cancellation is asynchronous. Use waitForFinished() after calling
    cancel() when you need synchronous cancellation.

    Currently available results may still be accessed on a canceled QFuture,
    but new results will \e not become available after calling this function.
    Also, this QFutureWatcher will not deliver progress and result ready
    signals once canceled. This includes the progressValueChanged(),
    progressRangeChanged(), progressTextChanged(), resultReadyAt(), and
    resultsReadyAt() signals.

    Be aware that not all running asynchronous computations can be canceled.
    For example, the QFuture returned by QtConcurrent::run() cannot be
    canceled; but the QFuture returned by QtConcurrent::mappedReduced() can.
*/</doc>
