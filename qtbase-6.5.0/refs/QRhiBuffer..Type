<def f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='702' ll='706'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='723' c='_ZNK10QRhiBuffer4typeEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='724' c='_ZN10QRhiBuffer7setTypeENS_4TypeE'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='740' c='_ZN10QRhiBufferC1EP18QRhiImplementationNS_4TypeE6QFlagsINS_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='741'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1741' c='_ZN4QRhi9newBufferEN10QRhiBuffer4TypeE6QFlagsINS0_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi_p_p.h' l='44' c='_ZN18QRhiImplementation12createBufferEN10QRhiBuffer4TypeE6QFlagsINS0_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull_p_p.h' l='25' c='_ZN11QNullBufferC1EP18QRhiImplementationN10QRhiBuffer4TypeE6QFlagsINS2_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull_p_p.h' l='184' c='_ZN8QRhiNull12createBufferEN10QRhiBuffer4TypeE6QFlagsINS0_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='34' c='_ZN12QGles2BufferC1EP18QRhiImplementationN10QRhiBuffer4TypeE6QFlagsINS2_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='729' c='_ZN9QRhiGles212createBufferEN10QRhiBuffer4TypeE6QFlagsINS0_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='2340' c='_ZN10QRhiBufferC1EP18QRhiImplementationNS_4TypeE6QFlagsINS_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='7314' c='_ZN4QRhi9newBufferEN10QRhiBuffer4TypeE6QFlagsINS0_9UsageFlagEEj'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='2236'>/*!
    \enum QRhiBuffer::Type
    Specifies storage type of buffer resource.

    \value Immutable Indicates that the data is not expected to change ever
    after the initial upload. Under the hood such buffer resources are
    typically placed in device local (GPU) memory (on systems where
    applicable). Uploading new data is possible, but may be expensive. The
    upload typically happens by copying to a separate, host visible staging
    buffer from which a GPU buffer-to-buffer copy is issued into the actual
    GPU-only buffer.

    \value Static Indicates that the data is expected to change only
    infrequently. Typically placed in device local (GPU) memory, where
    applicable. On backends where host visible staging buffers are used for
    uploading, the staging buffers are kept around for this type, unlike with
    Immutable, so subsequent uploads do not suffer in performance. Frequent
    updates, especially updates in consecutive frames, should be avoided.

    \value Dynamic Indicates that the data is expected to change frequently.
    Not recommended for large buffers. Typically backed by host visible memory
    in 2 copies in order to allow for changing without stalling the graphics
    pipeline. The double buffering is managed transparently to the applications
    and is not exposed in the API here in any form. This is the recommended,
    and, with some backends, the only possible, type for buffers with
    UniformBuffer usage.
 */</doc>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='1050' c='_ZN9QRhiGles212createBufferEN10QRhiBuffer4TypeE6QFlagsINS0_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='4801' c='_ZN12QGles2BufferC1EP18QRhiImplementationN10QRhiBuffer4TypeE6QFlagsINS2_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull.cpp' l='62' c='_ZN8QRhiNull12createBufferEN10QRhiBuffer4TypeE6QFlagsINS0_9UsageFlagEEj'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhinull.cpp' l='552' c='_ZN11QNullBufferC1EP18QRhiImplementationN10QRhiBuffer4TypeE6QFlagsINS2_9UsageFlagEEj'/>
