<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.h' l='67' c='_ZNK9QSplitter6handleEi'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.h' l='75' c='_ZN9QSplitter12createHandleEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.h' l='92'/>
<inh f='qtbase-6.5.0/src/widgets/kernel/qwidget.h' l='98' c='QWidget'/>
<def f='qtbase-6.5.0/src/widgets/widgets/qsplitter.h' l='97' ll='125'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.h' l='123' c='_ZN15QSplitterHandleC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.h' l='123' c='_ZN15QSplitterHandleaSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.h' l='123' c='_ZN15QSplitterHandleaSERKS_'/>
<size>40</size>
<smbr r='QSplitterHandle::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK15QSplitterHandle10metaObjectEv'/>
<fun r='_ZN15QSplitterHandle11qt_metacastEPKc'/>
<fun r='_ZN15QSplitterHandle11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN15QSplitterHandle2trEPKcS1_i'/>
<fun r='_ZN15QSplitterHandle18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN15QSplitterHandleC1EN2Qt11OrientationEP9QSplitter'/>
<fun r='_ZN15QSplitterHandleD1Ev'/>
<fun r='_ZN15QSplitterHandle14setOrientationEN2Qt11OrientationE'/>
<fun r='_ZNK15QSplitterHandle11orientationEv'/>
<fun r='_ZNK15QSplitterHandle12opaqueResizeEv'/>
<fun r='_ZNK15QSplitterHandle8splitterEv'/>
<fun r='_ZNK15QSplitterHandle8sizeHintEv'/>
<fun r='_ZN15QSplitterHandle10paintEventEP11QPaintEvent'/>
<fun r='_ZN15QSplitterHandle14mouseMoveEventEP11QMouseEvent'/>
<fun r='_ZN15QSplitterHandle15mousePressEventEP11QMouseEvent'/>
<fun r='_ZN15QSplitterHandle17mouseReleaseEventEP11QMouseEvent'/>
<fun r='_ZN15QSplitterHandle11resizeEventEP12QResizeEvent'/>
<fun r='_ZN15QSplitterHandle5eventEP6QEvent'/>
<fun r='_ZN15QSplitterHandle12moveSplitterEi'/>
<fun r='_ZN15QSplitterHandle20closestLegalPositionEi'/>
<fun r='_ZN15QSplitterHandleC1ERKS_'/>
<fun r='_ZN15QSplitterHandle6d_funcEv'/>
<fun r='_ZNK15QSplitterHandle6d_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/styles/qfusionstyle.cpp' l='3229' c='_ZN12QFusionStyle6polishEP7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qfusionstyle.cpp' l='3273' c='_ZN12QFusionStyle8unpolishEP7QWidget'/>
<size>40</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter_p.h' l='35'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter_p.h' l='105' c='_ZN22QSplitterHandlePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter_p.h' l='105' c='_ZN22QSplitterHandlePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter_p.h' l='105' c='_ZNK22QSplitterHandlePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter_p.h' l='105' c='_ZNK22QSplitterHandlePrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter_p.h' l='105'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.cpp' l='744' c='_ZN16QSplitterPrivate6setGeoEP21QSplitterLayoutStructiib'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.cpp' l='846' c='_ZN16QSplitterPrivate12insertWidgetEiP7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.cpp' l='1198' c='_ZN9QSplitter12createHandleEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.cpp' l='1201' c='_ZN9QSplitter12createHandleEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qsplitter.cpp' l='1215' c='_ZNK9QSplitter6handleEi'/>
<size>40</size>
<doc f='qtbase-6.5.0/src/widgets/widgets/qsplitter.cpp' l='37'>/*!
    \class QSplitterHandle
    \brief The QSplitterHandle class provides handle functionality for the splitter.

    \ingroup organizers
    \inmodule QtWidgets

    QSplitterHandle is typically what people think about when they think about
    a splitter. It is the handle that is used to resize the widgets.

    A typical developer using QSplitter will never have to worry about
    QSplitterHandle. It is provided for developers who want splitter handles
    that provide extra features, such as popup menus.

    The typical way one would create splitter handles is to subclass QSplitter and then
    reimplement QSplitter::createHandle() to instantiate the custom splitter
    handle. For example, a minimum QSplitter subclass might look like this:

    \snippet splitterhandle/splitter.h 0

    The \l{QSplitter::}{createHandle()} implementation simply constructs a
    custom splitter handle, called \c Splitter in this example:

    \snippet splitterhandle/splitter.cpp 1

    Information about a given handle can be obtained using functions like
    orientation() and opaqueResize(), and is retrieved from its parent splitter.
    Details like these can be used to give custom handles different appearances
    depending on the splitter&apos;s orientation.

    The complexity of a custom handle subclass depends on the tasks that it
    needs to perform. A simple subclass might only provide a paintEvent()
    implementation:

    \snippet splitterhandle/splitter.cpp 0

    In this example, a predefined gradient is set up differently depending on
    the orientation of the handle. QSplitterHandle provides a reasonable
    size hint for the handle, so the subclass does not need to provide a
    reimplementation of sizeHint() unless the handle has special size
    requirements.

    \sa QSplitter
*/</doc>
<fun r='_ZN15QSplitterHandleC1EN2Qt11OrientationEP9QSplitter'/>
<fun r='_ZN15QSplitterHandleD1Ev'/>
<fun r='_ZN15QSplitterHandle14setOrientationEN2Qt11OrientationE'/>
<fun r='_ZNK15QSplitterHandle11orientationEv'/>
<fun r='_ZNK15QSplitterHandle12opaqueResizeEv'/>
<fun r='_ZNK15QSplitterHandle8splitterEv'/>
<fun r='_ZN15QSplitterHandle12moveSplitterEi'/>
<fun r='_ZN15QSplitterHandle20closestLegalPositionEi'/>
<fun r='_ZNK15QSplitterHandle8sizeHintEv'/>
<fun r='_ZN15QSplitterHandle11resizeEventEP12QResizeEvent'/>
<fun r='_ZN15QSplitterHandle5eventEP6QEvent'/>
<fun r='_ZN15QSplitterHandle14mouseMoveEventEP11QMouseEvent'/>
<fun r='_ZN15QSplitterHandle15mousePressEventEP11QMouseEvent'/>
<fun r='_ZN15QSplitterHandle17mouseReleaseEventEP11QMouseEvent'/>
<fun r='_ZN15QSplitterHandle10paintEventEP11QPaintEvent'/>
