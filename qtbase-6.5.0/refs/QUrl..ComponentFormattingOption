<def f='qtbase-6.5.0/src/corelib/io/qurl.h' l='120' ll='131'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='132'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='142'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='293' c='_ZorN4QUrl19UrlFormattingOptionENS_25ComponentFormattingOptionE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='297' c='_ZorN4QUrl25ComponentFormattingOptionENS_19UrlFormattingOptionE'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.h' l='303' c='_ZorN4QUrl25ComponentFormattingOptionE12QUrlTwoFlagsINS_19UrlFormattingOptionES0_E'/>
<doc f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='234'>/*!
    \enum QUrl::ComponentFormattingOption
    \since 5.0

    The component formatting options define how the components of an URL will
    be formatted when written out as text. They can be combined with the
    options from QUrl::FormattingOptions when used in toString() and
    toEncoded().

    \value PrettyDecoded   The component is returned in a &quot;pretty form&quot;, with
                           most percent-encoded characters decoded. The exact
                           behavior of PrettyDecoded varies from component to
                           component and may also change from Qt release to Qt
                           release. This is the default.

    \value EncodeSpaces    Leave space characters in their encoded form (&quot;%20&quot;).

    \value EncodeUnicode   Leave non-US-ASCII characters encoded in their UTF-8
                           percent-encoded form (e.g., &quot;%C3%A9&quot; for the U+00E9
                           codepoint, LATIN SMALL LETTER E WITH ACUTE).

    \value EncodeDelimiters Leave certain delimiters in their encoded form, as
                            would appear in the URL when the full URL is
                            represented as text. The delimiters are affected
                            by this option change from component to component.
                            This flag has no effect in toString() or toEncoded().

    \value EncodeReserved  Leave US-ASCII characters not permitted in the URL by
                           the specification in their encoded form. This is the
                           default on toString() and toEncoded().

    \value DecodeReserved  Decode the US-ASCII characters that the URL specification
                           does not allow to appear in the URL. This is the
                           default on the getters of individual components.

    \value FullyEncoded    Leave all characters in their properly-encoded form,
                           as this component would appear as part of a URL. When
                           used with toString(), this produces a fully-compliant
                           URL in QString form, exactly equal to the result of
                           toEncoded()

    \value FullyDecoded    Attempt to decode as much as possible. For individual
                           components of the URL, this decodes every percent
                           encoding sequence, including control characters (U+0000
                           to U+001F) and UTF-8 sequences found in percent-encoded form.
                           Use of this mode may cause data loss, see below for more information.

    The values of EncodeReserved and DecodeReserved should not be used together
    in one call. The behavior is undefined if that happens. They are provided
    as separate values because the behavior of the &quot;pretty mode&quot; with regards
    to reserved characters is different on certain components and specially on
    the full URL.

    \section2 Full decoding

    The FullyDecoded mode is similar to the behavior of the functions returning
    QString in Qt 4.x, in that every character represents itself and never has
    any special meaning. This is true even for the percent character (&apos;%&apos;),
    which should be interpreted to mean a literal percent, not the beginning of
    a percent-encoded sequence. The same actual character, in all other
    decoding modes, is represented by the sequence &quot;%25&quot;.

    Whenever re-applying data obtained with QUrl::FullyDecoded into a QUrl,
    care must be taken to use the QUrl::DecodedMode parameter to the setters
    (like setPath() and setUserName()). Failure to do so may cause
    re-interpretation of the percent character (&apos;%&apos;) as the beginning of a
    percent-encoded sequence.

    This mode is quite useful when portions of a URL are used in a non-URL
    context. For example, to extract the username, password or file paths in an
    FTP client application, the FullyDecoded mode should be used.

    This mode should be used with care, since there are two conditions that
    cannot be reliably represented in the returned QString. They are:

    \list
      \li \b{Non-UTF-8 sequences:} URLs may contain sequences of
      percent-encoded characters that do not form valid UTF-8 sequences. Since
      URLs need to be decoded using UTF-8, any decoder failure will result in
      the QString containing one or more replacement characters where the
      sequence existed.

      \li \b{Encoded delimiters:} URLs are also allowed to make a distinction
      between a delimiter found in its literal form and its equivalent in
      percent-encoded form. This is most commonly found in the query, but is
      permitted in most parts of the URL.
    \endlist

    The following example illustrates the problem:

    \snippet code/src_corelib_io_qurl.cpp 10

    If the two URLs were used via HTTP GET, the interpretation by the web
    server would probably be different. In the first case, it would interpret
    as one parameter, with a key of &quot;q&quot; and value &quot;a+=b&amp;c&quot;. In the second
    case, it would probably interpret as two parameters, one with a key of &quot;q&quot;
    and value &quot;a =b&quot;, and the second with a key &quot;c&quot; and no value.

    \sa QUrl::FormattingOptions
*/</doc>
