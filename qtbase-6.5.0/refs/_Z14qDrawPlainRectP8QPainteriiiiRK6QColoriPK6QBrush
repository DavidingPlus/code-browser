<dec f='qtbase-6.5.0/src/widgets/styles/qdrawutil.h' l='68' type='void qDrawPlainRect(QPainter * p, int x, int y, int w, int h, const QColor &amp; , int lineWidth = 1, const QBrush * fill = nullptr)'/>
<def f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='576' ll='612' type='void qDrawPlainRect(QPainter * p, int x, int y, int w, int h, const QColor &amp; c, int lineWidth = 1, const QBrush * fill = nullptr)'/>
<use f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='818' u='c' c='_Z14qDrawPlainRectP8QPainterRK5QRectRK6QColoriPK6QBrush'/>
<doc f='qtbase-6.5.0/src/widgets/styles/qdrawutil.cpp' l='554'>/*!
    \fn void qDrawPlainRect(QPainter *painter, int x, int y, int width, int height, const QColor &amp;lineColor,
                     int lineWidth, const QBrush *fill)
    \relates &lt;qdrawutil.h&gt;

    Draws the plain rectangle beginning at (\a x, \a y) with the given
    \a width and \a height, using the specified \a painter, \a lineColor
    and \a lineWidth. The rectangle&apos;s interior is filled with the \a
    fill brush unless \a fill is \nullptr.

    \warning This function does not look at QWidget::style() or
    QApplication::style(). Use the drawing functions in QStyle to make
    widgets that follow the current GUI style.

    Alternatively you can use a QFrame widget and apply the
    QFrame::setFrameStyle() function to display a plain rectangle:

    \snippet code/src_gui_painting_qdrawutil.cpp 4

    \sa qDrawShadeRect(), QStyle
*/</doc>
