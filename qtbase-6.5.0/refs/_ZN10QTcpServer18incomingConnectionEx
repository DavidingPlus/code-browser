<dec f='qtbase-6.5.0/src/network/socket/qtcpserver.h' l='61' type='void QTcpServer::incomingConnection(qintptr handle)'/>
<use f='qtbase-6.5.0/src/network/socket/qtcpserver.cpp' l='198' u='c' c='_ZN17QTcpServerPrivate16readNotificationEv'/>
<def f='qtbase-6.5.0/src/network/socket/qtcpserver.cpp' l='586' ll='595' type='void QTcpServer::incomingConnection(qintptr socketDescriptor)'/>
<doc f='qtbase-6.5.0/src/network/socket/qtcpserver.cpp' l='559'>/*!
    This virtual function is called by QTcpServer when a new
    connection is available. The \a socketDescriptor argument is the
    native socket descriptor for the accepted connection.

    The base implementation creates a QTcpSocket, sets the socket
    descriptor and then stores the QTcpSocket in an internal list of
    pending connections. Finally newConnection() is emitted.

    Reimplement this function to alter the server&apos;s behavior when a
    connection is available.

    If this server is using QNetworkProxy then the \a socketDescriptor
    may not be usable with native socket functions, and should only be
    used with QTcpSocket::setSocketDescriptor().

    \note If another socket is created in the reimplementation
    of this method, it needs to be added to the Pending Connections mechanism
    by calling addPendingConnection().

    \note If you want to handle an incoming connection as a new QTcpSocket
    object in another thread you have to pass the socketDescriptor
    to the other thread and create the QTcpSocket object there and
    use its setSocketDescriptor() method.

    \sa newConnection(), nextPendingConnection(), addPendingConnection()
*/</doc>
