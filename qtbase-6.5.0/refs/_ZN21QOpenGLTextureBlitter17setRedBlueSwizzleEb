<dec f='qtbase-6.5.0/src/opengl/qopengltextureblitter.h' l='38' type='void QOpenGLTextureBlitter::setRedBlueSwizzle(bool swizzle)'/>
<def f='qtbase-6.5.0/src/opengl/qopengltextureblitter.cpp' l='634' ll='638' type='void QOpenGLTextureBlitter::setRedBlueSwizzle(bool swizzle)'/>
<doc f='qtbase-6.5.0/src/opengl/qopengltextureblitter.cpp' l='622'>/*!
    Sets whether swizzling is enabled for the red and blue color channels to
    \a swizzle. An BGRA to RGBA conversion (occurring in the shader on
    the GPU, instead of a slow CPU-side transformation) can be useful
    when the source texture contains data from a QImage with a format
    like QImage::Format_ARGB32 which maps to BGRA on little endian
    systems.

    By default the red-blue swizzle is disabled since this is what a
    texture attached to an framebuffer object or a texture based on a
    byte ordered QImage format (like QImage::Format_RGBA8888) needs.
 */</doc>
