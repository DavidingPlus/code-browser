<def f='qtbase-6.5.0/src/network/access/qnetworkrequest.h' l='38' ll='71'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkrequest.h' l='127' c='_ZNK15QNetworkRequest9attributeENS_9AttributeERK8QVariant'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkrequest.h' l='128' c='_ZN15QNetworkRequest12setAttributeENS_9AttributeERK8QVariant'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreply.h' l='108' c='_ZNK13QNetworkReply9attributeEN15QNetworkRequest9AttributeE'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreply.h' l='149' c='_ZN13QNetworkReply12setAttributeEN15QNetworkRequest9AttributeERK8QVariant'/>
<use f='qtbase-6.5.0/src/network/access/qabstractnetworkcache.h' l='27'/>
<use f='qtbase-6.5.0/src/network/access/qabstractnetworkcache.cpp' l='352' c='_ZrsR11QDataStreamR5QHashIN15QNetworkRequest9AttributeE8QVariantE'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkrequest_p.h' l='36'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend_p.h' l='112' c='_ZN21QNetworkAccessBackend12setAttributeEN15QNetworkRequest9AttributeERK8QVariant'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessbackend.cpp' l='609' c='_ZN21QNetworkAccessBackend12setAttributeEN15QNetworkRequest9AttributeERK8QVariant'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreply.cpp' l='676' c='_ZNK13QNetworkReply9attributeEN15QNetworkRequest9AttributeE'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreply.cpp' l='926' c='_ZN13QNetworkReply12setAttributeEN15QNetworkRequest9AttributeERK8QVariant'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyhttpimpl.cpp' l='164' c='_ZN21QNetworkReplyHttpImplC1EP21QNetworkAccessManagerRK15QNetworkRequestRNS0_9OperationEP9QIODevice'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkreplyimpl.cpp' l='214' c='_ZN24QNetworkReplyImplPrivate5setupEN21QNetworkAccessManager9OperationERK15QNetworkRequestP9QIODevice'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkrequest.cpp' l='689' c='_ZNK15QNetworkRequest9attributeENS_9AttributeERK8QVariant'/>
<use f='qtbase-6.5.0/src/network/access/qnetworkrequest.cpp' l='702' c='_ZN15QNetworkRequest12setAttributeENS_9AttributeERK8QVariant'/>
<doc f='qtbase-6.5.0/src/network/access/qnetworkrequest.cpp' l='112'>/*!
    \enum QNetworkRequest::Attribute
    \since 4.7

    Attribute codes for the QNetworkRequest and QNetworkReply.

    Attributes are extra meta-data that are used to control the
    behavior of the request and to pass further information from the
    reply back to the application. Attributes are also extensible,
    allowing custom implementations to pass custom values.

    The following table explains what the default attribute codes are,
    the QVariant types associated, the default value if said attribute
    is missing and whether it&apos;s used in requests or replies.

    \value HttpStatusCodeAttribute
        Replies only, type: QMetaType::Int (no default)
        Indicates the HTTP status code received from the HTTP server
        (like 200, 304, 404, 401, etc.). If the connection was not
        HTTP-based, this attribute will not be present.

    \value HttpReasonPhraseAttribute
        Replies only, type: QMetaType::QByteArray (no default)
        Indicates the HTTP reason phrase as received from the HTTP
        server (like &quot;Ok&quot;, &quot;Found&quot;, &quot;Not Found&quot;, &quot;Access Denied&quot;,
        etc.) This is the human-readable representation of the status
        code (see above). If the connection was not HTTP-based, this
        attribute will not be present.

    \value RedirectionTargetAttribute
        Replies only, type: QMetaType::QUrl (no default)
        If present, it indicates that the server is redirecting the
        request to a different URL. The Network Access API does follow
        redirections by default, unless
        QNetworkRequest::ManualRedirectPolicy is used. Additionally, if
        QNetworkRequest::UserVerifiedRedirectPolicy is used, then this
        attribute will be set if the redirect was not followed.
        The returned URL might be relative. Use QUrl::resolved()
        to create an absolute URL out of it.

    \value ConnectionEncryptedAttribute
        Replies only, type: QMetaType::Bool (default: false)
        Indicates whether the data was obtained through an encrypted
        (secure) connection.

    \value CacheLoadControlAttribute
        Requests only, type: QMetaType::Int (default: QNetworkRequest::PreferNetwork)
        Controls how the cache should be accessed. The possible values
        are those of QNetworkRequest::CacheLoadControl. Note that the
        default QNetworkAccessManager implementation does not support
        caching. However, this attribute may be used by certain
        backends to modify their requests (for example, for caching proxies).

    \value CacheSaveControlAttribute
        Requests only, type: QMetaType::Bool (default: true)
        Controls if the data obtained should be saved to cache for
        future uses. If the value is false, the data obtained will not
        be automatically cached. If true, data may be cached, provided
        it is cacheable (what is cacheable depends on the protocol
        being used).

    \value SourceIsFromCacheAttribute
        Replies only, type: QMetaType::Bool (default: false)
        Indicates whether the data was obtained from cache
        or not.

    \value DoNotBufferUploadDataAttribute
        Requests only, type: QMetaType::Bool (default: false)
        Indicates whether the QNetworkAccessManager code is
        allowed to buffer the upload data, e.g. when doing a HTTP POST.
        When using this flag with sequential upload data, the ContentLengthHeader
        header must be set.

    \value HttpPipeliningAllowedAttribute
        Requests only, type: QMetaType::Bool (default: false)
        Indicates whether the QNetworkAccessManager code is
        allowed to use HTTP pipelining with this request.

    \value HttpPipeliningWasUsedAttribute
        Replies only, type: QMetaType::Bool
        Indicates whether the HTTP pipelining was used for receiving
        this reply.

    \value CustomVerbAttribute
       Requests only, type: QMetaType::QByteArray
       Holds the value for the custom HTTP verb to send (destined for usage
       of other verbs than GET, POST, PUT and DELETE). This verb is set
       when calling QNetworkAccessManager::sendCustomRequest().

    \value CookieLoadControlAttribute
        Requests only, type: QMetaType::Int (default: QNetworkRequest::Automatic)
        Indicates whether to send &apos;Cookie&apos; headers in the request.
        This attribute is set to false by Qt WebKit when creating a cross-origin
        XMLHttpRequest where withCredentials has not been set explicitly to true by the
        Javascript that created the request.
        See \l{http://www.w3.org/TR/XMLHttpRequest2/#credentials-flag}{here} for more information.
        (This value was introduced in 4.7.)

    \value CookieSaveControlAttribute
        Requests only, type: QMetaType::Int (default: QNetworkRequest::Automatic)
        Indicates whether to save &apos;Cookie&apos; headers received from the server in reply
        to the request.
        This attribute is set to false by Qt WebKit when creating a cross-origin
        XMLHttpRequest where withCredentials has not been set explicitly to true by the
        Javascript that created the request.
        See \l{http://www.w3.org/TR/XMLHttpRequest2/#credentials-flag} {here} for more information.
        (This value was introduced in 4.7.)

    \value AuthenticationReuseAttribute
        Requests only, type: QMetaType::Int (default: QNetworkRequest::Automatic)
        Indicates whether to use cached authorization credentials in the request,
        if available. If this is set to QNetworkRequest::Manual and the authentication
        mechanism is &apos;Basic&apos; or &apos;Digest&apos;, Qt will not send an an &apos;Authorization&apos; HTTP
        header with any cached credentials it may have for the request&apos;s URL.
        This attribute is set to QNetworkRequest::Manual by Qt WebKit when creating a cross-origin
        XMLHttpRequest where withCredentials has not been set explicitly to true by the
        Javascript that created the request.
        See \l{http://www.w3.org/TR/XMLHttpRequest2/#credentials-flag} {here} for more information.
        (This value was introduced in 4.7.)

    \omitvalue MaximumDownloadBufferSizeAttribute

    \omitvalue DownloadBufferAttribute

    \omitvalue SynchronousRequestAttribute

    \value BackgroundRequestAttribute
        Type: QMetaType::Bool (default: false)
        Indicates that this is a background transfer, rather than a user initiated
        transfer. Depending on the platform, background transfers may be subject
        to different policies.

    \value Http2AllowedAttribute
        Requests only, type: QMetaType::Bool (default: true)
        Indicates whether the QNetworkAccessManager code is
        allowed to use HTTP/2 with this request. This applies
        to SSL requests or &apos;cleartext&apos; HTTP/2 if Http2CleartextAllowedAttribute
        is set.

    \value Http2WasUsedAttribute
        Replies only, type: QMetaType::Bool (default: false)
        Indicates whether HTTP/2 was used for receiving this reply.
        (This value was introduced in 5.9.)

    \value EmitAllUploadProgressSignalsAttribute
        Requests only, type: QMetaType::Bool (default: false)
        Indicates whether all upload signals should be emitted.
        By default, the uploadProgress signal is emitted only
        in 100 millisecond intervals.
        (This value was introduced in 5.5.)

    \value OriginalContentLengthAttribute
        Replies only, type QMetaType::Int
        Holds the original content-length attribute before being invalidated and
        removed from the header when the data is compressed and the request was
        marked to be decompressed automatically.
        (This value was introduced in 5.9.)

    \value RedirectPolicyAttribute
        Requests only, type: QMetaType::Int, should be one of the
        QNetworkRequest::RedirectPolicy values
        (default: NoLessSafeRedirectPolicy).
        (This value was introduced in 5.9.)

    \value Http2DirectAttribute
        Requests only, type: QMetaType::Bool (default: false)
        If set, this attribute will force QNetworkAccessManager to use
        HTTP/2 protocol without initial HTTP/2 protocol negotiation.
        Use of this attribute implies prior knowledge that a particular
        server supports HTTP/2. The attribute works with SSL or with &apos;cleartext&apos;
        HTTP/2 if Http2CleartextAllowedAttribute is set.
        If a server turns out to not support HTTP/2, when HTTP/2 direct
        was specified, QNetworkAccessManager gives up, without attempting to
        fall back to HTTP/1.1. If both Http2AllowedAttribute and
        Http2DirectAttribute are set, Http2DirectAttribute takes priority.
        (This value was introduced in 5.11.)

    \omitvalue ResourceTypeAttribute

    \value AutoDeleteReplyOnFinishAttribute
        Requests only, type: QMetaType::Bool (default: false)
        If set, this attribute will make QNetworkAccessManager delete
        the QNetworkReply after having emitted &quot;finished&quot;.
        (This value was introduced in 5.14.)

    \value ConnectionCacheExpiryTimeoutSecondsAttribute
        Requests only, type: QMetaType::Int
        To set when the TCP connections to a server (HTTP1 and HTTP2) should
        be closed after the last pending request had been processed.
        (This value was introduced in 6.3.)

    \value Http2CleartextAllowedAttribute
        Requests only, type: QMetaType::Bool (default: false)
        If set, this attribute will tell QNetworkAccessManager to attempt
        an upgrade to HTTP/2 over cleartext (also known as h2c).
        Until Qt 7 the default value for this attribute can be overridden
        to true by setting the QT_NETWORK_H2C_ALLOWED environment variable.
        This attribute is ignored if the Http2AllowedAttribute is not set.
        (This value was introduced in 6.3.)

    \value UseCredentialsAttribute
        Requests only, type: QMetaType::Bool (default: false)
        Indicates if the underlying XMLHttpRequest cross-site Access-Control
        requests should be made using credentials. Has no effect on
        same-origin requests. This only affects the WebAssembly platform.
        (This value was introduced in 6.5.)

    \value User
        Special type. Additional information can be passed in
        QVariants with types ranging from User to UserMax. The default
        implementation of Network Access will ignore any request
        attributes in this range and it will not produce any
        attributes in this range in replies. The range is reserved for
        extensions of QNetworkAccessManager.

    \value UserMax
        Special type. See User.
*/</doc>
