<def f='qtbase-6.5.0/src/corelib/io/qloggingcategory.h' l='23' type='bool QLoggingCategory::isInfoEnabled() const'/>
<use f='qtbase-6.5.0/src/corelib/io/qloggingcategory.h' l='84' u='c' c='_ZN12_GLOBAL__N_127QLoggingCategoryMacroHolder4initERK16QLoggingCategory'/>
<use f='qtbase-6.5.0/src/corelib/global/qlogging.cpp' l='545' u='c' c='_ZNK14QMessageLogger4infoERK16QLoggingCategoryPKcz'/>
<use f='qtbase-6.5.0/src/corelib/global/qlogging.cpp' l='572' u='c' c='_ZNK14QMessageLogger4infoEPFRK16QLoggingCategoryvEPKcz'/>
<use f='qtbase-6.5.0/src/corelib/global/qlogging.cpp' l='613' u='c' c='_ZNK14QMessageLogger4infoERK16QLoggingCategory'/>
<use f='qtbase-6.5.0/src/corelib/io/qloggingcategory.cpp' l='263' u='c' c='_ZNK16QLoggingCategory9isEnabledE9QtMsgType'/>
<doc f='qtbase-6.5.0/src/corelib/io/qloggingcategory.cpp' l='219'>/*!
    \fn bool QLoggingCategory::isInfoEnabled() const

    Returns \c true if informational messages should be shown for this category;
    \c false otherwise.

    \note The \l qCInfo() macro already does this check before executing any
    code. However, calling this method may be useful to avoid the
    expensive generation of data for debug output only.

    \since 5.5
*/</doc>
