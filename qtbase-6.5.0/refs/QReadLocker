<def f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.h' l='48' ll='82'/>
<use f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.h' l='80' c='_ZN11QReadLockerC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.h' l='80' c='_ZN11QReadLockeraSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.h' l='80' c='_ZN11QReadLockeraSERKS_'/>
<size>8</size>
<fun r='_ZN11QReadLockerC1EP14QReadWriteLock'/>
<fun r='_ZN11QReadLockerD1Ev'/>
<fun r='_ZN11QReadLocker6unlockEv'/>
<fun r='_ZN11QReadLocker6relockEv'/>
<fun r='_ZNK11QReadLocker13readWriteLockEv'/>
<fun r='_ZN11QReadLockerC1ERKS_'/>
<mbr r='QReadLocker::q_val' o='0' t='quintptr'/>
<fun r='_ZN11QReadLockerC1EP14QReadWriteLock'/>
<use f='qtbase-6.5.0/src/corelib/io/qabstractfileengine.cpp' l='127' c='_Z36qt_custom_file_engine_handler_createRK7QString'/>
<size>1</size>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='169' c='_ZN12_GLOBAL__N_123QMetaTypeCustomRegistry13getCustomTypeEi'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='188' c='_ZN17QtMetaTypePrivate18typedefNameForTypeEPKN9QtPrivate18QMetaTypeInterfaceE'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1663' c='_ZNK25QMetaTypeFunctionRegistry8containsET0_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='1680' c='_ZNK25QMetaTypeFunctionRegistry8functionET0_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qmetatype.cpp' l='2759' c='_ZL17qMetaTypeTypeImplPKci'/>
<size>1</size>
<use f='qtbase-6.5.0/src/corelib/text/qlocale_unix.cpp' l='136' c='_ZNK13QSystemLocale5queryENS_9QueryTypeE8QVariant'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.cpp' l='614'>/*!
    \class QReadLocker
    \inmodule QtCore
    \brief The QReadLocker class is a convenience class that
    simplifies locking and unlocking read-write locks for read access.

    \threadsafe

    \ingroup thread

    The purpose of QReadLocker (and QWriteLocker) is to simplify
    QReadWriteLock locking and unlocking. Locking and unlocking
    statements or in exception handling code is error-prone and
    difficult to debug. QReadLocker can be used in such situations
    to ensure that the state of the lock is always well-defined.

    Here&apos;s an example that uses QReadLocker to lock and unlock a
    read-write lock for reading:

    \snippet code/src_corelib_thread_qreadwritelock.cpp 1

    It is equivalent to the following code:

    \snippet code/src_corelib_thread_qreadwritelock.cpp 2

    The QMutexLocker documentation shows examples where the use of a
    locker object greatly simplifies programming.

    \sa QWriteLocker, QReadWriteLock
*/</doc>
<use f='qtbase-6.5.0/src/corelib/time/qcalendar.cpp' l='329' c='_ZN9QtPrivate17QCalendarRegistry18availableCalendarsEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qcalendar.cpp' l='346' c='_ZN9QtPrivate17QCalendarRegistry8fromNameE14QAnyStringView'/>
<use f='qtbase-6.5.0/src/corelib/time/qcalendar.cpp' l='361' c='_ZN9QtPrivate17QCalendarRegistry9fromIndexEm'/>
<use f='qtbase-6.5.0/src/corelib/time/qcalendar.cpp' l='394' c='_ZN9QtPrivate17QCalendarRegistry8fromEnumEN9QCalendar6SystemE'/>
<size>1</size>
<use f='qtbase-6.5.0/src/dbus/qdbusintegrator.cpp' l='297' c='_ZL18qDBusNewConnectionP10DBusServerP14DBusConnectionPv'/>
<use f='qtbase-6.5.0/src/dbus/qdbusintegrator.cpp' l='2553' c='_ZN22QDBusConnectionPrivate12getNameOwnerERK7QString'/>
<size>8</size>
<use f='qtbase-6.5.0/src/dbus/qdbusmetatype.cpp' l='206' c='_ZN13QDBusMetaType8marshallER13QDBusArgument9QMetaTypePKv'/>
<use f='qtbase-6.5.0/src/dbus/qdbusmetatype.cpp' l='237' c='_ZN13QDBusMetaType10demarshallERK13QDBusArgument9QMetaTypePv'/>
<use f='qtbase-6.5.0/src/dbus/qdbusmetatype.cpp' l='432' c='_ZN13QDBusMetaType15typeToSignatureE9QMetaType'/>
<size>8</size>
<use f='qtbase-6.5.0/src/sql/kernel/qsqldatabase.cpp' l='36' c='_ZN15QConnectionDict11contains_tsERK7QString'/>
<use f='qtbase-6.5.0/src/sql/kernel/qsqldatabase.cpp' l='41' c='_ZNK15QConnectionDict7keys_tsEv'/>
<size>8</size>
