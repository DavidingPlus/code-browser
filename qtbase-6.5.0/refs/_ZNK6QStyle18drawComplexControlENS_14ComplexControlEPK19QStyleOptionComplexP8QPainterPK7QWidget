<dec f='qtbase-6.5.0/src/widgets/styles/qstyle.h' l='406' type='void QStyle::drawComplexControl(QStyle::ComplexControl cc, const QStyleOptionComplex * opt, QPainter * p, const QWidget * widget = nullptr) const'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylepainter.h' l='56' u='c' c='_ZN13QStylePainter18drawComplexControlEN6QStyle14ComplexControlERK19QStyleOptionComplex'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicswidget.cpp' l='2286' u='c' c='_ZN15QGraphicsWidget16paintWindowFrameEP8QPainterPK24QStyleOptionGraphicsItemP7QWidget'/>
<ovr f='qtbase-6.5.0/src/widgets/styles/qcommonstyle.cpp' l='3218' c='_ZNK12QCommonStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qproxystyle.cpp' l='181' u='c' c='_ZNK11QProxyStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<doc f='qtbase-6.5.0/src/widgets/styles/qstyle.cpp' l='1219'>/*!
    \fn void QStyle::drawComplexControl(ComplexControl control, const QStyleOptionComplex *option, QPainter *painter, const QWidget *widget) const

    Draws the given \a control using the provided \a painter with the
    style options specified by \a option.

    The \a widget argument is optional and can be used as aid in
    drawing the control.

    The \a option parameter is a pointer to a QStyleOptionComplex
    object that can be cast to the correct subclass using the
    qstyleoption_cast() function. Note that the \c rect member of the
    specified \a option must be in logical
    coordinates. Reimplementations of this function should use
    visualRect() to change the logical coordinates into screen
    coordinates before calling the drawPrimitive() or drawControl()
    function.

    The table below is listing the complex control elements and their
    associated style option subclass. The style options contain all
    the parameters required to draw the controls, including
    QStyleOption::state which holds the \l {QStyle::StateFlag}{style
    flags} that are used when drawing. The table also describes which
    flags that are set when casting the given \a option to the
    appropriate subclass.

    \table
    \header \li Complex Control \li QStyleOptionComplex Subclass \li Style Flag \li Remark
    \row \li{1,2} \l{CC_SpinBox} \li{1,2} \l QStyleOptionSpinBox
         \li \l State_Enabled \li Set if the spin box is enabled.
    \row \li \l State_HasFocus \li Set if the spin box has input focus.

    \row \li{1,2} \l {CC_ComboBox} \li{1,2} \l QStyleOptionComboBox
         \li \l State_Enabled \li Set if the combobox is enabled.
    \row \li \l State_HasFocus \li Set if the combobox has input focus.

    \row \li{1,2} \l {CC_ScrollBar} \li{1,2} \l QStyleOptionSlider
         \li \l State_Enabled \li Set if the scroll bar is enabled.
    \row \li \l State_HasFocus \li Set if the scroll bar has input focus.

    \row \li{1,2} \l {CC_Slider} \li{1,2} \l QStyleOptionSlider
         \li \l State_Enabled \li Set if the slider is enabled.
    \row \li \l State_HasFocus \li Set if the slider has input focus.

    \row \li{1,2} \l {CC_Dial} \li{1,2} \l QStyleOptionSlider
         \li \l State_Enabled \li Set if the dial is enabled.
    \row \li \l State_HasFocus \li Set if the dial has input focus.

    \row \li{1,6} \l {CC_ToolButton} \li{1,6} \l QStyleOptionToolButton
         \li \l State_Enabled \li Set if the tool button is enabled.
    \row \li \l State_HasFocus \li Set if the tool button has input focus.
    \row \li \l State_DownArrow \li Set if the tool button is down (i.e., a mouse
        button or the space bar is pressed).
    \row \li \l State_On \li Set if the tool button is a toggle button
        and is toggled on.
    \row \li \l State_AutoRaise \li Set if the tool button has auto-raise enabled.
    \row \li \l State_Raised \li Set if the button is not down, not on, and doesn&apos;t
        contain the mouse when auto-raise is enabled.

    \row \li \l{CC_TitleBar} \li \l QStyleOptionTitleBar
         \li \l State_Enabled \li Set if the title bar is enabled.

    \endtable

    \sa drawPrimitive(), drawControl()
*/</doc>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='3065' u='c' c='_ZNK16QStyleSheetStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='3082' u='c' c='_ZNK16QStyleSheetStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='3134' u='c' c='_ZNK16QStyleSheetStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='3320' u='c' c='_ZNK16QStyleSheetStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='3419' u='c' c='_ZNK16QStyleSheetStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='3442' u='c' c='_ZNK16QStyleSheetStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='3515' u='c' c='_ZNK16QStyleSheetStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='3596' u='c' c='_ZNK16QStyleSheetStyle18drawComplexControlEN6QStyle14ComplexControlEPK19QStyleOptionComplexP8QPainterPK7QWidget'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qmdisubwindow.cpp' l='596' u='c' c='_ZN4QMdi16ControllerWidget10paintEventEP11QPaintEvent'/>
