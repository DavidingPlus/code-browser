<dec f='qtbase-6.5.0/src/xml/dom/qdom.h' l='120' type='QDomNode QDomNode::insertBefore(const QDomNode &amp; newChild, const QDomNode &amp; refChild)'/>
<def f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='1965' ll='1970' type='QDomNode QDomNode::insertBefore(const QDomNode &amp; newChild, const QDomNode &amp; refChild)'/>
<doc f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='1944'>/*!
    Inserts the node \a newChild before the child node \a refChild.
    \a refChild must be a direct child of this node. If \a refChild is
    \l{isNull()}{null} then \a newChild is inserted as the
    node&apos;s first child.

    If \a newChild is the child of another node, it is reparented to
    this node. If \a newChild is a child of this node, then its
    position in the list of children is changed.

    If \a newChild is a QDomDocumentFragment, then the children of the
    fragment are removed from the fragment and inserted before \a
    refChild.

    Returns a new reference to \a newChild on success or a \l{isNull()}{null node} on failure.

    The DOM specification disallow inserting attribute nodes, but due
    to historical reasons QDom accept them nevertheless.

    \sa insertAfter(), replaceChild(), removeChild(), appendChild()
*/</doc>
<doc f='qtbase-6.5.0/src/xml/dom/qdom.h' l='119'>// DOM functions</doc>
