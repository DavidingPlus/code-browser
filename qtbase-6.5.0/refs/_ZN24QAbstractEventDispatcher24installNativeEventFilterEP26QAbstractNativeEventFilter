<dec f='qtbase-6.5.0/src/corelib/kernel/qabstracteventdispatcher.h' l='56' type='void QAbstractEventDispatcher::installNativeEventFilter(QAbstractNativeEventFilter * filterObj)'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qabstracteventdispatcher.cpp' l='359' ll='367' type='void QAbstractEventDispatcher::installNativeEventFilter(QAbstractNativeEventFilter * filterObj)'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qabstracteventdispatcher.cpp' l='334'>/*!
    Installs an event filter \a filterObj for all native events received by the application.

    The event filter \a filterObj receives events via its \l {QAbstractNativeEventFilter::}{nativeEventFilter()}
    function, which is called for all events received by all threads.

    The  \l {QAbstractNativeEventFilter::}{nativeEventFilter()} function should return true
    if the event should be filtered, (in this case, stopped). It should return false to allow
    normal Qt processing to continue: the native event can then be translated
    into a QEvent and handled by the standard Qt \l{QEvent} {event} filtering,
    e.g. QObject::installEventFilter().

    If multiple event filters are installed, the filter that was installed last
    is activated first.

    \note The filter function set here receives native messages,
    that is, MSG or XEvent structs.

    For maximum portability, you should always try to use QEvent objects
    and QObject::installEventFilter() whenever possible.

    \sa QObject::installEventFilter()

    \since 5.0
*/</doc>
<use f='qtbase-6.5.0/src/testlib/qbenchmarkevent.cpp' l='18' u='c' c='_ZN15QBenchmarkEvent5startEv'/>
