<def f='qtbase-6.5.0/src/concurrent/qtconcurrentthreadengine.h' l='27' ll='43'/>
<use f='qtbase-6.5.0/src/concurrent/qtconcurrentthreadengine.h' l='91'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/concurrent/qtconcurrentthreadengine.h' l='24'>// The ThreadEngineBarrier counts worker threads, and allows one
// thread to wait for all others to finish. Tested for its use in
// QtConcurrent, requires more testing for use as a general class.</doc>
<mbr r='QtConcurrent::ThreadEngineBarrier::count' o='0' t='QAtomicInt'/>
<mbr r='QtConcurrent::ThreadEngineBarrier::semaphore' o='64' t='QSemaphore'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrierC1Ev'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrier7acquireEv'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrier7releaseEv'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrier4waitEv'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrier12currentCountEv'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrier17releaseUnlessLastEv'/>
<doc f='qtbase-6.5.0/src/concurrent/qtconcurrentthreadengine.cpp' l='14'>/*!
  \class QtConcurrent::ThreadEngineBarrier
  \inmodule QtConcurrent
  \internal
*/</doc>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrierC1Ev'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrier7acquireEv'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrier7releaseEv'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrier4waitEv'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrier12currentCountEv'/>
<fun r='_ZN12QtConcurrent19ThreadEngineBarrier17releaseUnlessLastEv'/>
