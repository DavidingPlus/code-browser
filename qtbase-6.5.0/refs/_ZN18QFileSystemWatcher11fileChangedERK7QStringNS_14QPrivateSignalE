<dec f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher.h' l='35' type='void QFileSystemWatcher::fileChanged(const QString &amp; path, QFileSystemWatcher::QPrivateSignal )'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher.cpp' l='115' u='c' c='_ZN25QFileSystemWatcherPrivate14_q_fileChangedERK7QStringb'/>
<doc f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher.cpp' l='414'>/*!
    \fn void QFileSystemWatcher::fileChanged(const QString &amp;path)

    This signal is emitted when the file at the specified \a path is
    modified, renamed or removed from disk.

    \note As a safety measure, many applications save an open file by
    writing a new file and then deleting the old one. In your slot
    function, you can check \c watcher.files().contains(path).
    If it returns \c false, check whether the file still exists
    and then call \c addPath() to continue watching it.

    \sa directoryChanged()
*/</doc>
<use f='qtbase-6.5.0/src/gui/itemmodels/qfileinfogatherer.cpp' l='177' u='a' c='_ZN17QFileInfoGatherer13createWatcherEv'/>
