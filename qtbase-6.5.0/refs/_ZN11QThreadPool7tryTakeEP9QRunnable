<dec f='qtbase-6.5.0/src/corelib/thread/qthreadpool.h' l='68' type='bool QThreadPool::tryTake(QRunnable * runnable)'/>
<def f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='343' ll='362' type='bool QThreadPool::tryTake(QRunnable * runnable)'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='373' u='c' c='_ZN18QThreadPoolPrivate19stealAndRunRunnableEP9QRunnable'/>
<doc f='qtbase-6.5.0/src/corelib/thread/qthreadpool.cpp' l='326'>/*!
    \since 5.9

    Attempts to remove the specified \a runnable from the queue if it is not yet started.
    If the runnable had not been started, returns \c true, and ownership of \a runnable
    is transferred to the caller (even when \c{runnable-&gt;autoDelete() == true}).
    Otherwise returns \c false.

    \note If \c{runnable-&gt;autoDelete() == true}, this function may remove the wrong
    runnable. This is known as the \l{https://en.wikipedia.org/wiki/ABA_problem}{ABA problem}:
    the original \a runnable may already have executed and has since been deleted.
    The memory is re-used for another runnable, which then gets removed instead of
    the intended one. For this reason, we recommend calling this function only for
    runnables that are not auto-deleting.

    \sa start(), QRunnable::autoDelete()
*/</doc>
