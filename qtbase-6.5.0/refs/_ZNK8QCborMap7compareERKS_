<dec f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='223' type='int QCborMap::compare(const QCborMap &amp; other) const'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='234' u='c' c='_ZNK8QCborMapeqERKS_'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcbormap.h' l='238' u='c' c='_ZNK8QCborMapltERKS_'/>
<def f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='1331' ll='1334' type='int QCborMap::compare(const QCborMap &amp; other) const'/>
<doc f='qtbase-6.5.0/src/corelib/serialization/qcbormap.cpp' l='1086'>/*!
    \fn int QCborMap::compare(const QCborMap &amp;other) const

    Compares this map and \a other, comparing each element in sequence, and
    returns an integer that indicates whether this map should be sorted prior
    to (if the result is negative) or after \a other (if the result is
    positive). If this function returns 0, the two maps are equal and contain
    the same elements.

    Note that CBOR maps are unordered, which means that two maps containing the
    very same pairs but in different order will still compare differently. To
    avoid this, it is recommended to insert elements into the map in a
    predictable order, such as by ascending key value. In fact, maps with keys
    in sorted order are required for Canonical CBOR representation.

    For more information on CBOR sorting order, see QCborValue::compare().

    \sa QCborValue::compare(), QCborArray::compare(), operator==()
 */</doc>
