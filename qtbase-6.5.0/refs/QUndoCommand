<def f='qtbase-6.5.0/src/gui/util/qundostack.h' l='19' ll='47'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='24' c='_ZN12QUndoCommandC1EPS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='25' c='_ZN12QUndoCommandC1ERK7QStringPS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='39' c='_ZN12QUndoCommand9mergeWithEPKS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='42' c='_ZNK12QUndoCommand5childEi'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='45' c='_ZN12QUndoCommandC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='45' c='_ZN12QUndoCommandaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='45' c='_ZN12QUndoCommandaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='68' c='_ZN10QUndoStack4pushEP12QUndoCommand'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.h' l='94' c='_ZNK10QUndoStack7commandEi'/>
<size>16</size>
<mbr r='QUndoCommand::d' o='64' t='QUndoCommandPrivate *'/>
<fun r='_ZN12QUndoCommandC1EPS_'/>
<fun r='_ZN12QUndoCommandC1ERK7QStringPS_'/>
<fun r='_ZN12QUndoCommandD1Ev'/>
<fun r='_ZN12QUndoCommand4undoEv'/>
<fun r='_ZN12QUndoCommand4redoEv'/>
<fun r='_ZNK12QUndoCommand4textEv'/>
<fun r='_ZNK12QUndoCommand10actionTextEv'/>
<fun r='_ZN12QUndoCommand7setTextERK7QString'/>
<fun r='_ZNK12QUndoCommand10isObsoleteEv'/>
<fun r='_ZN12QUndoCommand11setObsoleteEb'/>
<fun r='_ZNK12QUndoCommand2idEv'/>
<fun r='_ZN12QUndoCommand9mergeWithEPKS_'/>
<fun r='_ZNK12QUndoCommand10childCountEv'/>
<fun r='_ZNK12QUndoCommand5childEi'/>
<fun r='_ZN12QUndoCommandC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack_p.h' l='36'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack_p.h' l='51'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack_p.h' l='52'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='76' c='_ZN12QUndoCommandC1ERK7QStringPS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='77' c='_ZN12QUndoCommandC1ERK7QStringPS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='92' c='_ZN12QUndoCommandC1EPS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='180' c='_ZN12QUndoCommand9mergeWithEPKS_'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='300' c='_ZNK12QUndoCommand5childEi'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='567' c='_ZN10QUndoStack4pushEP12QUndoCommand'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='575' c='_ZN10QUndoStack4pushEP12QUndoCommand'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='577' c='_ZN10QUndoStack4pushEP12QUndoCommand'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='746' c='_ZN10QUndoStack4undoEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='788' c='_ZN10QUndoStack4redoEv'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='853' c='_ZN10QUndoStack8setIndexEi'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='871' c='_ZN10QUndoStack8setIndexEi'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='1131' c='_ZN10QUndoStack10beginMacroERK7QString'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='1131' c='_ZN10QUndoStack10beginMacroERK7QString'/>
<use f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='1190' c='_ZNK10QUndoStack7commandEi'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/gui/util/qundostack.cpp' l='13'>/*!
    \class QUndoCommand
    \brief The QUndoCommand class is the base class of all commands stored on a QUndoStack.
    \since 4.2

    \inmodule QtGui

    For an overview of Qt&apos;s Undo Framework, see the
    \l{Overview of Qt&apos;s Undo Framework}{overview document}.

    A QUndoCommand represents a single editing action on a document; for example,
    inserting or deleting a block of text in a text editor. QUndoCommand can apply
    a change to the document with redo() and undo the change with undo(). The
    implementations for these functions must be provided in a derived class.

    \snippet code/src_gui_util_qundostack.cpp 0

    A QUndoCommand has an associated text(). This is a short string
    describing what the command does. It is used to update the text
    properties of the stack&apos;s undo and redo actions; see
    QUndoStack::createUndoAction() and QUndoStack::createRedoAction().

    QUndoCommand objects are owned by the stack they were pushed on.
    QUndoStack deletes a command if it has been undone and a new command is pushed. For example:

\snippet code/src_gui_util_qundostack.cpp 1

    In effect, when a command is pushed, it becomes the top-most command
    on the stack.

    To support command compression, QUndoCommand has an id() and the virtual function
    mergeWith(). These functions are used by QUndoStack::push().

    To support command macros, a QUndoCommand object can have any number of child
    commands. Undoing or redoing the parent command will cause the child
    commands to be undone or redone. A command can be assigned
    to a parent explicitly in the constructor. In this case, the command
    will be owned by the parent.

    The parent in this case is usually an empty command, in that it doesn&apos;t
    provide its own implementation of undo() and redo(). Instead, it uses
    the base implementations of these functions, which simply call undo() or
    redo() on all its children. The parent should, however, have a meaningful
    text().

    \snippet code/src_gui_util_qundostack.cpp 2

    Another way to create macros is to use the convenience functions
    QUndoStack::beginMacro() and QUndoStack::endMacro().

    \sa QUndoStack
*/</doc>
<fun r='_ZN12QUndoCommandC1ERK7QStringPS_'/>
<fun r='_ZN12QUndoCommandC1EPS_'/>
<fun r='_ZN12QUndoCommandD1Ev'/>
<fun r='_ZNK12QUndoCommand10isObsoleteEv'/>
<fun r='_ZN12QUndoCommand11setObsoleteEb'/>
<fun r='_ZNK12QUndoCommand2idEv'/>
<fun r='_ZN12QUndoCommand9mergeWithEPKS_'/>
<fun r='_ZN12QUndoCommand4redoEv'/>
<fun r='_ZN12QUndoCommand4undoEv'/>
<fun r='_ZNK12QUndoCommand4textEv'/>
<fun r='_ZNK12QUndoCommand10actionTextEv'/>
<fun r='_ZN12QUndoCommand7setTextERK7QString'/>
<fun r='_ZNK12QUndoCommand10childCountEv'/>
<fun r='_ZNK12QUndoCommand5childEi'/>
