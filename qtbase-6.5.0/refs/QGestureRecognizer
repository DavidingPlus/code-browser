<use f='qtbase-6.5.0/src/widgets/kernel/qgesture.h' l='66'/>
<def f='qtbase-6.5.0/src/widgets/kernel/qgesturerecognizer.h' l='18' ll='51'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturerecognizer.h' l='49' c='_ZN18QGestureRecognizer18registerRecognizerEPS_'/>
<size>8</size>
<fun r='_ZN18QGestureRecognizerC1Ev'/>
<fun r='_ZN18QGestureRecognizerD1Ev'/>
<fun r='_ZN18QGestureRecognizer6createEP7QObject'/>
<fun r='_ZN18QGestureRecognizer9recognizeEP8QGestureP7QObjectP6QEvent'/>
<fun r='_ZN18QGestureRecognizer5resetEP8QGesture'/>
<fun r='_ZN18QGestureRecognizer18registerRecognizerEPS_'/>
<fun r='_ZN18QGestureRecognizer20unregisterRecognizerEN2Qt11GestureTypeE'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager_p.h' l='39' c='_ZN15QGestureManager25registerGestureRecognizerEP18QGestureRecognizer'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager_p.h' l='62'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager_p.h' l='92'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager_p.h' l='99'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager_p.h' l='100'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager_p.h' l='104' c='_ZN15QGestureManager8getStateEP7QObjectP18QGestureRecognizerN2Qt11GestureTypeE'/>
<size>8</size>
<ovr f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures_p.h' l='26' c='QPanGestureRecognizer'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures_p.h' l='26'/>
<ovr f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures_p.h' l='39' c='QPinchGestureRecognizer'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures_p.h' l='39'/>
<ovr f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures_p.h' l='49' c='QSwipeGestureRecognizer'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures_p.h' l='49'/>
<ovr f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures_p.h' l='59' c='QTapGestureRecognizer'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures_p.h' l='59'/>
<ovr f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures_p.h' l='69' c='QTapAndHoldGestureRecognizer'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qstandardgestures_p.h' l='69'/>
<size>8</size>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager.cpp' l='79' c='_ZN15QGestureManager25registerGestureRecognizerEP18QGestureRecognizer'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager.cpp' l='99' c='_ZN15QGestureManager27unregisterGestureRecognizerEN2Qt11GestureTypeE'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager.cpp' l='102' c='_ZN15QGestureManager27unregisterGestureRecognizerEN2Qt11GestureTypeE'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager.cpp' l='113' c='_ZN15QGestureManager27unregisterGestureRecognizerEN2Qt11GestureTypeE'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager.cpp' l='148' c='_ZN15QGestureManager8getStateEP7QObjectP18QGestureRecognizerN2Qt11GestureTypeE'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager.cpp' l='242' c='_ZN15QGestureManager26filterEventThroughContextsERK9QMultiMapIP7QObjectN2Qt11GestureTypeEEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager.cpp' l='247' c='_ZN15QGestureManager26filterEventThroughContextsERK9QMultiMapIP7QObjectN2Qt11GestureTypeEEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager.cpp' l='448' c='_ZN15QGestureManager35cleanupGesturesForRemovedRecognizerEP8QGesture'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturemanager.cpp' l='710' c='_ZN15QGestureManager7recycleEP8QGesture'/>
<size>8</size>
<use f='qtbase-6.5.0/src/widgets/kernel/qgesturerecognizer.cpp' l='187' c='_ZN18QGestureRecognizer18registerRecognizerEPS_'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/widgets/kernel/qgesturerecognizer.cpp' l='14'>/*!
   \class QGestureRecognizer
   \since 4.6
   \brief The QGestureRecognizer class provides the infrastructure for gesture recognition.
   \ingroup gestures
   \inmodule QtWidgets

   Gesture recognizers are responsible for creating and managing QGesture objects and
   monitoring input events sent to QWidget and QGraphicsObject subclasses.
   QGestureRecognizer is the base class for implementing custom gestures.

   Developers that only need to provide gesture recognition for standard gestures do not
   need to use this class directly. Instances will be created behind the scenes by the
   framework.

   For an overview of gesture handling in Qt and information on using gestures
   in your applications, see the \l{Gestures in Widgets and Graphics View} document.

   \section1 Recognizing Gestures

   The process of recognizing gestures involves filtering input events sent to specific
   objects, and modifying the associated QGesture objects to include relevant information
   about the user&apos;s input.

   Gestures are created when the framework calls create() to handle user input
   for a particular instance of a QWidget or QGraphicsObject subclass. A QGesture object
   is created for each widget or item that is configured to use gestures.

   Once a QGesture has been created for a target object, the gesture recognizer will
   receive events for it in its recognize() handler function.

   When a gesture is canceled, the reset() function is called, giving the recognizer the
   chance to update the appropriate properties in the corresponding QGesture object.

   \section1 Supporting New Gestures

   To add support for new gestures, you need to derive from QGestureRecognizer to create
   a custom recognizer class, construct an instance of this class, and register it with
   the application by calling QGestureRecognizer::registerRecognizer(). You can also
   subclass QGesture to create a custom gesture class, or rely on dynamic properties
   to express specific details of the gesture you want to handle.

   Your custom QGestureRecognizer subclass needs to reimplement the recognize()
   function to handle and filter the incoming input events for QWidget and
   QGraphicsObject subclasses. Although the logic for gesture recognition is
   implemented in this function, you can store persistent information about the
   state of the recognition process in the QGesture object supplied. The
   recognize() function must return a value of QGestureRecognizer::Result that
   indicates the state of recognition for a given gesture and target object.
   This determines whether or not a gesture event will be delivered to a target
   object.

   If you choose to represent a gesture by a custom QGesture subclass, you will need to
   reimplement the create() function to construct instances of your gesture class.
   Similarly, you may need to reimplement the reset() function if your custom gesture
   objects need to be specially handled when a gesture is canceled.

   \sa QGesture
*/</doc>
<fun r='_ZN18QGestureRecognizerC1Ev'/>
<fun r='_ZN18QGestureRecognizerD1Ev'/>
<fun r='_ZN18QGestureRecognizer6createEP7QObject'/>
<fun r='_ZN18QGestureRecognizer5resetEP8QGesture'/>
<fun r='_ZN18QGestureRecognizer18registerRecognizerEPS_'/>
<fun r='_ZN18QGestureRecognizer20unregisterRecognizerEN2Qt11GestureTypeE'/>
<ovr f='qtbase-6.5.0/src/widgets/util/qflickgesture_p.h' l='56' c='QFlickGestureRecognizer'/>
<use f='qtbase-6.5.0/src/widgets/util/qflickgesture_p.h' l='56'/>
<size>8</size>
