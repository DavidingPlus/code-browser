<dec f='qtbase-6.5.0/src/widgets/widgets/qlineedit.h' l='86' type='void QLineEdit::setValidator(const QValidator * )'/>
<use f='qtbase-6.5.0/src/printsupport/dialogs/qprintpreviewdialog.cpp' l='220' u='c' c='_ZN26QPrintPreviewDialogPrivate4initEP8QPrinter'/>
<use f='qtbase-6.5.0/src/printsupport/dialogs/qprintpreviewdialog.cpp' l='459' u='c' c='_ZN26QPrintPreviewDialogPrivate18updatePageNumLabelEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qcolordialog.cpp' l='1295' u='c' c='_ZN9QtPrivate12QColorShowerC1EP12QColorDialog'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfontdialog.cpp' l='173' u='c' c='_ZN18QFontDialogPrivate4initEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qabstractspinbox.cpp' l='684' u='c' c='_ZN16QAbstractSpinBox11setLineEditEP9QLineEdit'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qabstractspinbox.cpp' l='1596' u='c' c='_ZN23QAbstractSpinBoxPrivate4initEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcombobox.cpp' l='1860' u='c' c='_ZN9QComboBox12setValidatorEPK10QValidator'/>
<def f='qtbase-6.5.0/src/widgets/widgets/qlineedit.cpp' l='588' ll='592' type='void QLineEdit::setValidator(const QValidator * v)'/>
<doc f='qtbase-6.5.0/src/widgets/widgets/qlineedit.cpp' l='568'>/*!
    Sets the validator for values of line edit to \a v.

    The line edit&apos;s returnPressed() and editingFinished() signals will only
    be emitted if \a v validates the line edit&apos;s content as \l{QValidator::}{Acceptable}.
    The user may change the content to any \l{QValidator::}{Intermediate}
    value during editing, but will be prevented from editing the text to a
    value that \a v validates as \l{QValidator::}{Invalid}.

    This allows you to constrain the text that shall finally be entered when editing is
    done, while leaving users with enough freedom to edit the text from one valid state
    to another.

    If \a v == 0, setValidator() removes the current input validator.
    The initial setting is to have no input validator (i.e. any input
    is accepted up to maxLength()).

    \sa validator(), hasAcceptableInput(), QIntValidator, QDoubleValidator, QRegularExpressionValidator
*/</doc>
