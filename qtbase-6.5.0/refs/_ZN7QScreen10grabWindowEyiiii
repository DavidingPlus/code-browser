<dec f='qtbase-6.5.0/src/gui/kernel/qscreen.h' l='116' type='QPixmap QScreen::grabWindow(WId window = 0, int x = 0, int y = 0, int w = -1, int h = -1)'/>
<def f='qtbase-6.5.0/src/gui/kernel/qscreen.cpp' l='720' ll='740' type='QPixmap QScreen::grabWindow(WId window = 0, int x = 0, int y = 0, int width = -1, int height = -1)'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qscreen.cpp' l='674'>/*!
    Creates and returns a pixmap constructed by grabbing the contents
    of the given \a window restricted by QRect(\a x, \a y, \a width,
    \a height). If \a window is 0, then the entire screen will be
    grabbed.

    The arguments (\a{x}, \a{y}) specify the offset in the window,
    whereas (\a{width}, \a{height}) specify the area to be copied. If
    \a width is negative, the function copies everything to the right
    border of the window. If \a height is negative, the function
    copies everything to the bottom of the window.

    The offset and size arguments are specified in device independent
    pixels. The returned pixmap may be larger than the requested size
    when grabbing from a high-DPI screen. Call QPixmap::devicePixelRatio()
    to determine if this is the case.

    The window system identifier (\c WId) can be retrieved using the
    QWidget::winId() function. The rationale for using a window
    identifier and not a QWidget, is to enable grabbing of windows
    that are not part of the application, window system frames, and so
    on.

    \warning Grabbing windows that are not part of the application is
    not supported on systems such as iOS, where sandboxing/security
    prevents reading pixels of windows not owned by the application.

    The grabWindow() function grabs pixels from the screen, not from
    the window, i.e. if there is another window partially or entirely
    over the one you grab, you get pixels from the overlying window,
    too. The mouse cursor is generally not grabbed.

    Note on X11 that if the given \a window doesn&apos;t have the same depth
    as the root window, and another window partially or entirely
    obscures the one you grab, you will \e not get pixels from the
    overlying window.  The contents of the obscured areas in the
    pixmap will be undefined and uninitialized.

    On Windows Vista and above grabbing a layered window, which is
    created by setting the Qt::WA_TranslucentBackground attribute, will
    not work. Instead grabbing the desktop widget should work.

    \warning In general, grabbing an area outside the screen is not
    safe. This depends on the underlying window system.
*/</doc>
<use f='qtbase-6.5.0/src/widgets/dialogs/qcolordialog.cpp' l='1553' u='c' c='_ZN19QColorDialogPrivate15grabScreenColorERK6QPoint'/>
<use f='qtbase-6.5.0/src/widgets/kernel/qwhatsthis.cpp' l='202' u='c' c='_ZN10QWhatsThat9showEventEP10QShowEvent'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qeffects.cpp' l='131' u='c' c='_ZN12QAlphaWidget3runEi'/>
