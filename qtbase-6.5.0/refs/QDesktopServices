<def f='qtbase-6.5.0/src/gui/util/qdesktopservices.h' l='18' ll='24'/>
<size>1</size>
<fun r='_ZN16QDesktopServices7openUrlERK4QUrl'/>
<fun r='_ZN16QDesktopServices13setUrlHandlerERK7QStringP7QObjectPKc'/>
<fun r='_ZN16QDesktopServices15unsetUrlHandlerERK7QString'/>
<doc f='qtbase-6.5.0/src/gui/util/qdesktopservices.cpp' l='69'>/*!
    \class QDesktopServices
    \brief The QDesktopServices class provides methods for accessing common desktop services.
    \since 4.2
    \ingroup desktop
    \inmodule QtGui

    Many desktop environments provide services that can be used by applications to
    perform common tasks, such as opening a web page, in a way that is both consistent
    and takes into account the user&apos;s application preferences.

    This class contains functions that provide simple interfaces to these services
    that indicate whether they succeeded or failed.

    The openUrl() function is used to open files located at arbitrary URLs in external
    applications. For URLs that correspond to resources on the local filing system
    (where the URL scheme is &quot;file&quot;), a suitable application will be used to open the
    file; otherwise, a web browser will be used to fetch and display the file.

    The user&apos;s desktop settings control whether certain executable file types are
    opened for browsing, or if they are executed instead. Some desktop environments
    are configured to prevent users from executing files obtained from non-local URLs,
    or to ask the user&apos;s permission before doing so.

    \section1 URL Handlers

    The behavior of the openUrl() function can be customized for individual URL
    schemes to allow applications to override the default handling behavior for
    certain types of URLs.

    The dispatch mechanism allows only one custom handler to be used for each URL
    scheme; this is set using the setUrlHandler() function. Each handler is
    implemented as a slot which accepts only a single QUrl argument.

    The existing handlers for each scheme can be removed with the
    unsetUrlHandler() function. This returns the handling behavior for the given
    scheme to the default behavior.

    This system makes it easy to implement a help system, for example. Help could be
    provided in labels and text browsers using \uicontrol{help://myapplication/mytopic}
    URLs, and by registering a handler it becomes possible to display the help text
    inside the application:

    \snippet code/src_gui_util_qdesktopservices.cpp 0
    \snippet code/src_gui_util_qdesktopservices.cpp setUrlHandler

    If inside the handler you decide that you can&apos;t open the requested
    URL, you can just call QDesktopServices::openUrl() again with the
    same argument, and it will try to open the URL using the
    appropriate mechanism for the user&apos;s desktop environment.

    Combined with platform specific settings, the schemes registered by the
    openUrl() function can also be exposed to other applications, opening up
    for application deep linking or a very basic URL-based IPC mechanism.

    \sa QSystemTrayIcon, QProcess, QStandardPaths
*/</doc>
<fun r='_ZN16QDesktopServices7openUrlERK4QUrl'/>
<fun r='_ZN16QDesktopServices13setUrlHandlerERK7QStringP7QObjectPKc'/>
<fun r='_ZN16QDesktopServices15unsetUrlHandlerERK7QString'/>
