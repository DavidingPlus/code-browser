<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='734' type='QRhiBuffer::NativeBuffer QRhiBuffer::nativeBuffer()'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='2398' ll='2401' type='QRhiBuffer::NativeBuffer QRhiBuffer::nativeBuffer()'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='2365'>/*!
    \return the underlying native resources for this buffer. The returned value
    will be empty if exposing the underlying native resources is not supported by
    the backend.

    A QRhiBuffer may be backed by multiple native buffer objects, depending on
    the type() and the QRhi backend in use. When this is the case, all of them
    are returned in the objects array in the returned struct, with slotCount
    specifying the number of native buffer objects. While
    \l{QRhi::beginFrame()}{recording a frame}, QRhi::currentFrameSlot() can be
    used to determine which of the native buffers QRhi is using for operations
    that read or write from this QRhiBuffer within the frame being recorded.

    In some cases a QRhiBuffer will not be backed by a native buffer object at
    all. In this case slotCount will be set to 0 and no valid native objects
    are returned. This is not an error, and is perfectly valid when a given
    backend does not use native buffers for QRhiBuffers with certain types or
    usages.

    \note Be aware that QRhi backends may employ various buffer update
    strategies. Unlike textures, where uploading image data always means
    recording a buffer-to-image (or similar) copy command on the command
    buffer, buffers, in particular Dynamic and UniformBuffer ones, can operate
    in many different ways. For example, a QRhiBuffer with usage type
    UniformBuffer may not even be backed by a native buffer object at all if
    uniform buffers are not used or supported by a given backend and graphics
    API. There are also differences to how data is written to the buffer and
    the type of backing memory used. For buffers backed by host visible memory,
    calling this function guarantees that pending host writes are executed for
    all the returned native buffers.

    \sa QRhi::currentFrameSlot(), QRhi::FramesInFlight
 */</doc>
<ovr f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='4867' c='_ZN12QGles2Buffer12nativeBufferEv'/>
