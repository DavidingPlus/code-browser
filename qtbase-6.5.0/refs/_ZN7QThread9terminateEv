<dec f='qtbase-6.5.0/src/corelib/thread/qthread.h' l='79' type='void QThread::terminate()'/>
<doc f='qtbase-6.5.0/src/corelib/thread/qthread.cpp' l='801'>/*!
    \fn void QThread::terminate()
    \threadsafe

    Terminates the execution of the thread. The thread may or may not
    be terminated immediately, depending on the operating system&apos;s
    scheduling policies. Use QThread::wait() after terminate(), to be
    sure.

    When the thread is terminated, all threads waiting for the thread
    to finish will be woken up.

    \warning This function is dangerous and its use is discouraged.
    The thread can be terminated at any point in its code path.
    Threads can be terminated while modifying data. There is no
    chance for the thread to clean up after itself, unlock any held
    mutexes, etc. In short, use this function only if absolutely
    necessary.

    Termination can be explicitly enabled or disabled by calling
    QThread::setTerminationEnabled(). Calling this function while
    termination is disabled results in the termination being
    deferred, until termination is re-enabled. See the documentation
    of QThread::setTerminationEnabled() for more information.

    \sa setTerminationEnabled()
*/</doc>
<def f='qtbase-6.5.0/src/corelib/thread/qthread_unix.cpp' l='746' ll='760' type='void QThread::terminate()'/>
