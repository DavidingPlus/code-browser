<def f='qtbase-6.5.0/src/gui/image/qpixmapcache.h' l='13' ll='49'/>
<use f='qtbase-6.5.0/src/gui/image/qpixmapcache.h' l='36'/>
<size>1</size>
<fun r='_ZN12QPixmapCache10cacheLimitEv'/>
<fun r='_ZN12QPixmapCache13setCacheLimitEi'/>
<fun r='_ZN12QPixmapCache4findERK7QStringP7QPixmap'/>
<fun r='_ZN12QPixmapCache4findERKNS_3KeyEP7QPixmap'/>
<fun r='_ZN12QPixmapCache6insertERK7QStringRK7QPixmap'/>
<fun r='_ZN12QPixmapCache6insertERK7QPixmap'/>
<fun r='_ZN12QPixmapCache7replaceERKNS_3KeyERK7QPixmap'/>
<fun r='_ZN12QPixmapCache6removeERK7QString'/>
<fun r='_ZN12QPixmapCache6removeERKNS_3KeyE'/>
<fun r='_ZN12QPixmapCache5clearEv'/>
<doc f='qtbase-6.5.0/src/gui/image/qpixmapcache.cpp' l='13'>/*!
    \class QPixmapCache
    \inmodule QtGui

    \brief The QPixmapCache class provides an application-wide cache for pixmaps.

    This class is a tool for optimized drawing with QPixmap. You can
    use it to store temporary pixmaps that are expensive to generate
    without using more storage space than cacheLimit(). Use insert()
    to insert pixmaps, find() to find them, and clear() to empty the
    cache.

    QPixmapCache contains no member data, only static functions to
    access the global pixmap cache. It creates an internal QCache
    object for caching the pixmaps.

    The cache associates a pixmap with a user-provided string as a key,
    or with a QPixmapCache::Key that the cache generates.
    Using QPixmapCache::Key for keys is faster than using strings. The string API is
    very convenient for complex keys but the QPixmapCache::Key API will be very
    efficient and convenient for a one-to-one object-to-pixmap mapping - in
    this case, you can store the keys as members of an object.

    If two pixmaps are inserted into the cache using equal keys then the
    last pixmap will replace the first pixmap in the cache. This follows the
    behavior of the QHash and QCache classes.

    The cache becomes full when the total size of all pixmaps in the
    cache exceeds cacheLimit(). The initial cache limit is 10240 KB (10 MB);
    you can change this by calling setCacheLimit() with the required value.
    A pixmap takes roughly (\e{width} * \e{height} * \e{depth})/8 bytes of
    memory.

    The \e{Qt Quarterly} article
    \l{http://doc.qt.io/archives/qq/qq12-qpixmapcache.html}{Optimizing
    with QPixmapCache} explains how to use QPixmapCache to speed up
    applications by caching the results of painting.

    \note QPixmapCache is only usable from the application&apos;s main thread.
    Access from other threads will be ignored and return failure.

    \sa QCache, QPixmap
*/</doc>
<fun r='_ZN12QPixmapCache4findERK7QStringP7QPixmap'/>
<fun r='_ZN12QPixmapCache4findERKNS_3KeyEP7QPixmap'/>
<fun r='_ZN12QPixmapCache6insertERK7QStringRK7QPixmap'/>
<fun r='_ZN12QPixmapCache6insertERK7QPixmap'/>
<fun r='_ZN12QPixmapCache7replaceERKNS_3KeyERK7QPixmap'/>
<fun r='_ZN12QPixmapCache10cacheLimitEv'/>
<fun r='_ZN12QPixmapCache13setCacheLimitEi'/>
<fun r='_ZN12QPixmapCache6removeERK7QString'/>
<fun r='_ZN12QPixmapCache6removeERKNS_3KeyE'/>
<fun r='_ZN12QPixmapCache5clearEv'/>
