<dec f='include/x86_64-linux-gnu/bits/sched.h' l='82' type='int clone(int (*)(void *) __fn, void * __child_stack, int __flags, void * __arg)'/>
<doc f='include/x86_64-linux-gnu/bits/sched.h' l='81'>/* Clone current process.  */</doc>
<use f='qtbase-6.5.0/src/3rdparty/forkfd/forkfd_linux.c' l='172' u='c' c='_ZL14system_vforkfdiPiPFiPvES0_S_'/>
<doc f='qtbase-6.5.0/src/corelib/tools/qshareddata.cpp' l='414'>/*! \fn template &lt;class T&gt; T *QSharedDataPointer&lt;T&gt;::clone()
    \since 4.5

    Creates and returns a deep copy of the current data. This function
    is called by detach() when the reference count is greater than 1 in
    order to create the new copy. This function uses the \e {operator
    new} and calls the copy constructor of the type T.

    This function is provided so that you may support &quot;virtual copy
    constructors&quot; for your own types. In order to so, you should declare
    a template-specialization of this function for your own type, like
    the example below:

    \snippet code/src_corelib_tools_qshareddata.cpp 1

    In the example above, the template specialization for the clone()
    function calls the \e {EmployeeData::clone()} virtual function. A
    class derived from EmployeeData could override that function and
    return the proper polymorphic type.
*/</doc>
<doc f='qtbase-6.5.0/src/corelib/tools/qshareddata.cpp' l='652'>/*! \fn template &lt;class T&gt; T *QExplicitlySharedDataPointer&lt;T&gt;::clone()
    \since 4.5

    Creates and returns a deep copy of the current data. This function
    is called by detach() when the reference count is greater than 1 in
    order to create the new copy. This function uses the \e {operator
    new} and calls the copy constructor of the type T.

    See QSharedDataPointer&lt;T&gt;::clone() for an explanation of how to use it.
*/</doc>
