<def f='qtbase-6.5.0/src/opengl/qopenglwindow.h' l='25' ll='29'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.h' l='31' c='_ZN13QOpenGLWindowC1ENS_14UpdateBehaviorEP7QWindow'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.h' l='32' c='_ZN13QOpenGLWindowC1EP14QOpenGLContextNS_14UpdateBehaviorEP7QWindow'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.h' l='35' c='_ZNK13QOpenGLWindow14updateBehaviorEv'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='141' c='_ZN20QOpenGLWindowPrivateC1EP14QOpenGLContextN13QOpenGLWindow14UpdateBehaviorE'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='161'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='315' c='_ZN13QOpenGLWindowC1ENS_14UpdateBehaviorEP7QWindow'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='326' c='_ZN13QOpenGLWindowC1EP14QOpenGLContextNS_14UpdateBehaviorEP7QWindow'/>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='359' c='_ZNK13QOpenGLWindow14updateBehaviorEv'/>
<doc f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='84'>/*!
  \enum QOpenGLWindow::UpdateBehavior

  This enum describes the update strategy of the QOpenGLWindow.

  \value NoPartialUpdate Indicates that the entire window surface will
  redrawn on each update and so no additional framebuffers are needed.
  This is the setting used in most cases and is equivalent to how drawing
  directly via QWindow would function.

  \value PartialUpdateBlit Indicates that the drawing performed in paintGL()
  does not cover the entire window. In this case an extra framebuffer object
  is created under the hood, and rendering performed in paintGL() will target
  this framebuffer. This framebuffer is then blitted onto the window surface&apos;s
  default framebuffer after each paint. This allows having QPainter-based drawing
  code in paintGL() which only repaints a smaller area at a time, because, unlike
  NoPartialUpdate, the previous content is preserved.

  \value PartialUpdateBlend Similar to PartialUpdateBlit, but instead of using
  framebuffer blits, the contents of the extra framebuffer is rendered by
  drawing a textured quad with blending enabled. This, unlike PartialUpdateBlit,
  allows alpha blended content and works even when the glBlitFramebuffer is
  not available. Performance-wise this setting is likely to be somewhat slower
  than PartialUpdateBlit.
 */</doc>
