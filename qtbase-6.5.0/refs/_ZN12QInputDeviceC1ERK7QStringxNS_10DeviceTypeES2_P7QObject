<dec f='qtbase-6.5.0/src/gui/kernel/qinputdevice.h' l='66' type='void QInputDevice::QInputDevice(const QString &amp; name, qint64 systemId, QInputDevice::DeviceType type, const QString &amp; seatName = QString(), QObject * parent = nullptr)'/>
<def f='qtbase-6.5.0/src/gui/kernel/qinputdevice.cpp' l='131' ll='135' type='void QInputDevice::QInputDevice(const QString &amp; name, qint64 id, QInputDevice::DeviceType type, const QString &amp; seatName = QString(), QObject * parent = nullptr)'/>
<use f='qtbase-6.5.0/src/gui/kernel/qinputdevice.cpp' l='292' u='c' c='_ZN12QInputDevice15primaryKeyboardERK7QString'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qinputdevice.cpp' l='113'>/*!
    Creates a new input device instance. The given \a name is normally a
    manufacturer-assigned model name if available, or something else
    identifiable; \a id is a platform-specific number that will be unique per
    device (for example the xinput ID on X11); \a type identifies what kind of
    device. On window systems that are capable of handling input from multiple
    users or sets of input devices at the same time (such as Wayland or X11),
    \a seatName identifies the name of the set of devices that will be used
    together. If the device is a child or slave device (for example one of
    several mice that can take turns moving the &quot;core pointer&quot;), the master
    device should be given as the \a parent.

    The platform plugin creates, registers and continues to own each device
    instance; usually \a parent should be given for memory management purposes
    even if there is no master for a particular device.

    By default, capabilities() are \c None.
*/</doc>
