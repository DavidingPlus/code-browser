<def f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='29' ll='321'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='33' c='_ZN18QShaderDescriptionC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='34' c='_ZN18QShaderDescriptionaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='34' c='_ZN18QShaderDescriptionaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='43' c='_ZN18QShaderDescription11deserializeEP11QDataStreami'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='318' c='_Zls6QDebugRK18QShaderDescription'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='320' c='_ZeqRK18QShaderDescriptionS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='320' c='_ZeqRK18QShaderDescriptionS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='327' c='_Zls6QDebugRK18QShaderDescription'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='336' c='_ZeqRK18QShaderDescriptionS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='336' c='_ZeqRK18QShaderDescriptionS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='344' c='_ZneRK18QShaderDescriptionS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p.h' l='344' c='_ZneRK18QShaderDescriptionS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshader_p.h' l='130' c='_ZNK7QShader11descriptionEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshader_p.h' l='131' c='_ZN7QShader14setDescriptionERK18QShaderDescription'/>
<size>8</size>
<fun r='_ZN18QShaderDescriptionC1Ev'/>
<fun r='_ZN18QShaderDescriptionC1ERKS_'/>
<fun r='_ZN18QShaderDescriptionaSERKS_'/>
<fun r='_ZN18QShaderDescriptionD1Ev'/>
<fun r='_ZN18QShaderDescription6detachEv'/>
<fun r='_ZNK18QShaderDescription7isValidEv'/>
<fun r='_ZNK18QShaderDescription9serializeEP11QDataStreami'/>
<fun r='_ZNK18QShaderDescription6toJsonEv'/>
<fun r='_ZN18QShaderDescription11deserializeEP11QDataStreami'/>
<fun r='_ZNK18QShaderDescription14inputVariablesEv'/>
<fun r='_ZNK18QShaderDescription15outputVariablesEv'/>
<fun r='_ZNK18QShaderDescription13uniformBlocksEv'/>
<fun r='_ZNK18QShaderDescription18pushConstantBlocksEv'/>
<fun r='_ZNK18QShaderDescription13storageBlocksEv'/>
<fun r='_ZNK18QShaderDescription21combinedImageSamplersEv'/>
<fun r='_ZNK18QShaderDescription14separateImagesEv'/>
<fun r='_ZNK18QShaderDescription16separateSamplersEv'/>
<fun r='_ZNK18QShaderDescription13storageImagesEv'/>
<fun r='_ZNK18QShaderDescription21inputBuiltinVariablesEv'/>
<fun r='_ZNK18QShaderDescription22outputBuiltinVariablesEv'/>
<fun r='_ZNK18QShaderDescription22computeShaderLocalSizeEv'/>
<fun r='_ZNK18QShaderDescription29tessellationOutputVertexCountEv'/>
<fun r='_ZNK18QShaderDescription16tessellationModeEv'/>
<fun r='_ZNK18QShaderDescription24tessellationWindingOrderEv'/>
<fun r='_ZNK18QShaderDescription24tessellationPartitioningEv'/>
<mbr r='QShaderDescription::d' o='0' t='QShaderDescriptionPrivate *'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='873' c='_ZN9QRhiGles234sanityCheckVertexFragmentInterfaceERK18QShaderDescriptionS2_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2_p_p.h' l='873' c='_ZN9QRhiGles234sanityCheckVertexFragmentInterfaceERK18QShaderDescriptionS2_'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='4631' c='_ZN9QRhiGles234sanityCheckVertexFragmentInterfaceERK18QShaderDescriptionS2_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='4631' c='_ZN9QRhiGles234sanityCheckVertexFragmentInterfaceERK18QShaderDescriptionS2_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='5684' c='_ZN22QGles2GraphicsPipeline6createEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qrhigles2.cpp' l='5824' c='_ZN21QGles2ComputePipeline6createEv'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/rhi/qshader_p_p.h' l='78'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshader.cpp' l='297' c='_ZNK7QShader11descriptionEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshader.cpp' l='299' c='_ZNK7QShader11descriptionEv'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshader.cpp' l='305' c='_ZN7QShader14setDescriptionERK18QShaderDescription'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshader.cpp' l='495' c='_ZN7QShader14fromSerializedERK10QByteArray'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshader.cpp' l='498' c='_ZN7QShader14fromSerializedERK10QByteArray'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p_p.h' l='53' c='_ZN25QShaderDescriptionPrivate3getEP18QShaderDescription'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription_p_p.h' l='54' c='_ZN25QShaderDescriptionPrivate3getEPK18QShaderDescription'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription.cpp' l='272' c='_ZN18QShaderDescriptionC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription.cpp' l='281' c='_ZN18QShaderDescriptionaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription.cpp' l='281' c='_ZN18QShaderDescriptionaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription.cpp' l='338' c='_ZN18QShaderDescription11deserializeEP11QDataStreami'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription.cpp' l='340' c='_ZN18QShaderDescription11deserializeEP11QDataStreami'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription.cpp' l='895' c='_Zls6QDebugRK18QShaderDescription'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription.cpp' l='1621' c='_ZeqRK18QShaderDescriptionS1_'/>
<use f='qtbase-6.5.0/src/gui/rhi/qshaderdescription.cpp' l='1621' c='_ZeqRK18QShaderDescriptionS1_'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/gui/rhi/qshaderdescription.cpp' l='13'>/*!
    \class QShaderDescription
    \internal
    \inmodule QtGui

    \brief Describes the interface of a shader.

    A shader typically has a set of inputs and outputs. A vertex shader for
    example has a number of input variables and may use one or more uniform
    buffers to access data (e.g. a modelview matrix) provided by the
    application. The shader for the fragment stage receives data from the
    vertex stage (in a simple setup) and may also rely on data from uniform
    buffers, images, and samplers.

    When it comes to vertex inputs and the layout of the uniform buffers (what
    are the names of the members? what is there size, offset, and so on),
    applications and frameworks may need to discover this dynamically at run
    time. This is typical when the shader is not built-in but provided by an
    external entity, like the user.

    Modern and lean graphics APIs may no longer provide a way to query shader
    reflection information at run time. Therefore, such data is now
    automatically generated by QShaderBaker and is provided as a
    QShaderDescription object for each and every QShader.

    \section2 Example

    Take the following vertex shader:

    \badcode
        #version 440

        layout(location = 0) in vec4 position;
        layout(location = 1) in vec3 color;
        layout(location = 0) out vec3 v_color;

        layout(std140, binding = 0) uniform buf {
            mat4 mvp;
            float opacity;
        } ubuf;

        out gl_PerVertex { vec4 gl_Position; };

        void main()
        {
            v_color = color;
            gl_Position = ubuf.mvp * position;
        }
    \endcode

    This shader has two inputs: \c position at location 0 with a type of \c
    vec4, and \c color at location 1 with a type of \c vec3. It has one output:
    \c v_color, although this is typically not interesting for applications.
    What is more important, there is a uniform block at binding 0 with a size
    of 68 bytes and two members, a 4x4 matrix named \c mvp at offset 0, and a
    float \c opacity at offset 64.

    All this is described by a QShaderDescription object. QShaderDescription can
    be serialized to JSON and to a binary format via QDataStream, and can be
    deserialized from this binary format. In practice this is rarely needed
    since QShader takes care of the associated QShaderDescription automatically,
    but if the QShaderDescription of the above shader would be written out as
    JSON (like it is done by the \c qsb tool&apos;s \c{-d} option), it would look
    like the following:

    \badcode
        {
            &quot;inputs&quot;: [
                {
                    &quot;location&quot;: 1,
                    &quot;name&quot;: &quot;color&quot;,
                    &quot;type&quot;: &quot;vec3&quot;
                },
                {
                    &quot;location&quot;: 0,
                    &quot;name&quot;: &quot;position&quot;,
                    &quot;type&quot;: &quot;vec4&quot;
                }
            ],
            &quot;outputs&quot;: [
                {
                    &quot;location&quot;: 0,
                    &quot;name&quot;: &quot;v_color&quot;,
                    &quot;type&quot;: &quot;vec3&quot;
                }
            ],
            &quot;uniformBlocks&quot;: [
                {
                    &quot;binding&quot;: 0,
                    &quot;blockName&quot;: &quot;buf&quot;,
                    &quot;members&quot;: [
                        {
                            &quot;matrixStride&quot;: 16,
                            &quot;name&quot;: &quot;mvp&quot;,
                            &quot;offset&quot;: 0,
                            &quot;size&quot;: 64,
                            &quot;type&quot;: &quot;mat4&quot;
                        },
                        {
                            &quot;name&quot;: &quot;opacity&quot;,
                            &quot;offset&quot;: 64,
                            &quot;size&quot;: 4,
                            &quot;type&quot;: &quot;float&quot;
                        }
                    ],
                    &quot;set&quot;: 0,
                    &quot;size&quot;: 68,
                    &quot;structName&quot;: &quot;ubuf&quot;
                }
            ]
        }
    \endcode

    The C++ API allows accessing a data structure like the above. For
    simplicity the inner structs only contain public data members, also
    considering that their layout is unlikely to change in the future.

    \sa QShaderBaker, QShader
 */</doc>
<fun r='_ZN18QShaderDescriptionC1Ev'/>
<fun r='_ZN18QShaderDescription6detachEv'/>
<fun r='_ZN18QShaderDescriptionC1ERKS_'/>
<fun r='_ZN18QShaderDescriptionaSERKS_'/>
<fun r='_ZN18QShaderDescriptionD1Ev'/>
<fun r='_ZNK18QShaderDescription7isValidEv'/>
<fun r='_ZNK18QShaderDescription6toJsonEv'/>
<fun r='_ZNK18QShaderDescription9serializeEP11QDataStreami'/>
<fun r='_ZN18QShaderDescription11deserializeEP11QDataStreami'/>
<fun r='_ZNK18QShaderDescription14inputVariablesEv'/>
<fun r='_ZNK18QShaderDescription15outputVariablesEv'/>
<fun r='_ZNK18QShaderDescription13uniformBlocksEv'/>
<fun r='_ZNK18QShaderDescription18pushConstantBlocksEv'/>
<fun r='_ZNK18QShaderDescription13storageBlocksEv'/>
<fun r='_ZNK18QShaderDescription21combinedImageSamplersEv'/>
<fun r='_ZNK18QShaderDescription14separateImagesEv'/>
<fun r='_ZNK18QShaderDescription16separateSamplersEv'/>
<fun r='_ZNK18QShaderDescription13storageImagesEv'/>
<fun r='_ZNK18QShaderDescription21inputBuiltinVariablesEv'/>
<fun r='_ZNK18QShaderDescription22outputBuiltinVariablesEv'/>
<fun r='_ZNK18QShaderDescription22computeShaderLocalSizeEv'/>
<fun r='_ZNK18QShaderDescription29tessellationOutputVertexCountEv'/>
<fun r='_ZNK18QShaderDescription16tessellationModeEv'/>
<fun r='_ZNK18QShaderDescription24tessellationWindingOrderEv'/>
<fun r='_ZNK18QShaderDescription24tessellationPartitioningEv'/>
