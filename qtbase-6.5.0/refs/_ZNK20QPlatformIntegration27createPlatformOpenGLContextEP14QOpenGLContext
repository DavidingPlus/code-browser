<dec f='qtbase-6.5.0/src/gui/kernel/qplatformintegration.h' l='113' type='QPlatformOpenGLContext * QPlatformIntegration::createPlatformOpenGLContext(QOpenGLContext * context) const'/>
<use f='qtbase-6.5.0/src/gui/kernel/qopenglcontext.cpp' l='354' u='c' c='_ZN14QOpenGLContext6createEv'/>
<def f='qtbase-6.5.0/src/gui/kernel/qplatformintegration.cpp' l='284' ll='289' type='QPlatformOpenGLContext * QPlatformIntegration::createPlatformOpenGLContext(QOpenGLContext * context) const'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qplatformintegration.cpp' l='265'>/*!
    Factory function for QPlatformOpenGLContext. The \a context parameter is a pointer to
    the context for which a platform-specific context backend needs to be
    created. Configuration settings like the format, share context and screen have to be
    taken from this QOpenGLContext and the resulting platform context is expected to be
    backed by a native context that fulfills these criteria.

    If the context has native handles set, no new native context is expected to be created.
    Instead, the provided handles have to be used. In this case the ownership of the handle
    must not be taken and the platform implementation is not allowed to destroy the native
    context. Configuration parameters like the format are also to be ignored. Instead, the
    platform implementation is responsible for querying the configuriation from the provided
    native context.

    Returns a pointer to a QPlatformOpenGLContext instance or \nullptr if the context could
    not be created.

    \sa QOpenGLContext
*/</doc>
<ovr f='qtbase-6.5.0/src/plugins/platforms/eglfs/api/qeglfsintegration.cpp' l='176' c='_ZNK17QEglFSIntegration27createPlatformOpenGLContextEP14QOpenGLContext'/>
<ovr f='qtbase-6.5.0/src/plugins/platforms/minimalegl/qminimaleglintegration.cpp' l='79' c='_ZNK22QMinimalEglIntegration27createPlatformOpenGLContextEP14QOpenGLContext'/>
