<dec f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/cached-powers.h' l='56' type='void double_conversion::PowersOfTenCache::GetCachedPowerForDecimalExponent(int requested_exponent, double_conversion::DiyFp * power, int * found_exponent)'/>
<def f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/cached-powers.cc' l='159' ll='171' type='void double_conversion::PowersOfTenCache::GetCachedPowerForDecimalExponent(int requested_exponent, double_conversion::DiyFp * power, int * found_exponent)'/>
<doc f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/cached-powers.h' l='51'>// Returns a cached power of ten x ~= 10^k such that
  //   k &lt;= decimal_exponent &lt; k + kCachedPowersDecimalDistance.
  // The given decimal_exponent must satisfy
  //   kMinDecimalExponent &lt;= requested_exponent, and
  //   requested_exponent &lt; kMaxDecimalExponent + kDecimalExponentDistance.</doc>
<use f='qtbase-6.5.0/src/3rdparty/double-conversion/double-conversion/strtod.cc' l='298' u='c' c='_ZN17double_conversionL11DiyFpStrtodENS_6VectorIKcEEiPd'/>
