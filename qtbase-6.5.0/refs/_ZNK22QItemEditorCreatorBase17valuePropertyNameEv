<dec f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='25' type='QByteArray QItemEditorCreatorBase::valuePropertyName() const'/>
<ovr f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='34' c='_ZNK18QItemEditorCreator17valuePropertyNameEv'/>
<ovr f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.h' l='48' c='_ZNK26QStandardItemEditorCreator17valuePropertyNameEv'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.cpp' l='158' u='c' c='_ZNK18QItemEditorFactory17valuePropertyNameEi'/>
<doc f='qtbase-6.5.0/src/widgets/itemviews/qitemeditorfactory.cpp' l='388'>/*!
    \fn QByteArray QItemEditorCreatorBase::valuePropertyName() const

    Returns the name of the property used to get and set values in the creator&apos;s
    editor widgets.

    When implementing this function in subclasses, you must ensure that the
    editor widget&apos;s property specified by this function can accept the type
    the creator is registered for. For example, a creator which constructs
    QCheckBox widgets to edit boolean values would return the
    \l{QCheckBox::checkable}{checkable} property name from this function,
    and must be registered in the item editor factory for the QMetaType::Bool
    type.

    Note: Since Qt 4.2 the item delegates query the user property of widgets,
    and only call this function if the widget has no user property. You can
    override this behavior by reimplementing QAbstractItemDelegate::setModelData()
    and QAbstractItemDelegate::setEditorData().

    \sa QMetaObject::userProperty(), QItemEditorFactory::registerEditor()
*/</doc>
