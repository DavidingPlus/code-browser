<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.h' l='97' c='_ZN15QGuiApplication9clipboardEv'/>
<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/gui/kernel/qclipboard.h' l='19' ll='70'/>
<use f='qtbase-6.5.0/src/gui/kernel/qclipboard.h' l='65' c='_ZN10QClipboardC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qclipboard.h' l='65' c='_ZN10QClipboardaSERKS_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qclipboard.h' l='65' c='_ZN10QClipboardaSERKS_'/>
<size>16</size>
<smbr r='QClipboard::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK10QClipboard10metaObjectEv'/>
<fun r='_ZN10QClipboard11qt_metacastEPKc'/>
<fun r='_ZN10QClipboard11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN10QClipboard2trEPKcS1_i'/>
<fun r='_ZN10QClipboard18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN10QClipboardC1EP7QObject'/>
<fun r='_ZN10QClipboardD1Ev'/>
<fun r='_ZN10QClipboard5clearENS_4ModeE'/>
<fun r='_ZNK10QClipboard17supportsSelectionEv'/>
<fun r='_ZNK10QClipboard18supportsFindBufferEv'/>
<fun r='_ZNK10QClipboard13ownsSelectionEv'/>
<fun r='_ZNK10QClipboard13ownsClipboardEv'/>
<fun r='_ZNK10QClipboard14ownsFindBufferEv'/>
<fun r='_ZNK10QClipboard4textENS_4ModeE'/>
<fun r='_ZNK10QClipboard4textER7QStringNS_4ModeE'/>
<fun r='_ZN10QClipboard7setTextERK7QStringNS_4ModeE'/>
<fun r='_ZNK10QClipboard8mimeDataENS_4ModeE'/>
<fun r='_ZN10QClipboard11setMimeDataEP9QMimeDataNS_4ModeE'/>
<fun r='_ZNK10QClipboard5imageENS_4ModeE'/>
<fun r='_ZNK10QClipboard6pixmapENS_4ModeE'/>
<fun r='_ZN10QClipboard8setImageERK6QImageNS_4ModeE'/>
<fun r='_ZN10QClipboard9setPixmapERK7QPixmapNS_4ModeE'/>
<fun r='_ZN10QClipboard7changedENS_4ModeE'/>
<fun r='_ZN10QClipboard16selectionChangedEv'/>
<fun r='_ZN10QClipboard17findBufferChangedEv'/>
<fun r='_ZN10QClipboard11dataChangedEv'/>
<fun r='_ZN10QClipboardC1ERKS_'/>
<fun r='_ZNK10QClipboard12supportsModeENS_4ModeE'/>
<fun r='_ZNK10QClipboard8ownsModeENS_4ModeE'/>
<fun r='_ZN10QClipboard11emitChangedENS_4ModeE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication_p.h' l='251'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/gui/kernel/qclipboard.cpp' l='23'>/*!
    \class QClipboard
    \brief The QClipboard class provides access to the window system clipboard.
    \inmodule QtGui

    The clipboard offers a simple mechanism to copy and paste data
    between applications.

    QClipboard supports the same data types that QDrag does, and uses
    similar mechanisms. For advanced clipboard usage read \l{Drag and
    Drop}.

    There is a single QClipboard object in an application, accessible
    as QGuiApplication::clipboard().

    Example:
    \snippet code/src_gui_kernel_qclipboard.cpp 0

    QClipboard features some convenience functions to access common
    data types: setText() allows the exchange of Unicode text and
    setPixmap() and setImage() allows the exchange of QPixmaps and
    QImages between applications. The setMimeData() function is the
    ultimate in flexibility: it allows you to add any QMimeData into
    the clipboard. There are corresponding getters for each of these,
    e.g. text(), image() and pixmap(). You can clear the clipboard by
    calling clear().

    A typical example of the use of these functions follows:

    \snippet droparea/droparea.cpp 0

    \section1 Notes for X11 Users

    \list

    \li The X11 Window System has the concept of a separate selection
    and clipboard.  When text is selected, it is immediately available
    as the global mouse selection.  The global mouse selection may
    later be copied to the clipboard.  By convention, the middle mouse
    button is used to paste the global mouse selection.

    \li X11 also has the concept of ownership; if you change the
    selection within a window, X11 will only notify the owner and the
    previous owner of the change, i.e. it will not notify all
    applications that the selection or clipboard data changed.

    \li Lastly, the X11 clipboard is event driven, i.e. the clipboard
    will not function properly if the event loop is not running.
    Similarly, it is recommended that the contents of the clipboard
    are stored or retrieved in direct response to user-input events,
    e.g. mouse button or key presses and releases.  You should not
    store or retrieve the clipboard contents in response to timer or
    non-user-input events.

    \li Since there is no standard way to copy and paste files between
    applications on X11, various MIME types and conventions are currently
    in use. For instance, Nautilus expects files to be supplied with a
    \c{x-special/gnome-copied-files} MIME type with data beginning with
    the cut/copy action, a newline character, and the URL of the file.

    \endlist

    \section1 Notes for \macos Users

    \macos supports a separate find buffer that holds the current
    search string in Find operations. This find clipboard can be accessed
    by specifying the FindBuffer mode.

    \section1 Notes for Windows and \macos Users

    \list

    \li Windows and \macos do not support the global mouse
    selection; they only supports the global clipboard, i.e. they
    only add text to the clipboard when an explicit copy or cut is
    made.

    \li Windows and \macos does not have the concept of ownership;
    the clipboard is a fully global resource so all applications are
    notified of changes.

    \endlist

    \section1 Notes for Android Users

    On Android only these mime types are supported: text/plain, text/html, and text/uri-list.

    \sa QGuiApplication
*/</doc>
<fun r='_ZN10QClipboardC1EP7QObject'/>
<fun r='_ZN10QClipboardD1Ev'/>
<fun r='_ZNK10QClipboard4textER7QStringNS_4ModeE'/>
<fun r='_ZNK10QClipboard4textENS_4ModeE'/>
<fun r='_ZN10QClipboard7setTextERK7QStringNS_4ModeE'/>
<fun r='_ZNK10QClipboard5imageENS_4ModeE'/>
<fun r='_ZN10QClipboard8setImageERK6QImageNS_4ModeE'/>
<fun r='_ZNK10QClipboard6pixmapENS_4ModeE'/>
<fun r='_ZN10QClipboard9setPixmapERK7QPixmapNS_4ModeE'/>
<fun r='_ZNK10QClipboard8mimeDataENS_4ModeE'/>
<fun r='_ZN10QClipboard11setMimeDataEP9QMimeDataNS_4ModeE'/>
<fun r='_ZN10QClipboard5clearENS_4ModeE'/>
<fun r='_ZNK10QClipboard17supportsSelectionEv'/>
<fun r='_ZNK10QClipboard18supportsFindBufferEv'/>
<fun r='_ZNK10QClipboard13ownsClipboardEv'/>
<fun r='_ZNK10QClipboard13ownsSelectionEv'/>
<fun r='_ZNK10QClipboard14ownsFindBufferEv'/>
<fun r='_ZNK10QClipboard12supportsModeENS_4ModeE'/>
<fun r='_ZNK10QClipboard8ownsModeENS_4ModeE'/>
<fun r='_ZN10QClipboard11emitChangedENS_4ModeE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='170'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='3341' c='_ZN15QGuiApplication9clipboardEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='3348' c='_ZN15QGuiApplication9clipboardEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/kernel/qapplication_p.h' l='55'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qwidgettextcontrol.cpp' l='626' c='_ZN25QWidgetTextControlPrivate21setClipboardSelectionEv'/>
<size>16</size>
