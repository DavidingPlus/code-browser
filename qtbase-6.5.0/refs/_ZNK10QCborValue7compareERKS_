<dec f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.h' l='224' type='int QCborValue::compare(const QCborValue &amp; other) const'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.h' l='235' u='c' c='_ZNK10QCborValueeqERKS_'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.h' l='239' u='c' c='_ZNK10QCborValueltERKS_'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.h' l='371' u='c' c='_ZNK18QCborValueConstRef7compareERK10QCborValue'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.h' l='524' u='c' c='_ZNK13QCborValueRef7compareERK10QCborValue'/>
<def f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='1319' ll='1324' type='int QCborValue::compare(const QCborValue &amp; other) const'/>
<doc f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='1258'>/*!
    Compares this value and \a other, and returns an integer that indicates
    whether this value should be sorted prior to (if the result is negative) or
    after \a other (if the result is positive). If this function returns 0, the
    two values are equal and hold the same contents.

    If each QCborValue contains an array or map, the comparison is recursive to
    elements contained in them.

    \section3 Extended types

    QCborValue compares equal a QCborValue containing an extended type, like
    \l{Type}{Url} and \l{Type}{Url} and its equivalent tagged representation.
    So, for example, the following expression is true:

    \snippet code/src_corelib_serialization_qcborvalue.cpp 3

    Do note that Qt types like \l QUrl and \l QDateTime will normalize and
    otherwise modify their arguments. The expression above is true only because
    the string on the right side is the normalized value that the QCborValue on
    the left would take. If, for example, the &quot;https&quot; part were uppercase in
    both sides, the comparison would fail. For information on normalizations
    performed by QCborValue, please consult the documentation of the
    constructor taking the Qt type in question.

    \section3 Sorting order

    Sorting order in CBOR is defined in
    \l{RFC 7049, section 3.9}, which
    discusses the sorting of keys in a map when following the Canonical
    encoding. According to the specification, &quot;sorting is performed on the
    bytes of the representation of the key data items&quot; and lists as
    consequences that:

    \list
      \li &quot;If two keys have different lengths, the shorter one sorts earlier;&quot;
      \li &quot;If two keys have the same length, the one with the lower value in
          (byte-wise) lexical order sorts earlier.&quot;
    \endlist

    This results in surprising sorting of QCborValues, where the result of this
    function is different from that which would later be retrieved by comparing the
    contained elements. For example, the QCborValue containing string &quot;zzz&quot;
    sorts before the QCborValue with string &quot;foobar&quot;, even though when
    comparing as \l{QString::compare()}{QStrings} or
    \l{QByteArray}{QByteArrays} the &quot;zzz&quot; sorts after &quot;foobar&quot;
    (dictionary order).

    The specification does not clearly indicate what sorting order should be
    done for values of different types (it says sorting should not pay
    &quot;attention to the 3/5 bit splitting for major types&quot;). QCborValue makes the
    assumption that types should be sorted too. The numeric values of the
    QCborValue::Type enumeration are in that order, with the exception of the
    extended types, which compare as their tagged equivalents.

    \note Sorting order is preliminary and is subject to change. Applications
    should not depend on the order returned by this function for the time
    being.

    \sa QCborArray::compare(), QCborMap::compare(), operator==()
 */</doc>
