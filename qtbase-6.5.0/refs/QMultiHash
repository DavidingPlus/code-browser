<use f='qtbase-6.5.0/src/corelib/global/qtypeinfo.h' l='128'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qdatastream.h' l='447' c='_ZrsR11QDataStreamR10QMultiHashIT_T0_E'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qdatastream.h' l='447' c='_ZrsR11QDataStreamR10QMultiHashIT_T0_E'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qdatastream.h' l='453' c='_ZlsR11QDataStreamRK10QMultiHashIT_T0_E'/>
<use f='qtbase-6.5.0/src/corelib/serialization/qdatastream.h' l='453' c='_ZlsR11QDataStreamRK10QMultiHashIT_T0_E'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhash.h' l='818'/>
<def f='qtbase-6.5.0/src/corelib/tools/qhash.h' l='1343' ll='2181'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhash.h' l='1693'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhash.h' l='1745'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhash.h' l='2203' c='_Z5qHashRK10QMultiHashIT_T0_Em'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhash.h' l='2223' c='_Z8erase_ifR10QMultiHashIT_T0_ET1_'/>
<mbr r='QMultiHash::d' t='QMultiHash::Data *'/>
<mbr r='QMultiHash::m_size' t='qsizetype'/>
<fun r='_ZN10QMultiHashC1Ev'/>
<fun r='_ZN10QMultiHashC1ESt16initializer_listISt4pairIT_T0_EE'/>
<fun r='_ZN10QMultiHashC1ETL0__S0_'/>
<fun r='_ZN10QMultiHashC1ETL0__S0_'/>
<fun r='_ZN10QMultiHashC1ERK10QMultiHashIT_T0_E'/>
<fun r='_ZN10QMultiHashD1Ev'/>
<fun r='_ZN10QMultiHashaSERK10QMultiHashIT_T0_E'/>
<fun r='_ZN10QMultiHashC1EO10QMultiHashIT_T0_E'/>
<fun r='_ZN10QMultiHashaSEO10QMultiHashIT_T0_E'/>
<fun r='_ZN10QMultiHashC1ERK5QHashIT_T0_E'/>
<fun r='_ZN10QMultiHashC1EO5QHashIT_T0_E'/>
<fun r='_ZN10QMultiHash4swapER10QMultiHashIT_T0_E'/>
<fun r='_ZNK10QMultiHasheqERK10QMultiHashIT_T0_E'/>
<fun r='_ZNK10QMultiHashneERK10QMultiHashIT_T0_E'/>
<fun r='_ZNK10QMultiHash4sizeEv'/>
<fun r='_ZNK10QMultiHash7isEmptyEv'/>
<fun r='_ZNK10QMultiHash8capacityEv'/>
<fun r='_ZN10QMultiHash7reserveEx'/>
<fun r='_ZN10QMultiHash7squeezeEv'/>
<fun r='_ZN10QMultiHash6detachEv'/>
<fun r='_ZNK10QMultiHash10isDetachedEv'/>
<fun r='_ZNK10QMultiHash12isSharedWithERK10QMultiHashIT_T0_E'/>
<fun r='_ZN10QMultiHash5clearEv'/>
<fun r='_ZN10QMultiHash6removeERKT_'/>
<fun r='_ZN10QMultiHash8removeIfETL0__'/>
<fun r='_ZN10QMultiHash4takeERKT_'/>
<fun r='_ZNK10QMultiHash8containsERKT_'/>
<fun r='_ZNK10QMultiHash7keyImplERKT0_'/>
<fun r='_ZNK10QMultiHash3keyERKT0_'/>
<fun r='_ZNK10QMultiHash3keyERKT0_RKT_'/>
<fun r='_ZNK10QMultiHash9valueImplERKT_'/>
<fun r='_ZNK10QMultiHash5valueERKT_'/>
<fun r='_ZNK10QMultiHash5valueERKT_RKT0_'/>
<fun r='_ZN10QMultiHashixERKT_'/>
<fun r='_ZNK10QMultiHashixERKT_'/>
<fun r='_ZNK10QMultiHash10uniqueKeysEv'/>
<fun r='_ZNK10QMultiHash4keysEv'/>
<fun r='_ZNK10QMultiHash4keysERKT0_'/>
<fun r='_ZNK10QMultiHash6valuesEv'/>
<fun r='_ZNK10QMultiHash6valuesERKT_'/>
<fun r='_ZN10QMultiHash5beginEv'/>
<fun r='_ZNK10QMultiHash5beginEv'/>
<fun r='_ZNK10QMultiHash6cbeginEv'/>
<fun r='_ZNK10QMultiHash10constBeginEv'/>
<fun r='_ZN10QMultiHash3endEv'/>
<fun r='_ZNK10QMultiHash3endEv'/>
<fun r='_ZNK10QMultiHash4cendEv'/>
<fun r='_ZNK10QMultiHash8constEndEv'/>
<fun r='_ZNK10QMultiHash8keyBeginEv'/>
<fun r='_ZNK10QMultiHash6keyEndEv'/>
<fun r='_ZN10QMultiHash13keyValueBeginEv'/>
<fun r='_ZN10QMultiHash11keyValueEndEv'/>
<fun r='_ZNK10QMultiHash13keyValueBeginEv'/>
<fun r='_ZNK10QMultiHash18constKeyValueBeginEv'/>
<fun r='_ZNK10QMultiHash11keyValueEndEv'/>
<fun r='_ZNK10QMultiHash16constKeyValueEndEv'/>
<fun r='_ZNR10QMultiHash15asKeyValueRangeEv'/>
<fun r='_ZNKR10QMultiHash15asKeyValueRangeEv'/>
<fun r='_ZNO10QMultiHash15asKeyValueRangeEv'/>
<fun r='_ZNKO10QMultiHash15asKeyValueRangeEv'/>
<fun r='_ZN10QMultiHash6detachENS_14const_iteratorE'/>
<fun r='_ZN10QMultiHash5eraseENS_14const_iteratorE'/>
<fun r='_ZNK10QMultiHash5countEv'/>
<fun r='_ZN10QMultiHash4findERKT_'/>
<fun r='_ZNK10QMultiHash4findERKT_'/>
<fun r='_ZNK10QMultiHash9constFindERKT_'/>
<fun r='_ZN10QMultiHash6insertERKT_RKT0_'/>
<fun r='_ZN10QMultiHash7emplaceERKT_DpOTL0__'/>
<fun r='_ZN10QMultiHash7emplaceEOT_DpOTL0__'/>
<fun r='_ZNK10QMultiHash11load_factorEv'/>
<fun r='_ZN10QMultiHash15max_load_factorEv'/>
<fun r='_ZNK10QMultiHash12bucket_countEv'/>
<fun r='_ZN10QMultiHash16max_bucket_countEv'/>
<fun r='_ZNK10QMultiHash5emptyEv'/>
<fun r='_ZN10QMultiHash7replaceERKT_RKT0_'/>
<fun r='_ZN10QMultiHash14emplaceReplaceERKT_DpOTL0__'/>
<fun r='_ZN10QMultiHash14emplaceReplaceEOT_DpOTL0__'/>
<fun r='_ZN10QMultiHashpLERK10QMultiHashIT_T0_E'/>
<fun r='_ZNK10QMultiHashplERK10QMultiHashIT_T0_E'/>
<fun r='_ZNK10QMultiHash8containsERKT_RKT0_'/>
<fun r='_ZN10QMultiHash6removeERKT_RKT0_'/>
<fun r='_ZNK10QMultiHash5countERKT_'/>
<fun r='_ZNK10QMultiHash5countERKT_RKT0_'/>
<fun r='_ZN10QMultiHash4findERKT_RKT0_'/>
<fun r='_ZNK10QMultiHash4findERKT_RKT0_'/>
<fun r='_ZNK10QMultiHash9constFindERKT_RKT0_'/>
<fun r='_ZN10QMultiHash5uniteERK10QMultiHashIT_T0_E'/>
<fun r='_ZN10QMultiHash5uniteERK5QHashIT_T0_E'/>
<fun r='_ZN10QMultiHash5uniteEO5QHashIT_T0_E'/>
<fun r='_ZN10QMultiHash11equal_rangeERKT_'/>
<fun r='_ZNK10QMultiHash11equal_rangeERKT_'/>
<fun r='_ZN10QMultiHash13detach_helperEv'/>
<fun r='_ZN10QMultiHash14emplace_helperEOT_DpOTL0__'/>
<fun r='_ZN10QMultiHash21emplaceReplace_helperEOT_DpOTL0__'/>
<use f='qtbase-6.5.0/src/corelib/io/qdebug.h' l='344' c='_Zls6QDebugRK10QMultiHashIT_T0_E'/>
<use f='qtbase-6.5.0/src/corelib/io/qdebug.h' l='344' c='_Zls6QDebugRK10QMultiHashIT_T0_E'/>
<use f='qtbase-6.5.0/src/corelib/io/qfilesystemwatcher_inotify_p.h' l='50'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel_p.h' l='112'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.cpp' l='35' c='_ZN25QPersistentModelIndexData6createERK11QModelIndex'/>
<doc f='qtbase-6.5.0/src/corelib/tools/qhash.cpp' l='2899'>/*! \class QMultiHash
    \inmodule QtCore
    \brief The QMultiHash class is a convenience QHash subclass that provides multi-valued hashes.

    \ingroup tools
    \ingroup shared

    \reentrant

    QMultiHash\&lt;Key, T\&gt; is one of Qt&apos;s generic \l{container classes}.
    It inherits QHash and extends it with a few convenience functions
    that make it more suitable than QHash for storing multi-valued
    hashes. A multi-valued hash is a hash that allows multiple values
    with the same key.

    QMultiHash mostly mirrors QHash&apos;s API. For example, you can use isEmpty() to test
    whether the hash is empty, and you can traverse a QMultiHash using
    QHash&apos;s iterator classes (for example, QHashIterator). But opposed to
    QHash, it provides an insert() function that allows the insertion of
    multiple items with the same key. The replace() function corresponds to
    QHash::insert(). It also provides convenient operator+() and
    operator+=().

    Unlike QMultiMap, QMultiHash does not provide and ordering of the
    inserted items. The only guarantee is that items that
    share the same key will appear consecutively, from the most
    recently to the least recently inserted value.

    Example:
    \snippet code/src_corelib_tools_qhash.cpp 24

    Unlike QHash, QMultiHash provides no operator[]. Use value() or
    replace() if you want to access the most recently inserted item
    with a certain key.

    If you want to retrieve all the values for a single key, you can
    use values(const Key &amp;key), which returns a QList&lt;T&gt;:

    \snippet code/src_corelib_tools_qhash.cpp 25

    The items that share the same key are available from most
    recently to least recently inserted.

    A more efficient approach is to call find() to get
    the STL-style iterator for the first item with a key and iterate from
    there:

    \snippet code/src_corelib_tools_qhash.cpp 26

    QMultiHash&apos;s key and value data types must be \l{assignable data
    types}. You cannot, for example, store a QWidget as a value;
    instead, store a QWidget *. In addition, QMultiHash&apos;s key type
    must provide operator==(), and there must also be a qHash() function
   in the type&apos;s namespace that returns a hash value for an argument of the
    key&apos;s type. See the QHash documentation for details.

    \sa QHash, QHashIterator, QMutableHashIterator, QMultiMap
*/</doc>
<use f='qtbase-6.5.0/src/dbus/qdbusconnection_p.h' l='141'/>
<use f='qtbase-6.5.0/src/dbus/qdbusconnection_p.h' l='145'/>
<use f='qtbase-6.5.0/src/dbus/qdbusintegrator_p.h' l='60'/>
<use f='qtbase-6.5.0/src/gui/accessible/qaccessiblecache_p.h' l='57'/>
<use f='qtbase-6.5.0/src/gui/text/qtextformat_p.h' l='64'/>
<use f='qtbase-6.5.0/src/gui/text/qcssparser_p.h' l='609'/>
<use f='qtbase-6.5.0/src/gui/text/qcssparser_p.h' l='610'/>
<use f='qtbase-6.5.0/src/gui/painting/qpaintengine_raster.cpp' l='4214'/>
<use f='qtbase-6.5.0/src/gui/text/qcssparser.cpp' l='2134' c='_ZN4QCss13StyleSelector17styleRulesForNodeENS0_7NodePtrE'/>
<use f='qtbase-6.5.0/src/gui/text/qcssparser.cpp' l='2147' c='_ZN4QCss13StyleSelector17styleRulesForNodeENS0_7NodePtrE'/>
<use f='qtbase-6.5.0/src/gui/text/qtextdocumentlayout.cpp' l='197'/>
<use f='qtbase-6.5.0/src/opengl/qopenglgradientcache_p.h' l='40'/>
<use f='qtbase-6.5.0/src/tools/moc/generator.cpp' l='461' c='_ZN9Generator12generateCodeEv'/>
<use f='qtbase-6.5.0/src/tools/moc/generator.cpp' l='479' c='_ZN9Generator12generateCodeEv'/>
<use f='qtbase-6.5.0/src/tools/rcc/rcc.cpp' l='101'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsanchorlayout_p.h' l='544'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qwidgettextcontrol.cpp' l='2488' c='_ZN18QWidgetTextControl18setExtraSelectionsERK5QListIN9QTextEdit14ExtraSelectionEE'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom_p.h' l='202'/>
