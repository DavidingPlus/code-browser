<dec f='include/xkbcommon/xkbcommon.h' l='1355' type='enum xkb_state_component xkb_state_update_mask(struct xkb_state * state, xkb_mod_mask_t depressed_mods, xkb_mod_mask_t latched_mods, xkb_mod_mask_t locked_mods, xkb_layout_index_t depressed_layout, xkb_layout_index_t latched_layout, xkb_layout_index_t locked_layout)'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qxkbcommon.cpp' l='621' u='c' c='_ZN10QXkbCommon12possibleKeysEP9xkb_statePK9QKeyEventbb'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qxkbcommon.cpp' l='631' u='c' c='_ZN10QXkbCommon12possibleKeysEP9xkb_statePK9QKeyEventbb'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qxkbcommon.cpp' l='671' u='c' c='_ZN10QXkbCommon12possibleKeysEP9xkb_statePK9QKeyEventbb'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qxkbcommon.cpp' l='769' u='c' c='_ZN10QXkbCommon17lookupLatinKeysymEP9xkb_statej'/>
<doc f='include/xkbcommon/xkbcommon.h' l='1327'>/**
 * Update a keyboard state from a set of explicit masks.
 *
 * This entry point is intended for window systems and the like, where a
 * master process holds an xkb_state, then serializes it over a wire
 * protocol, and clients then use the serialization to feed in to their own
 * xkb_state.
 *
 * All parameters must always be passed, or the resulting state may be
 * incoherent.
 *
 * The serialization is lossy and will not survive round trips; it must only
 * be used to feed slave state objects, and must not be used to update the
 * master state.
 *
 * If you do not fit the description above, you should use
 * xkb_state_update_key() instead.  The two functions should not generally be
 * used together.
 *
 * @returns A mask of state components that have changed as a result of
 * the update.  If nothing in the state has changed, returns 0.
 *
 * @memberof xkb_state
 *
 * @sa xkb_state_component
 * @sa xkb_state_update_key
 */</doc>
