<def f='include/freetype2/freetype/freetype.h' l='1608' ll='1621'/>
<use f='include/freetype2/freetype/freetype.h' l='1608'/>
<size>56</size>
<doc f='include/freetype2/freetype/freetype.h' l='1504'>/**************************************************************************
   *
   * @struct:
   *   FT_Size_Metrics
   *
   * @description:
   *   The size metrics structure gives the metrics of a size object.
   *
   * @fields:
   *   x_ppem ::
   *     The width of the scaled EM square in pixels, hence the term &apos;ppem&apos;
   *     (pixels per EM).  It is also referred to as &apos;nominal width&apos;.
   *
   *   y_ppem ::
   *     The height of the scaled EM square in pixels, hence the term &apos;ppem&apos;
   *     (pixels per EM).  It is also referred to as &apos;nominal height&apos;.
   *
   *   x_scale ::
   *     A 16.16 fractional scaling value to convert horizontal metrics from
   *     font units to 26.6 fractional pixels.  Only relevant for scalable
   *     font formats.
   *
   *   y_scale ::
   *     A 16.16 fractional scaling value to convert vertical metrics from
   *     font units to 26.6 fractional pixels.  Only relevant for scalable
   *     font formats.
   *
   *   ascender ::
   *     The ascender in 26.6 fractional pixels, rounded up to an integer
   *     value.  See @FT_FaceRec for the details.
   *
   *   descender ::
   *     The descender in 26.6 fractional pixels, rounded down to an integer
   *     value.  See @FT_FaceRec for the details.
   *
   *   height ::
   *     The height in 26.6 fractional pixels, rounded to an integer value.
   *     See @FT_FaceRec for the details.
   *
   *   max_advance ::
   *     The maximum advance width in 26.6 fractional pixels, rounded to an
   *     integer value.  See @FT_FaceRec for the details.
   *
   * @note:
   *   The scaling values, if relevant, are determined first during a size
   *   changing operation.  The remaining fields are then set by the driver.
   *   For scalable formats, they are usually set to scaled values of the
   *   corresponding fields in @FT_FaceRec.  Some values like ascender or
   *   descender are rounded for historical reasons; more precise values (for
   *   outline fonts) can be derived by scaling the corresponding @FT_FaceRec
   *   values manually, with code similar to the following.
   *
   *   ```
   *     scaled_ascender = FT_MulFix( face-&gt;ascender,
   *                                  size_metrics-&gt;y_scale );
   *   ```
   *
   *   Note that due to glyph hinting and the selected rendering mode these
   *   values are usually not exact; consequently, they must be treated as
   *   unreliable with an error margin of at least one pixel!
   *
   *   Indeed, the only way to get the exact metrics is to render _all_
   *   glyphs.  As this would be a definite performance hit, it is up to
   *   client applications to perform such computations.
   *
   *   The `FT_Size_Metrics` structure is valid for bitmap fonts also.
   *
   *
   *   **TrueType fonts with native bytecode hinting**
   *
   *   All applications that handle TrueType fonts with native hinting must
   *   be aware that TTFs expect different rounding of vertical font
   *   dimensions.  The application has to cater for this, especially if it
   *   wants to rely on a TTF&apos;s vertical data (for example, to properly align
   *   box characters vertically).
   *
   *   Only the application knows _in advance_ that it is going to use native
   *   hinting for TTFs!  FreeType, on the other hand, selects the hinting
   *   mode not at the time of creating an @FT_Size object but much later,
   *   namely while calling @FT_Load_Glyph.
   *
   *   Here is some pseudo code that illustrates a possible solution.
   *
   *   ```
   *     font_format = FT_Get_Font_Format( face );
   *
   *     if ( !strcmp( font_format, &quot;TrueType&quot; ) &amp;&amp;
   *          do_native_bytecode_hinting         )
   *     {
   *       ascender  = ROUND( FT_MulFix( face-&gt;ascender,
   *                                     size_metrics-&gt;y_scale ) );
   *       descender = ROUND( FT_MulFix( face-&gt;descender,
   *                                     size_metrics-&gt;y_scale ) );
   *     }
   *     else
   *     {
   *       ascender  = size_metrics-&gt;ascender;
   *       descender = size_metrics-&gt;descender;
   *     }
   *
   *     height      = size_metrics-&gt;height;
   *     max_advance = size_metrics-&gt;max_advance;
   *   ```
   */</doc>
<mbr r='FT_Size_Metrics_::x_ppem' o='0' t='FT_UShort'/>
<mbr r='FT_Size_Metrics_::y_ppem' o='16' t='FT_UShort'/>
<mbr r='FT_Size_Metrics_::x_scale' o='64' t='FT_Fixed'/>
<mbr r='FT_Size_Metrics_::y_scale' o='128' t='FT_Fixed'/>
<mbr r='FT_Size_Metrics_::ascender' o='192' t='FT_Pos'/>
<mbr r='FT_Size_Metrics_::descender' o='256' t='FT_Pos'/>
<mbr r='FT_Size_Metrics_::height' o='320' t='FT_Pos'/>
<mbr r='FT_Size_Metrics_::max_advance' o='384' t='FT_Pos'/>
