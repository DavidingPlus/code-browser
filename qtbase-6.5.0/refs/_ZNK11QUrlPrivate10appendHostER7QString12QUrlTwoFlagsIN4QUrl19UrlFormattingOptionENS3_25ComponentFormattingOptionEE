<dec f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='524' type='void QUrlPrivate::appendHost(QString &amp; appendTo, QUrl::FormattingOptions options) const'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='847' u='c' c='_ZNK11QUrlPrivate15appendAuthorityER7QString12QUrlTwoFlagsIN4QUrl19UrlFormattingOptionENS3_25ComponentFormattingOptionEENS_7SectionE'/>
<def f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1157' ll='1175' type='void QUrlPrivate::appendHost(QString &amp; appendTo, QUrl::FormattingOptions options) const'/>
<use f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='2344' u='c' c='_ZNK4QUrl4hostE6QFlagsINS_25ComponentFormattingOptionEE'/>
<doc f='qtbase-6.5.0/src/corelib/io/qurl.cpp' l='1127'>// Host handling
// The RFC says the host is:
//    host          = IP-literal / IPv4address / reg-name
//    IP-literal    = &quot;[&quot; ( IPv6address / IPvFuture  ) &quot;]&quot;
//    IPvFuture     = &quot;v&quot; 1*HEXDIG &quot;.&quot; 1*( unreserved / sub-delims / &quot;:&quot; )
//  [a strict definition of IPv6Address and IPv4Address]
//     reg-name      = *( unreserved / pct-encoded / sub-delims )
//
// We deviate from the standard in all but IPvFuture. For IPvFuture we accept
// and store only exactly what the RFC says we should. No percent-encoding is
// permitted in this field, so Unicode characters and space aren&apos;t either.
//
// For IPv4 addresses, we accept broken addresses like inet_aton does (that is,
// less than three dots). However, we correct the address to the proper form
// and store the corrected address. After correction, we comply to the RFC and
// it&apos;s exclusively composed of unreserved characters.
//
// For IPv6 addresses, we accept addresses including trailing (embedded) IPv4
// addresses, the so-called v4-compat and v4-mapped addresses. We also store
// those addresses like that in the hostname field, which violates the spec.
// IPv6 hosts are stored with the square brackets in the QString. It also
// requires no transformation in any way.
//
// As for registered names, it&apos;s the other way around: we accept only valid
// hostnames as specified by STD 3 and IDNA. That means everything we accept is
// valid in the RFC definition above, but there are many valid reg-names
// according to the RFC that we do not accept in the name of security. Since we
// do accept IDNA, reg-names are subject to ACE encoding and decoding, which is
// specified by the DecodeUnicode flag. The hostname is stored in its Unicode form.</doc>
