<inh f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='233' c='QAbstractItemModel'/>
<def f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='425' ll='449'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='446' c='_ZN19QAbstractTableModelC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='446' c='_ZN19QAbstractTableModelaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.h' l='446' c='_ZN19QAbstractTableModelaSERKS_'/>
<size>16</size>
<smbr r='QAbstractTableModel::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK19QAbstractTableModel10metaObjectEv'/>
<fun r='_ZN19QAbstractTableModel11qt_metacastEPKc'/>
<fun r='_ZN19QAbstractTableModel11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN19QAbstractTableModel2trEPKcS1_i'/>
<fun r='_ZN19QAbstractTableModel18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN19QAbstractTableModelC1EP7QObject'/>
<fun r='_ZN19QAbstractTableModelD1Ev'/>
<fun r='_ZNK19QAbstractTableModel5indexEiiRK11QModelIndex'/>
<fun r='_ZNK19QAbstractTableModel7siblingEiiRK11QModelIndex'/>
<fun r='_ZN19QAbstractTableModel12dropMimeDataEPK9QMimeDataN2Qt10DropActionEiiRK11QModelIndex'/>
<fun r='_ZNK19QAbstractTableModel5flagsERK11QModelIndex'/>
<fun r='_ZN19QAbstractTableModelC1ER25QAbstractItemModelPrivateP7QObject'/>
<fun r='_ZN19QAbstractTableModelC1ERKS_'/>
<fun r='_ZNK19QAbstractTableModel6parentERK11QModelIndex'/>
<fun r='_ZNK19QAbstractTableModel11hasChildrenERK11QModelIndex'/>
<doc f='qtbase-6.5.0/src/corelib/itemmodels/qabstractitemmodel.cpp' l='3672'>/*!
    \class QAbstractTableModel
    \inmodule QtCore
    \brief The QAbstractTableModel class provides an abstract model that can be
    subclassed to create table models.

    \ingroup model-view

    QAbstractTableModel provides a standard interface for models that represent
    their data as a two-dimensional array of items. It is not used directly,
    but must be subclassed.

    Since the model provides a more specialized interface than
    QAbstractItemModel, it is not suitable for use with tree views, although it
    can be used to provide data to a QListView. If you need to represent a
    simple list of items, and only need a model to contain a single column of
    data, subclassing the QAbstractListModel may be more appropriate.

    The rowCount() and columnCount() functions return the dimensions of the
    table. To retrieve a model index corresponding to an item in the model, use
    index() and provide only the row and column numbers.

    \section1 Subclassing

    When subclassing QAbstractTableModel, you must implement rowCount(),
    columnCount(), and data(). Default implementations of the index() and
    parent() functions are provided by QAbstractTableModel.
    Well behaved models will also implement headerData().

    Editable models need to implement setData(), and implement flags() to
    return a value containing
    \l{Qt::ItemFlags}{Qt::ItemIsEditable}.

    Models that provide interfaces to resizable data structures can
    provide implementations of insertRows(), removeRows(), insertColumns(),
    and removeColumns(). When implementing these functions, it is
    important to call the appropriate functions so that all connected views
    are aware of any changes:

    \list
    \li An insertRows() implementation must call beginInsertRows()
       \e before inserting new rows into the data structure, and it must
       call endInsertRows() \e{immediately afterwards}.
    \li An insertColumns() implementation must call beginInsertColumns()
       \e before inserting new columns into the data structure, and it must
       call endInsertColumns() \e{immediately afterwards}.
    \li A removeRows() implementation must call beginRemoveRows()
       \e before the rows are removed from the data structure, and it must
       call endRemoveRows() \e{immediately afterwards}.
    \li A removeColumns() implementation must call beginRemoveColumns()
       \e before the columns are removed from the data structure, and it must
       call endRemoveColumns() \e{immediately afterwards}.
    \endlist

    \note Some general guidelines for subclassing models are available in the
    \l{Model Subclassing Reference}.

    \note

    \sa {Model Classes}, QAbstractItemModel, QAbstractListModel,
    {Pixelator Example}
*/</doc>
<fun r='_ZN19QAbstractTableModelC1EP7QObject'/>
<fun r='_ZN19QAbstractTableModelC1ER25QAbstractItemModelPrivateP7QObject'/>
<fun r='_ZN19QAbstractTableModelD1Ev'/>
<fun r='_ZNK19QAbstractTableModel5indexEiiRK11QModelIndex'/>
<fun r='_ZNK19QAbstractTableModel6parentERK11QModelIndex'/>
<fun r='_ZNK19QAbstractTableModel7siblingEiiRK11QModelIndex'/>
<fun r='_ZNK19QAbstractTableModel11hasChildrenERK11QModelIndex'/>
<fun r='_ZNK19QAbstractTableModel5flagsERK11QModelIndex'/>
<fun r='_ZN19QAbstractTableModel12dropMimeDataEPK9QMimeDataN2Qt10DropActionEiiRK11QModelIndex'/>
<ovr f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.h' l='20' c='QSqlQueryModel'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.h' l='20'/>
<size>16</size>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.cpp' l='121' c='_ZN14QSqlQueryModelC1EP7QObject'/>
<use f='qtbase-6.5.0/src/sql/models/qsqlquerymodel.cpp' l='128' c='_ZN14QSqlQueryModelC1ER21QSqlQueryModelPrivateP7QObject'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/widgets/itemviews/qtablewidget_p.h' l='50' c='QTableModel'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qtablewidget_p.h' l='50'/>
<use f='qtbase-6.5.0/src/widgets/itemviews/qtablewidget.cpp' l='15' c='_ZN11QTableModelC1EiiP12QTableWidget'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/widgets/widgets/qcalendarwidget.cpp' l='821' c='QtPrivate::QCalendarModel'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcalendarwidget.cpp' l='821'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcalendarwidget.cpp' l='937' c='_ZN9QtPrivate14QCalendarModelC1EP7QObject'/>
<size>16</size>
