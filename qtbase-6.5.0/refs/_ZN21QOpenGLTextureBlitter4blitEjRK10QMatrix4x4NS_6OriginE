<dec f='qtbase-6.5.0/src/opengl/qopengltextureblitter.h' l='41' type='void QOpenGLTextureBlitter::blit(GLuint texture, const QMatrix4x4 &amp; targetTransform, QOpenGLTextureBlitter::Origin sourceOrigin)'/>
<use f='qtbase-6.5.0/src/opengl/qopenglcompositor.cpp' l='206' u='c' c='_ZN17QOpenGLCompositor6renderEP23QOpenGLCompositorWindow'/>
<use f='qtbase-6.5.0/src/opengl/qopenglcompositor.cpp' l='214' u='c' c='_ZN17QOpenGLCompositor6renderEP23QOpenGLCompositorWindow'/>
<def f='qtbase-6.5.0/src/opengl/qopengltextureblitter.cpp' l='681' ll='687' type='void QOpenGLTextureBlitter::blit(GLuint texture, const QMatrix4x4 &amp; targetTransform, QOpenGLTextureBlitter::Origin sourceOrigin)'/>
<doc f='qtbase-6.5.0/src/opengl/qopengltextureblitter.cpp' l='667'>/*!
    Performs the blit with the source texture \a texture.

    \a targetTransform specifies the transformation applied. This is
    usually generated by the targetTransform() helper function.

    \a sourceOrigin specifies if the image data needs flipping. When
    \a texture corresponds to a texture attached to an FBO pass
    OriginBottomLeft. On the other hand, when \a texture is based on
    unflipped image data, pass OriginTopLeft. This is more efficient
    than using QImage::mirrored().

    \sa targetTransform(), Origin, bind()
 */</doc>
<use f='qtbase-6.5.0/src/opengl/qopenglwindow.cpp' l='279' u='c' c='_ZN20QOpenGLWindowPrivate8endPaintEv'/>
