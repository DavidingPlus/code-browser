<dec f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.h' l='42' type='void QCborStreamWriter::append(QCborNegativeInteger n)'/>
<def f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.cpp' l='388' ll='391' type='void QCborStreamWriter::append(QCborNegativeInteger n)'/>
<doc f='qtbase-6.5.0/src/corelib/serialization/qcborstreamwriter.cpp' l='369'>/*!
   \overload

   Appends the 64-bit negative value \a n to the CBOR stream.
   QCborNegativeInteger is a 64-bit enum that holds the absolute value of the
   negative number we want to write. If n is zero, the value written will be
   equivalent to 2\sup{64} (that is, -18,446,744,073,709,551,616).

   In the following example, we write the values -1, -2\sup{32} and INT64_MIN:
   \snippet code/src_corelib_serialization_qcborstream.cpp 6

   Note how this function can be used to encode numbers that cannot fit a
   standard computer&apos;s 64-bit signed integer like \l qint64. That is, if \a n
   is larger than \c{std::numeric_limits&lt;qint64&gt;::max()} or is 0, this will
   represent a negative number smaller than
   \c{std::numeric_limits&lt;qint64&gt;::min()}.

   \sa QCborStreamReader::isNegativeInteger(), QCborStreamReader::toNegativeInteger()
 */</doc>
<use f='qtbase-6.5.0/src/corelib/serialization/qcborvalue.cpp' l='881' u='c' c='_ZL17writeDoubleToCborR17QCborStreamWriterd6QFlagsIN10QCborValue14EncodingOptionEE'/>
