<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='6003' type='sqlite3_value * sqlite3_value_dup(const sqlite3_value * )'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='88084' ll='88105' type='sqlite3_value * sqlite3_value_dup(const sqlite3_value * pOrig)'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='124976' u='c' c='instrFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='124980' u='c' c='instrFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='133149'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163908' u='c' c='nth_valueStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='163943' u='c' c='first_valueStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='164170' u='c' c='last_valueStepFunc'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='207813' u='c' c='geomCallback'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='5988'>/*
** CAPI3REF: Copy And Free SQL Values
** METHOD: sqlite3_value
**
** ^The sqlite3_value_dup(V) interface makes a copy of the [sqlite3_value]
** object D and returns a pointer to that copy.  ^The [sqlite3_value] returned
** is a [protected sqlite3_value] object even if the input is not.
** ^The sqlite3_value_dup(V) interface returns NULL if V is NULL or if a
** memory allocation fails. ^If V is a [pointer value], then the result
** of sqlite3_value_dup(V) is a NULL value.
**
** ^The sqlite3_value_free(V) interface frees an [sqlite3_value] object
** previously obtained from [sqlite3_value_dup()].  ^If V is a NULL pointer
** then sqlite3_value_free(V) is a harmless no-op.
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='88082'>/* Make a copy of an sqlite3_value object
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='5697' type='sqlite3_value * sqlite3_value_dup(const sqlite3_value * )'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='5682'>/*
** CAPI3REF: Copy And Free SQL Values
** METHOD: sqlite3_value
**
** ^The sqlite3_value_dup(V) interface makes a copy of the [sqlite3_value]
** object D and returns a pointer to that copy.  ^The [sqlite3_value] returned
** is a [protected sqlite3_value] object even if the input is not.
** ^The sqlite3_value_dup(V) interface returns NULL if V is NULL or if a
** memory allocation fails. ^If V is a [pointer value], then the result
** of sqlite3_value_dup(V) is a NULL value.
**
** ^The sqlite3_value_free(V) interface frees an [sqlite3_value] object
** previously obtained from [sqlite3_value_dup()].  ^If V is a NULL pointer
** then sqlite3_value_free(V) is a harmless no-op.
*/</doc>
