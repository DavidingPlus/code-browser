<dec f='qtbase-6.5.0/src/corelib/global/qtenvironmentvariables.h' l='25' type='QString qEnvironmentVariable(const char * varName, const QString &amp; defaultValue)'/>
<def f='qtbase-6.5.0/src/corelib/global/qtenvironmentvariables.cpp' l='108' ll='138' type='QString qEnvironmentVariable(const char * varName, const QString &amp; defaultValue)'/>
<use f='qtbase-6.5.0/src/corelib/global/qtenvironmentvariables.cpp' l='142' u='c' c='_Z20qEnvironmentVariablePKc'/>
<doc f='qtbase-6.5.0/src/corelib/global/qtenvironmentvariables.cpp' l='62'>/*!
    \fn QString qEnvironmentVariable(const char *varName, const QString &amp;defaultValue)
    \fn QString qEnvironmentVariable(const char *varName)

    \relates &lt;QtEnvironmentVariables&gt;
    \since 5.10

    These functions return the value of the environment variable, \a varName, as a
    QString. If no variable \a varName is found in the environment and \a defaultValue
    is provided, \a defaultValue is returned. Otherwise QString() is returned.

    The Qt environment manipulation functions are thread-safe, but this
    requires that the C library equivalent functions like getenv and putenv are
    not directly called.

    The following table describes how to choose between qgetenv() and
    qEnvironmentVariable():
    \table
      \header \li Condition         \li Recommendation
      \row
        \li Variable contains file paths or user text
        \li qEnvironmentVariable()
      \row
        \li Windows-specific code
        \li qEnvironmentVariable()
      \row
        \li Unix-specific code, destination variable is not QString and/or is
            used to interface with non-Qt APIs
        \li qgetenv()
      \row
        \li Destination variable is a QString
        \li qEnvironmentVariable()
      \row
        \li Destination variable is a QByteArray or std::string
        \li qgetenv()
    \endtable

    \note on Unix systems, this function may produce data loss if the original
    string contains arbitrary binary data that cannot be decoded by the locale
    codec. Use qgetenv() instead for that case. On Windows, this function is
    lossless.

    \note the variable name \a varName must contain only US-ASCII characters.

    \sa qputenv(), qgetenv(), qEnvironmentVariableIsSet(), qEnvironmentVariableIsEmpty()
*/</doc>
