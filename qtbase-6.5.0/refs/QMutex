<use f='qtbase-6.5.0/src/corelib/thread/qmutex.h' l='122'/>
<inh f='qtbase-6.5.0/src/corelib/thread/qmutex.h' l='58' c='QBasicMutex'/>
<def f='qtbase-6.5.0/src/corelib/thread/qmutex.h' l='126' ll='185'/>
<use f='qtbase-6.5.0/src/corelib/thread/qmutex.h' l='195'/>
<use f='qtbase-6.5.0/src/corelib/thread/qfutureinterface.h' l='134' c='_ZNK20QFutureInterfaceBase5mutexEv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qfutureinterface.h' l='284' c='_ZN16QFutureInterface12reportResultEPKT_i'/>
<use f='qtbase-6.5.0/src/corelib/thread/qfutureinterface.h' l='306' c='_ZN16QFutureInterface19reportAndMoveResultEOT_i'/>
<use f='qtbase-6.5.0/src/corelib/thread/qfutureinterface.h' l='336' c='_ZN16QFutureInterface13reportResultsERK5QListIT_Eii'/>
<use f='qtbase-6.5.0/src/corelib/thread/qfutureinterface.h' l='370' c='_ZNK16QFutureInterface15resultReferenceEi'/>
<use f='qtbase-6.5.0/src/corelib/thread/qfutureinterface.h' l='379' c='_ZNK16QFutureInterface13resultPointerEi'/>
<use f='qtbase-6.5.0/src/corelib/thread/qfutureinterface.h' l='394' c='_ZN16QFutureInterface7resultsEv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qfutureinterface.h' l='416' c='_ZN16QFutureInterface10takeResultEv'/>
<use f='qtbase-6.5.0/src/corelib/thread/qwaitcondition.h' l='23' c='_ZN14QWaitCondition4waitEP6QMutex14QDeadlineTimer'/>
<use f='qtbase-6.5.0/src/corelib/thread/qwaitcondition.h' l='25' c='_ZN14QWaitCondition4waitEP6QMutexm'/>
<size>8</size>
<fun r='_ZN6QMutexC1Ev'/>
<fun r='_ZN6QMutexD1Ev'/>
<fun r='_ZN6QMutex8try_lockEv'/>
<fun r='_ZN6QMutex7tryLockEi'/>
<fun r='_ZN6QMutex12try_lock_forENSt6chrono8durationIT_T0_EE'/>
<fun r='_ZN6QMutex14try_lock_untilENSt6chrono10time_pointIT_T0_EE'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qcoreapplication_p.h' l='117'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/io/qloggingregistry_p.h' l='123'/>
<size>1</size>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_p.h' l='114'/>
<use f='qtbase-6.5.0/src/corelib/io/qprocess_p.h' l='168'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='73'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='183'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/io/qsettings_p.h' l='134'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/kernel/qeventloop.cpp' l='143' c='_ZN10QEventLoop4execE6QFlagsINS_17ProcessEventsFlagEE'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qeventloop.cpp' l='146' c='_ZZN10QEventLoop4execE6QFlagsINS_17ProcessEventsFlagEEEN13LoopReferenceC1EP17QEventLoopPrivateR12QMutexLockerI6QMutexE'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/mimetypes/qmimedatabase_p.h' l='88'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/plugin/qlibrary_p.h' l='80'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/plugin/qfactoryloader.cpp' l='106'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/text/qregularexpression.cpp' l='733'/>
<size>1</size>
<use f='qtbase-6.5.0/src/corelib/thread/qfutureinterface_p.h' l='116'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthreadpool_p.h' l='139'/>
<use f='qtbase-6.5.0/src/corelib/thread/qfutureinterface.cpp' l='565' c='_ZNK20QFutureInterfaceBase5mutexEv'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/corelib/thread/qmutex.cpp' l='41'>/*!
    \class QMutex
    \inmodule QtCore
    \brief The QMutex class provides access serialization between threads.

    \threadsafe

    \ingroup thread

    The purpose of a QMutex is to protect an object, data structure or
    section of code so that only one thread can access it at a time
    (this is similar to the Java \c synchronized keyword). It is
    usually best to use a mutex with a QMutexLocker since this makes
    it easy to ensure that locking and unlocking are performed
    consistently.

    For example, say there is a method that prints a message to the
    user on two lines:

    \snippet code/src_corelib_thread_qmutex.cpp 0

    If these two methods are called in succession, the following happens:

    \snippet code/src_corelib_thread_qmutex.cpp 1

    If these two methods are called simultaneously from two threads then the
    following sequence could result:

    \snippet code/src_corelib_thread_qmutex.cpp 2

    If we add a mutex, we should get the result we want:

    \snippet code/src_corelib_thread_qmutex.cpp 3

    Then only one thread can modify \c number at any given time and
    the result is correct. This is a trivial example, of course, but
    applies to any other case where things need to happen in a
    particular sequence.

    When you call lock() in a thread, other threads that try to call
    lock() in the same place will block until the thread that got the
    lock calls unlock(). A non-blocking alternative to lock() is
    tryLock().

    QMutex is optimized to be fast in the non-contended case. It
    will not allocate memory if there is no contention on that mutex.
    It is constructed and destroyed with almost no overhead,
    which means it is fine to have many mutexes as part of other classes.

    \sa QRecursiveMutex, QMutexLocker, QReadWriteLock, QSemaphore, QWaitCondition
*/</doc>
<use f='qtbase-6.5.0/src/corelib/thread/qwaitcondition_unix.cpp' l='168' c='_ZN14QWaitCondition4waitEP6QMutexm'/>
<use f='qtbase-6.5.0/src/corelib/thread/qwaitcondition_unix.cpp' l='175' c='_ZN14QWaitCondition4waitEP6QMutex14QDeadlineTimer'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/time/qtimezoneprivate_tz.cpp' l='720'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/tools/qsharedpointer.cpp' l='1557'/>
<size>8</size>
<use f='qtbase-6.5.0/src/dbus/qdbusconnectionmanager_p.h' l='45'/>
<use f='qtbase-6.5.0/src/dbus/qdbusconnectionmanager_p.h' l='60'/>
<use f='qtbase-6.5.0/src/dbus/qdbusconnectionmanager_p.h' l='63'/>
<use f='qtbase-6.5.0/src/dbus/qdbuspendingcall_p.h' l='54'/>
<size>8</size>
<use f='qtbase-6.5.0/src/dbus/qdbusserver.cpp' l='78' c='_ZN11QDBusServerD1Ev'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/kernel/qwindowsysteminterface_p.h' l='437'/>
<use f='qtbase-6.5.0/src/gui/kernel/qwindowsysteminterface_p.h' l='506'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/image/qimagereaderwriterhelpers.cpp' l='20'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/itemmodels/qfileinfogatherer_p.h' l='172'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/kernel/qwindowsysteminterface.cpp' l='33'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/opengl/qopenglprogrambinarycache_p.h' l='78'/>
<size>8</size>
<use f='qtbase-6.5.0/src/gui/painting/qpaintengine_raster.cpp' l='4259'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/kernel/qhostinfo_p.h' l='138'/>
<use f='qtbase-6.5.0/src/network/kernel/qhostinfo_p.h' l='187'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/access/qnetworkaccessauthenticationmanager_p.h' l='68'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/kernel/qdnslookup_p.h' l='134'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/kernel/qnetworkinformation.cpp' l='35'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/socket/qabstractsocketengine.cpp' l='16'/>
<size>8</size>
<use f='qtbase-6.5.0/src/network/ssl/qtlsbackend.cpp' l='108'/>
<size>8</size>
<use f='qtbase-6.5.0/src/opengl/qopenglgradientcache_p.h' l='66'/>
<use f='qtbase-6.5.0/src/opengl/qopenglgradientcache.cpp' l='29'/>
<size>8</size>
<use f='qtbase-6.5.0/src/opengl/qopengltexturecache_p.h' l='51'/>
<size>8</size>
<use f='qtbase-6.5.0/src/opengl/qopengltexturecache.cpp' l='42'/>
<size>8</size>
<use f='qtbase-6.5.0/src/platformsupport/fbconvenience/qfbbackingstore_p.h' l='52'/>
<size>8</size>
<use f='qtbase-6.5.0/src/platformsupport/input/evdevtouch/qevdevtouchhandler.cpp' l='138'/>
<use f='qtbase-6.5.0/src/platformsupport/input/evdevtouch/qevdevtouchhandler.cpp' l='579' c='_ZN21QEvdevTouchScreenData17processInputEventEP11input_event'/>
<use f='qtbase-6.5.0/src/platformsupport/input/evdevtouch/qevdevtouchhandler.cpp' l='581' c='_ZN21QEvdevTouchScreenData17processInputEventEP11input_event'/>
<size>8</size>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicswidget.cpp' l='190'/>
<size>8</size>
