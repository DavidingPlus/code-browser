<dec f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='52' type='qint64 QDeadlineTimer::deadlineNSecs() const'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='79' u='c' c='_Zmi14QDeadlineTimerS_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='79' u='c' c='_Zmi14QDeadlineTimerS_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.h' l='162' u='c' c='_ZNK14QDeadlineTimer8deadlineEv'/>
<use f='qtbase-6.5.0/src/concurrent/qtconcurrentiteratekernel.cpp' l='20' u='c' c='_ZL8getticksv'/>
<def f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.cpp' l='745' ll='755' type='qint64 QDeadlineTimer::deadlineNSecs() const'/>
<doc f='qtbase-6.5.0/src/corelib/kernel/qdeadlinetimer.cpp' l='724'>/*!
    Returns the absolute time point for the deadline stored in QDeadlineTimer
    object, calculated in nanoseconds relative to the reference clock, the
    same as QElapsedTimer::msecsSinceReference(). The value will be in the past
    if this QDeadlineTimer has expired.

    If this QDeadlineTimer never expires or the number of nanoseconds until the
    deadline can&apos;t be accommodated in the return type, this function returns
    \c{std::numeric_limits&lt;qint64&gt;::max()}.

    This function can be used to calculate the amount of time a timer is
    overdue, by subtracting QDeadlineTimer::current(), as in the following
    example:

    \snippet code/src_corelib_kernel_qdeadlinetimer.cpp 7

    \note Timers that were created as expired have an indetermine time point in
    the past as their deadline, so the above calculation may not work.

    \sa remainingTime(), deadlineNSecs()
*/</doc>
