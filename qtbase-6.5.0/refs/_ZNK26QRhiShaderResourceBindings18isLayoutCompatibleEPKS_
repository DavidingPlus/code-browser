<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='1072' type='bool QRhiShaderResourceBindings::isLayoutCompatible(const QRhiShaderResourceBindings * other) const'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='3326' ll='3341' type='bool QRhiShaderResourceBindings::isLayoutCompatible(const QRhiShaderResourceBindings * other) const'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='3305'>/*!
    \return \c true if the layout is compatible with \a other. The layout does
    not include the actual resource (such as, buffer or texture) and related
    parameters (such as, offset or size). It does include the binding point,
    pipeline stage, and resource type, however. The number and order of the
    bindings must also match in order to be compatible.

    When there is a QRhiGraphicsPipeline created with this
    QRhiShaderResourceBindings, and the function returns \c true, \a other can
    then safely be passed to QRhiCommandBuffer::setShaderResources(), and so
    be used with the pipeline in place of this QRhiShaderResourceBindings.

    \note This function must only be called after a successful create(), because
    it relies on data generated during the baking of the underlying data
    structures. This way the function can implement a comparison approach that
    is more efficient than iterating through two binding lists and calling
    QRhiShaderResourceBinding::isLayoutCompatible() on each pair. This becomes
    relevant especially when this function is called at a high frequency.

    \sa serializedLayoutDescription()
 */</doc>
