<def f='qtbase-6.5.0/src/corelib/tools/qhashfunctions.h' l='36' ll='46'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhashfunctions.h' l='41' c='_ZN9QHashSeed10globalSeedEv'/>
<size>8</size>
<fun r='_ZN9QHashSeedC1Em'/>
<fun r='_ZNK9QHashSeedcvmEv'/>
<fun r='_ZN9QHashSeed10globalSeedEv'/>
<fun r='_ZN9QHashSeed26setDeterministicGlobalSeedEv'/>
<fun r='_ZN9QHashSeed21resetRandomGlobalSeedEv'/>
<mbr r='QHashSeed::data' o='0' t='size_t'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhash.cpp' l='79' c='_ZN12_GLOBAL__N_115HashSeedStorage11currentSeedEi'/>
<use f='qtbase-6.5.0/src/corelib/tools/qhash.cpp' l='1037' c='_ZN9QHashSeed10globalSeedEv'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/corelib/tools/qhash.cpp' l='984'>/*!
    \class QHashSeed
    \inmodule QtCore
    \since 6.2

    The QHashSeed class is used to convey the QHash seed. This is used
    internally by QHash and provides three static member functions to allow
    users to obtain the hash and to reset it.

    QHash and the qHash() functions implement what is called as &quot;salted hash&quot;.
    The intent is that different applications and different instances of the
    same application will produce different hashing values for the same input,
    thus causing the ordering of elements in QHash to be unpredictable by
    external observers. This improves the applications&apos; resilience against
    attacks that attempt to force hashing tables into degenerate mode.

    Most applications will not need to deal directly with the hash seed, as
    QHash will do so when needed. However, applications may wish to use this
    for their own purposes in the same way as QHash does: as an
    application-global random value (but see \l QRandomGenerator too). Note
    that the global hash seed may change during the application&apos;s lifetime, if
    the resetRandomGlobalSeed() function is called. Users of the global hash
    need to store the value they are using and not rely on getting it again.

    This class also implements functionality to set the hash seed to a
    deterministic value, which the qHash() functions will take to mean that
    they should use a fixed hashing function on their data too. This
    functionality is only meant to be used in debugging applications. This
    behavior can also be controlled by setting the \c QT_HASH_SEED environment
    variable to the value zero (any other value is ignored).

    \sa QHash, QRandomGenerator
*/</doc>
<fun r='_ZN9QHashSeed10globalSeedEv'/>
<fun r='_ZN9QHashSeed26setDeterministicGlobalSeedEv'/>
<fun r='_ZN9QHashSeed21resetRandomGlobalSeedEv'/>
