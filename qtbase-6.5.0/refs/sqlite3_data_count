<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='5216' type='int sqlite3_data_count(sqlite3_stmt * pStmt)'/>
<def f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='88882' ll='88886' type='int sqlite3_data_count(sqlite3_stmt * pStmt)'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='132924'/>
<use f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='183632' u='c' c='fts3ColumnMethod'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='5197'>/*
** CAPI3REF: Number of columns in a result set
** METHOD: sqlite3_stmt
**
** ^The sqlite3_data_count(P) interface returns the number of columns in the
** current row of the result set of [prepared statement] P.
** ^If prepared statement P does not have results ready to return
** (via calls to the [sqlite3_column_int | sqlite3_column()] family of
** interfaces) then sqlite3_data_count(P) returns 0.
** ^The sqlite3_data_count(P) routine also returns 0 if P is a NULL pointer.
** ^The sqlite3_data_count(P) routine returns 0 if the previous call to
** [sqlite3_step](P) returned [SQLITE_DONE].  ^The sqlite3_data_count(P)
** will return non-zero if previous call to [sqlite3_step](P) returned
** [SQLITE_ROW], except in the case of the [PRAGMA incremental_vacuum]
** where it always returns zero since each step of that multi-step
** pragma returns 0 columns of data.
**
** See also: [sqlite3_column_count()]
*/</doc>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.c' l='88878'>/*
** Return the number of values available from the current row of the
** currently executing statement pStmt.
*/</doc>
<dec f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='4910' type='int sqlite3_data_count(sqlite3_stmt * pStmt)'/>
<doc f='qtbase-6.5.0/src/3rdparty/sqlite/sqlite3.h' l='4891'>/*
** CAPI3REF: Number of columns in a result set
** METHOD: sqlite3_stmt
**
** ^The sqlite3_data_count(P) interface returns the number of columns in the
** current row of the result set of [prepared statement] P.
** ^If prepared statement P does not have results ready to return
** (via calls to the [sqlite3_column_int | sqlite3_column()] family of
** interfaces) then sqlite3_data_count(P) returns 0.
** ^The sqlite3_data_count(P) routine also returns 0 if P is a NULL pointer.
** ^The sqlite3_data_count(P) routine returns 0 if the previous call to
** [sqlite3_step](P) returned [SQLITE_DONE].  ^The sqlite3_data_count(P)
** will return non-zero if previous call to [sqlite3_step](P) returned
** [SQLITE_ROW], except in the case of the [PRAGMA incremental_vacuum]
** where it always returns zero since each step of that multi-step
** pragma returns 0 columns of data.
**
** See also: [sqlite3_column_count()]
*/</doc>
