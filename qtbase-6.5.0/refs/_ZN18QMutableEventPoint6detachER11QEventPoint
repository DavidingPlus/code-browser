<dec f='qtbase-6.5.0/src/gui/kernel/qeventpoint_p.h' l='99' type='static void QMutableEventPoint::detach(QEventPoint &amp; p)'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='38' u='c' c='_ZNK11QEnterEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='38' u='c' c='_ZNK13QPointerEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='548' u='c' c='_ZN17QSinglePointEventC1EN6QEvent4TypeEPK15QPointingDeviceRK7QPointFS7_S7_N2Qt11MouseButtonE6QFlagsIS9_ESA_INS8_16KeyboardModifierEENS8_16MouseEventSourceE'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='38' u='c' c='_ZNK17QSinglePointEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='38' u='c' c='_ZNK11QMouseEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='38' u='c' c='_ZNK11QHoverEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='38' u='c' c='_ZNK11QWheelEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='38' u='c' c='_ZNK12QTabletEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='38' u='c' c='_ZNK19QNativeGestureEvent5cloneEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qevent.cpp' l='38' u='c' c='_ZNK11QTouchEvent5cloneEv'/>
<def f='qtbase-6.5.0/src/gui/kernel/qeventpoint.cpp' l='483' ll='489' type='static void QMutableEventPoint::detach(QEventPoint &amp; p)'/>
<use f='qtbase-6.5.0/src/gui/kernel/qeventpoint.cpp' l='507' u='c' c='_ZN18QMutableEventPoint6updateERK11QEventPointRS0_'/>
<use f='qtbase-6.5.0/src/gui/kernel/qeventpoint.cpp' l='574' u='c' c='_ZN18QMutableEventPoint12setTimestampER11QEventPointm'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qeventpoint.cpp' l='473'>/*! \internal
    This class is explicitly shared, which means if you construct an event and
    then the point(s) that it holds are modified before the event is delivered,
    the event will be seen to hold the modified points. The workaround is that
    any code which modifies an eventpoint that could already be included in an
    event, or code that wants to save an eventpoint for later, has
    responsibility to detach before calling any setters, so as to hold and
    modify an independent copy. (The independent copy can then be used in a
    subsequent event.)
*/</doc>
