<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='343' type='static QRhiShaderResourceBinding QRhiShaderResourceBinding::texture(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiTexture * tex)'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='3654' ll='3663' type='static QRhiShaderResourceBinding QRhiShaderResourceBinding::texture(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiTexture * tex)'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='3633'>/*!
    \return a shader resource binding for the given binding number, pipeline
    stages, and texture specified by \a binding, \a stage, \a tex.

    \note This function is equivalent to calling textures() with a
    \c count of 1.

    \note \a tex can be null. It is valid to create a
    QRhiShaderResourceBindings with unspecified resources, but such an object
    cannot be used with QRhiCommandBuffer::setShaderResources(). It is however
    suitable for creating pipelines. Such a pipeline must then always be used
    together with another, layout compatible QRhiShaderResourceBindings with
    resources present passed to QRhiCommandBuffer::setShaderResources().

    This creates a binding for a separate texture (image) object, whereas
    sampledTexture() is suitable for combined image samplers. In
    Vulkan-compatible GLSL code separate textures are declared as \c texture2D
    as opposed to \c sampler2D: \c{layout(binding = 1) uniform texture2D tex;}

    \sa textures(), sampler()
 */</doc>
