<dec f='qtbase-6.5.0/src/gui/text/qrawfont.h' l='72' type='QImage QRawFont::alphaMapForGlyph(quint32 glyphIndex, QRawFont::AntialiasingType antialiasingType = SubPixelAntialiasing, const QTransform &amp; transform = QTransform()) const'/>
<use f='qtbase-6.5.0/src/gui/text/qdistancefield.cpp' l='769' u='c' c='_Z24qt_fontHasNarrowOutlinesRK8QRawFont'/>
<def f='qtbase-6.5.0/src/gui/text/qrawfont.cpp' l='241' ll='254' type='QImage QRawFont::alphaMapForGlyph(quint32 glyphIndex, QRawFont::AntialiasingType antialiasingType = SubPixelAntialiasing, const QTransform &amp; transform = QTransform()) const'/>
<doc f='qtbase-6.5.0/src/gui/text/qrawfont.cpp' l='224'>/*!
   This function returns a rasterized image of the glyph at the given
   \a glyphIndex in the underlying font, using the \a transform specified.
   If the QRawFont is not valid, this function will return an invalid QImage.

   If the font is a color font, then the resulting image will contain the rendered
   glyph at the current pixel size. In this case, the \a antialiasingType will be
   ignored.

   Otherwise, if \a antialiasingType is set to QRawFont::SubPixelAntialiasing, then the resulting image
   will be in QImage::Format_RGB32 and the RGB values of each pixel will represent the subpixel opacities
   of the pixel in the rasterization of the glyph. Otherwise, the image will be in the format of
   QImage::Format_Indexed8 and each pixel will contain the opacity of the pixel in the
   rasterization.

   \sa pathForGlyph(), QPainter::drawGlyphRun()
*/</doc>
