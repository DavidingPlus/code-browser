<dec f='qtbase-6.5.0/src/gui/kernel/qguiapplication.h' l='157' type='void QGuiApplication::saveStateRequest(QSessionManager &amp; sessionManager)'/>
<use f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='3919' u='c' c='_ZN22QGuiApplicationPrivate9saveStateEv'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qguiapplication.cpp' l='3805'>/*!
    \since 4.2
    \fn void QGuiApplication::saveStateRequest(QSessionManager &amp;manager)

    This signal deals with \l{Session Management}{session management}. It is
    invoked when the \l{QSessionManager}{session manager} wants the application
    to preserve its state for a future session.

    For example, a text editor would create a temporary file that includes the
    current contents of its edit buffers, the location of the cursor and other
    aspects of the current editing session.

    You should never exit the application within this signal. Instead, the
    session manager may or may not do this afterwards, depending on the
    context. Furthermore, most session managers will very likely request a saved
    state immediately after the application has been started. This permits the
    session manager to learn about the application&apos;s restart policy.

    \warning Within this signal, no user interaction is possible, \e
    unless you ask the \a manager for explicit permission. See
    QSessionManager::allowsInteraction() and
    QSessionManager::allowsErrorInteraction() for details.

    \note You should use Qt::DirectConnection when connecting to this signal.

    \sa isSessionRestored(), sessionId(), commitDataRequest(), {Session Management}
*/</doc>
