<dec f='qtbase-6.5.0/src/gui/kernel/qwindowsysteminterface.h' l='184' type='static void QWindowSystemInterface::handleEnterLeaveEvent(QWindow * enter, QWindow * leave, const QPointF &amp; local = QPointF(), const QPointF &amp; global = QPointF())'/>
<def f='qtbase-6.5.0/src/gui/kernel/qwindowsysteminterface.cpp' l='237' ll='241' type='static void QWindowSystemInterface::handleEnterLeaveEvent(QWindow * enter, QWindow * leave, const QPointF &amp; local = QPointF(), const QPointF &amp; global = QPointF())'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qwindowsysteminterface.cpp' l='230'>/*!
    This method can be used to ensure leave and enter events are both in queue when moving from
    one QWindow to another. This allows QWindow subclasses to check for a queued enter event
    when handling the leave event (\c QWindowSystemInterfacePrivate::peekWindowSystemEvent) to
    determine where mouse went and act accordingly. E.g. QWidgetWindow needs to know if mouse
    cursor moves between windows in same window hierarchy.
*/</doc>
<use f='qtbase-6.5.0/src/plugins/platforms/eglfs/api/qeglfsscreen.cpp' l='148' u='c' c='_ZN12QEglFSScreen16handleCursorMoveERK6QPoint'/>
<use f='qtbase-6.5.0/src/plugins/platforms/offscreen/qoffscreencommon.cpp' l='55' u='c' c='_ZN16QOffscreenCursor6setPosERK6QPoint'/>
