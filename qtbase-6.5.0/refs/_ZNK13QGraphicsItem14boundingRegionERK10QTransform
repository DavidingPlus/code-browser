<dec f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitem.h' l='284' type='QRegion QGraphicsItem::boundingRegion(const QTransform &amp; itemToDeviceTransform) const'/>
<def f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitem.cpp' l='5158' ll='5206' type='QRegion QGraphicsItem::boundingRegion(const QTransform &amp; itemToDeviceTransform) const'/>
<doc f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsitem.cpp' l='5135'>/*!
    \since 4.4

    Returns the bounding region for this item. The coordinate space of the
    returned region depends on \a itemToDeviceTransform. If you pass an
    identity QTransform as a parameter, this function will return a local
    coordinate region.

    The bounding region describes a coarse outline of the item&apos;s visual
    contents. Although it&apos;s expensive to calculate, it&apos;s also more precise
    than boundingRect(), and it can help to avoid unnecessary repainting when
    an item is updated. This is particularly efficient for thin items (e.g.,
    lines or simple polygons). You can tune the granularity for the bounding
    region by calling setBoundingRegionGranularity(). The default granularity
    is 0; in which the item&apos;s bounding region is the same as its bounding
    rect.

    \a itemToDeviceTransform is the transformation from item coordinates to
    device coordinates. If you want this function to return a QRegion in scene
    coordinates, you can pass sceneTransform() as an argument.

    \sa boundingRegionGranularity()
*/</doc>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsview.cpp' l='940' u='c' c='_ZNK20QGraphicsViewPrivate15mapToViewRegionEPK13QGraphicsItemRK6QRectF'/>
