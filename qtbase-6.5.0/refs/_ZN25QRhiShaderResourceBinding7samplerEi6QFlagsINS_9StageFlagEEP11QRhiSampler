<dec f='qtbase-6.5.0/src/gui/rhi/qrhi_p.h' l='345' type='static QRhiShaderResourceBinding QRhiShaderResourceBinding::sampler(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiSampler * sampler)'/>
<def f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='3726' ll='3735' type='static QRhiShaderResourceBinding QRhiShaderResourceBinding::sampler(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiSampler * sampler)'/>
<doc f='qtbase-6.5.0/src/gui/rhi/qrhi.cpp' l='3702'>/*!
    \return a shader resource binding for the given binding number, pipeline
    stages, and sampler specified by \a binding, \a stage, \a sampler.

    \note \a sampler can be null. It is valid to create a
    QRhiShaderResourceBindings with unspecified resources, but such an object
    cannot be used with QRhiCommandBuffer::setShaderResources(). It is however
    suitable for creating pipelines. Such a pipeline must then always be used
    together with another, layout compatible QRhiShaderResourceBindings with
    resources present passed to QRhiCommandBuffer::setShaderResources().

    Arrays of separate samplers are not supported.

    This creates a binding for a separate sampler object, whereas
    sampledTexture() is suitable for combined image samplers. In
    Vulkan-compatible GLSL code separate samplers are declared as \c sampler
    as opposed to \c sampler2D: \c{layout(binding = 2) uniform sampler samp;}

    With both a \c texture2D and \c sampler present, they can be used together
    to sample the texture: \c{fragColor = texture(sampler2D(tex, samp),
    texcoord);}.

    \sa texture()
 */</doc>
