<dec f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.h' l='41' type='void QSyntaxHighlighter::highlightBlock(const QString &amp; text)'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='162' u='c' c='_ZN25QSyntaxHighlighterPrivate13reformatBlockERK10QTextBlock'/>
<doc f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='365'>/*!
    \fn void QSyntaxHighlighter::highlightBlock(const QString &amp;text)

    Highlights the given text block. This function is called when
    necessary by the rich text engine, i.e. on text blocks which have
    changed.

    To provide your own syntax highlighting, you must subclass
    QSyntaxHighlighter and reimplement highlightBlock(). In your
    reimplementation you should parse the block&apos;s \a text and call
    setFormat() as often as necessary to apply any font and color
    changes that you require. For example:

    \snippet code/src_gui_text_qsyntaxhighlighter.cpp 1

    See the \l{QSyntaxHighlighter multiblock}{Detailed Description} for
    examples of using setCurrentBlockState(), currentBlockState()
    and previousBlockState() to handle syntaxes with constructs that
    span several text blocks

    \sa previousBlockState(), setFormat(), setCurrentBlockState()
*/</doc>
