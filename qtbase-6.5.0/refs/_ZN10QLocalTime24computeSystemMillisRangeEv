<dec f='qtbase-6.5.0/src/corelib/time/qlocaltime_p.h' l='41' type='QLocalTime::SystemMillisRange QLocalTime::computeSystemMillisRange()'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='2566' u='c' c='_ZL19millisInSystemRangexx'/>
<def f='qtbase-6.5.0/src/corelib/time/qlocaltime.cpp' l='422' ll='491' type='QLocalTime::SystemMillisRange QLocalTime::computeSystemMillisRange()'/>
<doc f='qtbase-6.5.0/src/corelib/time/qlocaltime.cpp' l='394'>/*!
    \internal
    Determine the range of the system time_t functions.

    On MS-systems (where time_t is 64-bit by default), the start-point is the
    epoch, the end-point is the end of the year 3000 (for mktime(); for
    _localtime64_s it&apos;s 18 days later, but we ignore that here). Darwin&apos;s range
    runs from the beginning of 1900 to the end of its 64-bit time_t and Linux
    uses the full range of time_t (but this might still be 32-bit on some
    embedded systems).

    (One potential constraint might appear to be the range of struct tm&apos;s int
    tm_year, only allowing time_t to represent times from the start of year
    1900+INT_MIN to the end of year INT_MAX. The 26-bit number of seconds in a
    year means that a 64-bit time_t can indeed represent times outside the range
    of 32-bit years, by a factor of 32 - but the range of representable
    milliseconds needs ten more bits than that of seconds, so can&apos;t reach the
    ends of the 32-bit year range.)

    Given the diversity of ranges, we conservatively estimate the actual
    supported range by experiment on the first call to qdatetime.cpp&apos;s
    millisInSystemRange() by exploration among the known candidates, converting
    the result to milliseconds and flagging whether each end is the qint64
    range&apos;s bound (so millisInSystemRange will know not to try to pad beyond
    those bounds). The probed date-times are somewhat inside the range, but
    close enough to the relevant bound that we can be fairly sure the bound is
    reached, if the probe succeeds.
*/</doc>
