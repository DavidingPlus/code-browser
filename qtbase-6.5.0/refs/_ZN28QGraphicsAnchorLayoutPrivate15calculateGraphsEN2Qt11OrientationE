<dec f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsanchorlayout_p.h' l='441' type='void QGraphicsAnchorLayoutPrivate::calculateGraphs(Qt::Orientation orientation)'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsanchorlayout_p.cpp' l='2009' u='c' c='_ZN28QGraphicsAnchorLayoutPrivate15calculateGraphsEv'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsanchorlayout_p.cpp' l='2010' u='c' c='_ZN28QGraphicsAnchorLayoutPrivate15calculateGraphsEv'/>
<def f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsanchorlayout_p.cpp' l='2050' ll='2123' type='void QGraphicsAnchorLayoutPrivate::calculateGraphs(Qt::Orientation orientation)'/>
<doc f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicsanchorlayout_p.cpp' l='2027'>/*!
    \internal

    Calculate graphs is the method that puts together all the helper routines
    so that the AnchorLayout can calculate the sizes of each item.

    In a nutshell it should do:

    1) Refresh anchor nominal sizes, that is, the size that each anchor would
       have if no other restrictions applied. This is done by querying the
       layout style and the sizeHints of the items belonging to the layout.

    2) Simplify the graph by grouping together parallel and sequential anchors
       into &quot;group anchors&quot;. These have equivalent minimum, preferred and maximum
       sizeHints as the anchors they replace.

    3) Check if we got to a trivial case. In some cases, the whole graph can be
       simplified into a single anchor. If so, use this information. If not,
       then call the Simplex solver to calculate the anchors sizes.

    4) Once the root anchors had its sizes calculated, propagate that to the
       anchors they represent.
*/</doc>
