<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='113' c='_ZNK5QDate10startOfDayERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='114' c='_ZNK5QDate8endOfDayERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='292' c='_ZN9QDateTime4DataC1ERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='304' c='_ZNK9QDateTime4Data8timeZoneEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='319' c='_ZN9QDateTimeC1E5QDate5QTimeRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='337' c='_ZNK9QDateTime18timeRepresentationEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='339' c='_ZNK9QDateTime8timeZoneEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='355' c='_ZN9QDateTime11setTimeZoneERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='382' c='_ZNK9QDateTime10toTimeZoneERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='388' c='_ZN9QDateTime15currentDateTimeERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='412' c='_ZN9QDateTime19fromMSecsSinceEpochExRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.h' l='413' c='_ZN9QDateTime18fromSecsSinceEpochExRK9QTimeZone'/>
<def f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='24' ll='244'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='107' c='_ZN9QTimeZoneC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='108' c='_ZN9QTimeZoneC1EOS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='111' c='_ZN9QTimeZoneaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='111' c='_ZN9QTimeZoneaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='112' c='_ZN9QTimeZoneaSEOS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='112' c='_ZN9QTimeZoneaSEOS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='114' c='_ZN9QTimeZone4swapERS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='117' c='_ZNK9QTimeZoneeqERKS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='118' c='_ZNK9QTimeZoneneERKS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='122' c='_ZN9QTimeZone22fromDurationAheadOfUtcENSt6chrono8durationIlSt5ratioILl1ELl1EEEE'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='124' c='_ZN9QTimeZone22fromDurationAheadOfUtcENSt6chrono8durationIlSt5ratioILl1ELl1EEEE'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='129' c='_ZN9QTimeZone21fromSecondsAheadOfUtcEi'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='142' c='_ZNK9QTimeZone13asBackendZoneEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='197' c='_ZN9QTimeZone14systemTimeZoneEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='198' c='_ZN9QTimeZone3utcEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='234' c='_ZlsR11QDataStreamRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='237' c='_Zls6QDebugRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='249'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='249'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='249'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='249'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='249'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='249' c='_Z4swapR9QTimeZoneS0_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='249' c='_Z4swapR9QTimeZoneS0_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='252' c='_ZlsR11QDataStreamRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='253' c='_ZrsR11QDataStreamR9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.h' l='257' c='_Zls6QDebugRK9QTimeZone'/>
<size>8</size>
<fun r='_ZN9QTimeZoneC1EONS_9ShortDataE'/>
<fun r='_ZN9QTimeZoneC1Ev'/>
<fun r='_ZN9QTimeZoneC1ENS_14InitializationE'/>
<fun r='_ZN9QTimeZoneC1Ei'/>
<fun r='_ZN9QTimeZoneC1ERK10QByteArray'/>
<fun r='_ZN9QTimeZoneC1ERK10QByteArrayiRK7QStringS5_N7QLocale7CountryES5_'/>
<fun r='_ZN9QTimeZoneC1ERKS_'/>
<fun r='_ZN9QTimeZoneC1EOS_'/>
<fun r='_ZN9QTimeZoneD1Ev'/>
<fun r='_ZN9QTimeZoneaSERKS_'/>
<fun r='_ZN9QTimeZone4swapERS_'/>
<fun r='_ZNK9QTimeZoneeqERKS_'/>
<fun r='_ZNK9QTimeZoneneERKS_'/>
<fun r='_ZNK9QTimeZone7isValidEv'/>
<fun r='_ZN9QTimeZone22fromDurationAheadOfUtcENSt6chrono8durationIlSt5ratioILl1ELl1EEEE'/>
<fun r='_ZN9QTimeZone21fromSecondsAheadOfUtcEi'/>
<fun r='_ZNK9QTimeZone8timeSpecEv'/>
<fun r='_ZNK9QTimeZone22fixedSecondsAheadOfUtcEv'/>
<fun r='_ZN9QTimeZone18isUtcOrFixedOffsetEN2Qt8TimeSpecE'/>
<fun r='_ZNK9QTimeZone18isUtcOrFixedOffsetEv'/>
<fun r='_ZNK9QTimeZone13asBackendZoneEv'/>
<fun r='_ZNK9QTimeZone2idEv'/>
<fun r='_ZNK9QTimeZone9territoryEv'/>
<fun r='_ZNK9QTimeZone7countryEv'/>
<fun r='_ZNK9QTimeZone7commentEv'/>
<fun r='_ZNK9QTimeZone11displayNameERK9QDateTimeNS_8NameTypeERK7QLocale'/>
<fun r='_ZNK9QTimeZone11displayNameENS_8TimeTypeENS_8NameTypeERK7QLocale'/>
<fun r='_ZNK9QTimeZone12abbreviationERK9QDateTime'/>
<fun r='_ZNK9QTimeZone13offsetFromUtcERK9QDateTime'/>
<fun r='_ZNK9QTimeZone18standardTimeOffsetERK9QDateTime'/>
<fun r='_ZNK9QTimeZone18daylightTimeOffsetERK9QDateTime'/>
<fun r='_ZNK9QTimeZone15hasDaylightTimeEv'/>
<fun r='_ZNK9QTimeZone14isDaylightTimeERK9QDateTime'/>
<fun r='_ZNK9QTimeZone10offsetDataERK9QDateTime'/>
<fun r='_ZNK9QTimeZone14hasTransitionsEv'/>
<fun r='_ZNK9QTimeZone14nextTransitionERK9QDateTime'/>
<fun r='_ZNK9QTimeZone18previousTransitionERK9QDateTime'/>
<fun r='_ZNK9QTimeZone11transitionsERK9QDateTimeS2_'/>
<fun r='_ZN9QTimeZone16systemTimeZoneIdEv'/>
<fun r='_ZN9QTimeZone14systemTimeZoneEv'/>
<fun r='_ZN9QTimeZone3utcEv'/>
<fun r='_ZN9QTimeZone21isTimeZoneIdAvailableERK10QByteArray'/>
<fun r='_ZN9QTimeZone20availableTimeZoneIdsEv'/>
<fun r='_ZN9QTimeZone20availableTimeZoneIdsEN7QLocale7CountryE'/>
<fun r='_ZN9QTimeZone20availableTimeZoneIdsEi'/>
<fun r='_ZN9QTimeZone17ianaIdToWindowsIdERK10QByteArray'/>
<fun r='_ZN9QTimeZone24windowsIdToDefaultIanaIdERK10QByteArray'/>
<fun r='_ZN9QTimeZone24windowsIdToDefaultIanaIdERK10QByteArrayN7QLocale7CountryE'/>
<fun r='_ZN9QTimeZone18windowsIdToIanaIdsERK10QByteArray'/>
<fun r='_ZN9QTimeZone18windowsIdToIanaIdsERK10QByteArrayN7QLocale7CountryE'/>
<fun r='_ZN9QTimeZoneC1ER16QTimeZonePrivate'/>
<mbr r='QTimeZone::d' o='0' t='QTimeZone::Data'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime_p.h' l='92' c='_ZN16QDateTimePrivate6createE5QDate5QTimeRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime_p.h' l='105'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='805' c='_ZL10toEarliest5QDateRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='865' c='_ZNK5QDate10startOfDayERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='936' c='_ZL8toLatest5QDateRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='997' c='_ZNK5QDate8endOfDayERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='2766' c='_ZL13stateAtMillis9QTimeZonexN16QDateTimePrivate14DaylightStatusE'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='2886' c='_ZL20refreshZonedDateTimeRN9QDateTime4DataERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='2955' c='_ZL14reviseTimeZoneRN9QDateTime4DataE9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='3078' c='_ZN9QDateTime4DataC1ERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='3191' c='_ZNK9QDateTime4Data8timeZoneEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='3207' c='_ZNK9QDateTime4Data8timeZoneEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='3229' c='_ZN16QDateTimePrivate6createE5QDate5QTimeRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='3459' c='_ZN9QDateTimeC1E5QDate5QTimeRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='3603' c='_ZNK9QDateTime18timeRepresentationEv'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='3849' c='_ZN9QDateTime11setTimeZoneERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='4596' c='_ZNK9QDateTime10toTimeZoneERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='4920' c='_ZN9QDateTime15currentDateTimeERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='5018' c='_ZN9QDateTime19fromMSecsSinceEpochExRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='5050' c='_ZN9QDateTime18fromSecsSinceEpochExRK9QTimeZone'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetime.cpp' l='5114' c='_ZN9QDateTime10fromStringE11QStringViewN2Qt10DateFormatE'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/time/qdatetimeparser.cpp' l='135' c='_ZNK15QDateTimeParser8setDigitER9QDateTimeii'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetimeparser.cpp' l='1165' c='_ZNK15QDateTimeParser10scanStringERK9QDateTimeb'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetimeparser.cpp' l='1228' c='_ZNK15QDateTimeParser10scanStringERK9QDateTimeb'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetimeparser.cpp' l='1228' c='_ZNK15QDateTimeParser10scanStringERK9QDateTimeb'/>
<use f='qtbase-6.5.0/src/corelib/time/qdatetimeparser.cpp' l='1772' c='_ZNK15QDateTimeParser16findTimeZoneNameE11QStringViewRK9QDateTime'/>
<size>8</size>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.cpp' l='666' c='_ZN9QTimeZoneC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.cpp' l='696' c='_ZN9QTimeZoneaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.cpp' l='696' c='_ZN9QTimeZoneaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.cpp' l='718' c='_ZNK9QTimeZoneeqERKS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.cpp' l='742' c='_ZNK9QTimeZoneneERKS_'/>
<use f='qtbase-6.5.0/src/corelib/time/qtimezone.cpp' l='1605' c='_Zls6QDebugRK9QTimeZone'/>
<size>8</size>
<doc f='qtbase-6.5.0/src/corelib/time/qtimezone.cpp' l='90'>/*!
    \class QTimeZone
    \inmodule QtCore
    \since 5.2
    \threadsafe

    \brief QTimeZone identifies how a time representation relates to UTC.

    When dates and times are combined, the meaning of the result depends on how
    time is being represented. There are various international standards for
    representing time; one of these, UTC, corresponds to the traditional
    standard of solar mean time at Greenwich (a.k.a. GMT). All other time
    systems supported by Qt are ultimately specified in relation to UTC. An
    instance of this class provides a stateless calculator for conversions
    between UTC and other time representations.

    Some time representations are simply defined at a fixed offset to UTC.
    Others are defined by governments for use within their jurisdictions. The
    latter are properly known as time zones, but QTimeZone (since Qt 6.5) is
    unifies their representation with that of general time systems. One time
    zone generally supported on most operating systems is designated local time;
    this is presumed to correspond to the time zone within which the user is
    living.

    For time zones other than local time, UTC and those at fixed offsets from
    UTC, Qt can only provide support when the operating system provides some way
    to access that information. When Qt is built, the \c timezone feature
    controls whether such information is available. When it is not, some
    constructors and methods of QTimeZone are excluded from its API; these are
    documented as depending on feature \c timezone. Note that, even when Qt is
    built with this feature enabled, it may be unavailable to users whose
    systems are misconfigured, or where some standard packages (for example, the
    \c tzdata package on Linux) are not installed. This feature is enabled by
    default when time zone information is available.

    This class is primarily designed for use in QDateTime; most applications
    will not need to access this class directly and should instead use an
    instance of it when constructing a QDateTime.

    \note For consistency with QDateTime, QTimeZone does not account for leap
    seconds.

    \section1 Remarks

    QTimeZone, like QDateTime, measures offsets from UTC in seconds. This
    contrasts with their measurement of time generally, which they do in
    milliseconds. Real-world time zones generally have UTC offsets that are
    whole-number multiples of five minutes (300 seconds), at least since well
    before 1970. A positive offset from UTC gives a time representation puts
    noon on any given day before UTC noon on that day; a negative offset puts
    noon after UTC noon on the same day.

    \section2 Lightweight Time Representations

    QTimeZone can represent UTC, local time and fixed offsets from UTC even when
    feature \c timezone is disabled. The form in which it does so is also
    available when the feature is enabled; it is a more lightweight form and
    processing using it will typically be more efficient, unless methods only
    available when feature \c timezone is enabled are being exercised. See \l
    Initialization and \l QTimeZone::fromSecondsAheadOfUtc(int) for how to
    construct these representations.

    This documentation distinguishes between &quot;time zone&quot;, used to describe a
    time representation described by system-supplied or standard information,
    and time representations more generally, which include these lightweight
    forms. The methods available only when feature \c timezone is enabled are
    apt to be cheaper for time zones than for lightweight time representations,
    for which these methods may construct a suitable transient time zone object
    to which to forward the query.

    \section2 IANA Time Zone IDs

    QTimeZone uses the IANA time zone IDs as defined in the IANA Time Zone
    Database (http://www.iana.org/time-zones). This is to ensure a standard ID
    across all supported platforms.  Most platforms support the IANA IDs
    and the IANA Database natively, but for Windows a mapping is required to
    the native IDs.  See below for more details.

    The IANA IDs can and do change on a regular basis, and can vary depending
    on how recently the host system data was updated.  As such you cannot rely
    on any given ID existing on any host system.  You must use
    availableTimeZoneIds() to determine what IANA IDs are available.

    The IANA IDs and database are also know as the Olson IDs and database,
    named after the original compiler of the database.

    \section2 UTC Offset Time Zones

    A default UTC time zone backend is provided which is always available when
    feature \c timezone is enabled. This provides a set of generic Offset From
    UTC time zones in the range UTC-14:00 to UTC+14:00. These time zones can be
    created using either the standard ISO format names, such as &quot;UTC+00:00&quot;, as
    listed by availableTimeZoneIds(), or using a name of similar form in
    combination with the number of offset seconds.

    \section2 Windows Time Zones

    Windows native time zone support is severely limited compared to the
    standard IANA TZ Database.  Windows time zones cover larger geographic
    areas and are thus less accurate in their conversions.  They also do not
    support as much historical data and so may only be accurate for the
    current year.  In particular, when MS&apos;s zone data claims that DST was
    observed prior to 1900 (this is historically known to be untrue), the
    claim is ignored and the standard time (allegedly) in force in 1900 is
    taken to have always been in effect.

    QTimeZone uses a conversion table derived from the Unicode CLDR data to map
    between IANA IDs and Windows IDs.  Depending on your version of Windows
    and Qt, this table may not be able to provide a valid conversion, in which
    &quot;UTC&quot; will be returned.

    QTimeZone provides a public API to use this conversion table.  The Windows ID
    used is the Windows Registry Key for the time zone which is also the MS
    Exchange EWS ID as well, but is different to the Time Zone Name (TZID) and
    COD code used by MS Exchange in versions before 2007.

    \note When Qt is built with the ICU library, it is used in preference to the
    Windows system APIs, bypassing all problems with those APIs using different
    names.

    \section2 System Time Zone

    The method systemTimeZoneId() returns the current system IANA time zone
    ID which on Unix-like systems will always be correct.  On Windows this ID is
    translated from the Windows system ID using an internal translation
    table and the user&apos;s selected country.  As a consequence there is a small
    chance any Windows install may have IDs not known by Qt, in which case
    &quot;UTC&quot; will be returned.

    Creating a new QTimeZone instance using the system time zone ID will only
    produce a fixed named copy of the time zone, it will not change if the
    system time zone changes.  QTimeZone::systemTimeZone() will return an
    instance representing the zone named by this system ID.  Note that
    constructing a QDateTime using this system zone may behave differently than
    constructing a QDateTime that uses Qt::LocalTime as its Qt::TimeSpec, as the
    latter directly uses system APIs for accessing local time information, which
    may behave differently (and, in particular, might adapt if the user adjusts
    the system zone setting).

    \section2 Time Zone Offsets

    The difference between UTC and the local time in a time zone is expressed
    as an offset in seconds from UTC, i.e. the number of seconds to add to UTC
    to obtain the local time.  The total offset is comprised of two component
    parts, the standard time offset and the daylight-saving time offset.  The
    standard time offset is the number of seconds to add to UTC to obtain
    standard time in the time zone.  The daylight-saving time offset is the
    number of seconds to add to the standard time offset to obtain
    daylight-saving time (abbreviated DST and sometimes called &quot;daylight time&quot;
    or &quot;summer time&quot;) in the time zone. The usual case for DST (using
    standard time in winter, DST in summer) has a positive daylight-saving
    time offset. However, some zones have negative DST offsets, used in
    winter, with summer using standard time.

    Note that the standard and DST offsets for a time zone may change over time
    as countries have changed DST laws or even their standard time offset.

    \section2 License

    This class includes data obtained from the CLDR data files under the terms
    of the Unicode Data Files and Software License. See
    \l{unicode-cldr}{Unicode Common Locale Data Repository (CLDR)} for details.

    \sa QDateTime, QCalendar
*/</doc>
<fun r='_ZN9QTimeZoneC1Ev'/>
<fun r='_ZN9QTimeZoneC1ERKS_'/>
<fun r='_ZN9QTimeZoneD1Ev'/>
<fun r='_ZN9QTimeZoneaSERKS_'/>
<fun r='_ZNK9QTimeZoneeqERKS_'/>
<fun r='_ZNK9QTimeZoneneERKS_'/>
<fun r='_ZNK9QTimeZone7isValidEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qdatetimeedit_p.h' l='39' c='_ZN20QDateTimeEditPrivateC1ERK9QTimeZone'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qdatetimeedit_p.h' l='109'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qdatetimeedit.cpp' l='1709' c='_ZN20QDateTimeEditPrivateC1ERK9QTimeZone'/>
<size>8</size>
