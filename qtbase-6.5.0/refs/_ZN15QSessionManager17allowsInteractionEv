<dec f='qtbase-6.5.0/src/gui/kernel/qsessionmanager.h' l='32' type='bool QSessionManager::allowsInteraction()'/>
<def f='qtbase-6.5.0/src/gui/kernel/qsessionmanager.cpp' l='173' ll='177' type='bool QSessionManager::allowsInteraction()'/>
<doc f='qtbase-6.5.0/src/gui/kernel/qsessionmanager.cpp' l='144'>/*!
    Asks the session manager for permission to interact with the user. Returns
    true if interaction is permitted; otherwise returns \c false.

    The rationale behind this mechanism is to make it possible to synchronize
    user interaction during a shutdown. Advanced session managers may ask all
    applications simultaneously to commit their data, resulting in a much
    faster shutdown.

    When the interaction is completed we strongly recommend releasing the user
    interaction semaphore with a call to release(). This way, other
    applications may get the chance to interact with the user while your
    application is still busy saving data. (The semaphore is implicitly
    released when the application exits.)

    If the user decides to cancel the shutdown process during the interaction
    phase, you must tell the session manager that this has happened by calling
    cancel().

    Here&apos;s an example of how an application&apos;s QGuiApplication::commitDataRequest()
    might be implemented:

    \snippet code/src_gui_kernel_qguiapplication.cpp 1

    If an error occurred within the application while saving its data, you may
    want to try allowsErrorInteraction() instead.

    \sa QGuiApplication::commitDataRequest(), release(), cancel()
*/</doc>
