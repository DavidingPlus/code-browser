<use f='qtbase-6.5.0/src/widgets/widgets/qcombobox.h' l='108' c='_ZN9QComboBox12setCompleterEP10QCompleter'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcombobox.h' l='109' c='_ZNK9QComboBox9completerEv'/>
<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/widgets/util/qcompleter.h' l='23' ll='128'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter.h' l='121' c='_ZN10QCompleterC1ERKS_'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter.h' l='121' c='_ZN10QCompleteraSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter.h' l='121' c='_ZN10QCompleteraSERKS_'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qlineedit.h' l='91' c='_ZN9QLineEdit12setCompleterEP10QCompleter'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qlineedit.h' l='92' c='_ZNK9QLineEdit9completerEv'/>
<size>16</size>
<smbr r='QCompleter::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK10QCompleter10metaObjectEv'/>
<fun r='_ZN10QCompleter11qt_metacastEPKc'/>
<fun r='_ZN10QCompleter11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN10QCompleter2trEPKcS1_i'/>
<fun r='_ZN10QCompleter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN10QCompleterC1EP7QObject'/>
<fun r='_ZN10QCompleterC1EP18QAbstractItemModelP7QObject'/>
<fun r='_ZN10QCompleterC1ERK5QListI7QStringEP7QObject'/>
<fun r='_ZN10QCompleterD1Ev'/>
<fun r='_ZN10QCompleter9setWidgetEP7QWidget'/>
<fun r='_ZNK10QCompleter6widgetEv'/>
<fun r='_ZN10QCompleter8setModelEP18QAbstractItemModel'/>
<fun r='_ZNK10QCompleter5modelEv'/>
<fun r='_ZN10QCompleter17setCompletionModeENS_14CompletionModeE'/>
<fun r='_ZNK10QCompleter14completionModeEv'/>
<fun r='_ZN10QCompleter13setFilterModeE6QFlagsIN2Qt9MatchFlagEE'/>
<fun r='_ZNK10QCompleter10filterModeEv'/>
<fun r='_ZNK10QCompleter5popupEv'/>
<fun r='_ZN10QCompleter8setPopupEP17QAbstractItemView'/>
<fun r='_ZN10QCompleter18setCaseSensitivityEN2Qt15CaseSensitivityE'/>
<fun r='_ZNK10QCompleter15caseSensitivityEv'/>
<fun r='_ZN10QCompleter15setModelSortingENS_12ModelSortingE'/>
<fun r='_ZNK10QCompleter12modelSortingEv'/>
<fun r='_ZN10QCompleter19setCompletionColumnEi'/>
<fun r='_ZNK10QCompleter16completionColumnEv'/>
<fun r='_ZN10QCompleter17setCompletionRoleEi'/>
<fun r='_ZNK10QCompleter14completionRoleEv'/>
<fun r='_ZNK10QCompleter10wrapAroundEv'/>
<fun r='_ZNK10QCompleter15maxVisibleItemsEv'/>
<fun r='_ZN10QCompleter18setMaxVisibleItemsEi'/>
<fun r='_ZNK10QCompleter15completionCountEv'/>
<fun r='_ZN10QCompleter13setCurrentRowEi'/>
<fun r='_ZNK10QCompleter10currentRowEv'/>
<fun r='_ZNK10QCompleter12currentIndexEv'/>
<fun r='_ZNK10QCompleter17currentCompletionEv'/>
<fun r='_ZNK10QCompleter15completionModelEv'/>
<fun r='_ZNK10QCompleter16completionPrefixEv'/>
<fun r='_ZN10QCompleter19setCompletionPrefixERK7QString'/>
<fun r='_ZN10QCompleter8completeERK5QRect'/>
<fun r='_ZN10QCompleter13setWrapAroundEb'/>
<fun r='_ZNK10QCompleter13pathFromIndexERK11QModelIndex'/>
<fun r='_ZNK10QCompleter9splitPathERK7QString'/>
<fun r='_ZN10QCompleter11eventFilterEP7QObjectP6QEvent'/>
<fun r='_ZN10QCompleter5eventEP6QEvent'/>
<fun r='_ZN10QCompleter9activatedERK7QString'/>
<fun r='_ZN10QCompleter9activatedERK11QModelIndex'/>
<fun r='_ZN10QCompleter11highlightedERK7QString'/>
<fun r='_ZN10QCompleter11highlightedERK11QModelIndex'/>
<fun r='_ZN10QCompleterC1ERKS_'/>
<fun r='_ZN10QCompleter6d_funcEv'/>
<fun r='_ZNK10QCompleter6d_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter_p.h' l='38' c='_ZN17QCompleterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter_p.h' l='38' c='_ZN17QCompleterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter_p.h' l='38' c='_ZNK17QCompleterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter_p.h' l='38' c='_ZNK17QCompleterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter_p.h' l='38'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter_p.h' l='70' c='_ZN17QCompleterPrivate3getEP10QCompleter'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter_p.h' l='71' c='_ZN17QCompleterPrivate3getEPK10QCompleter'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qwidgetlinecontrol_p.h' l='273' c='_ZNK18QWidgetLineControl9completerEv'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qwidgetlinecontrol_p.h' l='275' c='_ZN18QWidgetLineControl12setCompleterEPK10QCompleter'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qwidgetlinecontrol_p.h' l='275' c='_ZN18QWidgetLineControl12setCompleterEPK10QCompleter'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qwidgetlinecontrol_p.h' l='424'/>
<size>16</size>
<ovr f='qtbase-6.5.0/src/widgets/dialogs/qfscompleter_p.h' l='29' c='QFSCompleter'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfscompleter_p.h' l='29'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfscompleter_p.h' l='32' c='_ZN12QFSCompleterC1EP16QFileSystemModelP7QObject'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter.cpp' l='808' c='_ZN17QCompleterPrivate4initEP18QAbstractItemModel'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter.cpp' l='821' c='_ZN17QCompleterPrivate15setCurrentIndexE11QModelIndexb'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter.cpp' l='851' c='_ZN17QCompleterPrivate11_q_completeE11QModelIndexb'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter.cpp' l='959' c='_ZN17QCompleterPrivate33_q_fileSystemModelDirectoryLoadedERK7QString'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter.cpp' l='1272' c='_ZNK10QCompleter5popupEv'/>
<use f='qtbase-6.5.0/src/widgets/util/qcompleter.cpp' l='1272' c='_ZNK10QCompleter5popupEv'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/widgets/util/qcompleter.cpp' l='4'>/*!
    \class QCompleter
    \brief The QCompleter class provides completions based on an item model.
    \since 4.2

    \inmodule QtWidgets

    You can use QCompleter to provide auto completions in any Qt
    widget, such as QLineEdit and QComboBox.
    When the user starts typing a word, QCompleter suggests possible ways of
    completing the word, based on a word list. The word list is
    provided as a QAbstractItemModel. (For simple applications, where
    the word list is static, you can pass a QStringList to
    QCompleter&apos;s constructor.)

    \tableofcontents

    \section1 Basic Usage

    A QCompleter is used typically with a QLineEdit or QComboBox.
    For example, here&apos;s how to provide auto completions from a simple
    word list in a QLineEdit:

    \snippet code/src_gui_util_qcompleter.cpp 0

    A QFileSystemModel can be used to provide auto completion of file names.
    For example:

    \snippet code/src_gui_util_qcompleter.cpp 1

    To set the model on which QCompleter should operate, call
    setModel(). By default, QCompleter will attempt to match the \l
    {completionPrefix}{completion prefix} (i.e., the word that the
    user has started typing) against the Qt::EditRole data stored in
    column 0 in the  model case sensitively. This can be changed
    using setCompletionRole(), setCompletionColumn(), and
    setCaseSensitivity().

    If the model is sorted on the column and role that are used for completion,
    you can call setModelSorting() with either
    QCompleter::CaseSensitivelySortedModel or
    QCompleter::CaseInsensitivelySortedModel as the argument. On large models,
    this can lead to significant performance improvements, because QCompleter
    can then use binary search instead of linear search. The binary search only
    works when the filterMode is Qt::MatchStartsWith.

    The model can be a \l{QAbstractListModel}{list model},
    a \l{QAbstractTableModel}{table model}, or a
    \l{QAbstractItemModel}{tree model}. Completion on tree models
    is slightly more involved and is covered in the \l{Handling
    Tree Models} section below.

    The completionMode() determines the mode used to provide completions to
    the user.

    \section1 Iterating Through Completions

    To retrieve a single candidate string, call setCompletionPrefix()
    with the text that needs to be completed and call
    currentCompletion(). You can iterate through the list of
    completions as below:

    \snippet code/src_gui_util_qcompleter.cpp 2

    completionCount() returns the total number of completions for the
    current prefix. completionCount() should be avoided when possible,
    since it requires a scan of the entire model.

    \section1 The Completion Model

    completionModel() return a list model that contains all possible
    completions for the current completion prefix, in the order in which
    they appear in the model. This model can be used to display the current
    completions in a custom view. Calling setCompletionPrefix() automatically
    refreshes the completion model.

    \section1 Handling Tree Models

    QCompleter can look for completions in tree models, assuming
    that any item (or sub-item or sub-sub-item) can be unambiguously
    represented as a string by specifying the path to the item. The
    completion is then performed one level at a time.

    Let&apos;s take the example of a user typing in a file system path.
    The model is a (hierarchical) QFileSystemModel. The completion
    occurs for every element in the path. For example, if the current
    text is \c C:\Wind, QCompleter might suggest \c Windows to
    complete the current path element. Similarly, if the current text
    is \c C:\Windows\Sy, QCompleter might suggest \c System.

    For this kind of completion to work, QCompleter needs to be able to
    split the path into a list of strings that are matched at each level.
    For \c C:\Windows\Sy, it needs to be split as &quot;C:&quot;, &quot;Windows&quot; and &quot;Sy&quot;.
    The default implementation of splitPath(), splits the completionPrefix
    using QDir::separator() if the model is a QFileSystemModel.

    To provide completions, QCompleter needs to know the path from an index.
    This is provided by pathFromIndex(). The default implementation of
    pathFromIndex(), returns the data for the \l{Qt::EditRole}{edit role}
    for list models and the absolute file path if the mode is a QFileSystemModel.

    \sa QAbstractItemModel, QLineEdit, QComboBox, {Completer Example}
*/</doc>
<fun r='_ZN10QCompleterC1EP7QObject'/>
<fun r='_ZN10QCompleterC1EP18QAbstractItemModelP7QObject'/>
<fun r='_ZN10QCompleterC1ERK5QListI7QStringEP7QObject'/>
<fun r='_ZN10QCompleterD1Ev'/>
<fun r='_ZN10QCompleter9setWidgetEP7QWidget'/>
<fun r='_ZNK10QCompleter6widgetEv'/>
<fun r='_ZN10QCompleter8setModelEP18QAbstractItemModel'/>
<fun r='_ZNK10QCompleter5modelEv'/>
<fun r='_ZN10QCompleter17setCompletionModeENS_14CompletionModeE'/>
<fun r='_ZNK10QCompleter14completionModeEv'/>
<fun r='_ZN10QCompleter13setFilterModeE6QFlagsIN2Qt9MatchFlagEE'/>
<fun r='_ZNK10QCompleter10filterModeEv'/>
<fun r='_ZN10QCompleter8setPopupEP17QAbstractItemView'/>
<fun r='_ZNK10QCompleter5popupEv'/>
<fun r='_ZN10QCompleter5eventEP6QEvent'/>
<fun r='_ZN10QCompleter11eventFilterEP7QObjectP6QEvent'/>
<fun r='_ZN10QCompleter8completeERK5QRect'/>
<fun r='_ZN10QCompleter13setCurrentRowEi'/>
<fun r='_ZNK10QCompleter10currentRowEv'/>
<fun r='_ZNK10QCompleter15completionCountEv'/>
<fun r='_ZN10QCompleter15setModelSortingENS_12ModelSortingE'/>
<fun r='_ZNK10QCompleter12modelSortingEv'/>
<fun r='_ZN10QCompleter19setCompletionColumnEi'/>
<fun r='_ZNK10QCompleter16completionColumnEv'/>
<fun r='_ZN10QCompleter17setCompletionRoleEi'/>
<fun r='_ZNK10QCompleter14completionRoleEv'/>
<fun r='_ZN10QCompleter13setWrapAroundEb'/>
<fun r='_ZNK10QCompleter10wrapAroundEv'/>
<fun r='_ZNK10QCompleter15maxVisibleItemsEv'/>
<fun r='_ZN10QCompleter18setMaxVisibleItemsEi'/>
<fun r='_ZN10QCompleter18setCaseSensitivityEN2Qt15CaseSensitivityE'/>
<fun r='_ZNK10QCompleter15caseSensitivityEv'/>
<fun r='_ZN10QCompleter19setCompletionPrefixERK7QString'/>
<fun r='_ZNK10QCompleter16completionPrefixEv'/>
<fun r='_ZNK10QCompleter12currentIndexEv'/>
<fun r='_ZNK10QCompleter17currentCompletionEv'/>
<fun r='_ZNK10QCompleter15completionModelEv'/>
<fun r='_ZNK10QCompleter13pathFromIndexERK11QModelIndex'/>
<fun r='_ZNK10QCompleter9splitPathERK7QString'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcombobox.cpp' l='1809' c='_ZN9QComboBox11setLineEditEP9QLineEdit'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcombobox.cpp' l='1809' c='_ZN9QComboBox11setLineEditEP9QLineEdit'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcombobox.cpp' l='1892' c='_ZN9QComboBox12setCompleterEP10QCompleter'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qcombobox.cpp' l='1914' c='_ZNK9QComboBox9completerEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/widgets/qlineedit.cpp' l='612' c='_ZN9QLineEdit12setCompleterEP10QCompleter'/>
<use f='qtbase-6.5.0/src/widgets/widgets/qlineedit.cpp' l='641' c='_ZNK9QLineEdit9completerEv'/>
<size>16</size>
