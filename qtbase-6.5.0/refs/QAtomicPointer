<def f='qtbase-6.5.0/src/corelib/thread/qatomic.h' l='124' ll='171'/>
<use f='qtbase-6.5.0/src/corelib/thread/qatomic.h' l='129' c='_ZN14QAtomicPointerC1ERK14QAtomicPointerIT_E'/>
<use f='qtbase-6.5.0/src/corelib/thread/qatomic.h' l='135' c='_ZN14QAtomicPointeraSERK14QAtomicPointerIT_E'/>
<use f='qtbase-6.5.0/src/corelib/thread/qatomic.h' l='135' c='_ZN14QAtomicPointeraSERK14QAtomicPointerIT_E'/>
<fun r='_ZN14QAtomicPointerC1EPT_'/>
<fun r='_ZN14QAtomicPointerC1ERK14QAtomicPointerIT_E'/>
<fun r='_ZN14QAtomicPointeraSERK14QAtomicPointerIT_E'/>
<use f='qtbase-6.5.0/src/corelib/thread/qmutex.h' l='192'/>
<use f='qtbase-6.5.0/src/corelib/thread/qreadwritelock.h' l='36'/>
<use f='qtbase-6.5.0/src/3rdparty/harfbuzz-ng/config.h' l='38' c='_ZN12_GLOBAL__N_117makeAtomicPointerERKPT_'/>
<use f='qtbase-6.5.0/src/3rdparty/harfbuzz-ng/config.h' l='40' c='_ZN12_GLOBAL__N_117makeAtomicPointerERKPT_'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p.h' l='192'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p.h' l='195'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p.h' l='204'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='322'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='323'/>
<use f='qtbase-6.5.0/src/corelib/thread/qthread_p.h' l='324'/>
<use f='qtbase-6.5.0/src/corelib/tools/qfreelist_p.h' l='147'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p_p.h' l='31'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p_p.h' l='32'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p_p.h' l='64'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p_p.h' l='68'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p_p.h' l='69'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p_p.h' l='74'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p_p.h' l='132'/>
<use f='qtbase-6.5.0/src/corelib/kernel/qobject_p_p.h' l='135'/>
<use f='qtbase-6.5.0/src/corelib/plugin/qlibrary_p.h' l='76'/>
<use f='qtbase-6.5.0/src/corelib/plugin/qlibrary_p.h' l='77'/>
<doc f='qtbase-6.5.0/src/corelib/thread/qatomic.cpp' l='1222'>/*!
    \class QAtomicPointer
    \inmodule QtCore
    \brief The QAtomicPointer class is a template class that provides platform-independent atomic operations on pointers.
    \since 4.4

    \ingroup thread

    For atomic operations on integers, see the QAtomicInteger class.

    An \e atomic operation is a complex operation that completes without interruption.
    The QAtomicPointer class provides atomic test-and-set, fetch-and-store, and fetch-and-add for pointers.

    \section1 The Atomic API

    \section2 Memory ordering

    QAtomicPointer provides several implementations of the atomic
    test-and-set, fetch-and-store, and fetch-and-add functions. Each
    implementation defines a memory ordering semantic that describes
    how memory accesses surrounding the atomic instruction are
    executed by the processor. Since many modern architectures allow
    out-of-order execution and memory ordering, using the correct
    semantic is necessary to ensure that your application functions
    properly on all processors.

    \list

    \li Relaxed - memory ordering is unspecified, leaving the compiler
    and processor to freely reorder memory accesses.

    \li Acquire - memory access following the atomic operation (in
    program order) may not be re-ordered before the atomic operation.

    \li Release - memory access before the atomic operation (in program
    order) may not be re-ordered after the atomic operation.

    \li Ordered - the same Acquire and Release semantics combined.

    \endlist

    \section2 Test-and-set

    If the current value of the QAtomicPointer is an expected value,
    the test-and-set functions assign a new value to the
    QAtomicPointer and return true. If values are \a not the same,
    these functions do nothing and return false. This operation
    equates to the following code:

    \snippet code/src_corelib_thread_qatomic.cpp 4

    There are 4 test-and-set functions: testAndSetRelaxed(),
    testAndSetAcquire(), testAndSetRelease(), and
    testAndSetOrdered(). See above for an explanation of the different
    memory ordering semantics.

    \section2 Fetch-and-store

    The atomic fetch-and-store functions read the current value of the
    QAtomicPointer and then assign a new value, returning the original
    value. This operation equates to the following code:

    \snippet code/src_corelib_thread_qatomic.cpp 5

    There are 4 fetch-and-store functions: fetchAndStoreRelaxed(),
    fetchAndStoreAcquire(), fetchAndStoreRelease(), and
    fetchAndStoreOrdered(). See above for an explanation of the
    different memory ordering semantics.

    \section2 Fetch-and-add

    The atomic fetch-and-add functions read the current value of the
    QAtomicPointer and then add the given value to the current value,
    returning the original value. This operation equates to the
    following code:

    \snippet code/src_corelib_thread_qatomic.cpp 6

    There are 4 fetch-and-add functions: fetchAndAddRelaxed(),
    fetchAndAddAcquire(), fetchAndAddRelease(), and
    fetchAndAddOrdered(). See above for an explanation of the
    different memory ordering semantics.

    \section1 Feature Tests for the Atomic API

    Providing a platform-independent atomic API that works on all
    processors is challenging. The API provided by QAtomicPointer is
    guaranteed to work atomically on all processors. However, since
    not all processors implement support for every operation provided
    by QAtomicPointer, it is necessary to expose information about the
    processor.

    You can check at compile time which features are supported on your
    hardware using various macros. These will tell you if your
    hardware always, sometimes, or does not support a particular
    operation. The macros have the form
    Q_ATOMIC_POINTER_\e{OPERATION}_IS_\e{HOW}_NATIVE. \e{OPERATION} is
    one of TEST_AND_SET, FETCH_AND_STORE, or FETCH_AND_ADD, and
    \e{HOW} is one of ALWAYS, SOMETIMES, or NOT. There will always be
    exactly one defined macro per operation. For example, if
    Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE is defined, neither
    Q_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE nor
    Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE will be defined.

    An operation that completes in constant time is said to be
    wait-free. Such operations are not implemented using locks or
    loops of any kind. For atomic operations that are always
    supported, and that are wait-free, Qt defines the
    Q_ATOMIC_POINTER_\e{OPERATION}_IS_WAIT_FREE in addition to the
    Q_ATOMIC_POINTER_\e{OPERATION}_IS_ALWAYS_NATIVE.

    In cases where an atomic operation is only supported in newer
    generations of the processor, QAtomicPointer also provides a way
    to check at runtime what your hardware supports with the
    isTestAndSetNative(), isFetchAndStoreNative(), and
    isFetchAndAddNative() functions. Wait-free implementations can be
    detected using the isTestAndSetWaitFree(),
    isFetchAndStoreWaitFree(), and isFetchAndAddWaitFree() functions.

    Below is a complete list of all feature macros for QAtomicPointer:

    \list

    \li Q_ATOMIC_POINTER_TEST_AND_SET_IS_ALWAYS_NATIVE
    \li Q_ATOMIC_POINTER_TEST_AND_SET_IS_SOMETIMES_NATIVE
    \li Q_ATOMIC_POINTER_TEST_AND_SET_IS_NOT_NATIVE
    \li Q_ATOMIC_POINTER_TEST_AND_SET_IS_WAIT_FREE

    \li Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_ALWAYS_NATIVE
    \li Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_SOMETIMES_NATIVE
    \li Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_NOT_NATIVE
    \li Q_ATOMIC_POINTER_FETCH_AND_STORE_IS_WAIT_FREE

    \li Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_ALWAYS_NATIVE
    \li Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_SOMETIMES_NATIVE
    \li Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_NOT_NATIVE
    \li Q_ATOMIC_POINTER_FETCH_AND_ADD_IS_WAIT_FREE

    \endlist

    \sa QAtomicInteger
*/</doc>
<use f='qtbase-6.5.0/src/corelib/time/qcalendar.cpp' l='82'/>
<use f='qtbase-6.5.0/src/gui/painting/qcolorspace.cpp' l='23'/>
<use f='qtbase-6.5.0/src/gui/painting/qcolorspace.cpp' l='26' c='_ZL28cleanupPredefinedColorspacesv'/>
