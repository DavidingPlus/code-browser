<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/widgets/styles/qstyleplugin.h' l='18' ll='26'/>
<size>16</size>
<smbr r='QStylePlugin::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK12QStylePlugin10metaObjectEv'/>
<fun r='_ZN12QStylePlugin11qt_metacastEPKc'/>
<fun r='_ZN12QStylePlugin11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN12QStylePlugin2trEPKcS1_i'/>
<fun r='_ZN12QStylePlugin18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN12QStylePluginC1EP7QObject'/>
<fun r='_ZN12QStylePluginD1Ev'/>
<fun r='_ZN12QStylePlugin6createERK7QString'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylefactory.cpp' l='77' c='_ZN13QStyleFactory6createERK7QString'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/widgets/styles/qstyleplugin.cpp' l='9'>/*!
    \class QStylePlugin
    \brief The QStylePlugin class provides an abstract base for custom QStyle plugins.

    \ingroup plugins
    \inmodule QtWidgets

    QStylePlugin is a simple plugin interface that makes it easy
    to create custom styles that can be loaded dynamically into
    applications using the QStyleFactory class.

    Writing a style plugin is achieved by subclassing this base class,
    reimplementing the pure virtual create() function, and
    exporting the class using the Q_PLUGIN_METADATA() macro.

    \snippet qstyleplugin/main.cpp 0

    The json metadata file \c mystyleplugin.json for the plugin needs
    to contain information about the names of the styles the plugins
    supports as follows:

    \quotefile qstyleplugin/mystyleplugin.json

    See \l {How to Create Qt Plugins} for details.

    \sa QStyleFactory, QStyle
*/</doc>
<fun r='_ZN12QStylePluginC1EP7QObject'/>
<fun r='_ZN12QStylePluginD1Ev'/>
