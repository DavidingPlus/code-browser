<dec f='qtbase-6.5.0/src/corelib/io/qprocess.h' l='208' type='static bool QProcess::startDetached(const QString &amp; program, const QStringList &amp; arguments = {}, const QString &amp; workingDirectory = QString(), qint64 * pid = nullptr)'/>
<def f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='2429' ll='2439' type='static bool QProcess::startDetached(const QString &amp; program, const QStringList &amp; arguments = {}, const QString &amp; workingDirectory = QString(), qint64 * pid = nullptr)'/>
<doc f='qtbase-6.5.0/src/corelib/io/qprocess.cpp' l='2410'>/*!
    \overload startDetached()

    Starts the program \a program with the arguments \a arguments in a
    new process, and detaches from it. Returns \c true on success;
    otherwise returns \c false. If the calling process exits, the
    detached process will continue to run unaffected.

    Argument handling is identical to the respective start() overload.

    The process will be started in the directory \a workingDirectory.
    If \a workingDirectory is empty, the working directory is inherited
    from the calling process.

    If the function is successful then *\a pid is set to the process
    identifier of the started process.

    \sa start()
*/</doc>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixservices.cpp' l='151' u='c' c='_ZL6launchRK7QStringRK4QUrlS1_'/>
