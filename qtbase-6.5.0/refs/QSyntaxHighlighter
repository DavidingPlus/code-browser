<use f='qtbase-6.5.0/src/gui/text/qtextobject.h' l='158'/>
<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.h' l='24' ll='61'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.h' l='58' c='_ZN18QSyntaxHighlighterC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.h' l='58' c='_ZN18QSyntaxHighlighteraSERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.h' l='58' c='_ZN18QSyntaxHighlighteraSERKS_'/>
<size>16</size>
<smbr r='QSyntaxHighlighter::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK18QSyntaxHighlighter10metaObjectEv'/>
<fun r='_ZN18QSyntaxHighlighter11qt_metacastEPKc'/>
<fun r='_ZN18QSyntaxHighlighter11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QSyntaxHighlighter2trEPKcS1_i'/>
<fun r='_ZN18QSyntaxHighlighter18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN18QSyntaxHighlighter6d_funcEv'/>
<fun r='_ZNK18QSyntaxHighlighter6d_funcEv'/>
<fun r='_ZN18QSyntaxHighlighterC1EP7QObject'/>
<fun r='_ZN18QSyntaxHighlighterC1EP13QTextDocument'/>
<fun r='_ZN18QSyntaxHighlighterD1Ev'/>
<fun r='_ZN18QSyntaxHighlighter11setDocumentEP13QTextDocument'/>
<fun r='_ZNK18QSyntaxHighlighter8documentEv'/>
<fun r='_ZN18QSyntaxHighlighter11rehighlightEv'/>
<fun r='_ZN18QSyntaxHighlighter16rehighlightBlockERK10QTextBlock'/>
<fun r='_ZN18QSyntaxHighlighter14highlightBlockERK7QString'/>
<fun r='_ZN18QSyntaxHighlighter9setFormatEiiRK15QTextCharFormat'/>
<fun r='_ZN18QSyntaxHighlighter9setFormatEiiRK6QColor'/>
<fun r='_ZN18QSyntaxHighlighter9setFormatEiiRK5QFont'/>
<fun r='_ZNK18QSyntaxHighlighter6formatEi'/>
<fun r='_ZNK18QSyntaxHighlighter18previousBlockStateEv'/>
<fun r='_ZNK18QSyntaxHighlighter17currentBlockStateEv'/>
<fun r='_ZN18QSyntaxHighlighter20setCurrentBlockStateEi'/>
<fun r='_ZN18QSyntaxHighlighter23setCurrentBlockUserDataEP18QTextBlockUserData'/>
<fun r='_ZNK18QSyntaxHighlighter20currentBlockUserDataEv'/>
<fun r='_ZNK18QSyntaxHighlighter12currentBlockEv'/>
<fun r='_ZN18QSyntaxHighlighterC1ERKS_'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='24' c='_ZN25QSyntaxHighlighterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='24' c='_ZN25QSyntaxHighlighterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='24' c='_ZNK25QSyntaxHighlighterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='24' c='_ZNK25QSyntaxHighlighterPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='24'/>
<use f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='155' c='_ZN25QSyntaxHighlighterPrivate13reformatBlockERK10QTextBlock'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/gui/text/qsyntaxhighlighter.cpp' l='168'>/*!
    \class QSyntaxHighlighter
    \reentrant
    \inmodule QtGui

    \brief The QSyntaxHighlighter class allows you to define syntax
    highlighting rules, and in addition you can use the class to query
    a document&apos;s current formatting or user data.

    \since 4.1

    \ingroup richtext-processing

    The QSyntaxHighlighter class is a base class for implementing
    QTextDocument syntax highlighters.  A syntax highligher automatically
    highlights parts of the text in a QTextDocument. Syntax highlighters are
    often used when the user is entering text in a specific format (for example source code)
    and help the user to read the text and identify syntax errors.

    To provide your own syntax highlighting, you must subclass
    QSyntaxHighlighter and reimplement highlightBlock().

    When you create an instance of your QSyntaxHighlighter subclass,
    pass it the QTextDocument that you want the syntax
    highlighting to be applied to. For example:

    \snippet code/src_gui_text_qsyntaxhighlighter.cpp 0

    After this your highlightBlock() function will be called
    automatically whenever necessary. Use your highlightBlock()
    function to apply formatting (e.g. setting the font and color) to
    the text that is passed to it. QSyntaxHighlighter provides the
    setFormat() function which applies a given QTextCharFormat on
    the current text block. For example:

    \snippet code/src_gui_text_qsyntaxhighlighter.cpp 1

    \target QSyntaxHighlighter multiblock

    Some syntaxes can have constructs that span several text
    blocks. For example, a C++ syntax highlighter should be able to
    cope with \c{/}\c{*...*}\c{/} multiline comments. To deal with
    these cases it is necessary to know the end state of the previous
    text block (e.g. &quot;in comment&quot;).

    Inside your highlightBlock() implementation you can query the end
    state of the previous text block using the previousBlockState()
    function. After parsing the block you can save the last state
    using setCurrentBlockState().

    The currentBlockState() and previousBlockState() functions return
    an int value. If no state is set, the returned value is -1. You
    can designate any other value to identify any given state using
    the setCurrentBlockState() function. Once the state is set the
    QTextBlock keeps that value until it is set set again or until the
    corresponding paragraph of text is deleted.

    For example, if you&apos;re writing a simple C++ syntax highlighter,
    you might designate 1 to signify &quot;in comment&quot;:

    \snippet code/src_gui_text_qsyntaxhighlighter.cpp 2

    In the example above, we first set the current block state to
    0. Then, if the previous block ended within a comment, we highlight
    from the beginning of the current block (\c {startIndex =
    0}). Otherwise, we search for the given start expression. If the
    specified end expression cannot be found in the text block, we
    change the current block state by calling setCurrentBlockState(),
    and make sure that the rest of the block is highlighted.

    In addition you can query the current formatting and user data
    using the format() and currentBlockUserData() functions
    respectively. You can also attach user data to the current text
    block using the setCurrentBlockUserData() function.
    QTextBlockUserData can be used to store custom settings. In the
    case of syntax highlighting, it is in particular interesting as
    cache storage for information that you may figure out while
    parsing the paragraph&apos;s text. For an example, see the
    setCurrentBlockUserData() documentation.

    \sa QTextDocument, {Syntax Highlighter Example}
*/</doc>
<fun r='_ZN18QSyntaxHighlighterC1EP7QObject'/>
<fun r='_ZN18QSyntaxHighlighterC1EP13QTextDocument'/>
<fun r='_ZN18QSyntaxHighlighterD1Ev'/>
<fun r='_ZN18QSyntaxHighlighter11setDocumentEP13QTextDocument'/>
<fun r='_ZNK18QSyntaxHighlighter8documentEv'/>
<fun r='_ZN18QSyntaxHighlighter11rehighlightEv'/>
<fun r='_ZN18QSyntaxHighlighter16rehighlightBlockERK10QTextBlock'/>
<fun r='_ZN18QSyntaxHighlighter9setFormatEiiRK15QTextCharFormat'/>
<fun r='_ZN18QSyntaxHighlighter9setFormatEiiRK6QColor'/>
<fun r='_ZN18QSyntaxHighlighter9setFormatEiiRK5QFont'/>
<fun r='_ZNK18QSyntaxHighlighter6formatEi'/>
<fun r='_ZNK18QSyntaxHighlighter18previousBlockStateEv'/>
<fun r='_ZNK18QSyntaxHighlighter17currentBlockStateEv'/>
<fun r='_ZN18QSyntaxHighlighter20setCurrentBlockStateEi'/>
<fun r='_ZN18QSyntaxHighlighter23setCurrentBlockUserDataEP18QTextBlockUserData'/>
<fun r='_ZNK18QSyntaxHighlighter20currentBlockUserDataEv'/>
<fun r='_ZNK18QSyntaxHighlighter12currentBlockEv'/>
