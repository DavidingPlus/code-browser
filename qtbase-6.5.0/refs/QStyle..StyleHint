<def f='qtbase-6.5.0/src/widgets/styles/qstyle.h' l='582' ll='708'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstyle.h' l='709' c='_Z20qt_getEnumMetaObjectN6QStyle9StyleHintE'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstyle.h' l='709' c='_Z14qt_getEnumNameN6QStyle9StyleHintE'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstyle.h' l='711' c='_ZNK6QStyle9styleHintENS_9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qcommonstyle.h' l='38' c='_ZNK12QCommonStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qproxystyle.h' l='43' c='_ZNK11QProxyStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qwindowsstyle_p.h' l='55' c='_ZNK13QWindowsStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle_p.h' l='78' c='_ZNK16QStyleSheetStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qcommonstyle.cpp' l='5049' c='_ZNK12QCommonStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qfusionstyle_p.h' l='54' c='_ZNK12QFusionStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qfusionstyle.cpp' l='3613' c='_ZNK12QFusionStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qpixmapstyle_p.h' l='125' c='_ZNK12QPixmapStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qpixmapstyle.cpp' l='481' c='_ZNK12QPixmapStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qproxystyle.cpp' l='259' c='_ZNK11QProxyStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<doc f='qtbase-6.5.0/src/widgets/styles/qstyle.cpp' l='1622'>/*!
    \enum QStyle::StyleHint

    This enum describes the available style hints. A style hint is a general look
    and/or feel hint.

    \value SH_EtchDisabledText Disabled text is &quot;etched&quot; as it is on Windows.

    \value SH_DitherDisabledText Disabled text is dithered as it is on Motif.

    \value SH_ScrollBar_ContextMenu Whether or not a scroll bar has a context menu.

    \value SH_ScrollBar_MiddleClickAbsolutePosition  A boolean value.
        If true, middle clicking on a scroll bar causes the slider to
        jump to that position. If false, middle clicking is
        ignored.

    \value SH_ScrollBar_LeftClickAbsolutePosition  A boolean value.
        If true, left clicking on a scroll bar causes the slider to
        jump to that position. If false, left clicking will
        behave as appropriate for each control.

    \value SH_ScrollBar_ScrollWhenPointerLeavesControl  A boolean
        value. If true, when clicking a scroll bar SubControl, holding
        the mouse button down and moving the pointer outside the
        SubControl, the scroll bar continues to scroll. If false, the
        scollbar stops scrolling when the pointer leaves the
        SubControl.

    \value SH_ScrollBar_RollBetweenButtons A boolean value.
        If true, when clicking a scroll bar button (SC_ScrollBarAddLine or
        SC_ScrollBarSubLine) and dragging over to the opposite button (rolling)
        will press the new button and release the old one. When it is false, the
        original button is released and nothing happens (like a push button).

    \value SH_TabBar_Alignment  The alignment for tabs in a
        QTabWidget. Possible values are Qt::AlignLeft,
        Qt::AlignCenter and Qt::AlignRight.

    \value SH_Header_ArrowAlignment The placement of the sorting
        indicator may appear in list or table headers. Possible values
        are Qt::Alignment values (that is, an OR combination of
        Qt::AlignmentFlag flags).

    \value SH_Slider_SnapToValue  Sliders snap to values while moving,
        as they do on Windows.

    \value SH_Slider_SloppyKeyEvents  Key presses handled in a sloppy
        manner, i.e., left on a vertical slider subtracts a line.

    \value SH_ProgressDialog_CenterCancelButton  Center button on
        progress dialogs, otherwise right aligned.

    \value SH_ProgressDialog_TextLabelAlignment The alignment for text
    labels in progress dialogs; Qt::AlignCenter on Windows,
    Qt::AlignVCenter otherwise.

    \value SH_PrintDialog_RightAlignButtons  Right align buttons in
        the print dialog, as done on Windows.

    \value SH_MainWindow_SpaceBelowMenuBar One or two pixel space between
        the menu bar and the dockarea, as done on Windows.

    \value SH_FontDialog_SelectAssociatedText Select the text in the
        line edit, or when selecting an item from the listbox, or when
        the line edit receives focus, as done on Windows.

    \value SH_Menu_KeyboardSearch Typing causes a menu to be search
        for relevant items, otherwise only mnemonic is considered.

    \value SH_Menu_AllowActiveAndDisabled  Allows disabled menu
        items to be active.

    \value SH_Menu_SpaceActivatesItem  Pressing the space bar activates
        the item, as done on Motif.

    \value SH_Menu_SubMenuPopupDelay  The number of milliseconds
        to wait before opening a submenu (256 on Windows, 96 on Motif).

    \value SH_Menu_Scrollable Whether popup menus must support scrolling.

    \value SH_Menu_SloppySubMenus  Whether popup menus must support
        the user moving the mouse cursor to a submenu while crossing
        other items of the menu. This is supported on most modern
        desktop platforms.

    \value SH_Menu_SubMenuUniDirection Since Qt 5.5. If the cursor has
        to move towards the submenu (like it is on \macos), or if the
        cursor can move in any direction as long as it reaches the
        submenu before the sloppy timeout.

    \value SH_Menu_SubMenuUniDirectionFailCount Since Qt 5.5.  When
        SH_Menu_SubMenuUniDirection is defined this enum defines the
        number of failed mouse moves before the sloppy submenu is
        discarded.  This can be used to control the &quot;strictness&quot; of the
        uni direction algorithm.

    \value SH_Menu_SubMenuSloppySelectOtherActions Since Qt 5.5. Should
        other action items be selected when the mouse moves towards a
        sloppy submenu.

    \value SH_Menu_SubMenuSloppyCloseTimeout Since Qt 5.5. The timeout
        used to close sloppy submenus.

    \value SH_Menu_SubMenuResetWhenReenteringParent Since Qt 5.5. When
        entering parent from child submenu, should the sloppy state be
        reset, effectively closing the child and making the current
        submenu active.

    \value SH_Menu_SubMenuDontStartSloppyOnLeave Since Qt 5.5. Do not
        start sloppy timers when the mouse leaves a sub-menu.

    \value SH_ScrollView_FrameOnlyAroundContents  Whether scrollviews
        draw their frame only around contents (like Motif), or around
        contents, scroll bars and corner widgets (like Windows).

    \value SH_MenuBar_AltKeyNavigation  Menu bars items are navigable
        by pressing Alt, followed by using the arrow keys to select
        the desired item.

    \value SH_ComboBox_ListMouseTracking  Mouse tracking in combobox
        drop-down lists.

    \value SH_Menu_MouseTracking  Mouse tracking in popup menus.

    \value SH_MenuBar_MouseTracking  Mouse tracking in menu bars.

    \value SH_Menu_FillScreenWithScroll Whether scrolling popups
       should fill the screen as they are scrolled.

    \value SH_Menu_SelectionWrap Whether popups should allow the selections
        to wrap, that is when selection should the next item be the first item.

    \value SH_ItemView_ChangeHighlightOnFocus  Gray out selected items
        when losing focus.

    \value SH_Widget_ShareActivation  Turn on sharing activation with
        floating modeless dialogs.

    \value SH_TabBar_SelectMouseType  Which type of mouse event should
        cause a tab to be selected.

    \value SH_ListViewExpand_SelectMouseType  Which type of mouse event should
        cause a list view expansion to be selected.

    \value SH_TabBar_PreferNoArrows  Whether a tab bar should suggest a size
        to prevent scroll arrows.

    \value SH_ComboBox_Popup  Allows popups as a combobox drop-down
        menu.

    \omitvalue SH_ComboBox_UseNativePopup

    \value SH_Workspace_FillSpaceOnMaximize  The workspace should
        maximize the client area.

    \value SH_TitleBar_NoBorder  The title bar has no border.

    \value SH_Slider_StopMouseOverSlider  Stops auto-repeat when
        the slider reaches the mouse position.

    \value SH_BlinkCursorWhenTextSelected  Whether cursor should blink
        when text is selected.

    \value SH_RichText_FullWidthSelection  Whether richtext selections
        should extend to the full width of the document.

    \value SH_GroupBox_TextLabelVerticalAlignment  How to vertically align a
        group box&apos;s text label.

    \value SH_GroupBox_TextLabelColor  How to paint a group box&apos;s text label.

    \value SH_DialogButtons_DefaultButton  Which button gets the
        default status in a dialog&apos;s button widget.

    \value SH_ToolBox_SelectedPageTitleBold  Boldness of the selected
    page title in a QToolBox.

    \value SH_LineEdit_PasswordCharacter  The Unicode character to be
    used for passwords.

    \value SH_LineEdit_PasswordMaskDelay  Determines the delay before visible character is masked
    with password character, in milliseconds. This enum value was added in Qt 5.4.

    \value SH_Table_GridLineColor The RGBA value of the grid for a table.

    \value SH_UnderlineShortcut  Whether shortcuts are underlined.

    \value SH_SpinBox_AnimateButton  Animate a click when up or down is
    pressed in a spin box.
    \value SH_SpinBox_KeyPressAutoRepeatRate  Auto-repeat interval for
    spinbox key presses.
    \value SH_SpinBox_ClickAutoRepeatRate  Auto-repeat interval for
    spinbox mouse clicks.
    \value SH_SpinBox_ClickAutoRepeatThreshold  Auto-repeat threshold for
    spinbox mouse clicks.
    \value [since 6.3] SH_SpinBox_SelectOnStep  Whether changing the value using
    the buttons or up/down keys automatically selects the text.

    \value SH_ToolTipLabel_Opacity  An integer indicating the opacity for
    the tip label, 0 is completely transparent, 255 is completely
    opaque.
    \value SH_DrawMenuBarSeparator  Indicates whether or not the menu bar draws separators.
    \value SH_TitleBar_ModifyNotification  Indicates if the title bar should show
    a &apos;*&apos; for windows that are modified.

    \value SH_Button_FocusPolicy The default focus policy for buttons.

    \value SH_CustomBase  Base value for custom style hints.
    Custom values must be greater than this value.

    \value SH_MessageBox_UseBorderForButtonSpacing A boolean indicating what the to
    use the border of the buttons (computed as half the button height) for the spacing
    of the button in a message box.

    \value SH_MessageBox_CenterButtons A boolean indicating whether the buttons in the
    message box should be centered or not (see QDialogButtonBox::setCentered()).

    \value SH_MessageBox_TextInteractionFlags A boolean indicating if
    the text in a message box should allow user interfactions (e.g.
    selection) or not.

    \value SH_TitleBar_AutoRaise A boolean indicating whether
    controls on a title bar ought to update when the mouse is over them.

    \value SH_ToolButton_PopupDelay An int indicating the popup delay in milliseconds
    for menus attached to tool buttons.

    \value SH_FocusFrame_Mask The mask of the focus frame.

    \value SH_RubberBand_Mask The mask of the rubber band.

    \value SH_WindowFrame_Mask The mask of the window frame.

    \value SH_SpinControls_DisableOnBounds Determines if the spin controls will shown
    as disabled when reaching the spin range boundary.

    \value SH_Dial_BackgroundRole Defines the style&apos;s preferred
    background role (as QPalette::ColorRole) for a dial widget.

    \value SH_ComboBox_LayoutDirection The layout direction for the
    combo box.  By default it should be the same as indicated by the
    QStyleOption::direction variable.

    \value SH_ItemView_EllipsisLocation The location where ellipses should be
    added for item text that is too long to fit in an view item.

    \value SH_ItemView_ShowDecorationSelected When an item in an item
    view is selected, also highlight the branch or other decoration.

    \value SH_ItemView_ActivateItemOnSingleClick Emit the activated signal
    when the user single clicks on an item in an item in an item view.
    Otherwise the signal is emitted when the user double clicks on an item.

    \value SH_Slider_AbsoluteSetButtons Which mouse buttons cause a slider
    to set the value to the position clicked on.

    \value SH_Slider_PageSetButtons Which mouse buttons cause a slider
    to page step the value.

    \value SH_TabBar_ElideMode The default eliding style for a tab bar.

    \value SH_DialogButtonLayout  Controls how buttons are laid out in a QDialogButtonBox, returns a QDialogButtonBox::ButtonLayout enum.

    \value SH_WizardStyle Controls the look and feel of a QWizard. Returns a QWizard::WizardStyle enum.

    \value SH_FormLayoutWrapPolicy Provides a default for how rows are wrapped in a QFormLayout. Returns a QFormLayout::RowWrapPolicy enum.
    \value SH_FormLayoutFieldGrowthPolicy Provides a default for how fields can grow in a QFormLayout. Returns a QFormLayout::FieldGrowthPolicy enum.
    \value SH_FormLayoutFormAlignment Provides a default for how a QFormLayout aligns its contents within the available space. Returns a Qt::Alignment enum.
    \value SH_FormLayoutLabelAlignment Provides a default for how a QFormLayout aligns labels within the available space. Returns a Qt::Alignment enum.

    \value SH_ItemView_ArrowKeysNavigateIntoChildren Controls whether the tree view will select the first child when it is exapanded and the right arrow key is pressed.
    \value SH_ComboBox_PopupFrameStyle  The frame style used when drawing a combobox popup menu.

    \value SH_DialogButtonBox_ButtonsHaveIcons Indicates whether or not StandardButtons in QDialogButtonBox should have icons or not.
    \value SH_ItemView_MovementWithoutUpdatingSelection The item view is able to indicate a current item without changing the selection.
    \value SH_ToolTip_Mask The mask of a tool tip.

    \value SH_FocusFrame_AboveWidget The FocusFrame is stacked above the widget that it is &quot;focusing on&quot;.

    \value SH_TextControl_FocusIndicatorTextCharFormat Specifies the text format used to highlight focused anchors in rich text
    documents displayed for example in QTextBrowser. The format has to be a QTextCharFormat returned in the variant of the
    QStyleHintReturnVariant return value. The QTextFormat::OutlinePen property is used for the outline and QTextFormat::BackgroundBrush
    for the background of the highlighted area.

    \value SH_Menu_FlashTriggeredItem Flash triggered item.
    \value SH_Menu_FadeOutOnHide Fade out the menu instead of hiding it immediately.

    \value SH_TabWidget_DefaultTabPosition Default position of the tab bar in a tab widget.

    \value SH_ToolBar_Movable Determines if the tool bar is movable by default.

    \value SH_ItemView_PaintAlternatingRowColorsForEmptyArea Whether QTreeView paints alternating row colors for the area that does not have any items.

    \value SH_Menu_Mask The mask for a popup menu.

    \value SH_ItemView_DrawDelegateFrame Determines if there should be a frame for a delegate widget.

    \value SH_TabBar_CloseButtonPosition Determines the position of the close button on a tab in a tab bar.

    \value SH_DockWidget_ButtonsHaveFrame Determines if dockwidget buttons should have frames. Default is true.

    \value SH_ToolButtonStyle Determines the default system style for tool buttons that uses Qt::ToolButtonFollowStyle.

    \value SH_RequestSoftwareInputPanel Determines when a software input panel should
           be requested by input widgets. Returns an enum of type QStyle::RequestSoftwareInputPanel.

    \value SH_ScrollBar_Transient Determines if the style supports transient scroll bars. Transient
           scroll bars appear when the content is scrolled and disappear when they are no longer needed.

    \value SH_Menu_SupportsSections Determines if the style displays sections in menus or treat them as
           plain separators. Sections are separators with a text and icon hint.

    \value SH_ToolTip_WakeUpDelay Determines the delay before a tooltip is shown, in milliseconds.

    \value SH_ToolTip_FallAsleepDelay Determines the delay (in milliseconds) before a new wake time is needed when
           a tooltip is shown (notice: shown, not hidden). When a new wake isn&apos;t needed, a user-requested tooltip
           will be shown nearly instantly.

    \value SH_Widget_Animate Deprecated. Use \l{SH_Widget_Animation_Duration} instead.

    \value SH_Splitter_OpaqueResize Determines if widgets are resized dynamically (opaquely) while
           interactively moving the splitter. This enum value was introduced in Qt 5.2.

    \value SH_TabBar_ChangeCurrentDelay Determines the delay before the current
           tab is changed while dragging over the tabbar, in milliseconds. This
           enum value has been introduced in Qt 5.4

    \value SH_ItemView_ScrollMode The default vertical and horizontal scroll mode as specified
           by the style. Can be overridden with QAbstractItemView::setVerticalScrollMode() and
           QAbstractItemView::setHorizontalScrollMode(). This enum value has been introduced in Qt 5.7.

    \value SH_TitleBar_ShowToolTipsOnButtons
           Determines if tool tips are shown on window title bar buttons.
           The Mac style, for example, sets this to false.
           This enum value has been introduced in Qt 5.10.

    \value SH_Widget_Animation_Duration
           Determines how much an animation should last (in ms).
           A value equal to zero means that the animations will be disabled.
           This enum value has been introduced in Qt 5.10.

    \value SH_ComboBox_AllowWheelScrolling
           Determines if the mouse wheel can be used to scroll inside a QComboBox.
           This is on by default in all styles except the Mac style.
           This enum value has been introduced in Qt 5.10.

    \value SH_SpinBox_ButtonsInsideFrame
           Determines if the spin box buttons are inside the line edit frame.
           This enum value has been introduced in Qt 5.11.

    \value SH_SpinBox_StepModifier
           Determines which Qt::KeyboardModifier increases the step rate of
           QAbstractSpinBox. Possible values are Qt::NoModifier,
           Qt::ControlModifier (default) or Qt::ShiftModifier. Qt::NoModifier
           disables this feature.
           This enum value has been introduced in Qt 5.12.

    \value SH_TabBar_AllowWheelScrolling
           Determines if the mouse wheel can be used to cycle through the tabs
           of a QTabBar.
           This enum value has been introduced in Qt 6.1.

    \value SH_Table_AlwaysDrawLeftTopGridLines
           Determines if the far left and top grid lines are drawn in a table or
           not when the header is hidden. Defaults to false.
           This enum value has been introduced in Qt 6.3.

    \sa styleHint()
*/</doc>
<use f='qtbase-6.5.0/src/widgets/styles/qstylesheetstyle.cpp' l='5617' c='_ZNK16QStyleSheetStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
<use f='qtbase-6.5.0/src/widgets/styles/qwindowsstyle.cpp' l='496' c='_ZNK13QWindowsStyle9styleHintEN6QStyle9StyleHintEPK12QStyleOptionPK7QWidgetP16QStyleHintReturn'/>
