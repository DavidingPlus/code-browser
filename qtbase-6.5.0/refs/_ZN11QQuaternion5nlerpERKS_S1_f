<dec f='qtbase-6.5.0/src/gui/math3d/qquaternion.h' l='129' type='static QQuaternion QQuaternion::nlerp(const QQuaternion &amp; q1, const QQuaternion &amp; q2, float t)'/>
<def f='qtbase-6.5.0/src/gui/math3d/qquaternion.cpp' l='908' ll='925' type='static QQuaternion QQuaternion::nlerp(const QQuaternion &amp; q1, const QQuaternion &amp; q2, float t)'/>
<doc f='qtbase-6.5.0/src/gui/math3d/qquaternion.cpp' l='893'>/*!
    Interpolates along the shortest linear path between the rotational
    positions \a q1 and \a q2.  The value \a t should be between 0 and 1,
    indicating the distance to travel between \a q1 and \a q2.
    The result will be normalized().

    If \a t is less than or equal to 0, then \a q1 will be returned.
    If \a t is greater than or equal to 1, then \a q2 will be returned.

    The nlerp() function is typically faster than slerp() and will
    give approximate results to spherical interpolation that are
    good enough for some applications.

    \sa slerp()
*/</doc>
