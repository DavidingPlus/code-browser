<dec f='qtbase-6.5.0/src/gui/util/qvalidator.h' l='107' type='void QDoubleValidator::fixup(QString &amp; input) const'/>
<inh f='qtbase-6.5.0/src/gui/util/qvalidator.cpp' l='250' c='_ZNK10QValidator5fixupER7QString'/>
<def f='qtbase-6.5.0/src/gui/util/qvalidator.cpp' l='727' ll='734' type='void QDoubleValidator::fixup(QString &amp; input) const'/>
<doc f='qtbase-6.5.0/src/gui/util/qvalidator.cpp' l='697'>/*!
    \since 6.3
    \overload

    Attempts to fix the \a input string to an \l Acceptable representation of a
    double.

    The format of the number is determined by \l notation(), \l decimals(),
    \l locale() and the latter&apos;s \l {QLocale::}{numberOptions()}.

    To comply with \l notation(), when \l ScientificNotation is used, the fixed
    value will be represented in its normalized form, which means that any
    non-zero value will have one non-zero digit before the decimal point.

    \snippet code/src_gui_util_qvalidator.cpp 7

    To comply with \l decimals(), when it is \c {-1} the number of digits used
    will be determined by \l QLocale::FloatingPointShortest. Otherwise, the
    fractional part of the number is truncated (with rounding, as appropriate)
    if its length exceeds \l decimals(). When \l notation() is
    \l ScientificNotation this is done after the number has been put into its
    normalized form.

    \snippet code/src_gui_util_qvalidator.cpp 8

    \note If \l decimals() is set to, and the string provides, more than
    \c {std::numeric_limits&lt;double&gt;::digits10}, digits beyond that many in the
    fractional part may be changed. The resulting string shall encode the same
    floating-point number, when parsed to a \c double.
*/</doc>
