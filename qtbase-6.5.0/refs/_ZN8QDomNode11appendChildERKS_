<dec f='qtbase-6.5.0/src/xml/dom/qdom.h' l='124' type='QDomNode QDomNode::appendChild(const QDomNode &amp; newChild)'/>
<use f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='525' u='c' c='_ZN18QDomImplementation14createDocumentERK7QStringS2_RK16QDomDocumentType'/>
<def f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='2065' ll='2072' type='QDomNode QDomNode::appendChild(const QDomNode &amp; newChild)'/>
<doc f='qtbase-6.5.0/src/xml/dom/qdom.cpp' l='2041'>/*!
    Appends \a newChild as the node&apos;s last child.

    If \a newChild is the child of another node, it is reparented to
    this node. If \a newChild is a child of this node, then its
    position in the list of children is changed.

    If \a newChild is a QDomDocumentFragment, then the children of the
    fragment are removed from the fragment and appended.

    If \a newChild is a QDomElement and this node is a QDomDocument that
    already has an element node as a child, \a newChild is not added as
    a child and a null node is returned.

    Returns a new reference to \a newChild on success or a \l{isNull()}{null node} on failure.

    Calling this function on a null node(created, for example, with
    the default constructor) does nothing and returns a \l{isNull()}{null node}.

    The DOM specification disallow inserting attribute nodes, but for
    historical reasons, QDom accepts them anyway.

    \sa insertBefore(), insertAfter(), replaceChild(), removeChild()
*/</doc>
