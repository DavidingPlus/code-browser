<inh f='qtbase-6.5.0/src/corelib/kernel/qobject.h' l='89' c='QObject'/>
<def f='qtbase-6.5.0/src/corelib/io/qsettings.h' l='26' ll='185'/>
<use f='qtbase-6.5.0/src/corelib/io/qsettings.h' l='184' c='_ZN9QSettingsC1ERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qsettings.h' l='184' c='_ZN9QSettingsaSERKS_'/>
<use f='qtbase-6.5.0/src/corelib/io/qsettings.h' l='184' c='_ZN9QSettingsaSERKS_'/>
<size>16</size>
<smbr r='QSettings::staticMetaObject' t='const QMetaObject'/>
<fun r='_ZNK9QSettings10metaObjectEv'/>
<fun r='_ZN9QSettings11qt_metacastEPKc'/>
<fun r='_ZN9QSettings11qt_metacallEN11QMetaObject4CallEiPPv'/>
<fun r='_ZN9QSettings2trEPKcS1_i'/>
<fun r='_ZN9QSettings18qt_static_metacallEP7QObjectN11QMetaObject4CallEiPPv'/>
<fun r='_ZN9QSettings6d_funcEv'/>
<fun r='_ZNK9QSettings6d_funcEv'/>
<fun r='_ZN9QSettingsC1ERK7QStringS2_P7QObject'/>
<fun r='_ZN9QSettingsC1ENS_5ScopeERK7QStringS3_P7QObject'/>
<fun r='_ZN9QSettingsC1ENS_6FormatENS_5ScopeERK7QStringS4_P7QObject'/>
<fun r='_ZN9QSettingsC1ERK7QStringNS_6FormatEP7QObject'/>
<fun r='_ZN9QSettingsC1EP7QObject'/>
<fun r='_ZN9QSettingsC1ENS_5ScopeEP7QObject'/>
<fun r='_ZN9QSettingsD1Ev'/>
<fun r='_ZN9QSettings5clearEv'/>
<fun r='_ZN9QSettings4syncEv'/>
<fun r='_ZNK9QSettings6statusEv'/>
<fun r='_ZNK9QSettings20isAtomicSyncRequiredEv'/>
<fun r='_ZN9QSettings21setAtomicSyncRequiredEb'/>
<fun r='_ZN9QSettings10beginGroupE14QAnyStringView'/>
<fun r='_ZN9QSettings8endGroupEv'/>
<fun r='_ZNK9QSettings5groupEv'/>
<fun r='_ZN9QSettings14beginReadArrayE14QAnyStringView'/>
<fun r='_ZN9QSettings15beginWriteArrayE14QAnyStringViewi'/>
<fun r='_ZN9QSettings8endArrayEv'/>
<fun r='_ZN9QSettings13setArrayIndexEi'/>
<fun r='_ZNK9QSettings7allKeysEv'/>
<fun r='_ZNK9QSettings9childKeysEv'/>
<fun r='_ZNK9QSettings11childGroupsEv'/>
<fun r='_ZNK9QSettings10isWritableEv'/>
<fun r='_ZN9QSettings8setValueE14QAnyStringViewRK8QVariant'/>
<fun r='_ZNK9QSettings5valueE14QAnyStringViewRK8QVariant'/>
<fun r='_ZNK9QSettings5valueE14QAnyStringView'/>
<fun r='_ZN9QSettings6removeE14QAnyStringView'/>
<fun r='_ZNK9QSettings8containsE14QAnyStringView'/>
<fun r='_ZN9QSettings19setFallbacksEnabledEb'/>
<fun r='_ZNK9QSettings16fallbacksEnabledEv'/>
<fun r='_ZNK9QSettings8fileNameEv'/>
<fun r='_ZNK9QSettings6formatEv'/>
<fun r='_ZNK9QSettings5scopeEv'/>
<fun r='_ZNK9QSettings16organizationNameEv'/>
<fun r='_ZNK9QSettings15applicationNameEv'/>
<fun r='_ZN9QSettings16setDefaultFormatENS_6FormatE'/>
<fun r='_ZN9QSettings13defaultFormatEv'/>
<fun r='_ZN9QSettings7setPathENS_6FormatENS_5ScopeERK7QString'/>
<fun r='_ZN9QSettings14registerFormatERK7QStringPFbR9QIODeviceR4QMapIS0_8QVariantEEPFbS4_RKS7_EN2Qt15CaseSensitivityE'/>
<fun r='_ZN9QSettings5eventEP6QEvent'/>
<fun r='_ZN9QSettingsC1ERKS_'/>
<use f='qtbase-6.5.0/qmake/property.h' l='20'/>
<use f='qtbase-6.5.0/qmake/generators/mac/pbuilder_pbx.cpp' l='470' c='_ZL17provisioningTeamsv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo_p.h' l='33' c='_ZN19QLibraryInfoPrivate13configurationEv'/>
<size>16</size>
<use f='qtbase-6.5.0/qmake/property.cpp' l='93' c='_ZN13QMakeProperty12initSettingsEv'/>
<size>16</size>
<use f='qtbase-6.5.0/qmake/qmakelibraryinfo.cpp' l='33' c='_ZN20QMakeLibrarySettings4loadEv'/>
<use f='qtbase-6.5.0/qmake/qmakelibraryinfo.cpp' l='186' c='_ZN16QMakeLibraryInfo11rawLocationEiNS_9PathGroupE'/>
<use f='qtbase-6.5.0/qmake/qmakelibraryinfo.cpp' l='255' c='_ZN16QMakeLibraryInfo11rawLocationEiNS_9PathGroupE'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='41' c='_ZL17findConfigurationv'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='48' c='_ZN16QLibrarySettings13configurationEv'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='50'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='61' c='_ZN16QLibrarySettings13configurationEv'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='90' c='_ZL17findConfigurationv'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='93' c='_ZL17findConfigurationv'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='97' c='_ZL17findConfigurationv'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='117' c='_ZL17findConfigurationv'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='120' c='_ZL17findConfigurationv'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='127' c='_ZN19QLibraryInfoPrivate13configurationEv'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='532' c='_ZN19QLibraryInfoPrivate4pathEN12QLibraryInfo11LibraryPathENS_9UsageModeE'/>
<use f='qtbase-6.5.0/src/corelib/global/qlibraryinfo.cpp' l='618' c='_ZN12QLibraryInfo23platformPluginArgumentsERK7QString'/>
<size>16</size>
<use f='qtbase-6.5.0/src/corelib/io/qsettings_p.h' l='155' c='_ZN16QSettingsPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qsettings_p.h' l='155' c='_ZN16QSettingsPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qsettings_p.h' l='155' c='_ZNK16QSettingsPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qsettings_p.h' l='155' c='_ZNK16QSettingsPrivate6q_funcEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qsettings_p.h' l='155'/>
<use f='qtbase-6.5.0/src/corelib/io/qsettings.cpp' l='336' c='_ZN16QSettingsPrivate13requestUpdateEv'/>
<use f='qtbase-6.5.0/src/corelib/io/qsettings.cpp' l='2603' c='_ZN9QSettingsC1EP7QObject'/>
<size>16</size>
<doc f='qtbase-6.5.0/src/corelib/io/qsettings.cpp' l='1861'>/*!
    \class QSettings
    \inmodule QtCore
    \brief The QSettings class provides persistent platform-independent application settings.

    \ingroup io

    \reentrant

    Users normally expect an application to remember its settings
    (window sizes and positions, options, etc.) across sessions. This
    information is often stored in the system registry on Windows,
    and in property list files on \macos and iOS. On Unix systems, in the
    absence of a standard, many applications (including the KDE
    applications) use INI text files.

    QSettings is an abstraction around these technologies, enabling
    you to save and restore application settings in a portable
    manner. It also supports \l{registerFormat()}{custom storage
    formats}.

    QSettings&apos;s API is based on QVariant, allowing you to save
    most value-based types, such as QString, QRect, and QImage,
    with the minimum of effort.

    If all you need is a non-persistent memory-based structure,
    consider using QMap&lt;QString, QVariant&gt; instead.

    \tableofcontents section1

    \section1 Basic Usage

    When creating a QSettings object, you must pass the name of your
    company or organization as well as the name of your application.
    For example, if your product is called Star Runner and your
    company is called MySoft, you would construct the QSettings
    object as follows:

    \snippet settings/settings.cpp 0

    QSettings objects can be created either on the stack or on
    the heap (i.e. using \c new). Constructing and destroying a
    QSettings object is very fast.

    If you use QSettings from many places in your application, you
    might want to specify the organization name and the application
    name using QCoreApplication::setOrganizationName() and
    QCoreApplication::setApplicationName(), and then use the default
    QSettings constructor:

    \snippet settings/settings.cpp 1
    \snippet settings/settings.cpp 2
    \snippet settings/settings.cpp 3
    \dots
    \snippet settings/settings.cpp 4

    (Here, we also specify the organization&apos;s Internet domain. When
    the Internet domain is set, it is used on \macos and iOS instead of the
    organization name, since \macos and iOS applications conventionally use
    Internet domains to identify themselves. If no domain is set, a
    fake domain is derived from the organization name. See the
    \l{Platform-Specific Notes} below for details.)

    QSettings stores settings. Each setting consists of a QString
    that specifies the setting&apos;s name (the \e key) and a QVariant
    that stores the data associated with the key. To write a setting,
    use setValue(). For example:

    \snippet settings/settings.cpp 5

    If there already exists a setting with the same key, the existing
    value is overwritten by the new value. For efficiency, the
    changes may not be saved to permanent storage immediately. (You
    can always call sync() to commit your changes.)

    You can get a setting&apos;s value back using value():

    \snippet settings/settings.cpp 6

    If there is no setting with the specified name, QSettings
    returns a null QVariant (which can be converted to the integer 0).
    You can specify another default value by passing a second
    argument to value():

    \snippet settings/settings.cpp 7

    To test whether a given key exists, call contains(). To remove
    the setting associated with a key, call remove(). To obtain the
    list of all keys, call allKeys(). To remove all keys, call
    clear().

    \section1 QVariant and GUI Types

    Because QVariant is part of the Qt Core module, it cannot provide
    conversion functions to data types such as QColor, QImage, and
    QPixmap, which are part of Qt GUI. In other words, there is no
    \c toColor(), \c toImage(), or \c toPixmap() functions in QVariant.

    Instead, you can use the QVariant::value() template function.
    For example:

    \snippet code/src_corelib_io_qsettings.cpp 0

    The inverse conversion (e.g., from QColor to QVariant) is
    automatic for all data types supported by QVariant, including
    GUI-related types:

    \snippet code/src_corelib_io_qsettings.cpp 1

    Custom types registered using qRegisterMetaType() that have
    operators for streaming to and from a QDataStream can be stored
    using QSettings.

    \section1 Section and Key Syntax

    Setting keys can contain any Unicode characters. The Windows
    registry and INI files use case-insensitive keys, whereas the
    CFPreferences API on \macos and iOS uses case-sensitive keys. To
    avoid portability problems, follow these simple rules:

    \list 1
    \li Always refer to the same key using the same case. For example,
       if you refer to a key as &quot;text fonts&quot; in one place in your
       code, don&apos;t refer to it as &quot;Text Fonts&quot; somewhere else.

    \li Avoid key names that are identical except for the case. For
       example, if you have a key called &quot;MainWindow&quot;, don&apos;t try to
       save another key as &quot;mainwindow&quot;.

    \li Do not use slashes (&apos;/&apos; and &apos;\\&apos;) in section or key names; the
       backslash character is used to separate sub keys (see below). On
       windows &apos;\\&apos; are converted by QSettings to &apos;/&apos;, which makes
       them identical.
    \endlist

    You can form hierarchical keys using the &apos;/&apos; character as a
    separator, similar to Unix file paths. For example:

    \snippet settings/settings.cpp 8
    \snippet settings/settings.cpp 9
    \snippet settings/settings.cpp 10

    If you want to save or restore many settings with the same
    prefix, you can specify the prefix using beginGroup() and call
    endGroup() at the end. Here&apos;s the same example again, but this
    time using the group mechanism:

    \snippet settings/settings.cpp 11
    \codeline
    \snippet settings/settings.cpp 12

    If a group is set using beginGroup(), the behavior of most
    functions changes consequently. Groups can be set recursively.

    In addition to groups, QSettings also supports an &quot;array&quot;
    concept. See beginReadArray() and beginWriteArray() for details.

    \section1 Fallback Mechanism

    Let&apos;s assume that you have created a QSettings object with the
    organization name MySoft and the application name Star Runner.
    When you look up a value, up to four locations are searched in
    that order:

    \list 1
    \li a user-specific location for the Star Runner application
    \li a user-specific location for all applications by MySoft
    \li a system-wide location for the Star Runner application
    \li a system-wide location for all applications by MySoft
    \endlist

    (See \l{Platform-Specific Notes} below for information on what
    these locations are on the different platforms supported by Qt.)

    If a key cannot be found in the first location, the search goes
    on in the second location, and so on. This enables you to store
    system-wide or organization-wide settings and to override them on
    a per-user or per-application basis. To turn off this mechanism,
    call setFallbacksEnabled(false).

    Although keys from all four locations are available for reading,
    only the first file (the user-specific location for the
    application at hand) is accessible for writing. To write to any
    of the other files, omit the application name and/or specify
    QSettings::SystemScope (as opposed to QSettings::UserScope, the
    default).

    Let&apos;s see with an example:

    \snippet settings/settings.cpp 13
    \snippet settings/settings.cpp 14

    The table below summarizes which QSettings objects access
    which location. &quot;\b{X}&quot; means that the location is the main
    location associated to the QSettings object and is used both
    for reading and for writing; &quot;o&quot; means that the location is used
    as a fallback when reading.

    \table
    \header \li Locations               \li \c{obj1} \li \c{obj2} \li \c{obj3} \li \c{obj4}
    \row    \li 1. User, Application    \li \b{X} \li          \li          \li
    \row    \li 2. User, Organization   \li o        \li \b{X} \li          \li
    \row    \li 3. System, Application  \li o        \li          \li \b{X} \li
    \row    \li 4. System, Organization \li o        \li o        \li o        \li \b{X}
    \endtable

    The beauty of this mechanism is that it works on all platforms
    supported by Qt and that it still gives you a lot of flexibility,
    without requiring you to specify any file names or registry
    paths.

    If you want to use INI files on all platforms instead of the
    native API, you can pass QSettings::IniFormat as the first
    argument to the QSettings constructor, followed by the scope, the
    organization name, and the application name:

    \snippet settings/settings.cpp 15

    Note that INI files lose the distinction between numeric data and the
    strings used to encode them, so values written as numbers shall be read back
    as QString. The numeric value can be recovered using \l QString::toInt(), \l
    QString::toDouble() and related functions.

    The \l{tools/settingseditor}{Settings Editor} example lets you
    experiment with different settings location and with fallbacks
    turned on or off.

    \section1 Restoring the State of a GUI Application

    QSettings is often used to store the state of a GUI
    application. The following example illustrates how to use QSettings
    to save and restore the geometry of an application&apos;s main window.

    \snippet settings/settings.cpp 16
    \codeline
    \snippet settings/settings.cpp 17

    See \l{Window Geometry} for a discussion on why it is better to
    call QWidget::resize() and QWidget::move() rather than QWidget::setGeometry()
    to restore a window&apos;s geometry.

    The \c readSettings() and \c writeSettings() functions must be
    called from the main window&apos;s constructor and close event handler
    as follows:

    \snippet settings/settings.cpp 18
    \dots
    \snippet settings/settings.cpp 19
    \snippet settings/settings.cpp 20
    \codeline
    \snippet settings/settings.cpp 21

    See the \l{mainwindows/application}{Application} example for a
    self-contained example that uses QSettings.

    \section1 Accessing Settings from Multiple Threads or Processes Simultaneously

    QSettings is \l{reentrant}. This means that you can use
    distinct QSettings object in different threads
    simultaneously. This guarantee stands even when the QSettings
    objects refer to the same files on disk (or to the same entries
    in the system registry). If a setting is modified through one
    QSettings object, the change will immediately be visible in
    any other QSettings objects that operate on the same location
    and that live in the same process.

    QSettings can safely be used from different processes (which can
    be different instances of your application running at the same
    time or different applications altogether) to read and write to
    the same system locations, provided certain conditions are met. For
    QSettings::IniFormat, it uses advisory file locking and a smart merging
    algorithm to ensure data integrity. The condition for that to work is that
    the writeable configuration file must be a regular file and must reside in
    a directory that the current user can create new, temporary files in. If
    that is not the case, then one must use setAtomicSyncRequired() to turn the
    safety off.

    Note that sync() imports changes made by other processes (in addition to
    writing the changes from this QSettings).

    \section1 Platform-Specific Notes

    \section2 Locations Where Application Settings Are Stored

    As mentioned in the \l{Fallback Mechanism} section, QSettings
    stores settings for an application in up to four locations,
    depending on whether the settings are user-specific or
    system-wide and whether the settings are application-specific
    or organization-wide. For simplicity, we&apos;re assuming the
    organization is called MySoft and the application is called Star
    Runner.

    On Unix systems, if the file format is NativeFormat, the
    following files are used by default:

    \list 1
    \li \c{$HOME/.config/MySoft/Star Runner.conf} (Qt for Embedded Linux: \c{$HOME/Settings/MySoft/Star Runner.conf})
    \li \c{$HOME/.config/MySoft.conf} (Qt for Embedded Linux: \c{$HOME/Settings/MySoft.conf})
    \li for each directory &lt;dir&gt; in $XDG_CONFIG_DIRS: \c{&lt;dir&gt;/MySoft/Star Runner.conf}
    \li for each directory &lt;dir&gt; in $XDG_CONFIG_DIRS: \c{&lt;dir&gt;/MySoft.conf}
    \endlist
    \note If XDG_CONFIG_DIRS is unset, the default value of \c{/etc/xdg} is used.

    On \macos and iOS, if the file format is NativeFormat, these files are used by
    default:

    \list 1
    \li \c{$HOME/Library/Preferences/com.MySoft.Star Runner.plist}
    \li \c{$HOME/Library/Preferences/com.MySoft.plist}
    \li \c{/Library/Preferences/com.MySoft.Star Runner.plist}
    \li \c{/Library/Preferences/com.MySoft.plist}
    \endlist

    On Windows, NativeFormat settings are stored in the following
    registry paths:

    \list 1
    \li \c{HKEY_CURRENT_USER\Software\MySoft\Star Runner}
    \li \c{HKEY_CURRENT_USER\Software\MySoft\OrganizationDefaults}
    \li \c{HKEY_LOCAL_MACHINE\Software\MySoft\Star Runner}
    \li \c{HKEY_LOCAL_MACHINE\Software\MySoft\OrganizationDefaults}
    \endlist

    \note On Windows, for 32-bit programs running in WOW64 mode, settings are
    stored in the following registry path:
    \c{HKEY_LOCAL_MACHINE\Software\WOW6432node}.

    If the file format is NativeFormat, this is &quot;Settings/MySoft/Star Runner.conf&quot;
    in the application&apos;s home directory.

    If the file format is IniFormat, the following files are
    used on Unix, \macos, and iOS:

    \list 1
    \li \c{$HOME/.config/MySoft/Star Runner.ini} (Qt for Embedded Linux: \c{$HOME/Settings/MySoft/Star Runner.ini})
    \li \c{$HOME/.config/MySoft.ini} (Qt for Embedded Linux: \c{$HOME/Settings/MySoft.ini})
    \li for each directory &lt;dir&gt; in $XDG_CONFIG_DIRS: \c{&lt;dir&gt;/MySoft/Star Runner.ini}
    \li for each directory &lt;dir&gt; in $XDG_CONFIG_DIRS: \c{&lt;dir&gt;/MySoft.ini}
    \endlist
    \note If XDG_CONFIG_DIRS is unset, the default value of \c{/etc/xdg} is used.

    On Windows, the following files are used:

    \list 1
    \li \c{FOLDERID_RoamingAppData\MySoft\Star Runner.ini}
    \li \c{FOLDERID_RoamingAppData\MySoft.ini}
    \li \c{FOLDERID_ProgramData\MySoft\Star Runner.ini}
    \li \c{FOLDERID_ProgramData\MySoft.ini}
    \endlist

    The identifiers prefixed by \c{FOLDERID_} are special item ID lists to be passed
    to the Win32 API function \c{SHGetKnownFolderPath()} to obtain the
    corresponding path.

    \c{FOLDERID_RoamingAppData} usually points to \tt{C:\\Users\\\e{User Name}\\AppData\\Roaming},
    also shown by the environment variable \c{%APPDATA%}.

    \c{FOLDERID_ProgramData} usually points to \tt{C:\\ProgramData}.

    If the file format is IniFormat, this is &quot;Settings/MySoft/Star Runner.ini&quot;
    in the application&apos;s home directory.

    The paths for the \c .ini and \c .conf files can be changed using
    setPath(). On Unix, \macos, and iOS the user can override them by
    setting the \c XDG_CONFIG_HOME environment variable; see
    setPath() for details.

    \section2 Accessing INI and .plist Files Directly

    Sometimes you do want to access settings stored in a specific
    file or registry path. On all platforms, if you want to read an
    INI file directly, you can use the QSettings constructor that
    takes a file name as first argument and pass QSettings::IniFormat
    as second argument. For example:

    \snippet code/src_corelib_io_qsettings.cpp 2

    You can then use the QSettings object to read and write settings
    in the file.

    On \macos and iOS, you can access property list \c .plist files by passing
    QSettings::NativeFormat as second argument. For example:

    \snippet code/src_corelib_io_qsettings.cpp 3

    \section2 Accessing the Windows Registry Directly

    On Windows, QSettings lets you access settings that have been
    written with QSettings (or settings in a supported format, e.g., string
    data) in the system registry. This is done by constructing a QSettings
    object with a path in the registry and QSettings::NativeFormat.

    For example:

    \snippet code/src_corelib_io_qsettings.cpp 4

    All the registry entries that appear under the specified path can
    be read or written through the QSettings object as usual (using
    forward slashes instead of backslashes). For example:

    \snippet code/src_corelib_io_qsettings.cpp 5

    Note that the backslash character is, as mentioned, used by
    QSettings to separate subkeys. As a result, you cannot read or
    write windows registry entries that contain slashes or
    backslashes; you should use a native windows API if you need to do
    so.

    \section2 Accessing Common Registry Settings on Windows

    On Windows, it is possible for a key to have both a value and subkeys.
    Its default value is accessed by using &quot;Default&quot; or &quot;.&quot; in
    place of a subkey:

    \snippet code/src_corelib_io_qsettings.cpp 6

    On other platforms than Windows, &quot;Default&quot; and &quot;.&quot; would be
    treated as regular subkeys.

    \section2 Platform Limitations

    While QSettings attempts to smooth over the differences between
    the different supported platforms, there are still a few
    differences that you should be aware of when porting your
    application:

    \list
    \li  The Windows system registry has the following limitations: A
        subkey may not exceed 255 characters, an entry&apos;s value may
        not exceed 16,383 characters, and all the values of a key may
        not exceed 65,535 characters. One way to work around these
        limitations is to store the settings using the IniFormat
        instead of the NativeFormat.

    \li  On Windows, when the Windows system registry is used, QSettings
         does not preserve the original type of the value. Therefore,
         the type of the value might change when a new value is set. For
         example, a value with type \c REG_EXPAND_SZ will change to \c REG_SZ.

    \li  On \macos and iOS, allKeys() will return some extra keys for global
        settings that apply to all applications. These keys can be
        read using value() but cannot be changed, only shadowed.
        Calling setFallbacksEnabled(false) will hide these global
        settings.

    \li  On \macos and iOS, the CFPreferences API used by QSettings expects
        Internet domain names rather than organization names. To
        provide a uniform API, QSettings derives a fake domain name
        from the organization name (unless the organization name
        already is a domain name, e.g. OpenOffice.org). The algorithm
        appends &quot;.com&quot; to the company name and replaces spaces and
        other illegal characters with hyphens. If you want to specify
        a different domain name, call
        QCoreApplication::setOrganizationDomain(),
        QCoreApplication::setOrganizationName(), and
        QCoreApplication::setApplicationName() in your \c main()
        function and then use the default QSettings constructor.
        Another solution is to use preprocessor directives, for
        example:

        \snippet code/src_corelib_io_qsettings.cpp 7

    \li On \macos, permissions to access settings not belonging to the
       current user (i.e. SystemScope) have changed with 10.7 (Lion). Prior to
       that version, users having admin rights could access these. For 10.7 and
       10.8 (Mountain Lion), only root can. However, 10.9 (Mavericks) changes
       that rule again but only for the native format (plist files).

    \endlist

    \sa QVariant, QSessionManager, {Settings Editor Example}, {Qt Widgets - Application Example}
*/</doc>
<fun r='_ZN9QSettingsC1ERK7QStringS2_P7QObject'/>
<fun r='_ZN9QSettingsC1ENS_5ScopeERK7QStringS3_P7QObject'/>
<fun r='_ZN9QSettingsC1ENS_6FormatENS_5ScopeERK7QStringS4_P7QObject'/>
<fun r='_ZN9QSettingsC1ERK7QStringNS_6FormatEP7QObject'/>
<fun r='_ZN9QSettingsC1EP7QObject'/>
<fun r='_ZN9QSettingsC1ENS_5ScopeEP7QObject'/>
<fun r='_ZN9QSettingsD1Ev'/>
<fun r='_ZN9QSettings5clearEv'/>
<fun r='_ZN9QSettings4syncEv'/>
<fun r='_ZNK9QSettings8fileNameEv'/>
<fun r='_ZNK9QSettings6formatEv'/>
<fun r='_ZNK9QSettings5scopeEv'/>
<fun r='_ZNK9QSettings16organizationNameEv'/>
<fun r='_ZNK9QSettings15applicationNameEv'/>
<fun r='_ZNK9QSettings6statusEv'/>
<fun r='_ZNK9QSettings20isAtomicSyncRequiredEv'/>
<fun r='_ZN9QSettings21setAtomicSyncRequiredEb'/>
<fun r='_ZN9QSettings10beginGroupE14QAnyStringView'/>
<fun r='_ZN9QSettings8endGroupEv'/>
<fun r='_ZNK9QSettings5groupEv'/>
<fun r='_ZN9QSettings14beginReadArrayE14QAnyStringView'/>
<fun r='_ZN9QSettings15beginWriteArrayE14QAnyStringViewi'/>
<fun r='_ZN9QSettings8endArrayEv'/>
<fun r='_ZN9QSettings13setArrayIndexEi'/>
<fun r='_ZNK9QSettings7allKeysEv'/>
<fun r='_ZNK9QSettings9childKeysEv'/>
<fun r='_ZNK9QSettings11childGroupsEv'/>
<fun r='_ZNK9QSettings10isWritableEv'/>
<fun r='_ZN9QSettings8setValueE14QAnyStringViewRK8QVariant'/>
<fun r='_ZN9QSettings6removeE14QAnyStringView'/>
<fun r='_ZNK9QSettings8containsE14QAnyStringView'/>
<fun r='_ZN9QSettings19setFallbacksEnabledEb'/>
<fun r='_ZNK9QSettings16fallbacksEnabledEv'/>
<fun r='_ZN9QSettings5eventEP6QEvent'/>
<fun r='_ZNK9QSettings5valueE14QAnyStringView'/>
<fun r='_ZNK9QSettings5valueE14QAnyStringViewRK8QVariant'/>
<fun r='_ZN9QSettings16setDefaultFormatENS_6FormatE'/>
<fun r='_ZN9QSettings13defaultFormatEv'/>
<fun r='_ZN9QSettings7setPathENS_6FormatENS_5ScopeERK7QString'/>
<fun r='_ZN9QSettings14registerFormatERK7QStringPFbR9QIODeviceR4QMapIS0_8QVariantEEPFbS4_RKS7_EN2Qt15CaseSensitivityE'/>
<use f='qtbase-6.5.0/src/gui/image/qiconloader.cpp' l='333' c='_ZN10QIconThemeC1ERK7QString'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/kernel/qplatformdialoghelper.cpp' l='267' c='_ZN22QColorDialogStaticData12readSettingsEv'/>
<use f='qtbase-6.5.0/src/gui/kernel/qplatformdialoghelper.cpp' l='281' c='_ZNK22QColorDialogStaticData13writeSettingsEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixservices.cpp' l='70' c='_ZL24detectDesktopEnvironmentv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixthemes.cpp' l='356' c='_ZN16QKdeThemePrivate14readKdeSettingERK7QStringRK5QListIS0_EiR5QHashIS0_P9QSettingsE'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixthemes.cpp' l='357' c='_ZN16QKdeThemePrivate20readKdeSystemPaletteERK5QListI7QStringEiR5QHashIS1_P9QSettingsEP8QPalette'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixthemes.cpp' l='449' c='_ZN16QKdeThemePrivate7refreshEv'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixthemes.cpp' l='549' c='_ZN16QKdeThemePrivate14readKdeSettingERK7QStringRK5QListIS0_EiR5QHashIS0_P9QSettingsE'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixthemes.cpp' l='552' c='_ZN16QKdeThemePrivate14readKdeSettingERK7QStringRK5QListIS0_EiR5QHashIS0_P9QSettingsE'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixthemes.cpp' l='556' c='_ZN16QKdeThemePrivate14readKdeSettingERK7QStringRK5QListIS0_EiR5QHashIS0_P9QSettingsE'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixthemes.cpp' l='582' c='_ZN16QKdeThemePrivate20readKdeSystemPaletteERK5QListI7QStringEiR5QHashIS1_P9QSettingsEP8QPalette'/>
<use f='qtbase-6.5.0/src/gui/platform/unix/qgenericunixthemes.cpp' l='843' c='_ZN9QKdeTheme14createKdeThemeEv'/>
<size>16</size>
<use f='qtbase-6.5.0/src/network/access/qhstsstore_p.h' l='52'/>
<size>16</size>
<use f='qtbase-6.5.0/src/tools/androiddeployqt/main.cpp' l='1005' c='_Z13readInputFileP7Options'/>
<size>16</size>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='2791' c='_ZN18QFileDialogPrivate12saveSettingsEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='2814' c='_ZN18QFileDialogPrivate19restoreFromSettingsEv'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='2925' c='_ZN18QFileDialogPrivate4initERK15QFileDialogArgs'/>
<use f='qtbase-6.5.0/src/widgets/dialogs/qfiledialog.cpp' l='3087' c='_ZN18QFileDialogPrivate13createWidgetsEv'/>
<size>16</size>
