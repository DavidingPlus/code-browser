<dec f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslayout.h' l='27' type='void QGraphicsLayout::activate()'/>
<def f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslayout.cpp' l='221' ll='252' type='void QGraphicsLayout::activate()'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslayout.cpp' l='361' u='c' c='_ZN15QGraphicsLayout11widgetEventEP6QEvent'/>
<use f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslayout.cpp' l='365' u='c' c='_ZN15QGraphicsLayout11widgetEventEP6QEvent'/>
<doc f='qtbase-6.5.0/src/widgets/graphicsview/qgraphicslayout.cpp' l='205'>/*!
    Activates the layout, causing all items in the layout to be immediately
    rearranged. This function is based on calling count() and itemAt(), and
    then calling setGeometry() on all items sequentially. When activated,
    the layout will adjust its geometry to its parent&apos;s contentsRect().
    The parent will then invalidate any layout of its own.

    If called in sequence or recursively, e.g., by one of the arranged items
    in response to being resized, this function will do nothing.

    Note that the layout is free to use geometry caching to optimize this
    process.  To forcefully invalidate any such cache, you can call
    invalidate() before calling activate().

    \sa invalidate()
*/</doc>
