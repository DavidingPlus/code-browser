<dec f='qtbase-6.5.0/src/gui/image/qpixmap.h' l='96' type='bool QPixmap::load(const QString &amp; fileName, const char * format = nullptr, Qt::ImageConversionFlags flags = Qt::AutoColor)'/>
<use f='qtbase-6.5.0/src/gui/image/qbitmap.cpp' l='127' u='c' c='_ZN7QBitmapC1ERK7QStringPKc'/>
<use f='qtbase-6.5.0/src/gui/image/qiconloader.cpp' l='718' u='c' c='_ZN11PixmapEntry6pixmapERK5QSizeN5QIcon4ModeENS3_5StateE'/>
<use f='qtbase-6.5.0/src/gui/image/qpixmap.cpp' l='174' u='c' c='_ZN7QPixmapC1ERK7QStringPKc6QFlagsIN2Qt19ImageConversionFlagEE'/>
<def f='qtbase-6.5.0/src/gui/image/qpixmap.cpp' l='708' ll='744' type='bool QPixmap::load(const QString &amp; fileName, const char * format = nullptr, Qt::ImageConversionFlags flags = Qt::AutoColor)'/>
<doc f='qtbase-6.5.0/src/gui/image/qpixmap.cpp' l='681'>/*!
    Loads a pixmap from the file with the given \a fileName. Returns
    true if the pixmap was successfully loaded; otherwise invalidates
    the pixmap and returns \c false.

    The loader attempts to read the pixmap using the specified \a
    format. If the \a format is not specified (which is the default),
    the loader probes the file for a header to guess the file format.

    The file name can either refer to an actual file on disk or to one
    of the application&apos;s embedded resources. See the
    \l{resources.html}{Resource System} overview for details on how to
    embed pixmaps and other resource files in the application&apos;s
    executable.

    If the data needs to be modified to fit in a lower-resolution
    result (e.g. converting from 32-bit to 8-bit), use the \a flags to
    control the conversion.

    Note that QPixmaps are automatically added to the QPixmapCache
    when loaded from a file in main thread; the key used is internal
    and cannot be acquired.

    \sa loadFromData(), {QPixmap#Reading and Writing Image
    Files}{Reading and Writing Image Files}
*/</doc>
