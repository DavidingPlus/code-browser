<def f='fmt-8.1.0/test/gtest/gtest/gtest.h' l='4248' ll='4263'/>
<use f='fmt-8.1.0/test/gtest/gtest/gtest.h' l='4262' c='_ZN7testing8internal6RandomC1ERKS1_'/>
<use f='fmt-8.1.0/test/gtest/gtest/gtest.h' l='4262' c='_ZN7testing8internal6RandomaSERKS1_'/>
<use f='fmt-8.1.0/test/gtest/gtest/gtest.h' l='4262' c='_ZN7testing8internal6RandomaSERKS1_'/>
<use f='fmt-8.1.0/test/gtest/gtest/gtest.h' l='10916' c='_ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE'/>
<size>4</size>
<doc f='fmt-8.1.0/test/gtest/gtest/gtest.h' l='4243'>// A simple Linear Congruential Generator for generating random
// numbers with a uniform distribution.  Unlike rand() and srand(), it
// doesn&apos;t use global state (and therefore can&apos;t interfere with user
// code).  Unlike rand_r(), it&apos;s portable.  An LCG isn&apos;t very random,
// but it&apos;s good enough for our purposes.</doc>
<smbr r='testing::internal::Random::kMaxRange' t='const uint32_t'/>
<fun r='_ZN7testing8internal6RandomC1Ej'/>
<fun r='_ZN7testing8internal6Random6ReseedEj'/>
<fun r='_ZN7testing8internal6Random8GenerateEj'/>
<mbr r='testing::internal::Random::state_' o='0' t='uint32_t'/>
<fun r='_ZN7testing8internal6RandomC1ERKS1_'/>
<use f='fmt-8.1.0/test/gtest/gmock-gtest-all.cc' l='707' c='_ZN7testing8internal12ShuffleRangeEPNS0_6RandomEiiPSt6vectorIT_SaIS4_EE'/>
<use f='fmt-8.1.0/test/gtest/gmock-gtest-all.cc' l='731' c='_ZN7testing8internal7ShuffleEPNS0_6RandomEPSt6vectorIT_SaIS4_EE'/>
<use f='fmt-8.1.0/test/gtest/gmock-gtest-all.cc' l='1220' c='_ZN7testing8internal12UnitTestImpl6randomEv'/>
<use f='fmt-8.1.0/test/gtest/gmock-gtest-all.cc' l='1331'/>
<use f='fmt-8.1.0/test/gtest/gmock-gtest-all.cc' l='4567' c='_ZN7testing9TestSuite12ShuffleTestsEPNS_8internal6RandomE'/>
<size>4</size>
<fun r='_ZN7testing8internal6Random8GenerateEj'/>
