<def f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='540' ll='546' type='void testing::internal::Assert(bool condition, const char * file, int line, const std::string &amp; msg)'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='548' u='c' c='_ZN7testing8internal6AssertEbPKci'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='622' u='c' c='_ZN7testing8internal7InvalidEv'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='1095' u='c' c='_ZN7testing8internal25BuiltInDefaultValueGetterIT_Lb0EE3GetEv'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='8499' u='c' c='_ZNK7testing8internal21UntypedOnCallSpecBase18AssertSpecPropertyEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='8976' u='c' c='_ZNK7testing8internal15ExpectationBase18AssertSpecPropertyEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='9388' u='c' c='_ZNK7testing8internal16TypedExpectation16GetCurrentActionEPKNS0_14FunctionMockerIT_EERKNS0_8FunctionIS3_E13ArgumentTupleE'/>
<doc f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='535'>// Asserts that condition is true; aborts the process with the given
// message if condition is false.  We cannot use LOG(FATAL) or CHECK()
// as Google Mock might be used to mock the log sink itself.  We
// inline this function to prevent it from showing up in the stack
// trace.</doc>
<use f='fmt-8.1.0/test/gtest/gmock-gtest-all.cc' l='12851' u='c' c='_ZN7testing8internal16IllegalDoDefaultEPKci'/>
<use f='fmt-8.1.0/test/gtest/gmock-gtest-all.cc' l='13663' u='c' c='_ZNK7testing8internal25UntypedFunctionMockerBase10MockObjectEv'/>
<use f='fmt-8.1.0/test/gtest/gmock-gtest-all.cc' l='13680' u='c' c='_ZNK7testing8internal25UntypedFunctionMockerBase4NameEv'/>
<use f='fmt-8.1.0/test/gtest/gmock-gtest-all.cc' l='13831' u='c' c='_ZN7testing8internal25UntypedFunctionMockerBase11GetHandleOfEPNS0_15ExpectationBaseE'/>
