<def f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='8893' ll='8901'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='8900' c='_ZN7testing10InSequenceC1ERKS0_'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='8900' c='_ZN7testing10InSequenceaSERKS0_'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='8900' c='_ZN7testing10InSequenceaSERKS0_'/>
<size>1</size>
<doc f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='8869'>// An object of this type causes all EXPECT_CALL() statements
// encountered in its scope to be put in an anonymous sequence.  The
// work is done in the constructor and destructor.  You should only
// create an InSequence object on the stack.
//
// The sole purpose for this class is to support easy definition of
// sequential expectations, e.g.
//
//   {
//     InSequence dummy;  // The name of the object doesn&apos;t matter.
//
//     // The following expectations must match in the order they appear.
//     EXPECT_CALL(a, Bar())...;
//     EXPECT_CALL(a, Baz())...;
//     ...
//     EXPECT_CALL(b, Xyz())...;
//   }
//
// You can create InSequence objects in multiple threads, as long as
// they are used to affect different mock objects.  The idea is that
// each thread can create and set up its own mocks as if it&apos;s the only
// thread.  However, for clarity of your tests we recommend you to set
// up mocks in the main thread unless you have a good reason not to do
// so.</doc>
<fun r='_ZN7testing10InSequenceC1Ev'/>
<fun r='_ZN7testing10InSequenceD1Ev'/>
<mbr r='testing::InSequence::sequence_created_' o='0' t='bool'/>
<fun r='_ZN7testing10InSequenceC1ERKS0_'/>
<use f='fmt-8.1.0/test/core-test.cc' l='257' c='_ZN31buffer_test_append_partial_Test8TestBodyEv'/>
<size>1</size>
<use f='fmt-8.1.0/test/ostream-test.cc' l='135' c='_ZN43ostream_test_write_to_ostream_max_size_Test8TestBodyEv'/>
<size>1</size>
