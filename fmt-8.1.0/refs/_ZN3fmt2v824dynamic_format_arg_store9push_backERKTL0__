<def f='fmt-8.1.0/include/fmt/args.h' l='165' ll='170' type='void fmt::dynamic_format_arg_store::push_back(const T &amp; arg)'/>
<use f='fmt-8.1.0/test/args-test.cc' l='16' u='c' c='_ZN20args_test_basic_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='17' u='c' c='_ZN20args_test_basic_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='18' u='c' c='_ZN20args_test_basic_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='26' u='c' c='_ZN31args_test_strings_and_refs_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='28' u='c' c='_ZN31args_test_strings_and_refs_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='55' u='c' c='_ZN28args_test_custom_format_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='57' u='c' c='_ZN28args_test_custom_format_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='84' u='c' c='_ZN38args_test_to_string_and_formatter_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='127' u='c' c='_ZN20args_test_clear_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='132' u='c' c='_ZN20args_test_clear_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='137' u='c' c='_ZN20args_test_clear_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='145' u='c' c='_ZN22args_test_reserve_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='169' u='c' c='_ZN28args_test_throw_on_copy_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='171' u='c' c='_ZN28args_test_throw_on_copy_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='180' u='c' c='_ZN31args_test_move_constructor_Test8TestBodyEv'/>
<use f='fmt-8.1.0/test/args-test.cc' l='181' u='c' c='_ZN31args_test_move_constructor_Test8TestBodyEv'/>
<doc f='fmt-8.1.0/include/fmt/args.h' l='148'>/**
    \rst
    Adds an argument into the dynamic store for later passing to a formatting
    function.

    Note that custom types and string types (but not string views) are copied
    into the store dynamically allocating memory if necessary.

    **Example**::

      fmt::dynamic_format_arg_store&lt;fmt::format_context&gt; store;
      store.push_back(42);
      store.push_back(&quot;abc&quot;);
      store.push_back(1.5f);
      std::string result = fmt::vformat(&quot;{} and {} and {}&quot;, store);
    \endrst
  */</doc>
