<def f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='4467' ll='4469' type='void testing::internal::FloatingEqMatcher::FloatingEqMatcher&lt;FloatType&gt;(FloatType expected, bool nan_eq_nan)'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='6977' u='c' c='_ZN7testing8DoubleEqEd'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='6983' u='c' c='_ZN7testing20NanSensitiveDoubleEqEd'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='7005' u='c' c='_ZN7testing7FloatEqEf'/>
<use f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='7011' u='c' c='_ZN7testing19NanSensitiveFloatEqEf'/>
<doc f='fmt-8.1.0/test/gtest/gmock/gmock.h' l='4461'>// Constructor for FloatingEqMatcher.
  // The matcher&apos;s input will be compared with expected.  The matcher treats two
  // NANs as equal if nan_eq_nan is true.  Otherwise, under IEEE standards,
  // equality comparisons between NANs will always return false.  We specify a
  // negative max_abs_error_ term to indicate that ULP-based approximation will
  // be used for comparison.</doc>
