<dec f='fmt-8.1.0/test/gtest/gtest/gtest-spi.h' l='210'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='53' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='61' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='79' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='90' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='101' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='119' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='130' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='141' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='151' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='170' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='187' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='194' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='206' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='207' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='208' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='217' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='218' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='219' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='257' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='261' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='265' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='275' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='279' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='283' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='296' u='c'/>
<use f='fmt-8.1.0/test/gtest-extra-test.cc' l='305' u='c'/>
<doc f='fmt-8.1.0/test/gtest/gtest/gtest-spi.h' l='178'>// A macro for testing Google Test assertions or code that&apos;s expected to
// generate Google Test non-fatal failures.  It asserts that the given
// statement will cause exactly one non-fatal Google Test failure with &apos;substr&apos;
// being part of the failure message.
//
// There are two different versions of this macro. EXPECT_NONFATAL_FAILURE only
// affects and considers failures generated in the current thread and
// EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS does the same but for all threads.
//
// &apos;statement&apos; is allowed to reference local variables and members of
// the current object.
//
// The verification of the assertion is done correctly even when the statement
// throws an exception or aborts the current function.
//
// Known restrictions:
//   - You cannot stream a failure message to this macro.
//
// Note that even though the implementations of the following two
// macros are much alike, we cannot refactor them to use a common
// helper macro, due to some peculiarity in how the preprocessor
// works.  If we do that, the code won&apos;t compile when the user gives
// EXPECT_NONFATAL_FAILURE() a statement that contains a macro that
// expands to code containing an unprotected comma.  The
// AcceptsMacroThatExpandsToUnprotectedComma test in gtest_unittest.cc
// catches that.
//
// For the same reason, we have to write
//   if (::testing::internal::AlwaysTrue()) { statement; }
// instead of
//   GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_(statement)
// to avoid an MSVC warning on unreachable code.</doc>
