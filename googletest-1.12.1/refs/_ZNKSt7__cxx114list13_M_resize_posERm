<dec f='include/c++/9/bits/stl_list.h' l='1940' type='std::list::const_iterator std::list::_M_resize_pos(std::list::size_type &amp; __new_size) const'/>
<def f='include/c++/9/bits/list.tcc' l='173' ll='206' type='typename list&lt;_Tp, _Alloc&gt;::const_iterator std::list::_M_resize_pos(std::list::size_type &amp; __new_size) const'/>
<use f='include/c++/9/bits/list.tcc' l='233' u='c' c='_ZNSt7__cxx114list6resizeEm'/>
<use f='include/c++/9/bits/list.tcc' l='245' u='c' c='_ZNSt7__cxx114list6resizeEmRKT_'/>
<doc f='include/c++/9/bits/stl_list.h' l='1938'>// Used to implement resize.</doc>
<doc f='include/c++/9/bits/list.tcc' l='162'>// Return a const_iterator indicating the position to start inserting or
  // erasing elements (depending whether the list is growing or shrinking),
  // and set __new_size to the number of new elements that must be appended.
  // Equivalent to the following, but performed optimally:
  // if (__new_size &lt; size()) {
  //   __new_size = 0;
  //   return std::next(begin(), __new_size);
  // } else {
  //   __newsize -= size();
  //   return end();
  // }</doc>
