<def f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1692' ll='1703'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1701' c='_ZN7testing8internal14GTestMutexLockC1ERKS1_'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1702' c='_ZN7testing8internal14GTestMutexLockaSERKS1_'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1702' c='_ZN7testing8internal14GTestMutexLockaSERKS1_'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1705'/>
<size>8</size>
<doc f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1687'>// We cannot name this class MutexLock because the ctor declaration would
// conflict with a macro named MutexLock, which is defined on some
// platforms. That macro is used as a defensive measure to prevent against
// inadvertent misuses of MutexLock like &quot;MutexLock(&amp;mu)&quot; rather than
// &quot;MutexLock l(&amp;mu)&quot;.  Hence the typedef trick below.</doc>
<fun r='_ZN7testing8internal14GTestMutexLockC1EPNS0_9MutexBaseE'/>
<fun r='_ZN7testing8internal14GTestMutexLockD1Ev'/>
<mbr r='testing::internal::GTestMutexLock::mutex_' o='0' t='testing::internal::MutexBase *const'/>
<fun r='_ZN7testing8internal14GTestMutexLockC1ERKS1_'/>
<fun r='_ZN7testing8internal14GTestMutexLockaSERKS1_'/>
