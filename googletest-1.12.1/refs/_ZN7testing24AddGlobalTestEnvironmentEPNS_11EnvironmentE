<dec f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='1256' type='testing::Environment * testing::AddGlobalTestEnvironment(testing::Environment * env)'/>
<def f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='1309' ll='1311' type='testing::Environment * testing::AddGlobalTestEnvironment(testing::Environment * env)'/>
<doc f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='1291'>// A convenient wrapper for adding an environment for the test
// program.
//
// You should call this before RUN_ALL_TESTS() is called, probably in
// main().  If you use gtest_main, you need to call this before main()
// starts for it to take effect.  For example, you can define a global
// variable like this:
//
//   testing::Environment* const foo_env =
//       testing::AddGlobalTestEnvironment(new FooEnvironment);
//
// However, we strongly recommend you to write your own main() and
// call AddGlobalTestEnvironment() there, as relying on initialization
// of global variables makes the code harder to read and may cause
// problems when you register multiple environments from different
// translation units and the environments have dependencies among them
// (remember that the compiler doesn&apos;t guarantee the order in which
// global variables from different translation units are initialized).</doc>
