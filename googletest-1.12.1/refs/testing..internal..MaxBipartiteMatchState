<def f='googletest-1.12.1/googlemock/src/gmock-matchers.cc' l='124' ll='224'/>
<use f='googletest-1.12.1/googlemock/src/gmock-matchers.cc' l='229' c='_ZN7testing8internal24FindMaxBipartiteMatchingERKNS0_11MatchMatrixE'/>
<size>56</size>
<doc f='googletest-1.12.1/googlemock/src/gmock-matchers.cc' l='62'>// FindMaxBipartiteMatching and its helper class.
//
// Uses the well-known Ford-Fulkerson max flow method to find a maximum
// bipartite matching. Flow is considered to be from left to right.
// There is an implicit source node that is connected to all of the left
// nodes, and an implicit sink node that is connected to all of the
// right nodes. All edges have unit capacity.
//
// Neither the flow graph nor the residual flow graph are represented
// explicitly. Instead, they are implied by the information in &apos;graph&apos; and
// a vector&lt;int&gt; called &apos;left_&apos; whose elements are initialized to the
// value kUnused. This represents the initial state of the algorithm,
// where the flow graph is empty, and the residual flow graph has the
// following edges:
//   - An edge from source to each left_ node
//   - An edge from each right_ node to sink
//   - An edge from each left_ node to each right_ node, if the
//     corresponding edge exists in &apos;graph&apos;.
//
// When the TryAugment() method adds a flow, it sets left_[l] = r for some
// nodes l and r. This induces the following changes:
//   - The edges (source, l), (l, r), and (r, sink) are added to the
//     flow graph.
//   - The same three edges are removed from the residual flow graph.
//   - The reverse edges (l, source), (r, l), and (sink, r) are added
//     to the residual flow graph, which is a directional graph
//     representing unused flow capacity.
//
// When the method augments a flow (moving left_[l] from some r1 to some
// other r2), this can be thought of as &quot;undoing&quot; the above steps with
// respect to r1 and &quot;redoing&quot; them with respect to r2.
//
// It bears repeating that the flow graph and residual flow graph are
// never represented explicitly, but can be derived by looking at the
// information in &apos;graph&apos; and in left_.
//
// As an optimization, there is a second vector&lt;int&gt; called right_ which
// does not provide any new information. Instead, it enables more
// efficient queries about edges entering or leaving the right-side nodes
// of the flow or residual flow graphs. The following invariants are
// maintained:
//
// left[l] == kUnused or right[left[l]] == l
// right[r] == kUnused or left[right[r]] == r
//
// . [ source ]                                        .
// .   |||                                             .
// .   |||                                             .
// .   ||\--&gt; left[0]=1  ---\    right[0]=-1 ----\     .
// .   ||                   |                    |     .
// .   |\---&gt; left[1]=-1    \--&gt; right[1]=0  ---\|     .
// .   |                                        ||     .
// .   \----&gt; left[2]=2  ------&gt; right[2]=2  --\||     .
// .                                           |||     .
// .         elements           matchers       vvv     .
// .                                         [ sink ]  .
//
// See Also:
//   [1] Cormen, et al (2001). &quot;Section 26.2: The Ford-Fulkerson method&quot;.
//       &quot;Introduction to Algorithms (Second ed.)&quot;, pp. 651-664.
//   [2] &quot;Ford-Fulkerson algorithm&quot;, Wikipedia,
//       &apos;http://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm&apos;</doc>
<fun r='_ZN7testing8internal22MaxBipartiteMatchStateC1ERKNS0_11MatchMatrixE'/>
<fun r='_ZN7testing8internal22MaxBipartiteMatchState7ComputeEv'/>
<smbr r='testing::internal::MaxBipartiteMatchState::kUnused' t='const size_t'/>
<fun r='_ZN7testing8internal22MaxBipartiteMatchState10TryAugmentEmPSt6vectorIcSaIcEE'/>
<mbr r='testing::internal::MaxBipartiteMatchState::graph_' o='0' t='const testing::internal::MatchMatrix *'/>
<mbr r='testing::internal::MaxBipartiteMatchState::left_' o='64' t='::std::vector&lt;size_t&gt;'/>
<mbr r='testing::internal::MaxBipartiteMatchState::right_' o='256' t='::std::vector&lt;size_t&gt;'/>
<smbr r='testing::internal::MaxBipartiteMatchState::kUnused' t='const size_t'/>
