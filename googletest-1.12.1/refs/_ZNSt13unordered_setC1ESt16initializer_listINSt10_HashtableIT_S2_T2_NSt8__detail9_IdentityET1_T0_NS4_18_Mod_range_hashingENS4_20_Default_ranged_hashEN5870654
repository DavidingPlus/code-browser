<def f='include/c++/9/bits/unordered_set.h' l='221' ll='227' type='void std::unordered_set::unordered_set&lt;_Value, _Hash, _Pred, _Alloc&gt;(initializer_list&lt;std::unordered_set::value_type&gt; __l, std::unordered_set::size_type __n = 0, const std::unordered_set::hasher &amp; __hf = std::unordered_set::hasher(), const std::unordered_set::key_equal &amp; __eql = std::unordered_set::key_equal(), const std::unordered_set::allocator_type &amp; __a = std::unordered_set::allocator_type())'/>
<doc f='include/c++/9/bits/unordered_set.h' l='210'>/**
       *  @brief  Builds an %unordered_set from an initializer_list.
       *  @param  __l  An initializer_list.
       *  @param __n  Minimal initial number of buckets.
       *  @param __hf  A hash functor.
       *  @param __eql  A key equality functor.
       *  @param  __a  An allocator object.
       *
       *  Create an %unordered_set consisting of copies of the elements in the
       *  list. This is linear in N (where N is @a __l.size()).
       */</doc>
