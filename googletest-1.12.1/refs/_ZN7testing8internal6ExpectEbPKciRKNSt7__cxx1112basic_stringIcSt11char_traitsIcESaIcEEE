<def f='googletest-1.12.1/googlemock/include/gmock/internal/gmock-internal-utils.h' l='241' ll='247' type='void testing::internal::Expect(bool condition, const char * file, int line, const std::string &amp; msg)'/>
<use f='googletest-1.12.1/googlemock/include/gmock/internal/gmock-internal-utils.h' l='249' u='c' c='_ZN7testing8internal6ExpectEbPKci'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='264' u='c' c='_ZNK7testing8internal21UntypedOnCallSpecBase18ExpectSpecPropertyEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='740' u='c' c='_ZNK7testing8internal15ExpectationBase18ExpectSpecPropertyEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='1819' u='c' c='_ZN7testing8internal14FunctionMockerIFT_DpT0_EE10InvokeWithEOSt5tupleIJS4_EE'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='1822' u='c' c='_ZN7testing8internal14FunctionMockerIFT_DpT0_EE10InvokeWithEOSt5tupleIJS4_EE'/>
<use f='googletest-1.12.1/googlemock/src/gmock-cardinalities.cc' l='58' u='c' c='_ZN7testing12_GLOBAL__N_122BetweenCardinalityImplC1Eii'/>
<use f='googletest-1.12.1/googlemock/src/gmock-cardinalities.cc' l='62' u='c' c='_ZN7testing12_GLOBAL__N_122BetweenCardinalityImplC1Eii'/>
<use f='googletest-1.12.1/googlemock/src/gmock-cardinalities.cc' l='66' u='c' c='_ZN7testing12_GLOBAL__N_122BetweenCardinalityImplC1Eii'/>
<use f='googletest-1.12.1/googlemock/src/gmock-spec-builders.cc' l='304' u='c' c='_ZN7testing8internal23ReportUninterestingCallENS0_12CallReactionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='googletest-1.12.1/googlemock/src/gmock-spec-builders.cc' l='416' u='c' c='_ZN7testing8internal25UntypedFunctionMockerBase32VerifyAndClearExpectationsLockedEv'/>
<doc f='googletest-1.12.1/googlemock/include/gmock/internal/gmock-internal-utils.h' l='239'>// Verifies that condition is true; generates a non-fatal failure if
// condition is false.</doc>
