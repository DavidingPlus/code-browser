<def f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='419' ll='557'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='798' c='_ZNK7testing6ActionIFT_DpT0_EEcvNS_10OnceActionIS4_EEEv'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='935' c='_ZNO7testing8internal12ReturnActioncvNS_10OnceActionIFTL0__DpTL0_0_EEEEv'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='1431'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='1434' c='_ZNO7testing8internal14WithArgsActioncvNS_10OnceActionIFTL0__DpTL0_0_EEEEv'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='1436' c='_ZNO7testing8internal14WithArgsActioncvNS_10OnceActionIFTL0__DpTL0_0_EEEEv'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='1490'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='1492' c='_ZNO7testing8internal11DoAllActionIJT_EEcvNS_10OnceActionIFTL0__DpTL0_0_EEEEv'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='1582'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='1583'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='1585' c='_ZNO7testing8internal11DoAllActionIJT_DpT0_EEcvNS_10OnceActionIFTL0__DpTL0_0_EEEEv'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='1590' c='_ZNO7testing8internal11DoAllActionIJT_DpT0_EEcvNS_10OnceActionIFTL0__DpTL0_0_EEEEv'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='1591' c='_ZNO7testing8internal11DoAllActionIJT_DpT0_EEcvNS_10OnceActionIFTL0__DpTL0_0_EEEEv'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='981' c='_ZN7testing8internal16TypedExpectationIFT_DpT0_EE8WillOnceENS_10OnceActionIS5_EE'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='986' c='_ZN7testing8internal16TypedExpectationIFT_DpT0_EE8WillOnceENS_10OnceActionIS5_EE'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='1078'/>
<doc f='googletest-1.12.1/googlemock/include/gmock/gmock-actions.h' l='384'>// An action that can only be used once.
//
// This is accepted by WillOnce, which doesn&apos;t require the underlying action to
// be copy-constructible (only move-constructible), and promises to invoke it as
// an rvalue reference. This allows the action to work with move-only types like
// std::move_only_function in a type-safe manner.
//
// For example:
//
//     // Assume we have some API that needs to accept a unique pointer to some
//     // non-copyable object Foo.
//     void AcceptUniquePointer(std::unique_ptr&lt;Foo&gt; foo);
//
//     // We can define an action that provides a Foo to that API. Because It
//     // has to give away its unique pointer, it must not be called more than
//     // once, so its call operator is &amp;&amp;-qualified.
//     struct ProvideFoo {
//       std::unique_ptr&lt;Foo&gt; foo;
//
//       void operator()() &amp;&amp; {
//         AcceptUniquePointer(std::move(Foo));
//       }
//     };
//
//     // This action can be used with WillOnce.
//     EXPECT_CALL(mock, Call)
//         .WillOnce(ProvideFoo{std::make_unique&lt;Foo&gt;(...)});
//
//     // But a call to WillRepeatedly will fail to compile. This is correct,
//     // since the action cannot correctly be used repeatedly.
//     EXPECT_CALL(mock, Call)
//         .WillRepeatedly(ProvideFoo{std::make_unique&lt;Foo&gt;(...)});
//
// A less-contrived example would be an action that returns an arbitrary type,
// whose &amp;&amp;-qualified call operator is capable of dealing with move-only types.</doc>
<fun r='_ZN7testing10OnceActionIFT_DpT0_EEC1EOTL0__'/>
<fun r='_ZN7testing10OnceActionIFT_DpT0_EEC1EOTL0__'/>
<fun r='_ZN7testing10OnceActionIFT_DpT0_EEC1ERKNS0_IS4_EE'/>
<fun r='_ZN7testing10OnceActionIFT_DpT0_EEaSERKNS0_IS4_EE'/>
<fun r='_ZN7testing10OnceActionIFT_DpT0_EEC1EONS0_IS4_EE'/>
<fun r='_ZNO7testing10OnceActionIFT_DpT0_EE4CallES3_'/>
<mbr r='testing::OnceAction::function_' t='std::function&lt;Result (Args...)&gt;'/>
