<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-internal.h' l='454' c='_ZN7testing8internal15TestFactoryBase10CreateTestEv'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-internal.h' l='469' c='_ZN7testing8internal15TestFactoryImpl10CreateTestEv'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-param-util.h' l='401' c='_ZN7testing8internal24ParameterizedTestFactory10CreateTestEv'/>
<def f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='231' ll='344'/>
<use f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='342' c='_ZN7testing4TestC1ERKS0_'/>
<use f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='343' c='_ZN7testing4TestaSERKS0_'/>
<use f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='343' c='_ZN7testing4TestaSERKS0_'/>
<use f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='588'/>
<use f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='737'/>
<use f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='1252'/>
<ovr f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='1687' c='testing::TestWithParam'/>
<use f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='1687'/>
<use f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='2267' c='_ZZN7testing12RegisterTestEPKcS1_S1_S1_S1_iT0_EN11FactoryImpl10CreateTestEv'/>
<size>16</size>
<doc f='googletest-1.12.1/googletest/include/gtest/gtest.h' l='208'>// The abstract class that all tests inherit from.
//
// In Google Test, a unit test program contains one or many TestSuites, and
// each TestSuite contains one or many Tests.
//
// When you define a test using the TEST macro, you don&apos;t need to
// explicitly derive from Test - the TEST macro automatically does
// this for you.
//
// The only time you derive from Test is when defining a test fixture
// to be used in a TEST_F.  For example:
//
//   class FooTest : public testing::Test {
//    protected:
//     void SetUp() override { ... }
//     void TearDown() override { ... }
//     ...
//   };
//
//   TEST_F(FooTest, Bar) { ... }
//   TEST_F(FooTest, Baz) { ... }
//
// Test is not copyable.</doc>
<fun r='_ZN7testing4TestD1Ev'/>
<fun r='_ZN7testing4Test14SetUpTestSuiteEv'/>
<fun r='_ZN7testing4Test17TearDownTestSuiteEv'/>
<fun r='_ZN7testing4Test16TearDownTestCaseEv'/>
<fun r='_ZN7testing4Test13SetUpTestCaseEv'/>
<fun r='_ZN7testing4Test15HasFatalFailureEv'/>
<fun r='_ZN7testing4Test18HasNonfatalFailureEv'/>
<fun r='_ZN7testing4Test9IsSkippedEv'/>
<fun r='_ZN7testing4Test10HasFailureEv'/>
<fun r='_ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_'/>
<fun r='_ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi'/>
<fun r='_ZN7testing4TestC1Ev'/>
<fun r='_ZN7testing4Test5SetUpEv'/>
<fun r='_ZN7testing4Test8TearDownEv'/>
<fun r='_ZN7testing4Test19HasSameFixtureClassEv'/>
<fun r='_ZN7testing4Test8TestBodyEv'/>
<fun r='_ZN7testing4Test3RunEv'/>
<fun r='_ZN7testing4Test11DeleteSelf_Ev'/>
<mbr r='testing::Test::gtest_flag_saver_' o='64' t='const std::unique_ptr&lt; ::testing::internal::GTestFlagSaver&gt;'/>
<fun r='_ZN7testing4Test5SetupEv'/>
<fun r='_ZN7testing4TestC1ERKS0_'/>
<fun r='_ZN7testing4TestaSERKS0_'/>
<ovr f='googletest-1.12.1/googletest/src/gtest.cc' l='455' c='testing::internal::(anonymousnamespace)::FailureTest'/>
<use f='googletest-1.12.1/googletest/src/gtest.cc' l='455'/>
<use f='googletest-1.12.1/googletest/src/gtest.cc' l='927' c='_ZN7testing8internal13GetTestTypeIdEv'/>
<use f='googletest-1.12.1/googletest/src/gtest.cc' l='2843' c='_ZN7testing8TestInfo3RunEv'/>
<size>16</size>
<fun r='_ZN7testing4TestC1Ev'/>
<fun r='_ZN7testing4TestD1Ev'/>
<fun r='_ZN7testing4Test5SetUpEv'/>
<fun r='_ZN7testing4Test8TearDownEv'/>
<fun r='_ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES8_'/>
<fun r='_ZN7testing4Test14RecordPropertyERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEi'/>
<fun r='_ZN7testing4Test19HasSameFixtureClassEv'/>
<fun r='_ZN7testing4Test3RunEv'/>
<fun r='_ZN7testing4Test15HasFatalFailureEv'/>
<fun r='_ZN7testing4Test18HasNonfatalFailureEv'/>
<fun r='_ZN7testing4Test9IsSkippedEv'/>
