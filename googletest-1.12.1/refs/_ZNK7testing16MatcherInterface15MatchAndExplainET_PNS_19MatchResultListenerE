<dec f='googletest-1.12.1/googletest/include/gtest/gtest-matchers.h' l='172' type='bool testing::MatcherInterface::MatchAndExplain(T x, testing::MatchResultListener * listener) const'/>
<doc f='googletest-1.12.1/googletest/include/gtest/gtest-matchers.h' l='141'>// Returns true if and only if the matcher matches x; also explains the
  // match result to &apos;listener&apos; if necessary (see the next paragraph), in
  // the form of a non-restrictive relative clause (&quot;which ...&quot;,
  // &quot;whose ...&quot;, etc) that describes x.  For example, the
  // MatchAndExplain() method of the Pointee(...) matcher should
  // generate an explanation like &quot;which points to ...&quot;.
  //
  // Implementations of MatchAndExplain() should add an explanation of
  // the match result *if and only if* they can provide additional
  // information that&apos;s not already present (or not obvious) in the
  // print-out of x and the matcher&apos;s description.  Whether the match
  // succeeds is not a factor in deciding whether an explanation is
  // needed, as sometimes the caller needs to print a failure message
  // when the match succeeds (e.g. when the matcher is used inside
  // Not()).
  //
  // For example, a &quot;has at least 10 elements&quot; matcher should explain
  // what the actual element count is, regardless of the match result,
  // as it is useful information to the reader; on the other hand, an
  // &quot;is empty&quot; matcher probably only needs to explain what the actual
  // size is when the match fails, as it&apos;s redundant to say that the
  // size is 0 when the value is already known to be empty.
  //
  // You should override this method when defining a new matcher.
  //
  // It&apos;s the responsibility of the caller (Google Test) to guarantee
  // that &apos;listener&apos; is not NULL.  This helps to simplify a matcher&apos;s
  // implementation when it doesn&apos;t care about the performance, as it
  // can talk to &apos;listener&apos; without checking its validity first.
  // However, in order to implement dummy listeners efficiently,
  // listener-&gt;stream() may be NULL.</doc>
