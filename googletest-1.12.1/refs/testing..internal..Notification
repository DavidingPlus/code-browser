<def f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1213' ll='1238'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1216' c='_ZN7testing8internal12NotificationC1ERKS1_'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1217' c='_ZN7testing8internal12NotificationaSERKS1_'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1217' c='_ZN7testing8internal12NotificationaSERKS1_'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1286' c='_ZN7testing8internal15ThreadWithParamC1EPFvT_ES2_PNS0_12NotificationE'/>
<use f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1316'/>
<size>96</size>
<doc f='googletest-1.12.1/googletest/include/gtest/internal/gtest-port.h' l='1206'>// Allows a controller thread to pause execution of newly created
// threads until notified.  Instances of this class must be created
// and destroyed in the controller thread.
//
// This class is only for testing Google Test&apos;s own constructs. Do not
// use it in user tests, either directly or indirectly.
// TODO(b/203539622): Replace unconditionally with absl::Notification.</doc>
<fun r='_ZN7testing8internal12NotificationC1Ev'/>
<fun r='_ZN7testing8internal12NotificationC1ERKS1_'/>
<fun r='_ZN7testing8internal12NotificationaSERKS1_'/>
<fun r='_ZN7testing8internal12Notification6NotifyEv'/>
<fun r='_ZN7testing8internal12Notification19WaitForNotificationEv'/>
<mbr r='testing::internal::Notification::mu_' o='0' t='std::mutex'/>
<mbr r='testing::internal::Notification::cv_' o='320' t='std::condition_variable'/>
<mbr r='testing::internal::Notification::notified_' o='704' t='bool'/>
