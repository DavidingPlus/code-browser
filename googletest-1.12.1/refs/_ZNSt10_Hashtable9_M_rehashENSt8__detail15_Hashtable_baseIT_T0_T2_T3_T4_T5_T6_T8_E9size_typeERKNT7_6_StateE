<dec f='include/c++/9/bits/hashtable.h' l='960' type='void std::_Hashtable::_M_rehash(std::_Hashtable::size_type __n, const std::_Hashtable::__rehash_state &amp; __state)'/>
<use f='include/c++/9/bits/hashtable.h' l='1748' u='c' c='_ZNSt10_Hashtable21_M_insert_unique_nodeENSt8__detail15_Hashtable_baseIT_T0_T2_T3_T4_T5_T6_T8_E9size_typeENSA_11__hash_codeEPNS0_10_Hash_nodeIS3_XsrNS11636648'/>
<use f='include/c++/9/bits/hashtable.h' l='1786' u='c' c='_ZNSt10_Hashtable20_M_insert_multi_nodeEPNSt8__detail10_Hash_nodeIT0_XsrNT8_13__hash_cachedE5valueEEENS0_15_Hashtable_baseIT_S2_T2_T3_T4_T5_T6_S3_E11__hash_codeES5_'/>
<use f='include/c++/9/bits/hashtable.h' l='2085' u='c' c='_ZNSt10_Hashtable6rehashENSt8__detail15_Hashtable_baseIT_T0_T2_T3_T4_T5_T6_T8_E9size_typeE'/>
<def f='include/c++/9/bits/hashtable.h' l='2091' ll='2111' type='void std::_Hashtable::_M_rehash(std::_Hashtable::size_type __n, const std::_Hashtable::__rehash_state &amp; __state)'/>
<doc f='include/c++/9/bits/hashtable.h' l='958'>// Unconditionally change size of bucket array to n, restore
      // hash policy state to __state on exception.</doc>
