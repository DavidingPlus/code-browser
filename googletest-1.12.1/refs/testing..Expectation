<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='208' c='_ZN7testing8internal25UntypedFunctionMockerBase11GetHandleOfEPNS0_15ExpectationBaseE'/>
<def f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='477' ll='541'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='481' c='_ZN7testing11ExpectationC1EOS0_'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='482' c='_ZN7testing11ExpectationC1ERKS0_'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='483' c='_ZN7testing11ExpectationaSEOS0_'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='483' c='_ZN7testing11ExpectationaSEOS0_'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='484' c='_ZN7testing11ExpectationaSERKS0_'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='484' c='_ZN7testing11ExpectationaSERKS0_'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='503' c='_ZNK7testing11ExpectationeqERKS0_'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='507' c='_ZNK7testing11ExpectationneERKS0_'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='524' c='_ZNK7testing11Expectation4LessclERKS0_S3_'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='524' c='_ZNK7testing11Expectation4LessclERKS0_S3_'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='529'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='571' c='_ZN7testing14ExpectationSetC1ERNS_8internal15ExpectationBaseE'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='577' c='_ZN7testing14ExpectationSetC1ERKNS_11ExpectationE'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='594' c='_ZN7testing14ExpectationSetpLERKNS_11ExpectationE'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='614' c='_ZN7testing8SequenceC1Ev'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='618' c='_ZNK7testing8Sequence14AddExpectationERKNS_11ExpectationE'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='622'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='710'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='729' c='_ZN7testing8internal15ExpectationBase9GetHandleEv'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='1087' c='_ZN7testing8internal16TypedExpectationIFT_DpT0_EE9GetHandleEv'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='1519' c='_ZN7testing8internal14FunctionMockerIFT_DpT0_EE17AddNewExpectationEPKciRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKSt5tupleIJDpNS_7MatcherIS3_EEEE'/>
<use f='googletest-1.12.1/googlemock/src/gmock-spec-builders.cc' l='375' c='_ZN7testing8internal25UntypedFunctionMockerBase11GetHandleOfEPNS0_15ExpectationBaseE'/>
<use f='googletest-1.12.1/googlemock/src/gmock-spec-builders.cc' l='381' c='_ZN7testing8internal25UntypedFunctionMockerBase11GetHandleOfEPNS0_15ExpectationBaseE'/>
<use f='googletest-1.12.1/googlemock/src/gmock-spec-builders.cc' l='386' c='_ZN7testing8internal25UntypedFunctionMockerBase11GetHandleOfEPNS0_15ExpectationBaseE'/>
<use f='googletest-1.12.1/googlemock/src/gmock-spec-builders.cc' l='746' c='_ZNK7testing8Sequence14AddExpectationERKNS_11ExpectationE'/>
<size>16</size>
<doc f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='461'>// An abstract handle of an expectation.  Useful in the .After()
// clause of EXPECT_CALL() for setting the (partial) order of
// expectations.  The syntax:
//
//   Expectation e1 = EXPECT_CALL(...)...;
//   EXPECT_CALL(...).After(e1)...;
//
// sets two expectations where the latter can only be matched after
// the former has been satisfied.
//
// Notes:
//   - This class is copyable and has value semantics.
//   - Constness is shallow: a const Expectation object itself cannot
//     be modified, but the mutable methods of the ExpectationBase
//     object it references can be called via expectation_base().</doc>
<fun r='_ZN7testing11ExpectationC1Ev'/>
<fun r='_ZN7testing11ExpectationC1EOS0_'/>
<fun r='_ZN7testing11ExpectationC1ERKS0_'/>
<fun r='_ZN7testing11ExpectationaSEOS0_'/>
<fun r='_ZN7testing11ExpectationaSERKS0_'/>
<fun r='_ZN7testing11ExpectationD1Ev'/>
<fun r='_ZN7testing11ExpectationC1ERNS_8internal15ExpectationBaseE'/>
<fun r='_ZNK7testing11ExpectationeqERKS0_'/>
<fun r='_ZNK7testing11ExpectationneERKS0_'/>
<fun r='_ZN7testing11ExpectationC1ERKSt10shared_ptrINS_8internal15ExpectationBaseEE'/>
<fun r='_ZNK7testing11Expectation16expectation_baseEv'/>
<mbr r='testing::Expectation::expectation_base_' o='0' t='std::shared_ptr&lt;internal::ExpectationBase&gt;'/>
<fun r='_ZN7testing11ExpectationC1ERNS_8internal15ExpectationBaseE'/>
<fun r='_ZN7testing11ExpectationC1Ev'/>
<fun r='_ZN7testing11ExpectationC1ERKSt10shared_ptrINS_8internal15ExpectationBaseEE'/>
<fun r='_ZN7testing11ExpectationD1Ev'/>
