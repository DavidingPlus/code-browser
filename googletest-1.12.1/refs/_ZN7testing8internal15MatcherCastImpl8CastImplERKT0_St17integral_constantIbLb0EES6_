<dec f='googletest-1.12.1/googlemock/include/gmock/gmock-matchers.h' l='392' type='static Matcher&lt;T&gt; testing::internal::MatcherCastImpl::CastImpl(const M &amp; value, std::false_type , std::false_type )'/>
<def f='googletest-1.12.1/googlemock/include/gmock/gmock-matchers.h' l='4244' ll='4249' type='static Matcher&lt;T&gt; testing::internal::MatcherCastImpl::CastImpl(const M &amp; value, std::false_type , std::false_type )'/>
<doc f='googletest-1.12.1/googlemock/include/gmock/gmock-matchers.h' l='382'>// M can&apos;t be implicitly converted to either Matcher&lt;T&gt; or T. Attempt to use
  // polymorphic matcher Eq(value) in this case.
  //
  // Note that we first attempt to perform an implicit cast on the value and
  // only fall back to the polymorphic Eq() matcher afterwards because the
  // latter calls bool operator==(const Lhs&amp; lhs, const Rhs&amp; rhs) in the end
  // which might be undefined even when Rhs is implicitly convertible to Lhs
  // (e.g. std::pair&lt;const int, int&gt; vs. std::pair&lt;int, int&gt;).
  //
  // We don&apos;t define this method inline as we need the declaration of Eq().</doc>
