<dec f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='496' type='void testing::Expectation::Expectation(internal::ExpectationBase &amp; exp)'/>
<use f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='571' u='c' c='_ZN7testing14ExpectationSetC1ERNS_8internal15ExpectationBaseE'/>
<def f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='2003' ll='2004' type='void testing::Expectation::Expectation(internal::ExpectationBase &amp; exp)'/>
<doc f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='487'>// This single-argument ctor must not be explicit, in order to support the
  //   Expectation e = EXPECT_CALL(...);
  // syntax.
  //
  // A TypedExpectation object stores its pre-requisites as
  // Expectation objects, and needs to call the non-const Retire()
  // method on the ExpectationBase objects they reference.  Therefore
  // Expectation must receive a *non-const* reference to the
  // ExpectationBase object.</doc>
<doc f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='496'>// NOLINT</doc>
<doc f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='2002'>// Constructs an Expectation object that references and co-owns exp.</doc>
<doc f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='2003'>// NOLINT</doc>
