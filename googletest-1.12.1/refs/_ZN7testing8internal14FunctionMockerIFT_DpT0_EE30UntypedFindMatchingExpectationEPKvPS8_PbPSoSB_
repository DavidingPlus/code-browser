<inh f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='171' c='_ZN7testing8internal25UntypedFunctionMockerBase30UntypedFindMatchingExpectationEPKvPS3_PbPSoS6_'/>
<def f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='1577' ll='1599' type='const testing::internal::ExpectationBase * testing::internal::FunctionMocker&lt;type-parameter-0-0 (type-parameter-0-1...)&gt;::UntypedFindMatchingExpectation(const void * untyped_args, const void ** untyped_action, bool * is_excessive, ::std::ostream * what, ::std::ostream * why)'/>
<doc f='googletest-1.12.1/googlemock/include/gmock/gmock-spec-builders.h' l='1561'>// Returns the expectation that matches the given function arguments
  // (or NULL is there&apos;s no match); when a match is found,
  // untyped_action is set to point to the action that should be
  // performed (or NULL if the action is &quot;do default&quot;), and
  // is_excessive is modified to indicate whether the call exceeds the
  // expected number.
  //
  // Critical section: We must find the matching expectation and the
  // corresponding action that needs to be taken in an ATOMIC
  // transaction.  Otherwise another thread may call this mock
  // method in the middle and mess up the state.
  //
  // However, performing the action has to be left out of the critical
  // section.  The reason is that we have no control on what the
  // action does (it can invoke an arbitrary user function or even a
  // mock function) and excessive locking could cause a dead lock.</doc>
