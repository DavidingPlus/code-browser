<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='31' ll='38'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='40'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='41'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='43'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='45'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='45'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='47'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='47'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='48'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='48'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='49'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='49'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='52'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='54'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='57'/>
<size>1</size>
<doc f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='39'>// Arrays are not explicitly copyable:</doc>
<doc f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_copy.hpp' l='42'>// Are volatile types ever trivial?  We don&apos;t really know, so assume not:</doc>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/is_stateless.hpp' l='25'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/is_trivially_copyable.hpp' l='23'/>
