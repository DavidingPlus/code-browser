<dec f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='1327' type='boost::urls::url_base &amp; boost::urls::url_base::set_host_ipv6(const boost::urls::ipv6_address &amp; addr)'/>
<use f='boost-1.85.0/libs/url/include/boost/url/url.hpp' l='448' u='c' c='_ZN5boost4urls3url13set_host_ipv6ERKNS0_12ipv6_addressE'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='1266'>/** Set the host to an address

        The host is set to the specified IPv6
        address.
        The host type is @ref host_type::ipv6.

        @par Example
        @code
        assert( url().set_host_ipv6( ipv6_address( &quot;1::6:c0a8:1&quot; ) ).authority().buffer() == &quot;[1::6:c0a8:1]&quot; );
        @endcode

        @par Postconditions
        @code
        this-&gt;has_authority() == true &amp;&amp; this-&gt;host_ipv6_address() == addr &amp;&amp; this-&gt;host_type() == host_type::ipv6
        @endcode

        @par Complexity
        Linear in `this-&gt;size()`.

        @par Exception Safety
        Strong guarantee.
        Calls to allocate may throw.

        @param addr The address to set.

        @par BNF
        @code
        IPv6address =                            6( h16 &quot;:&quot; ) ls32
                    /                       &quot;::&quot; 5( h16 &quot;:&quot; ) ls32
                    / [               h16 ] &quot;::&quot; 4( h16 &quot;:&quot; ) ls32
                    / [ *1( h16 &quot;:&quot; ) h16 ] &quot;::&quot; 3( h16 &quot;:&quot; ) ls32
                    / [ *2( h16 &quot;:&quot; ) h16 ] &quot;::&quot; 2( h16 &quot;:&quot; ) ls32
                    / [ *3( h16 &quot;:&quot; ) h16 ] &quot;::&quot;    h16 &quot;:&quot;   ls32
                    / [ *4( h16 &quot;:&quot; ) h16 ] &quot;::&quot;              ls32
                    / [ *5( h16 &quot;:&quot; ) h16 ] &quot;::&quot;              h16
                    / [ *6( h16 &quot;:&quot; ) h16 ] &quot;::&quot;

        ls32        = ( h16 &quot;:&quot; h16 ) / IPv4address
                    ; least-significant 32 bits of address

        h16         = 1*4HEXDIG
                    ; 16 bits of address represented in hexadecimal
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4291&quot;
            &gt;IP Version 6 Addressing Architecture (rfc4291)&lt;/a&gt;
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2&quot;&gt;
            3.2.2. Host (rfc3986)&lt;/a&gt;

        @see
            @ref set_encoded_host,
            @ref set_encoded_host_address,
            @ref set_encoded_host_name,
            @ref set_host,
            @ref set_host_address,
            @ref set_host_ipv4,
            @ref set_host_ipvfuture,
            @ref set_host_name.
    */</doc>
<use f='boost-1.85.0/libs/url/include/boost/url/static_url.hpp' l='384' u='c' c='_ZN5boost4urls10static_url13set_host_ipv6ERKNS0_12ipv6_addressE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='623' u='c' c='_ZN5boost4urls8url_base8set_hostENS_4core17basic_string_viewIcEE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='676' u='c' c='_ZN5boost4urls8url_base16set_encoded_hostENS0_15pct_string_viewE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='724' u='c' c='_ZN5boost4urls8url_base16set_host_addressENS_4core17basic_string_viewIcEE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='768' u='c' c='_ZN5boost4urls8url_base24set_encoded_host_addressENS0_15pct_string_viewE'/>
<def f='boost-1.85.0/libs/url/src/url_base.cpp' l='825' ll='848' type='boost::urls::url_base &amp; boost::urls::url_base::set_host_ipv6(const boost::urls::ipv6_address &amp; addr)'/>
