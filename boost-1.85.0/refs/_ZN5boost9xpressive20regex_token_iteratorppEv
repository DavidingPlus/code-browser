<def f='boost-1.85.0/libs/xpressive/include/boost/xpressive/regex_token_iterator.hpp' l='303' ll='308' type='regex_token_iterator&lt;BidiIter&gt; &amp; boost::xpressive::regex_token_iterator::operator++()'/>
<doc f='boost-1.85.0/libs/xpressive/include/boost/xpressive/regex_token_iterator.hpp' l='287'>/// If N == -1 then sets *this equal to the end of sequence iterator.
    /// Otherwise if N+1 \&lt; subs.size(), then increments N and sets result equal to
    /// ((subs[N] == -1) ? value_type(what.prefix().str()) : value_type(what[subs[N]].str())).
    /// Otherwise if what.prefix().first != what[0].second and if the element match_prev_avail is
    /// not set in flags then sets it. Then locates the next match as if by calling
    /// regex_search(what[0].second, end, what, *pre, flags), with the following variation:
    /// in the event that the previous match found was of zero length (what[0].length() == 0)
    /// then attempts to find a non-zero length match starting at what[0].second, only if that
    /// fails and provided what[0].second != suffix().second does it look for a (possibly zero
    /// length) match starting from what[0].second + 1.  If such a match is found then sets N
    /// equal to zero, and sets result equal to
    /// ((subs[N] == -1) ? value_type(what.prefix().str()) : value_type(what[subs[N]].str())).
    /// Otherwise if no further matches were found, then let last_end be the endpoint of the last
    /// match that was found. Then if last_end != end and subs[0] == -1 sets N equal to -1 and
    /// sets result equal to value_type(last_end, end). Otherwise sets *this equal to the end
    /// of sequence iterator.</doc>
