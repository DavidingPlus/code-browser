<dec f='boost-1.85.0/libs/contract/include/boost/contract/core/config.hpp' l='230'/>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/core/config.hpp' l='191'>/**
    Define the name of the class invariant member function (@c invariant by
    default).

    This macro expands to the name of the @c const and &lt;c&gt;const volatile&lt;/c&gt;
    member functions that check class invariants and volatile class invariants
    respectively:

    @code
        class u {
            friend class boost::contract::access;

            void BOOST_CONTRACT_INVARIANT_FUNC() const {
                BOOST_CONTRACT_ASSERT(...);
                ...
            }
            
            void BOOST_CONTRACT_INVARIANT_FUNC() const volatile {
                BOOST_CONTRACT_ASSERT(...);
                ...
            }

            ...
        };
    @endcode

    When used this way, users can redefine this macro if the invariant functions
    must have a name different from @c invariant (because of name clashes in
    user code, etc.).
    
    @note   C++ does not allow to overload member functions based on the
            @c static classifier, so this macro must always be defined to be
            different than the function name defined for
            @RefMacro{BOOST_CONTRACT_STATIC_INVARIANT_FUNC}.
    
    @see    @RefSect{tutorial.class_invariants, Class Invariants},
            @RefSect{extras.volatile_public_functions,
            Volatile Public Functions}
    */</doc>
