<dec f='boost-1.85.0/libs/stacktrace/include/boost/stacktrace/detail/libbacktrace_impls.hpp' l='88'/>
<use f='boost-1.85.0/libs/stacktrace/include/boost/stacktrace/detail/libbacktrace_impls.hpp' l='106' u='c'/>
<use f='boost-1.85.0/libs/stacktrace/include/boost/stacktrace/detail/libbacktrace_impls.hpp' l='111' u='w'/>
<doc f='boost-1.85.0/libs/stacktrace/include/boost/stacktrace/detail/libbacktrace_impls.hpp' l='72'>// [dcl.inline]: A static local variable in an inline function with external linkage always refers to the same object.

    // TODO: The most obvious solution:
    //
    //static ::backtrace_state* state = ::backtrace_create_state(
    //    prog_location.name(),
    //    1, // allow safe concurrent usage of the same state
    //    boost::stacktrace::detail::libbacktrace_error_callback,
    //    0 // pointer to data that will be passed to callback
    //);
    //
    //
    // Unfortunately, that solution segfaults when `construct_state()` function is in .so file
    // and multiple threads concurrently work with state. I failed to localize the root cause:
    // https://gcc.gnu.org/bugzilla//show_bug.cgi?id=87653</doc>
