<dec f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='113'/>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='73'>/**
Macro typically used to copy an old value expression and assign it to an old
value pointer.

The expression expanded by this macro should be assigned to an old value
pointer of type @RefClass{boost::contract::old_ptr} or
@RefClass{boost::contract::old_ptr_if_copyable}.
This is an overloaded variadic macro and it can be used in the following
different ways.

1\. From within virtual public functions and public functions overrides:

@code
BOOST_CONTRACT_OLDOF(v, old_expr)
@endcode

2\. From all other operations:

@code
BOOST_CONTRACT_OLDOF(old_expr)
@endcode

Where:

@arg    &lt;c&gt;&lt;b&gt;v&lt;/b&gt;&lt;/c&gt; is the extra parameter of type
        @RefClass{boost::contract::virtual_}&lt;c&gt;*&lt;/c&gt; and default value @c 0
        from the enclosing virtual public function or public function
        overrides declaring the contract.
@arg    &lt;c&gt;&lt;b&gt;old_expr&lt;/b&gt;&lt;/c&gt; is the expression to be evaluated and copied into
        the old value pointer.
        (This is not a variadic macro parameter so any comma it might contain
        must be protected by round parenthesis and
        &lt;c&gt;BOOST_CONTRACT_OLDOF(v, (old_expr))&lt;/c&gt; will always work.)

On compilers that do not support variadic macros, programmers can manually copy
old value expressions without using this macro (see
@RefSect{extras.no_macros__and_no_variadic_macros_, No Macros}).

@see @RefSect{tutorial.old_values, Old Values}
*/</doc>
