<dec f='boost-1.85.0/libs/contract/include/boost/contract/core/config.hpp' l='265'/>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/core/config.hpp' l='234'>/**
    Define the name of the static invariant member function (@c static_invariant
    by default).

    This macro expands to the name of the @c static member function that checks
    static class invariants:

    @code
        class u {
            friend class boost::contract::access;

            static void BOOST_CONTRACT_STATIC_INVARIANT_FUNC() {
                BOOST_CONTRACT_ASSERT(...);
                ...
            }

            ...
        };
    @endcode

    When used this way, users can redefine this macro if the static invariant
    function must have a name different from @c static_invariant (because of
    name clashes in user code, etc.).

    @note   C++ does not allow to overload member functions based on the
            @c static classifier, so this macro must always be defined to be
            different than the function name defined for
            @RefMacro{BOOST_CONTRACT_INVARIANT_FUNC}.
    
    @see    @RefSect{tutorial.class_invariants, Class Invariants}
    */</doc>
