<dec f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/core/non_terminal/parser_context.hpp' l='138'/>
<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/core/non_terminal/impl/rule.ipp' l='173' u='c'/>
<doc f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/core/non_terminal/parser_context.hpp' l='125'>///////////////////////////////////////////////////////////////////////////
    //
    //  BOOST_SPIRIT_CONTEXT_PARSE helper macro
    //
    //      The original implementation uses a template class. However, we
    //      need to lessen the template instantiation depth to help inferior
    //      compilers that sometimes choke on deep template instantiations.
    //      The objective is to avoid code redundancy. A macro, in this case
    //      is an obvious solution. Sigh!
    //
    //      WARNING: INTERNAL USE ONLY. NOT FOR PUBLIC CONSUMPTION.
    //
    ///////////////////////////////////////////////////////////////////////////</doc>
<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/core/non_terminal/subrule.hpp' l='276' u='c'/>
<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/core/non_terminal/impl/grammar.ipp' l='333' u='c'/>
<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/core/non_terminal/grammar.hpp' l='65' u='c'/>
<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/attribute/closure.hpp' l='170' u='c'/>
