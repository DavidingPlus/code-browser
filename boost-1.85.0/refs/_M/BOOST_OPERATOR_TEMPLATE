<dec f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='738'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='766' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='767' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='768' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='769' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='770' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='772' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='774' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='776' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='777' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='778' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='786' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='787' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='788' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='789' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='791' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='792' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='793' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='794' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='795' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='796' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='797' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='799' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='800' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='801' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='802' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='803' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='804' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='805' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='806' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='807' u='c'/>
<use f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='814' u='w'/>
<doc f='boost-1.85.0/libs/utility/include/boost/operators.hpp' l='724'>// BOOST_OPERATOR_TEMPLATE(template_name) defines template_name&lt;&gt; such that it
// can be used for specifying both 1-argument and 2-argument forms. Requires the
// existence of two previously defined class templates named &apos;&lt;template_name&gt;1&apos;
// and &apos;&lt;template_name&gt;2&apos; which must implement the corresponding 1- and 2-
// argument forms.
//
// The template type parameter O == is_chained_base&lt;U&gt;::value is used to
// distinguish whether the 2nd argument to &lt;template_name&gt; is being used for
// base class chaining from another boost operator template or is describing a
// 2nd operand type. O == true_t only when U is actually an another operator
// template from the library. Partial specialization is used to select an
// implementation in terms of either &apos;&lt;template_name&gt;1&apos; or &apos;&lt;template_name&gt;2&apos;.
//</doc>
