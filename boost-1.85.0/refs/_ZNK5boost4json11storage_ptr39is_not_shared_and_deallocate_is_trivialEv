<def f='boost-1.85.0/libs/json/include/boost/json/storage_ptr.hpp' l='393' ll='397' type='bool boost::json::storage_ptr::is_not_shared_and_deallocate_is_trivial() const'/>
<use f='boost-1.85.0/libs/json/include/boost/json/value.hpp' l='3802' u='c' c='_ZN5boost4json14key_value_pairD1Ev'/>
<use f='boost-1.85.0/libs/json/include/boost/json/detail/impl/array.hpp' l='21' u='c' c='_ZN5boost4json6detail15unchecked_arrayD1Ev'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.hpp' l='571' u='c' c='_ZN5boost4json6detail16unchecked_objectD1Ev'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/array.ipp' l='152' u='c' c='_ZN5boost4json5array7destroyEPNS0_5valueES3_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/array.ipp' l='162' u='c' c='_ZN5boost4json5array7destroyEv'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.ipp' l='293' u='c' c='_ZN5boost4json6objectD1Ev'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.ipp' l='436' u='c' c='_ZN5boost4json6object5clearEv'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/value_stack.ipp' l='338' u='c' c='_ZN5boost4json11value_stack5resetENS0_11storage_ptrE'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/storage_ptr.hpp' l='385'>/** Return `true` if ownership of the memory resource is not shared and deallocate is trivial.

        This function is used to determine if calls to deallocate
        can effectively be skipped.

        @par Effects
        Returns `! this-&gt;is_shared() &amp;&amp; this-&gt;is_deallocate_trivial()`
    */</doc>
