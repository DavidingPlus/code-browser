<dec f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='303' type='bool boost::urls::authority_view::has_userinfo() const'/>
<def f='boost-1.85.0/libs/url/src/authority_view.cpp' l='84' ll='94' type='bool boost::urls::authority_view::has_userinfo() const'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='354' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='355' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='359' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<doc f='boost-1.85.0/libs/url/src/authority_view.cpp' l='78'>//------------------------------------------------
//
// Userinfo
//
//------------------------------------------------</doc>
<doc f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='265'>/** Return true if a userinfo is present

        This function returns true if this
        contains a userinfo.

        @par Example
        @code
        assert( url_view( &quot;http://jane%2Ddoe:pass@example.com&quot; ).has_userinfo() );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        userinfo    = user [ &quot;:&quot; [ password ] ]

        authority   = [ userinfo &quot;@&quot; ] host [ &quot;:&quot; port ]
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.1&quot;
            &gt;3.2.1. User Information (rfc3986)&lt;/a&gt;

        @see
            @ref has_password,
            @ref encoded_password,
            @ref encoded_user,
            @ref encoded_userinfo,
            @ref password,
            @ref user,
            @ref userinfo.

    */</doc>
