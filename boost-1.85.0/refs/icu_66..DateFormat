<inh f='include/unicode/format.h' l='98' c='icu_66::Format'/>
<def f='include/unicode/datefmt.h' l='156' ll='960'/>
<use f='include/unicode/datefmt.h' l='232' c='_ZNK6icu_6610DateFormat5cloneEv'/>
<use f='include/unicode/datefmt.h' l='535' c='_ZN6icu_6610DateFormat14createInstanceEv'/>
<use f='include/unicode/datefmt.h' l='548' c='_ZN6icu_6610DateFormat18createTimeInstanceENS0_6EStyleERKNS_6LocaleE'/>
<use f='include/unicode/datefmt.h' l='566' c='_ZN6icu_6610DateFormat18createDateInstanceENS0_6EStyleERKNS_6LocaleE'/>
<use f='include/unicode/datefmt.h' l='587' c='_ZN6icu_6610DateFormat22createDateTimeInstanceENS0_6EStyleES1_RKNS_6LocaleE'/>
<use f='include/unicode/datefmt.h' l='619' c='_ZN6icu_6610DateFormat25createInstanceForSkeletonERKNS_13UnicodeStringER10UErrorCode'/>
<use f='include/unicode/datefmt.h' l='636' c='_ZN6icu_6610DateFormat25createInstanceForSkeletonERKNS_13UnicodeStringERKNS_6LocaleER10UErrorCode'/>
<use f='include/unicode/datefmt.h' l='655' c='_ZN6icu_6610DateFormat25createInstanceForSkeletonEPNS_8CalendarERKNS_13UnicodeStringERKNS_6LocaleER10UErrorCode'/>
<use f='include/unicode/datefmt.h' l='830' c='_ZN6icu_6610DateFormat19setBooleanAttributeE27UDateFormatBooleanAttributeaR10UErrorCode'/>
<use f='include/unicode/datefmt.h' l='858' c='_ZN6icu_6610DateFormatC1ERKS0_'/>
<use f='include/unicode/datefmt.h' l='864' c='_ZN6icu_6610DateFormataSERKS0_'/>
<use f='include/unicode/datefmt.h' l='864' c='_ZN6icu_6610DateFormataSERKS0_'/>
<use f='include/unicode/datefmt.h' l='893' c='_ZN6icu_6610DateFormat6createENS0_6EStyleES1_RKNS_6LocaleE'/>
<ovr f='include/unicode/smpdtfmt.h' l='726' c='icu_66::SimpleDateFormat'/>
<use f='include/unicode/smpdtfmt.h' l='726'/>
<use f='include/unicode/smpdtfmt.h' l='1222'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='141' c='_ZN5boost6locale8impl_icu11date_formatC1ERN6icu_6610DateFormatERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='142' c='_ZN5boost6locale8impl_icu11date_formatC1ESt10unique_ptrIN6icu_6610DateFormatESt14default_deleteIS5_EERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='185'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='186'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='379' c='_ZN5boost6locale8impl_icu9formatter6createERSt8ios_baseRKN6icu_666LocaleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='380' c='_ZN5boost6locale8impl_icu9formatter6createERSt8ios_baseRKN6icu_666LocaleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<size>352</size>
<doc f='include/unicode/datefmt.h' l='60'>/**
 * DateFormat is an abstract class for a family of classes that convert dates and
 * times from their internal representations to textual form and back again in a
 * language-independent manner. Converting from the internal representation (milliseconds
 * since midnight, January 1, 1970) to text is known as &quot;formatting,&quot; and converting
 * from text to millis is known as &quot;parsing.&quot;  We currently define only one concrete
 * subclass of DateFormat: SimpleDateFormat, which can handle pretty much all normal
 * date formatting and parsing actions.
 * &lt;P&gt;
 * DateFormat helps you to format and parse dates for any locale. Your code can
 * be completely independent of the locale conventions for months, days of the
 * week, or even the calendar format: lunar vs. solar.
 * &lt;P&gt;
 * To format a date for the current Locale, use one of the static factory
 * methods:
 * &lt;pre&gt;
 * \code
 *      DateFormat* dfmt = DateFormat::createDateInstance();
 *      UDate myDate = Calendar::getNow();
 *      UnicodeString myString;
 *      myString = dfmt-&gt;format( myDate, myString );
 * \endcode
 * &lt;/pre&gt;
 * If you are formatting multiple numbers, it is more efficient to get the
 * format and use it multiple times so that the system doesn&apos;t have to fetch the
 * information about the local language and country conventions multiple times.
 * &lt;pre&gt;
 * \code
 *      DateFormat* df = DateFormat::createDateInstance();
 *      UnicodeString myString;
 *      UDate myDateArr[] = { 0.0, 100000000.0, 2000000000.0 }; // test values
 *      for (int32_t i = 0; i &lt; 3; ++i) {
 *          myString.remove();
 *          cout &lt;&lt; df-&gt;format( myDateArr[i], myString ) &lt;&lt; endl;
 *      }
 * \endcode
 * &lt;/pre&gt;
 * To get specific fields of a date, you can use UFieldPosition to
 * get specific fields.
 * &lt;pre&gt;
 * \code
 *      DateFormat* dfmt = DateFormat::createDateInstance();
 *      FieldPosition pos(DateFormat::YEAR_FIELD);
 *      UnicodeString myString;
 *      myString = dfmt-&gt;format( myDate, myString );
 *      cout &lt;&lt; myString &lt;&lt; endl;
 *      cout &lt;&lt; pos.getBeginIndex() &lt;&lt; &quot;,&quot; &lt;&lt; pos. getEndIndex() &lt;&lt; endl;
 * \endcode
 * &lt;/pre&gt;
 * To format a date for a different Locale, specify it in the call to
 * createDateInstance().
 * &lt;pre&gt;
 * \code
 *       DateFormat* df =
 *           DateFormat::createDateInstance( DateFormat::SHORT, Locale::getFrance());
 * \endcode
 * &lt;/pre&gt;
 * You can use a DateFormat to parse also.
 * &lt;pre&gt;
 * \code
 *       UErrorCode status = U_ZERO_ERROR;
 *       UDate myDate = df-&gt;parse(myString, status);
 * \endcode
 * &lt;/pre&gt;
 * Use createDateInstance() to produce the normal date format for that country.
 * There are other static factory methods available. Use createTimeInstance()
 * to produce the normal time format for that country. Use createDateTimeInstance()
 * to produce a DateFormat that formats both date and time. You can pass in
 * different options to these factory methods to control the length of the
 * result; from SHORT to MEDIUM to LONG to FULL. The exact result depends on the
 * locale, but generally:
 * &lt;ul type=round&gt;
 *   &lt;li&gt;   SHORT is completely numeric, such as 12/13/52 or 3:30pm
 *   &lt;li&gt;   MEDIUM is longer, such as Jan 12, 1952
 *   &lt;li&gt;   LONG is longer, such as January 12, 1952 or 3:30:32pm
 *   &lt;li&gt;   FULL is pretty completely specified, such as
 *          Tuesday, April 12, 1952 AD or 3:30:42pm PST.
 * &lt;/ul&gt;
 * You can also set the time zone on the format if you wish. If you want even
 * more control over the format or parsing, (or want to give your users more
 * control), you can try casting the DateFormat you get from the factory methods
 * to a SimpleDateFormat. This will work for the majority of countries; just
 * remember to chck getDynamicClassID() before carrying out the cast.
 * &lt;P&gt;
 * You can also use forms of the parse and format methods with ParsePosition and
 * FieldPosition to allow you to
 * &lt;ul type=round&gt;
 *   &lt;li&gt;   Progressively parse through pieces of a string.
 *   &lt;li&gt;   Align any particular field, or find out where it is for selection
 *          on the screen.
 * &lt;/ul&gt;
 *
 * &lt;p&gt;&lt;em&gt;User subclasses are not supported.&lt;/em&gt; While clients may write
 * subclasses, such code will not necessarily work and will not be
 * guaranteed to work stably from release to release.
 */</doc>
<fun r='_ZN6icu_6610DateFormatD1Ev'/>
<fun r='_ZNK6icu_6610DateFormat5cloneEv'/>
<fun r='_ZNK6icu_6610DateFormateqERKNS_6FormatE'/>
<fun r='_ZNK6icu_6610DateFormat6formatERKNS_11FormattableERNS_13UnicodeStringERNS_13FieldPositionER10UErrorCode'/>
<fun r='_ZNK6icu_6610DateFormat6formatERKNS_11FormattableERNS_13UnicodeStringEPNS_21FieldPositionIteratorER10UErrorCode'/>
<fun r='_ZNK6icu_6610DateFormat6formatERNS_8CalendarERNS_13UnicodeStringERNS_13FieldPositionE'/>
<fun r='_ZNK6icu_6610DateFormat6formatERNS_8CalendarERNS_13UnicodeStringEPNS_21FieldPositionIteratorER10UErrorCode'/>
<fun r='_ZNK6icu_6610DateFormat6formatEdRNS_13UnicodeStringERNS_13FieldPositionE'/>
<fun r='_ZNK6icu_6610DateFormat6formatEdRNS_13UnicodeStringEPNS_21FieldPositionIteratorER10UErrorCode'/>
<fun r='_ZNK6icu_6610DateFormat6formatEdRNS_13UnicodeStringE'/>
<fun r='_ZNK6icu_6610DateFormat5parseERKNS_13UnicodeStringER10UErrorCode'/>
<fun r='_ZNK6icu_6610DateFormat5parseERKNS_13UnicodeStringERNS_8CalendarERNS_13ParsePositionE'/>
<fun r='_ZNK6icu_6610DateFormat5parseERKNS_13UnicodeStringERNS_13ParsePositionE'/>
<fun r='_ZNK6icu_6610DateFormat11parseObjectERKNS_13UnicodeStringERNS_11FormattableERNS_13ParsePositionE'/>
<fun r='_ZN6icu_6610DateFormat14createInstanceEv'/>
<fun r='_ZN6icu_6610DateFormat18createTimeInstanceENS0_6EStyleERKNS_6LocaleE'/>
<fun r='_ZN6icu_6610DateFormat18createDateInstanceENS0_6EStyleERKNS_6LocaleE'/>
<fun r='_ZN6icu_6610DateFormat22createDateTimeInstanceENS0_6EStyleES1_RKNS_6LocaleE'/>
<fun r='_ZN6icu_6610DateFormat14getBestPatternERKNS_6LocaleERKNS_13UnicodeStringER10UErrorCode'/>
<fun r='_ZN6icu_6610DateFormat25createInstanceForSkeletonERKNS_13UnicodeStringER10UErrorCode'/>
<fun r='_ZN6icu_6610DateFormat25createInstanceForSkeletonERKNS_13UnicodeStringERKNS_6LocaleER10UErrorCode'/>
<fun r='_ZN6icu_6610DateFormat25createInstanceForSkeletonEPNS_8CalendarERKNS_13UnicodeStringERKNS_6LocaleER10UErrorCode'/>
<fun r='_ZN6icu_6610DateFormat19getAvailableLocalesERi'/>
<fun r='_ZNK6icu_6610DateFormat9isLenientEv'/>
<fun r='_ZN6icu_6610DateFormat10setLenientEa'/>
<fun r='_ZNK6icu_6610DateFormat17isCalendarLenientEv'/>
<fun r='_ZN6icu_6610DateFormat18setCalendarLenientEa'/>
<fun r='_ZNK6icu_6610DateFormat11getCalendarEv'/>
<fun r='_ZN6icu_6610DateFormat13adoptCalendarEPNS_8CalendarE'/>
<fun r='_ZN6icu_6610DateFormat11setCalendarERKNS_8CalendarE'/>
<fun r='_ZNK6icu_6610DateFormat15getNumberFormatEv'/>
<fun r='_ZN6icu_6610DateFormat17adoptNumberFormatEPNS_12NumberFormatE'/>
<fun r='_ZN6icu_6610DateFormat15setNumberFormatERKNS_12NumberFormatE'/>
<fun r='_ZNK6icu_6610DateFormat11getTimeZoneEv'/>
<fun r='_ZN6icu_6610DateFormat13adoptTimeZoneEPNS_8TimeZoneE'/>
<fun r='_ZN6icu_6610DateFormat11setTimeZoneERKNS_8TimeZoneE'/>
<fun r='_ZN6icu_6610DateFormat10setContextE15UDisplayContextR10UErrorCode'/>
<fun r='_ZNK6icu_6610DateFormat10getContextE19UDisplayContextTypeR10UErrorCode'/>
<fun r='_ZN6icu_6610DateFormat19setBooleanAttributeE27UDateFormatBooleanAttributeaR10UErrorCode'/>
<fun r='_ZNK6icu_6610DateFormat19getBooleanAttributeE27UDateFormatBooleanAttributeR10UErrorCode'/>
<fun r='_ZN6icu_6610DateFormatC1Ev'/>
<fun r='_ZN6icu_6610DateFormatC1ERKS0_'/>
<fun r='_ZN6icu_6610DateFormataSERKS0_'/>
<mbr r='icu_66::DateFormat::fCalendar' o='2624' t='icu_66::Calendar *'/>
<mbr r='icu_66::DateFormat::fNumberFormat' o='2688' t='icu_66::NumberFormat *'/>
<fun r='_ZN6icu_6610DateFormat6createENS0_6EStyleES1_RKNS_6LocaleE'/>
<mbr r='icu_66::DateFormat::fBoolFlags' o='2752' t='EnumSet&lt;UDateFormatBooleanAttribute, 0, UDAT_BOOLEAN_ATTRIBUTE_COUNT&gt;'/>
<mbr r='icu_66::DateFormat::fCapitalizationContext' o='2784' t='UDisplayContext'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.cpp' l='35' c='_ZN5boost6locale8impl_icu12_GLOBAL__N_115get_icu_patternESt10unique_ptrIN6icu_6610DateFormatESt14default_deleteIS5_EERNS4_13UnicodeStringE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.cpp' l='43' c='_ZN5boost6locale8impl_icu12_GLOBAL__N_115get_icu_patternEPN6icu_6610DateFormatERNS3_13UnicodeStringE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.cpp' l='45' c='_ZN5boost6locale8impl_icu12_GLOBAL__N_115get_icu_patternEPN6icu_6610DateFormatERNS3_13UnicodeStringE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.cpp' l='131' c='_ZNK5boost6locale8impl_icu16formatters_cache14date_formatterEv'/>
<size>352</size>
