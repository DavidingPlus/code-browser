<dec f='include/unicode/normlzr.h' l='331' type='static UBool icu_66::Normalizer::isNormalized(const icu_66::UnicodeString &amp; src, UNormalizationMode mode, UErrorCode &amp; errorCode)'/>
<def f='include/unicode/normlzr.h' l='791' ll='796' type='static UBool icu_66::Normalizer::isNormalized(const icu_66::UnicodeString &amp; source, UNormalizationMode mode, UErrorCode &amp; status)'/>
<doc f='include/unicode/normlzr.h' l='310'>/**
   * Test if a string is in a given normalization form.
   * This is semantically equivalent to source.equals(normalize(source, mode)) .
   *
   * Unlike unorm_quickCheck(), this function returns a definitive result,
   * never a &quot;maybe&quot;.
   * For NFD, NFKD, and FCD, both functions work exactly the same.
   * For NFC and NFKC where quickCheck may return &quot;maybe&quot;, this function will
   * perform further tests to arrive at a TRUE/FALSE result.
   *
   * @param src        String that is to be tested if it is in a normalization format.
   * @param mode       Which normalization form to test for.
   * @param errorCode  ICU error code in/out parameter.
   *                   Must fulfill U_SUCCESS before the function call.
   * @return Boolean value indicating whether the source string is in the
   *         &quot;mode&quot; normalization form.
   *
   * @see quickCheck
   * @deprecated ICU 56 Use Normalizer2 instead.
   */</doc>
