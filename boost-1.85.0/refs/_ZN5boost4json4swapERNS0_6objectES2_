<def f='boost-1.85.0/libs/json/include/boost/json/object.hpp' l='1284' ll='1289' type='void boost::json::swap(boost::json::object &amp; lhs, boost::json::object &amp; rhs)'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/object.hpp' l='1249'>/** Swap two objects.

        Exchanges the contents of the object `lhs` with another object `rhs`.
        Ownership of the respective `boost::container::pmr::memory_resource`
        objects is not transferred.

        @li If `*lhs.storage() == *rhs.storage()`,
        ownership of the underlying memory is swapped in
        constant time, with no possibility of exceptions.
        All iterators and references remain valid.

        @li If `*lhs.storage() != *rhs.storage()`,
        the contents are logically swapped by making a copy,
        which can throw. In this case all iterators and
        references are invalidated.

        @par Effects
        @code
        lhs.swap( rhs );
        @endcode

        @par Complexity
        Constant or linear in `lhs.size() + rhs.size()`.

        @par Exception Safety
        Strong guarantee.
        Calls to `memory_resource::allocate` may throw.

        @param lhs The object to exchange.

        @param rhs The object to exchange.
        If `&amp;lhs == &amp;rhs`, this function call has no effect.

        @see @ref object::swap
    */</doc>
