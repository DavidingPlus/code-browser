<def f='include/unicode/parseerr.h' l='58' ll='92'/>
<use f='include/unicode/parseerr.h' l='58'/>
<size>72</size>
<doc f='include/unicode/parseerr.h' l='29'>/**
 * A UParseError struct is used to returned detailed information about
 * parsing errors.  It is used by ICU parsing engines that parse long
 * rules, patterns, or programs, where the text being parsed is long
 * enough that more information than a UErrorCode is needed to
 * localize the error.
 *
 * &lt;p&gt;The line, offset, and context fields are optional; parsing
 * engines may choose not to use to use them.
 *
 * &lt;p&gt;The preContext and postContext strings include some part of the
 * context surrounding the error.  If the source text is &quot;let for=7&quot;
 * and &quot;for&quot; is the error (e.g., because it is a reserved word), then
 * some examples of what a parser might produce are the following:
 *
 * &lt;pre&gt;
 * preContext   postContext
 * &quot;&quot;           &quot;&quot;            The parser does not support context
 * &quot;let &quot;       &quot;=7&quot;          Pre- and post-context only
 * &quot;let &quot;       &quot;for=7&quot;       Pre- and post-context and error text
 * &quot;&quot;           &quot;for&quot;         Error text only
 * &lt;/pre&gt;
 *
 * &lt;p&gt;Examples of engines which use UParseError (or may use it in the
 * future) are Transliterator, RuleBasedBreakIterator, and
 * RegexPattern.
 * 
 * @stable ICU 2.0
 */</doc>
<mbr r='UParseError::line' o='0' t='int32_t'/>
<mbr r='UParseError::offset' o='32' t='int32_t'/>
<mbr r='UParseError::preContext' o='64' t='UChar[16]'/>
<mbr r='UParseError::postContext' o='320' t='UChar[16]'/>
