<dec f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='243' type='boost::urls::url_base &amp; boost::urls::url_base::set_scheme(core::string_view s)'/>
<use f='boost-1.85.0/libs/url/include/boost/url/url.hpp' l='409' u='c' c='_ZN5boost4urls3url10set_schemeENS_4core17basic_string_viewIcEE'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='203'>/** Set the scheme

        The scheme is set to the specified
        string, which must contain a valid
        scheme without any trailing colon
        (&apos;:&apos;).
        Note that schemes are case-insensitive,
        and the canonical form is lowercased.

        @par Example
        @code
        assert( url( &quot;http://www.example.com&quot; ).set_scheme( &quot;https&quot; ).scheme_id() == scheme::https );
        @endcode

        @par Complexity
        Linear in `this-&gt;size() + s.size()`.

        @par Exception Safety
        Strong guarantee.
        Calls to allocate may throw.
        Exceptions thrown on invalid input.

        @throw system_error
        `s` contains an invalid scheme.

        @param s The scheme to set.

        @par BNF
        @code
        scheme        = ALPHA *( ALPHA / DIGIT / &quot;+&quot; / &quot;-&quot; / &quot;.&quot; )
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.1&quot;&gt;
            3.1. Scheme (rfc3986)&lt;/a&gt;

        @see
            @ref remove_scheme.
    */</doc>
<use f='boost-1.85.0/libs/url/include/boost/url/static_url.hpp' l='345' u='c' c='_ZN5boost4urls10static_url10set_schemeENS_4core17basic_string_viewIcEE'/>
<def f='boost-1.85.0/libs/url/src/url_base.cpp' l='148' ll='155' type='boost::urls::url_base &amp; boost::urls::url_base::set_scheme(core::string_view s)'/>
<doc f='boost-1.85.0/libs/url/src/url_base.cpp' l='142'>//------------------------------------------------
//
// Scheme
//
//------------------------------------------------</doc>
