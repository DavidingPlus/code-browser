<def f='boost-1.85.0/libs/pool/include/boost/pool/pool.hpp' l='433' ll='443' type='void * boost::pool::malloc()'/>
<doc f='boost-1.85.0/libs/pool/include/boost/pool/pool.hpp' l='429'>// Both malloc and ordered_malloc do a quick inlined check first for any
    //  free chunks.  Only if we need to get another memory block do we call
    //  the non-inlined *_need_resize() functions.
    // Returns 0 if out-of-memory</doc>
