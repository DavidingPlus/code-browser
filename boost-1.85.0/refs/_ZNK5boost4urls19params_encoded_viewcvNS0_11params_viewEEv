<dec f='boost-1.85.0/libs/url/include/boost/url/params_encoded_view.hpp' l='223' ll='224' type='boost::urls::params_view boost::urls::params_encoded_view::operator params_view() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/params_encoded_view.hpp' l='194'>/** Conversion

        This conversion returns a new view which
        references the same underlying character
        buffer, and whose iterators and members
        return ordinary strings with decoding
        applied to any percent escapes.

        Ownership is not transferred; the caller
        is responsible for ensuring the lifetime
        of the buffer extends until it is no
        longer referenced.

        @par Example
        @code
        params_view qp = parse_path( &quot;/path/to/file.txt&quot; ).value();
        @endcode

        @par Postconditions
        @code
        params_view( *this ).buffer().data() == this-&gt;buffer().data()
        @endcode

        @par Complexity
        Constant

        @par Exception Safety
        Throws nothing
    */</doc>
<def f='boost-1.85.0/libs/url/src/params_encoded_view.cpp' l='37' ll='42' type='boost::urls::params_view boost::urls::params_encoded_view::operator params_view() const'/>
<use f='boost-1.85.0/libs/url/src/params_view.cpp' l='43' u='c' c='_ZN5boost4urls11params_viewC1ENS_4core17basic_string_viewIcEE'/>
<use f='boost-1.85.0/libs/url/src/params_view.cpp' l='54' u='c' c='_ZN5boost4urls11params_viewC1ENS_4core17basic_string_viewIcEENS0_13encoding_optsE'/>
