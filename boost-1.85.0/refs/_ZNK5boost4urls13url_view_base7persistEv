<dec f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='298' type='std::shared_ptr&lt;const url_view&gt; boost::urls::url_view_base::persist() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='262'>/** Return a shared, persistent copy of the url

        This function returns a read-only copy of
        the url, with shared lifetime. The returned
        value owns (persists) the underlying string.
        The algorithm used to create the value
        minimizes the number of individual memory
        allocations, making it more efficient than
        when using direct standard library functions.

        @par Example
        @code
        std::shared_ptr&lt; url_view const &gt; sp;
        {
            std::string s( &quot;http://example.com&quot; );
            url_view u( s );                        // u references characters in s

            assert( u.data() == s.data() );         // same buffer

            sp = u.persist();

            assert( sp-&gt;data() != s.data() );       // different buffer
            assert( sp-&gt;buffer() == s);             // same contents

            // s is destroyed and thus u
            // becomes invalid, but sp remains valid.
        }
        @endcode

        @par Complexity
        Linear in `this-&gt;size()`.

        @par Exception Safety
        Calls to allocate may throw.
    */</doc>
<def f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='83' ll='97' type='std::shared_ptr&lt;const url_view&gt; boost::urls::url_view_base::persist() const'/>
