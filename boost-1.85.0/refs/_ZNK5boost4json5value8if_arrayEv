<def f='boost-1.85.0/libs/json/include/boost/json/value.hpp' l='1972' ll='1978' type='const boost::json::array * boost::json::value::if_array() const'/>
<use f='boost-1.85.0/libs/json/include/boost/json/detail/value_to.hpp' l='120' u='c' c='_ZN5boost4json6detail13value_to_implENS1_20array_conversion_tagENS0_16try_value_to_tagINS0_5arrayEEERKNS0_5valueERKT_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/detail/value_to.hpp' l='254' u='c' c='_ZN5boost4json6detail13value_to_implENS1_23sequence_conversion_tagENS0_16try_value_to_tagIT_EERKNS0_5valueERKT0_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/detail/value_to.hpp' l='324' u='c' c='_ZN5boost4json6detail13value_to_implENS1_20tuple_conversion_tagENS0_16try_value_to_tagIT_EERKNS0_5valueERKT0_'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/value.hpp' l='1953'>/** Return an @ref array pointer if this is an array, else return `nullptr`

        If `this-&gt;kind() == kind::array`, returns a pointer
        to the underlying array. Otherwise, returns `nullptr`.

        @par Example
        The return value is used in both a boolean context and
        to assign a variable:
        @code
        if( auto p = jv.if_array() )
            return *p;
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        No-throw guarantee.
    */</doc>
