<dec f='boost-1.85.0/libs/wave/include/boost/wave/grammars/cpp_defined_grammar_gen.hpp' l='63' type='static boost::spirit::classic::parse_info&lt;iterator1_type&gt; boost::wave::grammars::defined_grammar_gen::parse_operator_defined(const boost::wave::grammars::defined_grammar_gen::iterator1_type &amp; first, const boost::wave::grammars::defined_grammar_gen::iterator1_type &amp; last, boost::wave::grammars::defined_grammar_gen::token_sequence_type &amp; found_qualified_name)'/>
<def f='boost-1.85.0/libs/wave/include/boost/wave/grammars/cpp_defined_grammar.hpp' l='139' ll='154' type='static boost::spirit::classic::parse_info&lt;typename defined_grammar_gen&lt;LexIteratorT&gt;::iterator1_type&gt; boost::wave::grammars::defined_grammar_gen::parse_operator_defined(const boost::wave::grammars::defined_grammar_gen::iterator1_type &amp; first, const boost::wave::grammars::defined_grammar_gen::iterator1_type &amp; last, boost::wave::grammars::defined_grammar_gen::token_sequence_type &amp; found_qualified_name)'/>
<doc f='boost-1.85.0/libs/wave/include/boost/wave/grammars/cpp_defined_grammar.hpp' l='132'>//  The parse_operator_define function is instantiated manually twice to
//  simplify the explicit specialization of this template. This way the user
//  has only to specify one template parameter (the lexer type) to correctly
//  formulate the required explicit specialization.
//  This results in no code overhead, because otherwise the function would be
//  generated by the compiler twice anyway.</doc>
<doc f='boost-1.85.0/libs/wave/include/boost/wave/grammars/cpp_defined_grammar_gen.hpp' l='61'>//  parse the operator defined and return the found qualified name</doc>
