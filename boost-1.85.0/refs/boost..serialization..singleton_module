<inh f='boost-1.85.0/libs/core/include/boost/core/noncopyable.hpp' l='38' c='boost::noncopyable_::noncopyable'/>
<def f='boost-1.85.0/libs/serialization/include/boost/serialization/singleton.hpp' l='100' ll='119'/>
<use f='boost-1.85.0/libs/serialization/include/boost/serialization/singleton.hpp' l='121' c='_ZN5boost13serializationL20get_singleton_moduleEv'/>
<use f='boost-1.85.0/libs/serialization/include/boost/serialization/singleton.hpp' l='122' c='_ZN5boost13serializationL20get_singleton_moduleEv'/>
<size>1</size>
<doc f='boost-1.85.0/libs/serialization/include/boost/serialization/singleton.hpp' l='56'>//////////////////////////////////////////////////////////////////////
// Provides a dynamically-initialized (singleton) instance of T in a
// way that avoids LNK1179 on vc6.  See http://tinyurl.com/ljdp8 or
// http://lists.boost.org/Archives/boost/2006/05/105286.php for
// details.
//

// Singletons created by this code are guaranteed to be unique
// within the executable or shared library which creates them.
// This is sufficient and in fact ideal for the serialization library.
// The singleton is created when the module is loaded and destroyed
// when the module is unloaded.

// This base class has two functions.

// First it provides a module handle for each singleton indicating
// the executable or shared library in which it was created. This
// turns out to be necessary and sufficient to implement the tables
// used by serialization library.

// Second, it provides a mechanism to detect when a non-const function
// is called after initialization.

// Make a singleton to lock/unlock all singletons for alteration.
// The intent is that all singletons created/used by this code
// are to be initialized before main is called. A test program
// can lock all the singletons when main is entered.  Thus any
// attempt to retrieve a mutable instance while locked will
// generate an assertion if compiled for debug.

// The singleton template can be used in 2 ways:
// 1 (Recommended): Publicly inherit your type T from singleton&lt;T&gt;,
// make its ctor protected and access it via T::get_const_instance()
// 2: Simply access singleton&lt;T&gt; without changing T. Note that this only
// provides a global instance accessible by singleton&lt;T&gt;::get_const_instance()
// or singleton&lt;T&gt;::get_mutable_instance() to prevent using multiple instances
// of T make its ctor protected

// Note on usage of BOOST_DLLEXPORT: These functions are in danger of
// being eliminated by the optimizer when building an application in
// release mode. Usage of the macro is meant to signal the compiler/linker
// to avoid dropping these functions which seem to be unreferenced.
// This usage is not related to autolinking.</doc>
<fun r='_ZN5boost13serialization16singleton_module8get_lockEv'/>
<fun r='_ZN5boost13serialization16singleton_module4lockEv'/>
<fun r='_ZN5boost13serialization16singleton_module6unlockEv'/>
<fun r='_ZN5boost13serialization16singleton_module9is_lockedEv'/>
