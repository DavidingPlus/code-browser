<dec f='boost-1.85.0/libs/container/include/boost/container/pmr/monotonic_buffer_resource.hpp' l='98' type='void boost::container::pmr::monotonic_buffer_resource::monotonic_buffer_resource(void * buffer, std::size_t buffer_size, boost::container::pmr::memory_resource * upstream = 0)'/>
<def f='boost-1.85.0/libs/container/src/monotonic_buffer_resource.cpp' l='82' ll='91' type='void boost::container::pmr::monotonic_buffer_resource::monotonic_buffer_resource(void * buffer, std::size_t buffer_size, boost::container::pmr::memory_resource * upstream = 0)'/>
<doc f='boost-1.85.0/libs/container/include/boost/container/pmr/monotonic_buffer_resource.hpp' l='91'>//! &lt;b&gt;Requires&lt;/b&gt;: `upstream` shall be the address of a valid memory resource or `nullptr`,
   //!   `buffer_size` shall be no larger than the number of bytes in buffer.
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: If `upstream` is not nullptr, sets the internal resource to `upstream`,
   //!   to get_default_resource() otherwise. Sets the internal `current_buffer` to `buffer`,
   //!   and `next_buffer_size` to `buffer_size` (but not less than an implementation-defined size),
   //!   then increases `next_buffer_size` by an implementation-defined growth factor (which need not be integral).</doc>
