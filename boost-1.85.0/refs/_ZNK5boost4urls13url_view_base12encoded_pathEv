<use f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1669' u='c' c='_ZNK5boost4urls13url_view_base4pathEOT_'/>
<dec f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1717' type='boost::urls::pct_string_view boost::urls::url_view_base::encoded_path() const'/>
<use f='boost-1.85.0/libs/url/src/detail/pattern.cpp' l='291' u='c' c='_ZNK5boost4urls6detail7pattern5applyERNS0_8url_baseERKNS1_11format_argsE'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1673'>/** Return the path

        This function returns the path as a
        string. The path may be empty.
        Any percent-escapes in the string are
        decoded first.

        @par Example
        @code
        assert( url_view( &quot;file:///Program%20Files/Games/config.ini&quot; ).encoded_path() == &quot;/Program%20Files/Games/config.ini&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        path          = path-abempty    ; begins with &quot;/&quot; or is empty
                      / path-absolute   ; begins with &quot;/&quot; but not &quot;//&quot;
                      / path-noscheme   ; begins with a non-colon segment
                      / path-rootless   ; begins with a segment
                      / path-empty      ; zero characters

        path-abempty  = *( &quot;/&quot; segment )
        path-absolute = &quot;/&quot; [ segment-nz *( &quot;/&quot; segment ) ]
        path-noscheme = segment-nz-nc *( &quot;/&quot; segment )
        path-rootless = segment-nz *( &quot;/&quot; segment )
        path-empty    = 0&lt;pchar&gt;
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.3&quot;
            &gt;3.3. Path (rfc3986)&lt;/a&gt;

        @see
            @ref is_path_absolute,
            @ref encoded_segments.
            @ref path,
            @ref segments.
    */</doc>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1052' u='c' c='_ZN5boost4urls8url_base17set_path_absoluteEb'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1577' u='c' c='_ZN5boost4urls8url_base7resolveERKNS0_13url_view_baseE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1578' u='c' c='_ZN5boost4urls8url_base7resolveERKNS0_13url_view_baseE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1594' u='c' c='_ZN5boost4urls8url_base7resolveERKNS0_13url_view_baseE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1616' u='c' c='_ZN5boost4urls8url_base7resolveERKNS0_13url_view_baseE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1892' u='c' c='_ZN5boost4urls8url_base14normalize_pathEv'/>
<def f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='481' ll='486' type='boost::urls::pct_string_view boost::urls::url_view_base::encoded_path() const'/>
<doc f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='475'>//------------------------------------------------
//
// Path
//
//------------------------------------------------</doc>
