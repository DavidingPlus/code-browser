<inh f='include/unicode/format.h' l='98' c='icu_66::Format'/>
<def f='include/unicode/numfmt.h' l='175' ll='1166'/>
<use f='include/unicode/numfmt.h' l='271' c='_ZNK6icu_6612NumberFormat5cloneEv'/>
<use f='include/unicode/numfmt.h' l='733' c='_ZN6icu_6612NumberFormat14createInstanceER10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='744' c='_ZN6icu_6612NumberFormat14createInstanceERKNS_6LocaleER10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='758' c='_ZN6icu_6612NumberFormat14createInstanceERKNS_6LocaleE18UNumberFormatStyleR10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='769' c='_ZN6icu_6612NumberFormat22internalCreateInstanceERKNS_6LocaleE18UNumberFormatStyleR10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='793' c='_ZN6icu_6612NumberFormat22createCurrencyInstanceER10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='803' c='_ZN6icu_6612NumberFormat22createCurrencyInstanceERKNS_6LocaleER10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='813' c='_ZN6icu_6612NumberFormat21createPercentInstanceER10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='823' c='_ZN6icu_6612NumberFormat21createPercentInstanceERKNS_6LocaleER10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='833' c='_ZN6icu_6612NumberFormat24createScientificInstanceER10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='843' c='_ZN6icu_6612NumberFormat24createScientificInstanceERKNS_6LocaleER10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='1096' c='_ZN6icu_6612NumberFormatC1ERKS0_'/>
<use f='include/unicode/numfmt.h' l='1102' c='_ZN6icu_6612NumberFormataSERKS0_'/>
<use f='include/unicode/numfmt.h' l='1102' c='_ZN6icu_6612NumberFormataSERKS0_'/>
<use f='include/unicode/numfmt.h' l='1121' c='_ZN6icu_6612NumberFormat12makeInstanceERKNS_6LocaleE18UNumberFormatStyleaR10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='1138' c='_ZN6icu_6612NumberFormat12makeInstanceERKNS_6LocaleE18UNumberFormatStyleR10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='1208' c='_ZN6icu_6619NumberFormatFactory12createFormatERKNS_6LocaleE18UNumberFormatStyle'/>
<use f='include/unicode/datefmt.h' l='757' c='_ZNK6icu_6610DateFormat15getNumberFormatEv'/>
<use f='include/unicode/datefmt.h' l='765' c='_ZN6icu_6610DateFormat17adoptNumberFormatEPNS_12NumberFormatE'/>
<use f='include/unicode/datefmt.h' l='772' c='_ZN6icu_6610DateFormat15setNumberFormatERKNS_12NumberFormatE'/>
<use f='include/unicode/datefmt.h' l='880'/>
<use f='include/unicode/smpdtfmt.h' l='1156' c='_ZN6icu_6616SimpleDateFormat17adoptNumberFormatEPNS_12NumberFormatE'/>
<use f='include/unicode/smpdtfmt.h' l='1173' c='_ZN6icu_6616SimpleDateFormat17adoptNumberFormatERKNS_13UnicodeStringEPNS_12NumberFormatER10UErrorCode'/>
<use f='include/unicode/smpdtfmt.h' l='1180' c='_ZNK6icu_6616SimpleDateFormat23getNumberFormatForFieldEDs'/>
<use f='include/unicode/smpdtfmt.h' l='1294' c='_ZNK6icu_6616SimpleDateFormat17zeroPaddingNumberEPKNS_12NumberFormatERNS_13UnicodeStringEiii'/>
<use f='include/unicode/smpdtfmt.h' l='1431' c='_ZNK6icu_6616SimpleDateFormat8parseIntERKNS_13UnicodeStringERNS_11FormattableERNS_13ParsePositionEaPKNS_12NumberFormatE'/>
<use f='include/unicode/smpdtfmt.h' l='1438' c='_ZNK6icu_6616SimpleDateFormat8parseIntERKNS_13UnicodeStringERNS_11FormattableEiRNS_13ParsePositionEaPKNS_12NumberFormatE'/>
<use f='include/unicode/smpdtfmt.h' l='1540' c='_ZNK6icu_6616SimpleDateFormat22getNumberFormatByIndexE16UDateFormatField'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.hpp' l='44' c='_ZNK5boost6locale8impl_icu16formatters_cache13number_formatENS1_12num_fmt_typeE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.hpp' l='62' c='_ZNK5boost6locale8impl_icu16formatters_cache20create_number_formatENS1_12num_fmt_typeER10UErrorCode'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.hpp' l='67'/>
<ovr f='include/unicode/decimfmt.h' l='668' c='icu_66::DecimalFormat'/>
<use f='include/unicode/decimfmt.h' l='668'/>
<ovr f='include/unicode/rbnf.h' l='562' c='icu_66::RuleBasedNumberFormat'/>
<use f='include/unicode/rbnf.h' l='562'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='37' c='_ZN5boost6locale8impl_icu12_GLOBAL__N_119set_fraction_digitsERN6icu_6612NumberFormatESt13_Ios_Fmtflagsl'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='57' c='_ZN5boost6locale8impl_icu13number_formatC1ERN6icu_6612NumberFormatENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='124'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='355' c='_ZN5boost6locale8impl_icu9formatter6createERSt8ios_baseRKN6icu_666LocaleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='361' c='_ZN5boost6locale8impl_icu9formatter6createERSt8ios_baseRKN6icu_666LocaleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='366' c='_ZN5boost6locale8impl_icu9formatter6createERSt8ios_baseRKN6icu_666LocaleERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<size>360</size>
<doc f='include/unicode/numfmt.h' l='57'>/**
 * &lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; New users are strongly encouraged to see if
 * numberformatter.h fits their use case.  Although not deprecated, this header
 * is provided for backwards compatibility only.
 *
 * Abstract base class for all number formats.  Provides interface for
 * formatting and parsing a number.  Also provides methods for
 * determining which locales have number formats, and what their names
 * are.
 *
 * \headerfile unicode/numfmt.h &quot;unicode/numfmt.h&quot;
 * &lt;P&gt;
 * NumberFormat helps you to format and parse numbers for any locale.
 * Your code can be completely independent of the locale conventions
 * for decimal points, thousands-separators, or even the particular
 * decimal digits used, or whether the number format is even decimal.
 * &lt;P&gt;
 * To format a number for the current Locale, use one of the static
 * factory methods:
 * \code
 *    #include &lt;iostream&gt;
 *    #include &quot;unicode/numfmt.h&quot;
 *    #include &quot;unicode/unistr.h&quot;
 *    #include &quot;unicode/ustream.h&quot;
 *    using namespace std;
 *    
 *    int main() {
 *        double myNumber = 7.0;
 *        UnicodeString myString;
 *        UErrorCode success = U_ZERO_ERROR;
 *        NumberFormat* nf = NumberFormat::createInstance(success);
 *        nf-&gt;format(myNumber, myString);
 *        cout &lt;&lt; &quot; Example 1: &quot; &lt;&lt; myString &lt;&lt; endl;
 *    }
 * \endcode
 * Note that there are additional factory methods within subclasses of
 * NumberFormat.
 * &lt;P&gt;
 * If you are formatting multiple numbers, it is more efficient to get
 * the format and use it multiple times so that the system doesn&apos;t
 * have to fetch the information about the local language and country
 * conventions multiple times.
 * \code
 *     UnicodeString myString;
 *     UErrorCode success = U_ZERO_ERROR;
 *     NumberFormat *nf = NumberFormat::createInstance( success );
 *     for (int32_t number: {123, 3333, -1234567}) {
 *         nf-&gt;format(number, myString);
 *         myString += &quot;; &quot;;
 *     }
 *     cout &lt;&lt; &quot; Example 2: &quot; &lt;&lt; myString &lt;&lt; endl;
 * \endcode
 * To format a number for a different Locale, specify it in the
 * call to \c createInstance().
 * \code
 *     nf = NumberFormat::createInstance(Locale::getFrench(), success);
 * \endcode
 * You can use a \c NumberFormat to parse also.
 * \code
 *    UErrorCode success;
 *    Formattable result(-999);  // initialized with error code
 *    nf-&gt;parse(myString, result, success);
 * \endcode
 * Use \c createInstance() to get the normal number format for a \c Locale.
 * There are other static factory methods available.  Use \c createCurrencyInstance()
 * to get the currency number format for that country.  Use \c createPercentInstance()
 * to get a format for displaying percentages. With this format, a
 * fraction from 0.53 is displayed as 53%.
 * &lt;P&gt;
 * The type of number formatting can be specified by passing a &apos;style&apos; parameter to \c createInstance().
 * For example, use\n
 * \c createInstance(locale, UNUM_DECIMAL, errorCode) to get the normal number format,\n
 * \c createInstance(locale, UNUM_PERCENT, errorCode) to get a format for displaying percentage,\n
 * \c createInstance(locale, UNUM_SCIENTIFIC, errorCode) to get a format for displaying scientific number,\n
 * \c createInstance(locale, UNUM_CURRENCY, errorCode) to get the currency number format,
 * in which the currency is represented by its symbol, for example, &quot;$3.00&quot;.\n
 * \c createInstance(locale, UNUM_CURRENCY_ISO, errorCode)  to get the currency number format,
 * in which the currency is represented by its ISO code, for example &quot;USD3.00&quot;.\n
 * \c createInstance(locale, UNUM_CURRENCY_PLURAL, errorCode) to get the currency number format,
 * in which the currency is represented by its full name in plural format,
 * for example, &quot;3.00 US dollars&quot; or &quot;1.00 US dollar&quot;.
 * &lt;P&gt;
 * You can also control the display of numbers with such methods as
 * \c getMinimumFractionDigits().  If you want even more control over the
 * format or parsing, or want to give your users more control, you can
 * try dynamic_casting the \c NumberFormat you get from the factory methods to a
 * \c DecimalFormat. This will work for the vast majority of
 * countries; just remember to test for NULL in case you
 * encounter an unusual one.
 * &lt;P&gt;
 * You can also use forms of the parse and format methods with
 * \c ParsePosition and \c FieldPosition to allow you to:
 * &lt;ul type=round&gt;
 *   &lt;li&gt;(a) progressively parse through pieces of a string.
 *   &lt;li&gt;(b) align the decimal point and other areas.
 * &lt;/ul&gt;
 * For example, you can align numbers in two ways.
 * &lt;P&gt;
 * If you are using a monospaced font with spacing for alignment, you
 * can pass the \c FieldPosition in your format call, with field =
 * \c UNUM_INTEGER_FIELD. On output, \c getEndIndex will be set to the offset
 * between the last character of the integer and the decimal. Add
 * (desiredSpaceCount - getEndIndex) spaces at the front of the
 * string.
 * &lt;P&gt;
 * If you are using proportional fonts, instead of padding with
 * spaces, measure the width of the string in pixels from the start to
 * getEndIndex.  Then move the pen by (desiredPixelWidth -
 * widthToAlignmentPoint) before drawing the text.  It also works
 * where there is no decimal, but possibly additional characters at
 * the end, e.g. with parentheses in negative numbers: &quot;(12)&quot; for -12.
 * &lt;p&gt;
 * &lt;em&gt;User subclasses are not supported.&lt;/em&gt; While clients may write
 * subclasses, such code will not necessarily work and will not be
 * guaranteed to work stably from release to release.
 *
 * @stable ICU 2.0
 */</doc>
<fun r='_ZN6icu_6612NumberFormatD1Ev'/>
<fun r='_ZNK6icu_6612NumberFormat5cloneEv'/>
<fun r='_ZNK6icu_6612NumberFormateqERKNS_6FormatE'/>
<fun r='_ZNK6icu_6612NumberFormat6formatERKNS_11FormattableERNS_13UnicodeStringERNS_13FieldPositionER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat6formatERKNS_11FormattableERNS_13UnicodeStringEPNS_21FieldPositionIteratorER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat11parseObjectERKNS_13UnicodeStringERNS_11FormattableERNS_13ParsePositionE'/>
<fun r='_ZNK6icu_6612NumberFormat6formatEdRNS_13UnicodeStringE'/>
<fun r='_ZNK6icu_6612NumberFormat6formatEiRNS_13UnicodeStringE'/>
<fun r='_ZNK6icu_6612NumberFormat6formatElRNS_13UnicodeStringE'/>
<fun r='_ZNK6icu_6612NumberFormat6formatEdRNS_13UnicodeStringERNS_13FieldPositionE'/>
<fun r='_ZNK6icu_6612NumberFormat6formatEdRNS_13UnicodeStringERNS_13FieldPositionER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat6formatEdRNS_13UnicodeStringEPNS_21FieldPositionIteratorER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat6formatEiRNS_13UnicodeStringERNS_13FieldPositionE'/>
<fun r='_ZNK6icu_6612NumberFormat6formatEiRNS_13UnicodeStringERNS_13FieldPositionER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat6formatEiRNS_13UnicodeStringEPNS_21FieldPositionIteratorER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat6formatElRNS_13UnicodeStringERNS_13FieldPositionE'/>
<fun r='_ZNK6icu_6612NumberFormat6formatElRNS_13UnicodeStringERNS_13FieldPositionER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat6formatElRNS_13UnicodeStringEPNS_21FieldPositionIteratorER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat6formatENS_11StringPieceERNS_13UnicodeStringEPNS_21FieldPositionIteratorER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat6formatERKNS_6number4impl15DecimalQuantityERNS_13UnicodeStringEPNS_21FieldPositionIteratorER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat6formatERKNS_6number4impl15DecimalQuantityERNS_13UnicodeStringERNS_13FieldPositionER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat5parseERKNS_13UnicodeStringERNS_11FormattableERNS_13ParsePositionE'/>
<fun r='_ZNK6icu_6612NumberFormat5parseERKNS_13UnicodeStringERNS_11FormattableER10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat13parseCurrencyERKNS_13UnicodeStringERNS_13ParsePositionE'/>
<fun r='_ZNK6icu_6612NumberFormat18isParseIntegerOnlyEv'/>
<fun r='_ZN6icu_6612NumberFormat19setParseIntegerOnlyEa'/>
<fun r='_ZN6icu_6612NumberFormat10setLenientEa'/>
<fun r='_ZNK6icu_6612NumberFormat9isLenientEv'/>
<fun r='_ZN6icu_6612NumberFormat14createInstanceER10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat14createInstanceERKNS_6LocaleER10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat14createInstanceERKNS_6LocaleE18UNumberFormatStyleR10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat22internalCreateInstanceERKNS_6LocaleE18UNumberFormatStyleR10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat20createSharedInstanceERKNS_6LocaleE18UNumberFormatStyleR10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat22createCurrencyInstanceER10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat22createCurrencyInstanceERKNS_6LocaleER10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat21createPercentInstanceER10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat21createPercentInstanceERKNS_6LocaleER10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat24createScientificInstanceER10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat24createScientificInstanceERKNS_6LocaleER10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat19getAvailableLocalesERi'/>
<fun r='_ZN6icu_6612NumberFormat15registerFactoryEPNS_19NumberFormatFactoryER10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat10unregisterEPKvR10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat19getAvailableLocalesEv'/>
<fun r='_ZNK6icu_6612NumberFormat14isGroupingUsedEv'/>
<fun r='_ZN6icu_6612NumberFormat15setGroupingUsedEa'/>
<fun r='_ZNK6icu_6612NumberFormat23getMaximumIntegerDigitsEv'/>
<fun r='_ZN6icu_6612NumberFormat23setMaximumIntegerDigitsEi'/>
<fun r='_ZNK6icu_6612NumberFormat23getMinimumIntegerDigitsEv'/>
<fun r='_ZN6icu_6612NumberFormat23setMinimumIntegerDigitsEi'/>
<fun r='_ZNK6icu_6612NumberFormat24getMaximumFractionDigitsEv'/>
<fun r='_ZN6icu_6612NumberFormat24setMaximumFractionDigitsEi'/>
<fun r='_ZNK6icu_6612NumberFormat24getMinimumFractionDigitsEv'/>
<fun r='_ZN6icu_6612NumberFormat24setMinimumFractionDigitsEi'/>
<fun r='_ZN6icu_6612NumberFormat11setCurrencyEPKDsR10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat11getCurrencyEv'/>
<fun r='_ZN6icu_6612NumberFormat10setContextE15UDisplayContextR10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat10getContextE19UDisplayContextTypeR10UErrorCode'/>
<fun r='_ZNK6icu_6612NumberFormat15getRoundingModeEv'/>
<fun r='_ZN6icu_6612NumberFormat15setRoundingModeENS0_13ERoundingModeE'/>
<fun r='_ZN6icu_6612NumberFormat16getStaticClassIDEv'/>
<fun r='_ZNK6icu_6612NumberFormat17getDynamicClassIDEv'/>
<fun r='_ZN6icu_6612NumberFormatC1Ev'/>
<fun r='_ZN6icu_6612NumberFormatC1ERKS0_'/>
<fun r='_ZN6icu_6612NumberFormataSERKS0_'/>
<fun r='_ZNK6icu_6612NumberFormat20getEffectiveCurrencyEPDsR10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat12makeInstanceERKNS_6LocaleE18UNumberFormatStyleaR10UErrorCode'/>
<fun r='_ZN6icu_6612NumberFormat16isStyleSupportedE18UNumberFormatStyle'/>
<fun r='_ZN6icu_6612NumberFormat12makeInstanceERKNS_6LocaleE18UNumberFormatStyleR10UErrorCode'/>
<mbr r='icu_66::NumberFormat::fGroupingUsed' o='2576' t='UBool'/>
<mbr r='icu_66::NumberFormat::fMaxIntegerDigits' o='2592' t='int32_t'/>
<mbr r='icu_66::NumberFormat::fMinIntegerDigits' o='2624' t='int32_t'/>
<mbr r='icu_66::NumberFormat::fMaxFractionDigits' o='2656' t='int32_t'/>
<mbr r='icu_66::NumberFormat::fMinFractionDigits' o='2688' t='int32_t'/>
<smbr r='icu_66::NumberFormat::gDefaultMaxIntegerDigits' t='const int32_t'/>
<smbr r='icu_66::NumberFormat::gDefaultMinIntegerDigits' t='const int32_t'/>
<mbr r='icu_66::NumberFormat::fParseIntegerOnly' o='2720' t='UBool'/>
<mbr r='icu_66::NumberFormat::fLenient' o='2728' t='UBool'/>
<mbr r='icu_66::NumberFormat::fCurrency' o='2736' t='char16_t[4]'/>
<mbr r='icu_66::NumberFormat::fCapitalizationContext' o='2816' t='UDisplayContext'/>
<fun r='_ZNK6icu_6612NumberFormat18isParseIntegerOnlyEv'/>
<fun r='_ZNK6icu_6612NumberFormat9isLenientEv'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.cpp' l='85' c='_ZNK5boost6locale8impl_icu16formatters_cache20create_number_formatENS1_12num_fmt_typeER10UErrorCode'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.cpp' l='113' c='_ZNK5boost6locale8impl_icu16formatters_cache13number_formatENS1_12num_fmt_typeE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.cpp' l='115' c='_ZNK5boost6locale8impl_icu16formatters_cache13number_formatENS1_12num_fmt_typeE'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatters_cache.cpp' l='118' c='_ZNK5boost6locale8impl_icu16formatters_cache13number_formatENS1_12num_fmt_typeE'/>
<size>360</size>
