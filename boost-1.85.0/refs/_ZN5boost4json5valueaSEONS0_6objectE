<dec f='boost-1.85.0/libs/json/include/boost/json/value.hpp' l='1460' type='boost::json::value &amp; boost::json::value::operator=(boost::json::object &amp;&amp; obj)'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/pointer.ipp' l='461' u='c' c='_ZN5boost4json5value14set_at_pointerENS_4core17basic_string_viewIcEENS0_9value_refERNS_6system10error_codeERKNS0_19set_pointer_optionsE'/>
<def f='boost-1.85.0/libs/json/include/boost/json/impl/value.ipp' l='350' ll='357' type='boost::json::value &amp; boost::json::value::operator=(boost::json::object &amp;&amp; obj)'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/value.hpp' l='1435'>/** Assignment.

        The contents of the value are replaced with the
        contents of `obj` using move semantics:

        @li If `*obj.storage() == *this-&gt;storage()`,
        ownership of the underlying memory is transferred
        in constant time, with no possibility of exceptions.
        After assignment, the moved-from object becomes
        empty with its current storage pointer.

        @li If `*obj.storage() != *this-&gt;storage()`, an
        element-wise copy is performed, which may throw.
        In this case, the moved-from object is not
        changed.

        @par Complexity
        Constant, or linear in the size of `*this` plus `obj.size()`.

        @par Exception Safety
        Strong guarantee.
        Calls to `memory_resource::allocate` may throw.

        @param obj The object to move-assign from.
    */</doc>
