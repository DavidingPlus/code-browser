<dec f='boost-1.85.0/libs/container/include/boost/container/pmr/unsynchronized_pool_resource.hpp' l='80' type='void boost::container::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource(const boost::container::pmr::pool_options &amp; opts, boost::container::pmr::memory_resource * upstream)'/>
<def f='boost-1.85.0/libs/container/src/unsynchronized_pool_resource.cpp' l='21' ll='23' type='void boost::container::pmr::unsynchronized_pool_resource::unsynchronized_pool_resource(const boost::container::pmr::pool_options &amp; opts, boost::container::pmr::memory_resource * upstream)'/>
<doc f='boost-1.85.0/libs/container/include/boost/container/pmr/unsynchronized_pool_resource.hpp' l='67'>//! &lt;b&gt;Requires&lt;/b&gt;: `upstream` is the address of a valid memory resource.
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: Constructs a pool resource object that will obtain memory
   //!   from upstream whenever the pool resource is unable to satisfy a memory
   //!   request from its own internal data structures. The resulting object will hold
   //!   a copy of upstream, but will not own the resource to which upstream points.
   //!   [ Note: The intention is that calls to upstream-&gt;allocate() will be
   //!   substantially fewer than calls to this-&gt;allocate() in most cases. - end note 
   //!   The behavior of the pooling mechanism is tuned according to the value of
   //!   the opts argument.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: Nothing unless upstream-&gt;allocate() throws. It is unspecified if
   //!   or under what conditions this constructor calls upstream-&gt;allocate().</doc>
