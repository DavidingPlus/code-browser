<def f='boost-1.85.0/libs/intrusive/include/boost/intrusive/bstree_algorithms.hpp' l='478' ll='518' type='static void boost::intrusive::bstree_algorithms::replace_node(boost::intrusive::bstree_algorithms::node_ptr node_to_be_replaced, boost::intrusive::bstree_algorithms::node_ptr header, boost::intrusive::bstree_algorithms::node_ptr new_node)'/>
<doc f='boost-1.85.0/libs/intrusive/include/boost/intrusive/bstree_algorithms.hpp' l='464'>//! &lt;b&gt;Requires&lt;/b&gt;: node_to_be_replaced must be inserted in a tree
   //!   with header &quot;header&quot; and new_node must not be inserted in a tree.
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: Replaces node_to_be_replaced in its position in the
   //!   tree with new_node. The tree does not need to be rebalanced
   //!
   //! &lt;b&gt;Complexity&lt;/b&gt;: Constant.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: Nothing.
   //!
   //! &lt;b&gt;Note&lt;/b&gt;: This function will break container ordering invariants if
   //!   new_node is not equivalent to node_to_be_replaced according to the
   //!   ordering rules. This function is faster than erasing and inserting
   //!   the node, since no rebalancing or comparison is needed. Experimental function</doc>
