<inh f='boost-1.85.0/libs/program_options/include/boost/program_options/eof_iterator.hpp' l='45' c='boost::eof_iterator'/>
<def f='boost-1.85.0/libs/program_options/include/boost/program_options/detail/config_file.hpp' l='70' ll='116'/>
<use f='boost-1.85.0/libs/program_options/include/boost/program_options/detail/config_file.hpp' l='71'/>
<ovr f='boost-1.85.0/libs/program_options/include/boost/program_options/detail/config_file.hpp' l='119' c='boost::program_options::detail::basic_config_file_iterator'/>
<use f='boost-1.85.0/libs/program_options/include/boost/program_options/detail/config_file.hpp' l='119'/>
<use f='boost-1.85.0/libs/program_options/include/boost/program_options/detail/config_file.hpp' l='155' c='_ZN5boost15program_options6detail26basic_config_file_iteratorC1ERSt13basic_istreamIT_St11char_traitsIS4_EERKSt3setINSt7__cxx1112basic_stringIcS5_IcESa14490220'/>
<size>248</size>
<doc f='boost-1.85.0/libs/program_options/include/boost/program_options/detail/config_file.hpp' l='39'>/** Standalone parser for config files in ini-line format.
        The parser is a model of single-pass lvalue iterator, and
        default constructor creates past-the-end-iterator. The typical usage is:
        config_file_iterator i(is, ... set of options ...), e;
        for(; i !=e; ++i) {
            *i;
        }
        
        Syntax conventions:

        - config file can not contain positional options
        - &apos;#&apos; is comment character: it is ignored together with
          the rest of the line.
        - variable assignments are in the form
          name &apos;=&apos; value.
          spaces around &apos;=&apos; are trimmed.
        - Section names are given in brackets. 

         The actual option name is constructed by combining current section
         name and specified option name, with dot between. If section_name 
         already contains dot at the end, new dot is not inserted. For example:
         @verbatim
         [gui.accessibility]
         visual_bell=yes
         @endverbatim
         will result in option &quot;gui.accessibility.visual_bell&quot; with value
         &quot;yes&quot; been returned.

         TODO: maybe, we should just accept a pointer to options_description
         class.
     */</doc>
<fun r='_ZN5boost15program_options6detail27common_config_file_iteratorC1Ev'/>
<fun r='_ZN5boost15program_options6detail27common_config_file_iteratorC1ERKSt3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS9_ESaIS9_EEb'/>
<fun r='_ZN5boost15program_options6detail27common_config_file_iterator3getEv'/>
<fun r='_ZN5boost15program_options6detail27common_config_file_iterator7getlineERNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<fun r='_ZN5boost15program_options6detail27common_config_file_iterator10add_optionEPKc'/>
<fun r='_ZNK5boost15program_options6detail27common_config_file_iterator14allowed_optionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
<mbr r='boost::program_options::detail::common_config_file_iterator::allowed_options' o='896' t='std::set&lt;std::string&gt;'/>
<mbr r='boost::program_options::detail::common_config_file_iterator::allowed_prefixes' o='1280' t='std::set&lt;std::string&gt;'/>
<mbr r='boost::program_options::detail::common_config_file_iterator::m_prefix' o='1664' t='std::string'/>
<mbr r='boost::program_options::detail::common_config_file_iterator::m_allow_unregistered' o='1920' t='bool'/>
<fun r='_ZN5boost15program_options6detail27common_config_file_iteratorC1ERKSt3setINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt4lessIS9_ESaIS9_EEb'/>
<fun r='_ZN5boost15program_options6detail27common_config_file_iterator10add_optionEPKc'/>
<fun r='_ZN5boost15program_options6detail27common_config_file_iterator3getEv'/>
<fun r='_ZNK5boost15program_options6detail27common_config_file_iterator14allowed_optionERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'/>
