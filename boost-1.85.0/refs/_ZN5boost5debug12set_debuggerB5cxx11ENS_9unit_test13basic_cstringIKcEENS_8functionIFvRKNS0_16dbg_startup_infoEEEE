<dec f='boost-1.85.0/libs/test/include/boost/test/debug.hpp' l='94' type='std::string boost::debug::set_debugger(unit_test::const_string dbg_id, boost::debug::dbg_starter s = boost::debug::dbg_starter())'/>
<def f='boost-1.85.0/libs/test/include/boost/test/impl/debug.ipp' l='768' ll='779' type='std::string boost::debug::set_debugger(unit_test::const_string dbg_id, boost::debug::dbg_starter s = boost::debug::dbg_starter())'/>
<doc f='boost-1.85.0/libs/test/include/boost/test/debug.hpp' l='77'>// ************************************************************************** //
/// Specifies which debugger to use when attaching and optionally what routine to use to start that debugger

/// There are  many different debuggers available for different platforms. Some of them also can be used in a different setups/configuratins.
/// For example, gdb can be used in plain text mode, inside ddd, inside (x)emacs or in a separate xterm window.
/// Boost.Test identifies each configuration with unique string.
/// Also different debuggers configurations require different routines which is specifically tailored to start that debugger configuration.
/// Boost.Test comes with set of predefined configuration names and corresponding routines for these configurations:
///   - TODO
///
/// You can use this routine to select which one of the predefined debugger configurations to use in which case you do not need to provide starter
/// routine (the one provided by Boost.Test will be used). You can also use this routine to select your own debugger by providing unique configuration
/// id and starter routine for this configuration.
///
/// @param[in] dbg_id   Unique id for debugger configuration (for example, gdb)
/// @param[in] s        Optional starter routine for selected configuration (use only you want to define your own configuration)
/// @returns            Id of previously selected debugger configuration</doc>
