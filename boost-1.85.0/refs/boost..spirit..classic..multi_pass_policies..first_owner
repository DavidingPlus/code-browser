<def f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/iterator/multi_pass.hpp' l='106' ll='141'/>
<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/iterator/multi_pass.hpp' l='113' c='_ZN5boost6spirit7classic19multi_pass_policies11first_ownerC1ERKS3_'/>
<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/iterator/multi_pass.hpp' l='127' c='_ZN5boost6spirit7classic19multi_pass_policies11first_owner4swapERS3_'/>
<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/iterator/multi_pass.hpp' l='1236'/>
<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/iterator/multi_pass.hpp' l='1243'/>
<size>1</size>
<doc f='boost-1.85.0/libs/spirit/include/boost/spirit/home/classic/iterator/multi_pass.hpp' l='94'>///////////////////////////////////////////////////////////////////////////////
// class first_owner
// Implementation of an OwnershipPolicy used by multi_pass
// This ownership policy dictates that the first iterator created will
// determine the lifespan of the shared components.  This works well for
// spirit, since no dynamic allocation of iterators is done, and all copies
// are make on the stack.
//
// There is a caveat about using this policy together with the std_deque
// StoragePolicy. Since first_owner always returns false from unique(),
// std_deque will only release the queued data if clear_queue() is called.
///////////////////////////////////////////////////////////////////////////////</doc>
<fun r='_ZN5boost6spirit7classic19multi_pass_policies11first_ownerC1Ev'/>
<fun r='_ZN5boost6spirit7classic19multi_pass_policies11first_ownerC1ERKS3_'/>
<fun r='_ZN5boost6spirit7classic19multi_pass_policies11first_owner5cloneEv'/>
<fun r='_ZN5boost6spirit7classic19multi_pass_policies11first_owner7releaseEv'/>
<fun r='_ZN5boost6spirit7classic19multi_pass_policies11first_owner4swapERS3_'/>
<fun r='_ZNK5boost6spirit7classic19multi_pass_policies11first_owner6uniqueEv'/>
<mbr r='boost::spirit::classic::multi_pass_policies::first_owner::first' o='0' t='bool'/>
