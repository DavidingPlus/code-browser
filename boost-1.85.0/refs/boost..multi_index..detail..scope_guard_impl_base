<def f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='60' ll='93'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='74' c='_ZN5boost11multi_index6detail21scope_guard_impl_baseC1ERKS2_'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='92' c='_ZN5boost11multi_index6detail21scope_guard_impl_baseaSERKS2_'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='92' c='_ZN5boost11multi_index6detail21scope_guard_impl_baseaSERKS2_'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='95'/>
<ovr f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='97' c='boost::multi_index::detail::null_guard'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='97'/>
<ovr f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='127' c='boost::multi_index::detail::scope_guard_impl0'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='127'/>
<ovr f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='160' c='boost::multi_index::detail::scope_guard_impl1'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='160'/>
<ovr f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='193' c='boost::multi_index::detail::scope_guard_impl2'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='193'/>
<ovr f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='227' c='boost::multi_index::detail::scope_guard_impl3'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='227'/>
<ovr f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='262' c='boost::multi_index::detail::scope_guard_impl4'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='262'/>
<ovr f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='302' c='boost::multi_index::detail::obj_scope_guard_impl0'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='302'/>
<ovr f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='335' c='boost::multi_index::detail::obj_scope_guard_impl1'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='335'/>
<ovr f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='371' c='boost::multi_index::detail::obj_scope_guard_impl2'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='371'/>
<ovr f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='409' c='boost::multi_index::detail::obj_scope_guard_impl3'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='409'/>
<size>1</size>
<doc f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/scope_guard.hpp' l='25'>/* Until some official version of the ScopeGuard idiom makes it into Boost,
 * we locally define our own. This is a merely reformated version of
 * ScopeGuard.h as defined in:
 *   Alexandrescu, A., Marginean, P.:&quot;Generic&lt;Programming&gt;: Change the Way You
 *     Write Exception-Safe Code - Forever&quot;, C/C++ Users Jornal, Dec 2000,
 *     http://www.drdobbs.com/184403758
 * with the following modifications:
 *   - General pretty formatting (pretty to my taste at least.)
 *   - Naming style changed to standard C++ library requirements.
 *   - Added scope_guard_impl4 and obj_scope_guard_impl3, (Boost.MultiIndex
 *     needs them). A better design would provide guards for many more
 *     arguments through the Boost Preprocessor Library.
 *   - Added scope_guard_impl_base::touch (see below.)
 *   - Removed RefHolder and ByRef, whose functionality is provided
 *     already by Boost.Ref.
 *   - Removed static make_guard&apos;s and make_obj_guard&apos;s, so that the code
 *     will work even if BOOST_NO_MEMBER_TEMPLATES is defined. This forces
 *     us to move some private ctors to public, though.
 *
 * NB: CodeWarrior Pro 8 seems to have problems looking up safe_execute
 * without an explicit qualification.
 * 
 * We also define the following variants of the idiom:
 * 
 *   - make_guard_if_c&lt;bool&gt;( ... )
 *   - make_guard_if&lt;IntegralConstant&gt;( ... )
 *   - make_obj_guard_if_c&lt;bool&gt;( ... )
 *   - make_obj_guard_if&lt;IntegralConstant&gt;( ... )
 * which may be used with a compile-time constant to yield
 * a &quot;null_guard&quot; if the boolean compile-time parameter is false,
 * or conversely, the guard is only constructed if the constant is true.
 * This is useful to avoid extra tagging, because the returned
 * null_guard can be optimzed comlpetely away by the compiler.
 */</doc>
<fun r='_ZN5boost11multi_index6detail21scope_guard_impl_baseC1Ev'/>
<fun r='_ZNK5boost11multi_index6detail21scope_guard_impl_base7dismissEv'/>
<fun r='_ZNK5boost11multi_index6detail21scope_guard_impl_base5touchEv'/>
<fun r='_ZN5boost11multi_index6detail21scope_guard_impl_baseD1Ev'/>
<fun r='_ZN5boost11multi_index6detail21scope_guard_impl_baseC1ERKS2_'/>
<fun r='_ZN5boost11multi_index6detail21scope_guard_impl_base12safe_executeERT_'/>
<mbr r='boost::multi_index::detail::scope_guard_impl_base::dismissed_' o='0' t='bool'/>
<fun r='_ZN5boost11multi_index6detail21scope_guard_impl_baseaSERKS2_'/>
