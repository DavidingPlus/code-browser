<dec f='boost-1.85.0/libs/property_tree/include/boost/property_tree/ptree.hpp' l='261' type='boost::property_tree::basic_ptree::self_type &amp; boost::property_tree::basic_ptree::get_child(const boost::property_tree::basic_ptree::path_type &amp; path)'/>
<def f='boost-1.85.0/libs/property_tree/include/boost/property_tree/detail/ptree_implementation.hpp' l='571' ll='581' type='basic_ptree&lt;K, D, C&gt; &amp; boost::property_tree::basic_ptree::get_child(const boost::property_tree::basic_ptree::path_type &amp; path)'/>
<use f='boost-1.85.0/libs/graph/src/graphml.cpp' l='84' u='c' c='_ZN12_GLOBAL__N_114graphml_reader3runERSim'/>
<doc f='boost-1.85.0/libs/property_tree/include/boost/property_tree/ptree.hpp' l='248'>/** Get the child at the given path, or throw @c ptree_bad_path.
         * @note Depending on the path, the result at each level may not be
         *       completely deterministic, i.e. if the same key appears multiple
         *       times, which child is chosen is not specified. This can lead
         *       to the path not being resolved even though there is a
         *       descendant with this path. Example:
         * @code
         *   a -&gt; b -&gt; c
         *     -&gt; b
         * @endcode
         *       The path &quot;a.b.c&quot; will succeed if the resolution of &quot;b&quot; chooses
         *       the first such node, but fail if it chooses the second.
         */</doc>
