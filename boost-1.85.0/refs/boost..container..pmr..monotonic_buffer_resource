<inh f='boost-1.85.0/libs/container/include/boost/container/pmr/memory_resource.hpp' l='31' c='boost::container::pmr::memory_resource'/>
<def f='boost-1.85.0/libs/container/include/boost/container/pmr/monotonic_buffer_resource.hpp' l='51' ll='175'/>
<use f='boost-1.85.0/libs/container/include/boost/container/pmr/monotonic_buffer_resource.hpp' l='101' c='_ZN5boost9container3pmr25monotonic_buffer_resourceC1ERKS2_'/>
<use f='boost-1.85.0/libs/container/include/boost/container/pmr/monotonic_buffer_resource.hpp' l='102' c='_ZN5boost9container3pmr25monotonic_buffer_resourceaSERKS2_'/>
<use f='boost-1.85.0/libs/container/include/boost/container/pmr/monotonic_buffer_resource.hpp' l='102' c='_ZN5boost9container3pmr25monotonic_buffer_resourceaSERKS2_'/>
<size>64</size>
<doc f='boost-1.85.0/libs/container/include/boost/container/pmr/monotonic_buffer_resource.hpp' l='31'>//! A monotonic_buffer_resource is a special-purpose memory resource intended for
//! very fast memory allocations in situations where memory is used to build up a
//! few objects and then is released all at once when the memory resource object
//! is destroyed. It has the following qualities:
//! 
//! - A call to deallocate has no effect, thus the amount of memory consumed
//!   increases monotonically until the resource is destroyed.
//! 
//! - The program can supply an initial buffer, which the allocator uses to satisfy
//!   memory requests.
//! 
//! - When the initial buffer (if any) is exhausted, it obtains additional buffers
//!   from an upstream memory resource supplied at construction. Each additional
//!   buffer is larger than the previous one, following a geometric progression.
//! 
//! - It is intended for access from one thread of control at a time. Specifically,
//!   calls to allocate and deallocate do not synchronize with one another.
//! 
//! - It owns the allocated memory and frees it on destruction, even if deallocate has
//!   not been called for some of the allocated blocks.</doc>
<mbr r='boost::container::pmr::monotonic_buffer_resource::m_memory_blocks' o='64' t='boost::container::pmr::block_slist'/>
<mbr r='boost::container::pmr::monotonic_buffer_resource::m_current_buffer' o='192' t='void *'/>
<mbr r='boost::container::pmr::monotonic_buffer_resource::m_current_buffer_size' o='256' t='std::size_t'/>
<mbr r='boost::container::pmr::monotonic_buffer_resource::m_next_buffer_size' o='320' t='std::size_t'/>
<mbr r='boost::container::pmr::monotonic_buffer_resource::m_initial_buffer' o='384' t='void *const'/>
<mbr r='boost::container::pmr::monotonic_buffer_resource::m_initial_buffer_size' o='448' t='const std::size_t'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource20increase_next_bufferEv'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource32increase_next_buffer_at_least_toEm'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource21allocate_from_currentEmm'/>
<smbr r='boost::container::pmr::monotonic_buffer_resource::initial_next_buffer_size' t='const std::size_t'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resourceC1EPNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resourceC1EmPNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resourceC1EPvmPNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resourceC1ERKS2_'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resourceaSERKS2_'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resourceD1Ev'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource7releaseEv'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource17upstream_resourceEv'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource17remaining_storageEmRm'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource17remaining_storageEm'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource14current_bufferEv'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource16next_buffer_sizeEv'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource11do_allocateEmm'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource13do_deallocateEPvmm'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource11do_is_equalERKNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource20increase_next_bufferEv'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource32increase_next_buffer_at_least_toEm'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resourceC1EPNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resourceC1EmPNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resourceC1EPvmPNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resourceD1Ev'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource7releaseEv'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource17upstream_resourceEv'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource17remaining_storageEmRm'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource17remaining_storageEm'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource14current_bufferEv'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource16next_buffer_sizeEv'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource21allocate_from_currentEmm'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource11do_allocateEmm'/>
<fun r='_ZN5boost9container3pmr25monotonic_buffer_resource13do_deallocateEPvmm'/>
<fun r='_ZNK5boost9container3pmr25monotonic_buffer_resource11do_is_equalERKNS1_15memory_resourceE'/>
