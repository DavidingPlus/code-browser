<def f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='48' ll='51'/>
<ovr f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='53' c='boost::type_erasure::_a'/>
<use f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='53'/>
<ovr f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='54' c='boost::type_erasure::_b'/>
<use f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='54'/>
<ovr f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='55' c='boost::type_erasure::_c'/>
<use f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='55'/>
<ovr f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='56' c='boost::type_erasure::_d'/>
<use f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='56'/>
<ovr f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='57' c='boost::type_erasure::_e'/>
<use f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='57'/>
<ovr f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='58' c='boost::type_erasure::_f'/>
<use f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='58'/>
<ovr f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='59' c='boost::type_erasure::_g'/>
<use f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='59'/>
<ovr f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='70' c='boost::type_erasure::_self'/>
<use f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='70'/>
<ovr f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/deduced.hpp' l='34' c='boost::type_erasure::deduced'/>
<use f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/deduced.hpp' l='34'/>
<ovr f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/register_binding.hpp' l='77' c='boost::type_erasure::detail::_'/>
<use f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/register_binding.hpp' l='77'/>
<size>1</size>
<doc f='boost-1.85.0/libs/type_erasure/include/boost/type_erasure/placeholder.hpp' l='17'>/**
 * Placeholders are used heavily throughout the library.
 * Every placeholder must derive from @ref placeholder.
 * The library provides a number of placeholders,
 * out of the box, but you are welcome to define your own,
 * if you want more descriptive names.  The placeholder
 * @ref _self is special in that it is used as the default
 * wherever possible.
 *
 * What exactly is a placeholder?  Placeholders act as
 * a substitute for template parameters in concepts.
 * The library automatically replaces all the placeholders
 * used in a concept with the actual types involved when
 * it stores an object in an @ref any.
 *
 * For example, in the following,
 *
 * @code
 * any&lt;copy_constructible&lt;_a&gt;, _a&gt; x(1);
 * @endcode
 *
 * The library sees that we&apos;re constructing an @ref any
 * that uses the @ref _a placeholder with an @c int.
 * Thus it binds @ref _a to int and instantiates
 * @ref copy_constructible &quot;copy_constructible&lt;int&gt;&quot;.
 *
 * When there are multiple placeholders involved, you
 * will have to use @ref tuple, or pass the bindings
 * explicitly, but the substitution still works the
 * same way.
 */</doc>
