<def f='boost-1.85.0/libs/contract/include/boost/contract/core/virtual.hpp' l='74' ll='166'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/core/virtual.hpp' l='79' c='_ZN5boost8contract8virtual_C1ERS1_'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/core/virtual.hpp' l='80' c='_ZN5boost8contract8virtual_aSERS1_'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/core/virtual.hpp' l='80' c='_ZN5boost8contract8virtual_aSERS1_'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/core/virtual.hpp' l='158' c='_ZN5boost8contract8copy_oldEPNS0_8virtual_E'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='600' c='_ZN5boost8contract11old_pointerC1EPNS0_8virtual_ERKNS0_9old_valueE'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='666'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='674' c='_ZN5boost8contract8make_oldEPNS0_8virtual_ERKNS0_9old_valueE'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='750' c='_ZN5boost8contract8make_oldEPNS0_8virtual_ERKNS0_9old_valueE'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='800' c='_ZN5boost8contract8copy_oldEPNS0_8virtual_E'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/detail/inlined/old.hpp' l='27' c='_ZN5boost8contract8make_oldEPNS0_8virtual_ERKNS0_9old_valueE'/>
<size>192</size>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/core/virtual.hpp' l='36'>/**
Type of extra function parameter to handle contracts for virtual public
functions (for subcontracting).

Virtual public functions (and therefore also public function overrides)
declaring contracts using this library must specify an extra function parameter
at the very end of their parameter list.
This parameter must be a pointer to this class and it must have default value
@c 0 or @c nullptr (this extra parameter is often named @c v in this
documentation, but any name can be used):

@code
class u {
public:
    virtual void f(int x, boost::contract::virtual_* v = 0) { // Declare `v`.
        ... // Contract declaration (which will use `v`) and function body.
    }

    ...
};
@endcode

In practice this extra parameter does not alter the calling interface of the
enclosing function declaring the contract because it is always the very last
parameter and it has a default value (so it can always be omitted when users
call the function).
This extra parameter must be passed to
@RefFunc{boost::contract::public_function}, @RefMacro{BOOST_CONTRACT_OLDOF}, and
all other operations of this library that accept a pointer to
@RefClass{boost::contract::virtual_}.
A part from that, this class is not intended to be directly used by programmers
(and that is why this class does not have any public member and it is not
copyable).

@see    @RefSect{tutorial.virtual_public_functions, Virtual Public Functions},
        @RefSect{tutorial.public_function_overrides__subcontracting_,
        Public Function Overrides}
*/</doc>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/core/virtual.hpp' l='74'>// Non-copyable (see below) to avoid copy queue, stack, etc.</doc>
<fun r='_ZN5boost8contract8virtual_C1ERS1_'/>
<fun r='_ZN5boost8contract8virtual_aSERS1_'/>
<fun r='_ZN5boost8contract8virtual_17pop_old_init_copyENS1_11action_enumE'/>
<fun r='_ZN5boost8contract8virtual_C1ENS1_11action_enumE'/>
<mbr r='boost::contract::virtual_::action_' o='0' t='boost::contract::virtual_::action_enum'/>
<mbr r='boost::contract::virtual_::failed_' o='32' t='bool'/>
<mbr r='boost::contract::virtual_::old_init_copies_' o='64' t='std::queue&lt;boost::shared_ptr&lt;void&gt;&gt;'/>
<mbr r='boost::contract::virtual_::old_ftor_copies_' o='704' t='std::queue&lt;boost::shared_ptr&lt;void&gt;&gt;'/>
<mbr r='boost::contract::virtual_::result_ptr_' o='1344' t='boost::any'/>
<mbr r='boost::contract::virtual_::result_type_name_' o='1408' t='const char *'/>
<mbr r='boost::contract::virtual_::result_optional_' o='1472' t='bool'/>
