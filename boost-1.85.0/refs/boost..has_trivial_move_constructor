<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='34'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='62'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='62'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='64'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='64'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='65'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='65'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='66'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='66'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='69'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='71'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='74'/>
<inh f='boost-1.85.0/libs/type_traits/include/boost/type_traits/integral_constant.hpp' l='73' c='boost::integral_constant'/>
<def f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='75'/>
<use f='boost-1.85.0/libs/type_traits/include/boost/type_traits/is_trivially_copyable.hpp' l='25'/>
<size>1</size>
<doc f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='68'>// What should we do with reference types??? The standard seems to suggest these are trivial, even if the thing they reference is not:</doc>
<doc f='boost-1.85.0/libs/type_traits/include/boost/type_traits/has_trivial_move_constructor.hpp' l='73'>// Arrays can not be explicitly copied:</doc>
