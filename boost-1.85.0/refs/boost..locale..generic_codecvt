<inh f='boost-1.85.0/libs/locale/include/boost/locale/generic_codecvt.hpp' l='40' c='boost::locale::generic_codecvt_base'/>
<def f='boost-1.85.0/libs/locale/include/boost/locale/generic_codecvt.hpp' l='159' ll='345'/>
<inh f='boost-1.85.0/libs/locale/include/boost/locale/generic_codecvt.hpp' l='40' c='boost::locale::generic_codecvt_base'/>
<def f='boost-1.85.0/libs/locale/include/boost/locale/generic_codecvt.hpp' l='351' ll='457'/>
<inh f='include/c++/9/bits/codecvt.h' l='338' c='std::codecvt'/>
<inh f='boost-1.85.0/libs/locale/include/boost/locale/generic_codecvt.hpp' l='40' c='boost::locale::generic_codecvt_base'/>
<def f='boost-1.85.0/libs/locale/include/boost/locale/generic_codecvt.hpp' l='459' ll='468'/>
<use f='boost-1.85.0/libs/locale/include/boost/locale/utf8_codecvt.hpp' l='21'/>
<use f='boost-1.85.0/libs/locale/include/boost/locale/utf8_codecvt.hpp' l='25' c='_ZN5boost6locale12utf8_codecvtC1Em'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/util/codecvt_converter.cpp' l='151'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/util/codecvt_converter.cpp' l='154' c='_ZN5boost6locale4util14simple_codecvtC1ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/util/codecvt_converter.cpp' l='224'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/util/codecvt_converter.cpp' l='230' c='_ZN5boost6locale4util14code_converterC1ESt10unique_ptrINS1_14base_converterESt14default_deleteIS4_EEm'/>
<doc f='boost-1.85.0/libs/locale/include/boost/locale/generic_codecvt.hpp' l='153'>/// \brief UTF-16 to/from narrow char codecvt facet to use with char16_t or wchar_t on Windows
    ///
    /// Note in order to fit the requirements of usability by std::wfstream it uses mbstate_t
    /// to handle intermediate states in handling of variable length UTF-16 sequences
    ///
    /// Its member functions implement standard virtual functions of basic codecvt</doc>
<doc f='boost-1.85.0/libs/locale/include/boost/locale/generic_codecvt.hpp' l='347'>/// \brief UTF-32 to/from narrow char codecvt facet to use with char32_t or wchar_t on POSIX platforms
    ///
    /// Its member functions implement standard virtual functions of basic codecvt.
    /// mbstate_t is not used for UTF-32 handling due to fixed length encoding</doc>
<fun r='_ZN5boost6locale15generic_codecvtIT_T0_Li2EEC1Em'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li2EE14implementationEv'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li2EE10do_unshiftER11__mbstate_tPcS7_RS7_'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li2EE11do_encodingEv'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li2EE13do_max_lengthEv'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li2EE16do_always_noconvEv'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li2EE9do_lengthER11__mbstate_tPKcS8_m'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li2EE5do_inER11__mbstate_tPKcS8_RS8_PS2_SA_RSA_'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li2EE6do_outER11__mbstate_tPKS2_S8_RS8_PcSA_RSA_'/>
<fun r='_ZN5boost6locale15generic_codecvtIT_T0_Li4EEC1Em'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li4EE14implementationEv'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li4EE10do_unshiftER11__mbstate_tPcS7_RS7_'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li4EE11do_encodingEv'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li4EE13do_max_lengthEv'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li4EE16do_always_noconvEv'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li4EE9do_lengthER11__mbstate_tPKcS8_m'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li4EE5do_inER11__mbstate_tPKcS8_RS8_PS2_SA_RSA_'/>
<fun r='_ZNK5boost6locale15generic_codecvtIT_T0_Li4EE6do_outER11__mbstate_tPKS2_S8_RS8_PcSA_RSA_'/>
<fun r='_ZNK5boost6locale15generic_codecvtIcT_Li1EE14implementationEv'/>
<fun r='_ZN5boost6locale15generic_codecvtIcT_Li1EEC1Em'/>
