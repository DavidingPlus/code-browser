<use f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1115' u='c' c='_ZNK5boost4urls13url_view_base12host_addressEOT_'/>
<dec f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1171' type='boost::urls::pct_string_view boost::urls::url_view_base::encoded_host_address() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1119'>/** Return the host

        The value returned by this function
        depends on the type of host returned
        from the function @ref host_type.

        @li If the type is @ref host_type::ipv4,
        then the IPv4 address string is returned.

        @li If the type is @ref host_type::ipv6,
        then the IPv6 address string is returned,
        without any enclosing brackets.

        @li If the type is @ref host_type::ipvfuture,
        then the IPvFuture address string is returned,
        without any enclosing brackets.

        @li If the type is @ref host_type::name,
        then the host name string is returned.
        Any percent-escapes in the string are
        decoded first.

        @li If the type is @ref host_type::none,
        then an empty string is returned.
        The returned string may contain
        percent escapes.

        @par Example
        @code
        assert( url_view( &quot;https://www%2droot.example.com/&quot; ).encoded_host_address() == &quot;www%2droot.example.com&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        host        = IP-literal / IPv4address / reg-name

        IP-literal  = &quot;[&quot; ( IPv6address / IPvFuture  ) &quot;]&quot;

        reg-name    = *( unreserved / pct-encoded / &quot;-&quot; / &quot;.&quot;)
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2&quot;
            &gt;3.2.2. Host (rfc3986)&lt;/a&gt;
    */</doc>
<def f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='328' ll='365' type='boost::urls::pct_string_view boost::urls::url_view_base::encoded_host_address() const'/>
