<def f='boost-1.85.0/libs/proto/include/boost/proto/transform/fold.hpp' l='189' ll='202' type='boost::proto::reverse_fold::impl::result_type boost::proto::reverse_fold::impl::operator()(typename impl&lt;Expr, State, Data&gt;::expr_param e, typename impl&lt;Expr, State, Data&gt;::state_param s, typename impl&lt;Expr, State, Data&gt;::data_param d) const'/>
<doc f='boost-1.85.0/libs/proto/include/boost/proto/transform/fold.hpp' l='180'>/// Let \c seq be &lt;tt&gt;when\&lt;_, Sequence\&gt;()(e, s, d)&lt;/tt&gt;, let
            /// \c state0 be &lt;tt&gt;when\&lt;_, State0\&gt;()(e, s, d)&lt;/tt&gt;, and
            /// let \c fun(d) be an object such that &lt;tt&gt;fun(d)(e, s)&lt;/tt&gt;
            /// is equivalent to &lt;tt&gt;when\&lt;_, Fun\&gt;()(e, s, d)&lt;/tt&gt;. Then, this
            /// function returns &lt;tt&gt;fusion::fold(seq, state0, fun(d))&lt;/tt&gt;.
            ///
            /// \param e The current expression
            /// \param s The current state
            /// \param d An arbitrary data</doc>
