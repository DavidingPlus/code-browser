<dec f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='1006' type='boost::urls::url_base &amp; boost::urls::url_base::set_encoded_host(boost::urls::pct_string_view s)'/>
<use f='boost-1.85.0/libs/url/include/boost/url/url.hpp' l='440' u='c' c='_ZN5boost4urls3url16set_encoded_hostENS0_15pct_string_viewE'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='925'>/** Set the host

        Depending on the contents of the passed
        string, this function sets the host:

        @li If the string is a valid IPv4 address,
        then the host is set to the address.
        The host type is @ref host_type::ipv4.

        @li If the string is a valid IPv6 address
        enclosed in square brackets, then the
        host is set to that address.
        The host type is @ref host_type::ipv6.

        @li If the string is a valid IPvFuture
        address enclosed in square brackets, then
        the host is set to that address.
        The host type is @ref host_type::ipvfuture.

        @li Otherwise, the host name is set to
        the string. This string can contain percent
        escapes, or can be empty.
        Escapes in the string are preserved,
        and reserved characters in the string
        are percent-escaped in the result.
        The host type is @ref host_type::name.

        In all cases, when this function returns,
        the URL contains an authority.

        @par Example
        @code
        assert( url( &quot;http://www.example.com&quot; ).set_host( &quot;127.0.0.1&quot; ).buffer() == &quot;http://127.0.0.1&quot; );
        @endcode

        @par Postconditions
        @code
        this-&gt;has_authority() == true
        @endcode

        @par Complexity
        Linear in `this-&gt;size() + s.size()`.

        @par Exception Safety
        Strong guarantee.
        Calls to allocate may throw.
        Exceptions thrown on invalid input.

        @throw system_error
        `s` contains an invalid percent-encoding.

        @param s The string to set.

        @par BNF
        @code
        host        = IP-literal / IPv4address / reg-name

        IP-literal  = &quot;[&quot; ( IPv6address / IPvFuture  ) &quot;]&quot;

        reg-name    = *( unreserved / pct-encoded / &quot;-&quot; / &quot;.&quot;)
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;
            &gt;IPv4 (Wikipedia)&lt;/a&gt;
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4291&quot;
            &gt;IP Version 6 Addressing Architecture (rfc4291)&lt;/a&gt;
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2&quot;&gt;
            3.2.2. Host (rfc3986)&lt;/a&gt;

        @see
            @ref set_encoded_host_address,
            @ref set_encoded_host_name,
            @ref set_host,
            @ref set_host_address,
            @ref set_host_ipv4,
            @ref set_host_ipv6,
            @ref set_host_ipvfuture,
            @ref set_host_name.
    */</doc>
<use f='boost-1.85.0/libs/url/include/boost/url/static_url.hpp' l='376' u='c' c='_ZN5boost4urls10static_url16set_encoded_hostENS0_15pct_string_viewE'/>
<def f='boost-1.85.0/libs/url/src/url_base.cpp' l='661' ll='713' type='boost::urls::url_base &amp; boost::urls::url_base::set_encoded_host(boost::urls::pct_string_view s)'/>
<doc f='boost-1.85.0/libs/url/src/url_base.cpp' l='660'>// set host part from encoded text</doc>
