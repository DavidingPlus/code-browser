<dec f='include/unicode/decimfmt.h' l='871' type='void icu_66::DecimalFormat::DecimalFormat(const icu_66::UnicodeString &amp; pattern, const icu_66::DecimalFormatSymbols &amp; symbols, UErrorCode &amp; status)'/>
<doc f='include/unicode/decimfmt.h' l='851'>/**
     * Create a DecimalFormat from the given pattern and symbols.
     * Use this constructor when you need to completely customize the
     * behavior of the format.
     * &lt;P&gt;
     * To obtain standard formats for a given
     * locale, use the factory methods on NumberFormat such as
     * createInstance or createCurrencyInstance. If you need only minor adjustments
     * to a standard format, you can modify the format returned by
     * a NumberFormat factory method.
     * &lt;p&gt;
     * &lt;strong&gt;NOTE:&lt;/strong&gt; New users are strongly encouraged to use
     * #icu::number::NumberFormatter instead of DecimalFormat.
     *
     * @param pattern           a non-localized pattern string
     * @param symbols   the set of symbols to be used
     * @param status            Output param set to success/failure code. If the
     *                          pattern is invalid this will be set to a failure code.
     * @stable ICU 2.0
     */</doc>
