<dec f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='1379' type='boost::urls::url_base &amp; boost::urls::url_base::set_host_ipvfuture(core::string_view s)'/>
<use f='boost-1.85.0/libs/url/include/boost/url/url.hpp' l='450' u='c' c='_ZN5boost4urls3url18set_host_ipvfutureENS_4core17basic_string_viewIcEE'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='1330'>/** Set the host to an address

        The host is set to the specified IPvFuture
        string.
        The host type is @ref host_type::ipvfuture.

        @par Example
        @code
        assert( url().set_host_ipvfuture( &quot;v42.bis&quot; ).buffer() == &quot;//[v42.bis]&quot; );
        @endcode

        @par Complexity
        Linear in `this-&gt;size() + s.size()`.

        @par Postconditions
        @code
        this-&gt;has_authority() == true &amp;&amp; this-&gt;host_ipvfuture) == s &amp;&amp; this-&gt;host_type() == host_type::ipvfuture
        @endcode

        @par Exception Safety
        Strong guarantee.
        Calls to allocate may throw.
        Exceptions thrown on invalid input.

        @throw system_error
        `s` contains an invalid percent-encoding.

        @param s The string to set.

        @par BNF
        @code
        IPvFuture     = &quot;v&quot; 1*HEXDIG &quot;.&quot; 1*( unreserved / sub-delims / &quot;:&quot; )
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2&quot;&gt;
            3.2.2. Host (rfc3986)&lt;/a&gt;

        @see
            @ref set_encoded_host,
            @ref set_encoded_host_address,
            @ref set_encoded_host_name,
            @ref set_host,
            @ref set_host_address,
            @ref set_host_ipv4,
            @ref set_host_ipv6,
            @ref set_host_name.
    */</doc>
<use f='boost-1.85.0/libs/url/include/boost/url/static_url.hpp' l='386' u='c' c='_ZN5boost4urls10static_url18set_host_ipvfutureENS_4core17basic_string_viewIcEE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='631' u='c' c='_ZN5boost4urls8url_base8set_hostENS_4core17basic_string_viewIcEE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='684' u='c' c='_ZN5boost4urls8url_base16set_encoded_hostENS0_15pct_string_viewE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='731' u='c' c='_ZN5boost4urls8url_base16set_host_addressENS_4core17basic_string_viewIcEE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='775' u='c' c='_ZN5boost4urls8url_base24set_encoded_host_addressENS0_15pct_string_viewE'/>
<def f='boost-1.85.0/libs/url/src/url_base.cpp' l='850' ll='869' type='boost::urls::url_base &amp; boost::urls::url_base::set_host_ipvfuture(core::string_view s)'/>
