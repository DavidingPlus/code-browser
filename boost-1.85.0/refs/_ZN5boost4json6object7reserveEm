<dec f='boost-1.85.0/libs/json/include/boost/json/object.hpp' l='902' type='void boost::json::object::reserve(std::size_t new_capacity)'/>
<def f='boost-1.85.0/libs/json/include/boost/json/impl/object.hpp' l='347' ll='355' type='void boost::json::object::reserve(std::size_t new_capacity)'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.hpp' l='450' u='c' c='_ZN5boost4json6object9constructET_S2_mSt18input_iterator_tag'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.hpp' l='474' u='c' c='_ZN5boost4json6object9constructET_S2_mSt20forward_iterator_tag'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.hpp' l='548' u='c' c='_ZN5boost4json6object12emplace_implENS_4core17basic_string_viewIcEEDpOT_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/detail/value_from.hpp' l='108' u='c' c='_ZN5boost4json6detail15value_from_implENS1_23map_like_conversion_tagERNS0_5valueEOT_RKT0_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/detail/value_from.hpp' l='190' u='c' c='_ZN5boost4json6detail15value_from_implENS1_30described_class_conversion_tagERNS0_5valueEOT_RKT0_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.ipp' l='307' u='c' c='_ZN5boost4json6objectC1EmNS0_11storage_ptrE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.ipp' l='342' u='c' c='_ZN5boost4json6objectC1ERKS1_NS0_11storage_ptrE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.ipp' l='380' u='c' c='_ZN5boost4json6objectC1ESt16initializer_listISt4pairINS_4core17basic_string_viewIcEENS0_9value_refEEEmNS0_11storage_ptrE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/value_ref.ipp' l='132' u='c' c='_ZN5boost4json9value_ref11make_objectESt16initializer_listIS1_ENS0_11storage_ptrE'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/object.hpp' l='873'>/** Increase the capacity to at least a certain amount.

        This increases the @ref capacity() to a value
        that is greater than or equal to `new_capacity`.
        If `new_capacity &gt; capacity()`, new memory is
        allocated. Otherwise, the call has no effect.
        The number of elements and therefore the
        @ref size() of the container is not changed.
    \n
        If new memory is allocated, all iterators
        including any past-the-end iterators, and all
        references to the elements are invalidated.
        Otherwise, no iterators or references are
        invalidated.

        @par Complexity
        Constant or average case linear in
        @ref size(), worst case quadratic.

        @par Exception Safety
        Strong guarantee.
        Calls to `memory_resource::allocate` may throw.

        @param new_capacity The new minimum capacity.

        @throw `boost::system::system_error`  `new_capacity &gt; max_size()`.
    */</doc>
