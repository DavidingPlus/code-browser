<dec f='boost-1.85.0/libs/url/include/boost/url/params_encoded_view.hpp' l='165' type='void boost::urls::params_encoded_view::params_encoded_view(core::string_view s)'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/params_encoded_view.hpp' l='113'>/** Constructor

        This function constructs params from
        a valid query parameter string, which
        can contain percent escapes. Unlike
        the parameters in URLs, the string
        passed here should not start with &quot;?&quot;.
        Upon construction, the view
        references the character buffer pointed
        to by `s`. The caller is responsible
        for ensuring that the lifetime of the
        buffer extends until it is no longer
        referenced.

        @par Example
        @code
        params_encoded_view qp( &quot;first=John&amp;last=Doe&quot; );
        @endcode

        @par Effects
        @code
        return parse_query( s ).value();
        @endcode

        @par Postconditions
        @code
        this-&gt;buffer().data() == s.data()
        @endcode

        @par Complexity
        Linear in `s`.

        @par Exception Safety
        Exceptions thrown on invalid input.

        @throw system_error
        `s` contains an invalid query parameter
        string.

        @param s The string to parse.

        @par BNF
        @code
        query-params    = [ query-param ] *( &quot;&amp;&quot; query-param )

        query-param     = key [ &quot;=&quot; value ]
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.4&quot;
            &gt;3.4.  Query&lt;/a&gt;
    */</doc>
<def f='boost-1.85.0/libs/url/src/params_encoded_view.cpp' l='28' ll='35' type='void boost::urls::params_encoded_view::params_encoded_view(core::string_view s)'/>
