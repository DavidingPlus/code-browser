<def f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/attributes.hpp' l='120'/>
<inh f='boost-1.85.0/libs/mpl/include/boost/mpl/bool.hpp' l='23' c='mpl_::bool_'/>
<def f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/attributes.hpp' l='152' ll='160'/>
<inh f='boost-1.85.0/libs/mpl/include/boost/mpl/bool.hpp' l='23' c='mpl_::bool_'/>
<def f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/attributes.hpp' l='164' ll='172'/>
<inh f='boost-1.85.0/libs/mpl/include/boost/mpl/bool.hpp' l='23' c='mpl_::bool_'/>
<def f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/attributes.hpp' l='178' ll='185'/>
<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/attributes.hpp' l='192'/>
<doc f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/attributes.hpp' l='162'>// Two fusion sequences are weak substitutes if and only if their
        // elements are pairwise weak substitutes.</doc>
<doc f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/attributes.hpp' l='174'>// If this is not defined, the main template definition above will return
        // true if T is convertible to the first type in a fusion::vector. We
        // globally declare any non-Fusion sequence T as not compatible with any
        // Fusion sequence &apos;Expected&apos;.</doc>
