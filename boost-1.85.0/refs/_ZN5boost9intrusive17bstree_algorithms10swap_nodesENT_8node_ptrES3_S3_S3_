<def f='boost-1.85.0/libs/intrusive/include/boost/intrusive/bstree_algorithms.hpp' l='303' ll='443' type='static void boost::intrusive::bstree_algorithms::swap_nodes(boost::intrusive::bstree_algorithms::node_ptr node1, boost::intrusive::bstree_algorithms::node_ptr header1, boost::intrusive::bstree_algorithms::node_ptr node2, boost::intrusive::bstree_algorithms::node_ptr header2)'/>
<doc f='boost-1.85.0/libs/intrusive/include/boost/intrusive/bstree_algorithms.hpp' l='288'>//! &lt;b&gt;Requires&lt;/b&gt;: node1 and node2 can&apos;t be header nodes
   //!  of two trees with header header1 and header2.
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: Swaps two nodes. After the function node1 will be inserted
   //!   in the position node2 before the function. node2 will be inserted in the
   //!   position node1 had before the function.
   //!
   //! &lt;b&gt;Complexity&lt;/b&gt;: Constant.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: Nothing.
   //!
   //! &lt;b&gt;Note&lt;/b&gt;: This function will break container ordering invariants if
   //!   node1 and node2 are not equivalent according to the ordering rules.
   //!
   //!Experimental function</doc>
