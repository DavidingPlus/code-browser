<def f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/iterators/detail/split_functor_input_policy.hpp' l='47' ll='194'/>
<use f='boost-1.85.0/libs/wave/include/boost/wave/cpplexer/cpp_lex_iterator.hpp' l='151'/>
<size>1</size>
<doc f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/iterators/detail/split_functor_input_policy.hpp' l='26'>///////////////////////////////////////////////////////////////////////////
    //  class split_functor_input
    //  Implementation of the InputPolicy used by multi_pass
    //  split_functor_input gets tokens from a functor
    // 
    //  This policy should be used when the functor holds two parts of data: a
    //  unique part (unique for each instance of the iterator) and a shared 
    //  part (to be shared between the different copies of the same iterator).
    //  Using this policy allows to merge the shared part of the functor with 
    //  the shared part of the iterator data, saving one pointer and one 
    //  allocation per iterator instance.
    //
    //  The Functor template parameter of this policy is expected to be a 
    //  std::pair&lt;unique, shared&gt;, where &apos;unique&apos; and &apos;shared&apos; represent the
    //  respective parts of the functor itself.
    //
    //  Note: the unique part of the functor must have a typedef for result_type
    //        It also must have a static variable of type result_type defined 
    //        to represent EOF that is called eof.
    //
    ///////////////////////////////////////////////////////////////////////////</doc>
