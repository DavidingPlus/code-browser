<dec f='boost-1.85.0/libs/container/include/boost/container/pmr/monotonic_buffer_resource.hpp' l='163' type='void * boost::container::pmr::monotonic_buffer_resource::do_allocate(std::size_t bytes, std::size_t alignment)'/>
<inh f='boost-1.85.0/libs/container/include/boost/container/pmr/memory_resource.hpp' l='95' c='_ZN5boost9container3pmr15memory_resource11do_allocateEmm'/>
<def f='boost-1.85.0/libs/container/src/monotonic_buffer_resource.cpp' l='137' ll='163' type='void * boost::container::pmr::monotonic_buffer_resource::do_allocate(std::size_t bytes, std::size_t alignment)'/>
<doc f='boost-1.85.0/libs/container/include/boost/container/pmr/monotonic_buffer_resource.hpp' l='151'>//! &lt;b&gt;Returns&lt;/b&gt;: A pointer to allocated storage with a size of at least `bytes`. The size
   //!   and alignment of the allocated memory shall meet the requirements for a class derived
   //!   from `memory_resource`.
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: If the unused space in the internal `current_buffer` can fit a block with the specified
   //!   bytes and alignment, then allocate the return block from the internal `current_buffer`; otherwise sets
   //!   the internal `current_buffer` to `upstream_resource()-&gt;allocate(n, m)`, where `n` is not less than
   //!   `max(bytes, next_buffer_size)` and `m` is not less than alignment, and increase
   //!   `next_buffer_size` by an implementation-defined growth factor (which need not be integral),
   //!   then allocate the return block from the newly-allocated internal `current_buffer`.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: Nothing unless `upstream_resource()-&gt;allocate()` throws.</doc>
