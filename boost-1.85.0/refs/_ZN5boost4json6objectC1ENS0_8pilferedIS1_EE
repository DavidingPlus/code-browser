<def f='boost-1.85.0/libs/json/include/boost/json/object.hpp' l='383' ll='388' type='void boost::json::object::object(pilfered&lt;boost::json::object&gt; other)'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.ipp' l='398' u='c' c='_ZN5boost4json6objectaSERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.ipp' l='408' u='c' c='_ZN5boost4json6objectaSEOS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.ipp' l='420' u='c' c='_ZN5boost4json6objectaSESt16initializer_listISt4pairINS_4core17basic_string_viewIcEENS0_9value_refEEE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.ipp' l='587' u='c' c='_ZN5boost4json6object4swapERS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/object.ipp' l='589' u='c' c='_ZN5boost4json6object4swapERS1_'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/object.hpp' l='361'>/** Pilfer constructor.

        The object is constructed by acquiring ownership
        of the contents of `other` using pilfer semantics.
        This is more efficient than move construction, when
        it is known that the moved-from object will be
        immediately destroyed afterwards.

        @par Complexity
        Constant.

        @par Exception Safety
        No-throw guarantee.

        @param other The value to pilfer. After pilfer
        construction, `other` is not in a usable state
        and may only be destroyed.

        @see @ref pilfer,
            &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0308r0.html&quot;&gt;
                Valueless Variants Considered Harmful&lt;/a&gt;
    */</doc>
