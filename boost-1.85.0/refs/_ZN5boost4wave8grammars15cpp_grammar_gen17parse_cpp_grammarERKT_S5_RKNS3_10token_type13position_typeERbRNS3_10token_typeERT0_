<dec f='boost-1.85.0/libs/wave/include/boost/wave/grammars/cpp_grammar_gen.hpp' l='91' type='static boost::spirit::classic::tree_parse_info&lt;iterator_type, node_factory_type&gt; boost::wave::grammars::cpp_grammar_gen::parse_cpp_grammar(const boost::wave::grammars::cpp_grammar_gen::iterator_type &amp; first, const boost::wave::grammars::cpp_grammar_gen::iterator_type &amp; last, const boost::wave::grammars::cpp_grammar_gen::position_type &amp; act_pos, bool &amp; found_eof, boost::wave::grammars::cpp_grammar_gen::token_type &amp; found_directive, boost::wave::grammars::cpp_grammar_gen::token_container_type &amp; found_eoltokens)'/>
<def f='boost-1.85.0/libs/wave/include/boost/wave/grammars/cpp_grammar.hpp' l='724' ll='751' type='static boost::spirit::classic::tree_parse_info&lt;LexIteratorT, typename cpp_grammar_gen&lt;LexIteratorT, TokenContainerT&gt;::node_factory_type&gt; boost::wave::grammars::cpp_grammar_gen::parse_cpp_grammar(const LexIteratorT &amp; first, const LexIteratorT &amp; last, const boost::wave::grammars::cpp_grammar_gen::position_type &amp; act_pos, bool &amp; found_eof, boost::wave::grammars::cpp_grammar_gen::token_type &amp; found_directive, boost::wave::grammars::cpp_grammar_gen::token_container_type &amp; found_eoltokens)'/>
<doc f='boost-1.85.0/libs/wave/include/boost/wave/grammars/cpp_grammar_gen.hpp' l='89'>//  parse the cpp_grammar and return the resulting parse tree</doc>
