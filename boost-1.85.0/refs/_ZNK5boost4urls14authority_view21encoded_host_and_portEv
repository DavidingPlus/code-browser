<dec f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='1208' type='boost::urls::pct_string_view boost::urls::authority_view::encoded_host_and_port() const'/>
<def f='boost-1.85.0/libs/url/src/authority_view.cpp' l='324' ll='329' type='boost::urls::pct_string_view boost::urls::authority_view::encoded_host_and_port() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='1171'>/** Return the host and port

        If an authority is present, this
        function returns the host and optional
        port as a string, which may be empty.
        Otherwise it returns an empty string.
        The returned string may contain
        percent escapes.

        @par Example
        @code
        assert( url_view( &quot;http://www.example.com:8080/index.htm&quot; ).encoded_host_and_port() == &quot;www.example.com:8080&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        authority   = [ userinfo &quot;@&quot; ] host [ &quot;:&quot; port ]
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2&quot;
            &gt;3.2.2.  Host (rfc3986)&lt;/a&gt;
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.3&quot;
            &gt;3.2.3. Port (rfc3986)&lt;/a&gt;

        @see
            @ref has_port,
            @ref port,
            @ref port_number.
    */</doc>
