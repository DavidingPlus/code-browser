<use f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='1019' u='c' c='_ZNK5boost4urls14authority_view9host_nameEOT_'/>
<dec f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='1058' type='boost::urls::pct_string_view boost::urls::authority_view::encoded_host_name() const'/>
<def f='boost-1.85.0/libs/url/src/authority_view.cpp' l='275' ll='283' type='boost::urls::pct_string_view boost::urls::authority_view::encoded_host_name() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='1023'>/** Return the host name

        If the host type is @ref host_type::name,
        this function returns the name as
        a string.
        Otherwise, if the host type is not an
        name, it returns an empty string.
        The returned string may contain
        percent escapes.

        @par Example
        @code
        assert( url_view( &quot;https://www%2droot.example.com/&quot; ).encoded_host_name() == &quot;www%2droot.example.com&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        host        = IP-literal / IPv4address / reg-name

        IP-literal  = &quot;[&quot; ( IPv6address / IPvFuture  ) &quot;]&quot;

        reg-name    = *( unreserved / pct-encoded / &quot;-&quot; / &quot;.&quot;)
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2&quot;
            &gt;3.2.2. Host (rfc3986)&lt;/a&gt;
    */</doc>
