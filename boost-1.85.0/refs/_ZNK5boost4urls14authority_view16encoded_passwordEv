<use f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='586' u='c' c='_ZNK5boost4urls14authority_view8passwordEOT_'/>
<dec f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='628' type='boost::urls::pct_string_view boost::urls::authority_view::encoded_password() const'/>
<def f='boost-1.85.0/libs/url/src/authority_view.cpp' l='144' ll='168' type='boost::urls::pct_string_view boost::urls::authority_view::encoded_password() const'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='375' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='376' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='590'>/** Return the password

        This function returns the password portion
        of the userinfo as a percent-encoded string.

        @par Example
        @code
        assert( url_view( &quot;http://jane%2Ddoe:pass@example.com&quot; ).encoded_password() == &quot;pass&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        userinfo    = user [ &quot;:&quot; [ password ] ]

        user        = *( unreserved / pct-encoded / sub-delims )
        password    = *( unreserved / pct-encoded / sub-delims / &quot;:&quot; )
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.1&quot;
            &gt;3.2.1. User Information (rfc3986)&lt;/a&gt;

        @see
            @ref has_password,
            @ref has_userinfo,
            @ref encoded_user,
            @ref encoded_userinfo,
            @ref password,
            @ref user,
            @ref userinfo.
    */</doc>
