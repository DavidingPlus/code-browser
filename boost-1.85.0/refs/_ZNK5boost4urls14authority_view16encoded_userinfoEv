<use f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='352' u='c' c='_ZNK5boost4urls14authority_view8userinfoEOT_'/>
<dec f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='397' type='boost::urls::pct_string_view boost::urls::authority_view::encoded_userinfo() const'/>
<def f='boost-1.85.0/libs/url/src/authority_view.cpp' l='96' ll='113' type='boost::urls::pct_string_view boost::urls::authority_view::encoded_userinfo() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='356'>/** Return the userinfo

        If present, this function returns a
        string representing the userinfo (which
        may be empty).
        Otherwise it returns an empty string.
        The returned string may contain
        percent escapes.

        @par Example
        @code
        assert( url_view( &quot;http://jane%2Ddoe:pass@example.com&quot; ).encoded_userinfo() == &quot;jane%2Ddoe:pass&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing

        @par BNF
        @code
        userinfo    = user [ &quot;:&quot; [ password ] ]

        authority   = [ userinfo &quot;@&quot; ] host [ &quot;:&quot; port ]
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.1&quot;
            &gt;3.2.1. User Information (rfc3986)&lt;/a&gt;

        @see
            @ref has_password,
            @ref has_userinfo,
            @ref encoded_password,
            @ref encoded_user,
            @ref password,
            @ref user,
            @ref userinfo.
    */</doc>
