<dec f='include/unicode/decimfmt.h' l='1890' type='void icu_66::DecimalFormat::applyLocalizedPattern(const icu_66::UnicodeString &amp; pattern, UParseError &amp; parseError, UErrorCode &amp; status)'/>
<doc f='include/unicode/decimfmt.h' l='1860'>/**
     * Apply the given pattern to this Format object.  The pattern
     * is assumed to be in a localized notation. A pattern is a
     * short-hand specification for the various formatting properties.
     * These properties can also be changed individually through the
     * various setter methods.
     * &lt;P&gt;
     * There is no limit to integer digits are set
     * by this routine, since that is the typical end-user desire;
     * use setMaximumInteger if you want to set a real value.
     * For negative numbers, use a second pattern, separated by a semicolon
     * &lt;pre&gt;
     * .      Example &quot;#,#00.0#&quot; -&gt; 1,234.56
     * &lt;/pre&gt;
     * This means a minimum of 2 integer digits, 1 fraction digit, and
     * a maximum of 2 fraction digits.
     *
     * Example: &quot;#,#00.0#;(#,#00.0#)&quot; for negatives in parantheses.
     *
     * In negative patterns, the minimum and maximum counts are ignored;
     * these are presumed to be set in the positive pattern.
     *
     * @param pattern   The localized pattern to be applied.
     * @param parseError Struct to recieve information on position
     *                   of error if an error is encountered
     * @param status    Output param set to success/failure code on
     *                  exit. If the pattern is invalid, this will be
     *                  set to a failure result.
     * @stable ICU 2.0
     */</doc>
