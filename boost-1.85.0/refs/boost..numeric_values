<def f='boost-1.85.0/libs/graph/include/boost/graph/numeric_values.hpp' l='35' ll='42'/>
<def f='boost-1.85.0/libs/graph/include/boost/graph/numeric_values.hpp' l='46' macro='1'/>
<use f='boost-1.85.0/libs/graph/include/boost/graph/numeric_values.hpp' l='16'/>
<def f='boost-1.85.0/libs/graph/include/boost/graph/numeric_values.hpp' l='47' macro='1'/>
<use f='boost-1.85.0/libs/graph/include/boost/graph/numeric_values.hpp' l='16'/>
<def f='boost-1.85.0/libs/graph/include/boost/graph/numeric_values.hpp' l='48' macro='1'/>
<use f='boost-1.85.0/libs/graph/include/boost/graph/numeric_values.hpp' l='16'/>
<use f='boost-1.85.0/libs/graph/include/boost/graph/graph_concepts.hpp' l='538' c='_ZN5boost8concepts12NumericValueD1Ev'/>
<use f='boost-1.85.0/libs/graph/include/boost/graph/graph_concepts.hpp' l='539' c='_ZN5boost8concepts12NumericValueD1Ev'/>
<size>1</size>
<doc f='boost-1.85.0/libs/graph/include/boost/graph/numeric_values.hpp' l='26'>/**
 * This generic type reports various numeric values for some type. In the
 * general case, numeric values simply treat their maximum value as infinity
 * and the default-constructed value as 0.
 *
 * Specializations of this template can redefine the notions of zero and
 * infinity for various types. For example, the class is specialized for
 * floating point types to use the built in notion of infinity.
 */</doc>
<fun r='_ZN5boost14numeric_values4zeroEv'/>
<fun r='_ZN5boost14numeric_values8infinityEv'/>
<fun r='_ZN5boost14numeric_valuesIfE4zeroEv'/>
<fun r='_ZN5boost14numeric_valuesIfE8infinityEv'/>
<fun r='_ZN5boost14numeric_valuesIdE4zeroEv'/>
<fun r='_ZN5boost14numeric_valuesIdE8infinityEv'/>
<fun r='_ZN5boost14numeric_valuesIeE4zeroEv'/>
<fun r='_ZN5boost14numeric_valuesIeE8infinityEv'/>
