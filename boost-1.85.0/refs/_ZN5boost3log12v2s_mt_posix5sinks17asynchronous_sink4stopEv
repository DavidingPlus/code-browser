<use f='boost-1.85.0/libs/log/include/boost/log/sinks/async_frontend.hpp' l='324' u='c' c='_ZN5boost3log12v2s_mt_posix5sinks17asynchronous_sinkD1Ev'/>
<def f='boost-1.85.0/libs/log/include/boost/log/sinks/async_frontend.hpp' l='427' ll='441' type='void boost::log::sinks::asynchronous_sink::stop()'/>
<doc f='boost-1.85.0/libs/log/include/boost/log/sinks/async_frontend.hpp' l='404'>/*!
     * The method softly interrupts record feeding loop. This method must be called when \c run,
     * \c feed_records or \c flush method execution has to be interrupted. Unlike regular thread
     * interruption, calling \c stop will not interrupt the record processing in the middle.
     * Instead, the sink frontend will attempt to finish its business with the record in progress
     * and return afterwards. This method can be called either if the sink was created with
     * an internal dedicated thread, or if the feeding loop was initiated by user.
     *
     * If no record feeding operation is in progress, calling \c stop marks the sink frontend
     * so that the next feeding operation stops immediately.
     *
     * \note Returning from this method does not guarantee that there are no records left buffered
     *       in the sink frontend. It is possible that log records keep coming during and after this
     *       method is called. At some point of execution of this method log records stop being processed,
     *       and all records that come after this point are put into the queue. These records will be
     *       processed upon further calls to \c run or \c feed_records.
     *
     * \note If the record feeding loop is being run in a user&apos;s thread (i.e. \c start_thread was specified
     *       as \c false on frontend construction), this method does not guarantee that upon return the thread
     *       has returned from the record feeding loop or that it won&apos;t enter it in the future. The method
     *       only ensures that the record feeding thread will eventually return from the feeding loop. It is
     *       user&apos;s responsibility to synchronize with the user&apos;s record feeding thread.
     */</doc>
