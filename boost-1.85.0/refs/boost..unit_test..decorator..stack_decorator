<inh f='boost-1.85.0/libs/test/include/boost/test/tree/decorator.hpp' l='82' c='boost::unit_test::decorator::base'/>
<def f='boost-1.85.0/libs/test/include/boost/test/tree/decorator.hpp' l='109' ll='119'/>
<use f='boost-1.85.0/libs/test/include/boost/test/tree/decorator.hpp' l='118' c='_ZNK5boost9unit_test9decorator15stack_decorator5cloneEv'/>
<size>8</size>
<doc f='boost-1.85.0/libs/test/include/boost/test/tree/decorator.hpp' l='97'>// ************************************************************************** //
// **************         decorator::stack_decorator           ************** //
// ************************************************************************** //

//!@ A decorator that creates a new stack in the collector
//!
//! This decorator may be used in places where the currently accumulated decorators
//! in the collector should be applied to lower levels of the hierarchy rather
//! than the current one. This is for instance for dataset test cases, where the
//! macro does not let the user specify decorators for the underlying generated tests
//! (but rather on the main generator function), applying the stack_decorator at the
//! parent level lets us consume the decorator at the underlying test cases level.</doc>
<fun r='_ZN5boost9unit_test9decorator15stack_decoratorC1Ev'/>
<fun r='_ZNK5boost9unit_test9decorator15stack_decoratordeEv'/>
<fun r='_ZN5boost9unit_test9decorator15stack_decorator5applyERNS0_9test_unitE'/>
<fun r='_ZNK5boost9unit_test9decorator15stack_decorator5cloneEv'/>
