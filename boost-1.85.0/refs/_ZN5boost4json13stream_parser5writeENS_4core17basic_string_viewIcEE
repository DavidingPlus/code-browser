<def f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='912' ll='918' type='std::size_t boost::json::stream_parser::write(boost::json::string_view s)'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='871'>/** Parse a buffer containing all or part of a complete JSON text.

        This function parses a all or part of a JSON text
        contained in the specified character buffer. The
        entire buffer must be consumed; if there are
        additional characters past the end of the complete
        JSON text, the parse fails and an error is returned.

        @par Example
        @code
        stream_parser p;                                // construct a parser
        std::size_t n;                                  // number of characters used
        n = p.write( &quot;[1,2&quot; );                          // parse some of the JSON text
        assert( n == 4 );                               // all characters consumed
        n = p.write( &quot;3,4]&quot; );                          // parse the rest of the JSON text
        assert( n == 4 );                               // all characters consumed
        value jv = p.release();                         // take ownership of the value
        @endcode

        @note

        To indicate there are no more character buffers,
        such as when @ref done returns `false` after
        writing, call @ref finish.

        @par Complexity
        Linear in `size`.

        @par Exception Safety
        Basic guarantee.
        Calls to `memory_resource::allocate` may throw.
        Upon error or exception, subsequent calls will
        fail until @ref reset is called to parse a new JSON text.

        @return The number of characters consumed from
        the buffer.

        @param s The character string to parse.

        @throw `boost::system::system_error` Thrown on error.
    */</doc>
