<dec f='boost-1.85.0/libs/system/include/boost/system/detail/error_code.hpp' l='54' type='bool boost::system::operator==(const boost::system::error_code &amp; code, const boost::system::error_condition &amp; condition)'/>
<dec f='boost-1.85.0/libs/system/include/boost/system/detail/error_code.hpp' l='61' type='bool boost::system::operator==(const boost::system::error_code &amp; code, const boost::system::error_condition &amp; condition)'/>
<def f='boost-1.85.0/libs/system/include/boost/system/detail/error_code.hpp' l='591' ll='601' type='bool boost::system::operator==(const boost::system::error_code &amp; code, const boost::system::error_condition &amp; condition)'/>
<use f='boost-1.85.0/libs/system/include/boost/system/detail/error_code.hpp' l='605' u='c' c='_ZN5boost6systemeqERKNS0_15error_conditionERKNS0_10error_codeE'/>
<use f='boost-1.85.0/libs/system/include/boost/system/detail/error_code.hpp' l='610' u='c' c='_ZN5boost6systemneERKNS0_10error_codeERKNS0_15error_conditionE'/>
<doc f='boost-1.85.0/libs/system/include/boost/system/detail/error_code.hpp' l='45'>//  class error_code

//  We want error_code to be a value type that can be copied without slicing
//  and without requiring heap allocation, but we also want it to have
//  polymorphic behavior based on the error category. This is achieved by
//  abstract base class error_category supplying the polymorphic behavior,
//  and error_code containing a pointer to an object of a type derived
//  from error_category.</doc>
