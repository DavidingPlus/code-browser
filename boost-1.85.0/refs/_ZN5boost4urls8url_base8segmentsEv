<dec f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='1852' type='urls::segments_ref boost::urls::url_base::segments()'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='1800'>/** Return the path as a container of segments

        This function returns a bidirectional
        view of segments over the path.
        The returned view references the same
        underlying character buffer; ownership
        is not transferred.
        Any percent-escapes in strings returned
        when iterating the view are decoded first.
        The container is modifiable; changes
        to the container are reflected in the
        underlying URL.

        @par Example
        @code
        url u( &quot;http://example.com/path/to/file.txt&quot; );

        segments sv = u.segments();
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        path          = path-abempty    ; begins with &quot;/&quot; or is empty
                      / path-absolute   ; begins with &quot;/&quot; but not &quot;//&quot;
                      / path-noscheme   ; begins with a non-colon segment
                      / path-rootless   ; begins with a segment
                      / path-empty      ; zero characters

        path-abempty  = *( &quot;/&quot; segment )
        path-absolute = &quot;/&quot; [ segment-nz *( &quot;/&quot; segment ) ]
        path-noscheme = segment-nz-nc *( &quot;/&quot; segment )
        path-rootless = segment-nz *( &quot;/&quot; segment )
        path-empty    = 0&lt;pchar&gt;
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.3&quot;
            &gt;3.3.  Path (rfc3986)&lt;/a&gt;

        @see
            @ref encoded_segments,
            @ref set_encoded_path,
            @ref set_path,
            @ref set_path_absolute.
    */</doc>
<def f='boost-1.85.0/libs/url/src/url_base.cpp' l='1325' ll='1330' type='boost::urls::segments_ref boost::urls::url_base::segments()'/>
