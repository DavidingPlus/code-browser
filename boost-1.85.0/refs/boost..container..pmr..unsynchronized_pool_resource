<inh f='boost-1.85.0/libs/container/include/boost/container/pmr/memory_resource.hpp' l='31' c='boost::container::pmr::memory_resource'/>
<def f='boost-1.85.0/libs/container/include/boost/container/pmr/unsynchronized_pool_resource.hpp' l='60' ll='186'/>
<use f='boost-1.85.0/libs/container/include/boost/container/pmr/unsynchronized_pool_resource.hpp' l='95' c='_ZN5boost9container3pmr28unsynchronized_pool_resourceC1ERKS2_'/>
<use f='boost-1.85.0/libs/container/include/boost/container/pmr/unsynchronized_pool_resource.hpp' l='96' c='_ZN5boost9container3pmr28unsynchronized_pool_resourceaSERKS2_'/>
<use f='boost-1.85.0/libs/container/include/boost/container/pmr/unsynchronized_pool_resource.hpp' l='96' c='_ZN5boost9container3pmr28unsynchronized_pool_resourceaSERKS2_'/>
<size>64</size>
<doc f='boost-1.85.0/libs/container/include/boost/container/pmr/unsynchronized_pool_resource.hpp' l='30'>//! A unsynchronized_pool_resource is a general-purpose memory resources having
//! the following qualities:
//!
//! - Each resource owns the allocated memory, and frees it on destruction,
//!   even if deallocate has not been called for some of the allocated blocks.
//!
//! - A pool resource consists of a collection of pools, serving
//!   requests for different block sizes. Each individual pool manages a
//!   collection of chunks that are in turn divided into blocks of uniform size,
//!   returned via calls to do_allocate. Each call to do_allocate(size, alignment)
//!   is dispatched to the pool serving the smallest blocks accommodating at
//!   least size bytes.
//!
//! - When a particular pool is exhausted, allocating a block from that pool
//!   results in the allocation of an additional chunk of memory from the upstream
//!   allocator (supplied at construction), thus replenishing the pool. With
//!   each successive replenishment, the chunk size obtained increases
//!   geometrically. [ Note: By allocating memory in chunks, the pooling strategy
//!   increases the chance that consecutive allocations will be close together
//!   in memory. - end note ]
//!
//! - Allocation requests that exceed the largest block size of any pool are
//!   fulfilled directly from the upstream allocator.
//!
//! - A pool_options struct may be passed to the pool resource constructors to
//!   tune the largest block size and the maximum chunk size.
//!
//! An unsynchronized_pool_resource class may not be accessed from multiple threads
//! simultaneously and thus avoids the cost of synchronization entirely in
//! single-threaded applications.</doc>
<mbr r='boost::container::pmr::unsynchronized_pool_resource::m_resource' o='64' t='boost::container::pmr::pool_resource'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceC1ERKNS1_12pool_optionsEPNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceC1Ev'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceC1EPNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceC1ERKNS1_12pool_optionsE'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceC1ERKS2_'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceaSERKS2_'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceD1Ev'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resource7releaseEv'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource17upstream_resourceEv'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource7optionsEv'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resource11do_allocateEmm'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resource13do_deallocateEPvmm'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource11do_is_equalERKNS1_15memory_resourceE'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource10pool_countEv'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource10pool_indexEm'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource26pool_next_blocks_per_chunkEm'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource10pool_blockEm'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource18pool_cached_blocksEm'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceC1ERKNS1_12pool_optionsEPNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceC1Ev'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceC1EPNS1_15memory_resourceE'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceC1ERKNS1_12pool_optionsE'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resourceD1Ev'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resource7releaseEv'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource17upstream_resourceEv'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource7optionsEv'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resource11do_allocateEmm'/>
<fun r='_ZN5boost9container3pmr28unsynchronized_pool_resource13do_deallocateEPvmm'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource11do_is_equalERKNS1_15memory_resourceE'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource10pool_countEv'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource10pool_indexEm'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource26pool_next_blocks_per_chunkEm'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource10pool_blockEm'/>
<fun r='_ZNK5boost9container3pmr28unsynchronized_pool_resource18pool_cached_blocksEm'/>
