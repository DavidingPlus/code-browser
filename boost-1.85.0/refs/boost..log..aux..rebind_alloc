<def f='boost-1.85.0/libs/log/include/boost/log/detail/allocator_traits.hpp' l='52' ll='59'/>
<def f='boost-1.85.0/libs/log/include/boost/log/detail/allocator_traits.hpp' l='67' ll='71'/>
<def f='boost-1.85.0/libs/log/include/boost/log/detail/allocator_traits.hpp' l='73' ll='77'/>
<doc f='boost-1.85.0/libs/log/include/boost/log/detail/allocator_traits.hpp' l='61'>/*!
 * This specialization mostly exists to keep &lt;tt&gt;std::allocator&amp;lt;void&amp;gt;&lt;/tt&gt; working.
 * The default template will attempt to instantiate the allocator type to test if it provides the nested &lt;tt&gt;rebind&lt;/tt&gt; template.
 * We don&apos;t want that to happen because it prohibits using &lt;tt&gt;std::allocator&amp;lt;void&amp;gt;&lt;/tt&gt; in C++17 and later, which deprecated
 * this allocator specialization. This specialization does not use the nested &lt;tt&gt;rebind&lt;/tt&gt; template in this case.
 */</doc>
<use f='boost-1.85.0/libs/log/include/boost/log/detail/threadsafe_queue.hpp' l='110'/>
<use f='boost-1.85.0/libs/log/include/boost/log/detail/threadsafe_queue.hpp' l='116'/>
