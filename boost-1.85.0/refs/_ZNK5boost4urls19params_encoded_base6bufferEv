<dec f='boost-1.85.0/libs/url/include/boost/url/params_encoded_base.hpp' l='177' type='boost::urls::pct_string_view boost::urls::params_encoded_base::buffer() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/params_encoded_base.hpp' l='146'>/** Return the query corresponding to these params

        This function returns the query string
        referenced by the container.
        The returned string may contain
        percent escapes.

        @par Example
        @code
        assert( url_view( &quot;?first=John&amp;last=Doe&quot; ).encoded_params().buffer() == &quot;first=John&amp;last=Doe&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        query-params    = query-param *( &quot;&amp;&quot; query-param )
        query-param     = key [ &quot;=&quot; value ]
        key             = *qpchar
        value           = *( qpchar / &quot;=&quot; )
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://en.wikipedia.org/wiki/Query_string&quot;
            &gt;Query string (Wikipedia)&lt;/a&gt;
    */</doc>
<def f='boost-1.85.0/libs/url/src/params_encoded_base.cpp' l='58' ll='63' type='boost::urls::pct_string_view boost::urls::params_encoded_base::buffer() const'/>
<use f='boost-1.85.0/libs/url/src/params_encoded_base.cpp' l='188' u='c' c='_ZN5boost4urlslsERSoRKNS0_19params_encoded_baseE'/>
<doc f='boost-1.85.0/libs/url/src/params_encoded_base.cpp' l='52'>//------------------------------------------------
//
// Observers
//
//------------------------------------------------</doc>
<use f='boost-1.85.0/libs/url/src/rfc/detail/query_part_rule.hpp' l='56' u='c' c='_ZNK5boost4urls6detail17query_part_rule_t5parseERPKcS4_'/>
