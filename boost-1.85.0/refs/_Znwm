<dec f='include/c++/9/new' l='125' type='void * operator new(std::size_t )'/>
<doc f='include/c++/9/new' l='115'>/** These are replaceable signatures:
 *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
 *  - normal array new and delete (same)
 *  - @c nothrow single new and delete (take a @c nothrow argument, return
 *    @c NULL on error)
 *  - @c nothrow array new and delete (same)
 *
 *  Placement new and delete signatures (take a memory address argument,
 *  does nothing) may not be replaced by a user&apos;s program.
*/</doc>
<use f='include/c++/9/ext/new_allocator.h' l='114' u='c' c='__gnu_cxx::new_allocator::allocate'/>
<use f='boost-1.85.0/libs/core/include/boost/core/default_allocator.hpp' l='92' u='c' c='_ZN5boost8default_17default_allocator8allocateEm'/>
<use f='boost-1.85.0/libs/xpressive/include/boost/xpressive/detail/utility/sequence_stack.hpp' l='51' u='c' c='_ZN5boost9xpressive6detail14sequence_stack8allocateEmRKT_'/>
<use f='boost-1.85.0/libs/regex/include/boost/regex/v5/regex_raw_buffer.hpp' l='125' u='c' c='_ZN5boost13re_detail_50011raw_storage6resizeEm'/>
<use f='boost-1.85.0/libs/regex/include/boost/regex/v5/regex_raw_buffer.hpp' l='204' u='c' c='_ZN5boost13re_detail_50011raw_storageC1Em'/>
<use f='boost-1.85.0/libs/regex/include/boost/regex/v5/mem_block_cache.hpp' l='57' u='c' c='_ZN5boost13re_detail_50015mem_block_cache3getEv'/>
<use f='boost-1.85.0/libs/container/include/boost/container/new_allocator.hpp' l='158' u='c' c='_ZN5boost9container13new_allocator8allocateEm'/>
<use f='boost-1.85.0/libs/json/include/boost/json/detail/impl/default_resource.ipp' l='43' u='c' c='_ZN5boost4json6detail16default_resource11do_allocateEmm'/>
<use f='boost-1.85.0/libs/serialization/include/boost/archive/detail/iserializer.hpp' l='243' u='c' c='_ZN5boost7archive6detail15heap_allocation24doesnt_have_new_operator10invoke_newEv'/>
