<def f='boost-1.85.0/libs/lexical_cast/include/boost/lexical_cast/detail/converter_lexical.hpp' l='346' ll='349'/>
<def f='boost-1.85.0/libs/lexical_cast/include/boost/lexical_cast/detail/converter_lexical.hpp' l='364' ll='374'/>
<def f='boost-1.85.0/libs/lexical_cast/include/boost/lexical_cast/detail/converter_lexical.hpp' l='386' ll='399'/>
<use f='boost-1.85.0/libs/lexical_cast/include/boost/lexical_cast/detail/converter_lexical.hpp' l='430'/>
<doc f='boost-1.85.0/libs/lexical_cast/include/boost/lexical_cast/detail/converter_lexical.hpp' l='351'>// Helper for integral types.
        // Notes on length calculation:
        // Max length for 32bit int with grouping &quot;\1&quot; and thousands_sep &apos;,&apos;:
        // &quot;-2,1,4,7,4,8,3,6,4,7&quot;
        //  ^                    - is_signed
        //   ^                   - 1 digit not counted by digits10
        //    ^^^^^^^^^^^^^^^^^^ - digits10 * 2
        //
        // Constant is_specialized is used instead of constant 1
        // to prevent buffer overflow in a rare case when
        // &lt;boost/limits.hpp&gt; doesn&apos;t add missing specialization for
        // numeric_limits&lt;T&gt; for some integral type T.
        // When is_specialized is false, the whole expression is 0.</doc>
<doc f='boost-1.85.0/libs/lexical_cast/include/boost/lexical_cast/detail/converter_lexical.hpp' l='376'>// Helper for floating point types.
        // -1.23456789e-123456
        // ^                   sign
        //  ^                  leading digit
        //   ^                 decimal point
        //    ^^^^^^^^         lcast_precision&lt;Source&gt;::value
        //            ^        &quot;e&quot;
        //             ^       exponent sign
        //              ^^^^^^ exponent (assumed 6 or less digits)
        // sign + leading digit + decimal point + &quot;e&quot; + exponent sign == 5</doc>
<smbr r='boost::detail::lcast_src_length::value' t='const std::size_t'/>
<smbr r='boost::detail::lcast_src_length{type-parameter-0-0,typenameenable_if{is_integral{type-parameter-0-0},void}::type}::value' t='const std::size_t'/>
<smbr r='boost::detail::lcast_src_length{type-parameter-0-0,typenameenable_if{is_float{type-parameter-0-0},void}::type}::value' t='const std::size_t'/>
