<def f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='435' ll='438' type='const T * boost::contract::old_ptr_if_copyable::operator-&gt;() const'/>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='421'>/**
    Structure-dereference this old value pointer.

    This will return null but will not generate a compile-time error if the
    pointed type @c T is not copyable (i.e., if
    @c boost::contract::is_old_value_copyable&lt;T&gt;::value is @c false).

    @return A pointer to the old value (null if this old value pointer is null).
            Contract assertions should not change the state of the program so
            this member function is @c const and it returns the old value as a
            pointer to a constant object (see
            @RefSect{contract_programming_overview.constant_correctness,
            Constant Correctness}).
    */</doc>
