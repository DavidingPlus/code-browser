<def f='boost-1.85.0/libs/chrono/include/boost/chrono/duration.hpp' l='234' ll='241'/>
<def f='boost-1.85.0/libs/chrono/include/boost/chrono/duration.hpp' l='249' ll='261'/>
<def f='boost-1.85.0/libs/chrono/include/boost/chrono/duration.hpp' l='268' ll='280'/>
<def f='boost-1.85.0/libs/chrono/include/boost/chrono/duration.hpp' l='288' ll='301'/>
<use f='boost-1.85.0/libs/chrono/include/boost/chrono/duration.hpp' l='307'/>
<doc f='boost-1.85.0/libs/chrono/include/boost/chrono/duration.hpp' l='230'>// When the two periods are the same, all that is left to do is static_cast from
    //   the source representation to the target representation (which may be a no-op).
    //   This conversion is always exact as long as the static_cast from the source
    //   representation to the destination representation is exact.</doc>
<doc f='boost-1.85.0/libs/chrono/include/boost/chrono/duration.hpp' l='243'>// When the numerator of FromPeriod / ToPeriod is 1, then all we need to do is
    //   divide by the denominator of FromPeriod / ToPeriod.  The common_type of
    //   the two representations is used for the intermediate computation before
    //   static_cast&apos;ing to the destination.
    //   This conversion is generally not exact because of the division (but could be
    //   if you get lucky on the run time value of fd.count()).</doc>
<doc f='boost-1.85.0/libs/chrono/include/boost/chrono/duration.hpp' l='263'>// When the denominator of FromPeriod / ToPeriod is 1, then all we need to do is
    //   multiply by the numerator of FromPeriod / ToPeriod.  The common_type of
    //   the two representations is used for the intermediate computation before
    //   static_cast&apos;ing to the destination.
    //   This conversion is always exact as long as the static_cast&apos;s involved are exact.</doc>
<doc f='boost-1.85.0/libs/chrono/include/boost/chrono/duration.hpp' l='282'>// When neither the numerator or denominator of FromPeriod / ToPeriod is 1, then we need to
    //   multiply by the numerator and divide by the denominator of FromPeriod / ToPeriod.  The
    //   common_type of the two representations is used for the intermediate computation before
    //   static_cast&apos;ing to the destination.
    //   This conversion is generally not exact because of the division (but could be
    //   if you get lucky on the run time value of fd.count()).</doc>
<fun r='_ZNK5boost6chrono6detail17duration_cast_auxIT_T0_T1_Lb1ELb1EEclERKS3_'/>
<fun r='_ZNK5boost6chrono6detail17duration_cast_auxIT_T0_T1_Lb1ELb0EEclERKS3_'/>
<fun r='_ZNK5boost6chrono6detail17duration_cast_auxIT_T0_T1_Lb0ELb1EEclERKS3_'/>
<fun r='_ZNK5boost6chrono6detail17duration_cast_auxIT_T0_T1_Lb0ELb0EEclERKS3_'/>
