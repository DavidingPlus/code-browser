<def f='boost-1.85.0/libs/tuple/include/boost/tuple/detail/tuple_basic.hpp' l='247' ll='249'/>
<use f='boost-1.85.0/libs/tuple/include/boost/tuple/detail/tuple_basic.hpp' l='253'/>
<use f='boost-1.85.0/libs/tuple/include/boost/tuple/detail/tuple_basic.hpp' l='257'/>
<doc f='boost-1.85.0/libs/tuple/include/boost/tuple/detail/tuple_basic.hpp' l='241'>//  These helper templates wrap void types and plain function types.
//  The reationale is to allow one to write tuple types with those types
//  as elements, even though it is not possible to instantiate such object.
//  E.g: typedef tuple&lt;void&gt; some_type; // ok
//  but: some_type x; // fails</doc>
<fun r='_ZN5boost6tuples6detail18non_storeable_typeC1Ev'/>
