<def f='boost-1.85.0/libs/json/include/boost/json/value.hpp' l='201' ll='205' type='void boost::json::value::value(pilfered&lt;boost::json::value&gt; other)'/>
<use f='boost-1.85.0/libs/json/include/boost/json/value.hpp' l='3903' u='c' c='_ZN5boost4json14key_value_pairC1ENS0_8pilferedIS1_EE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/array.ipp' l='675' u='c' c='_ZN5boost4json5array9push_backENS0_8pilferedINS0_5valueEEE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/array.ipp' l='685' u='c' c='_ZN5boost4json5array9push_backENS0_8pilferedINS0_5valueEEE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/array.ipp' l='719' u='c' c='_ZN5boost4json5array6insertEPKNS0_5valueENS0_8pilferedIS2_EE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/array.ipp' l='727' u='c' c='_ZN5boost4json5array6insertEPKNS0_5valueENS0_8pilferedIS2_EE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/value.ipp' l='414' u='c' c='_ZN5boost4json5value4swapERS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/value.ipp' l='416' u='c' c='_ZN5boost4json5value4swapERS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/value.ipp' l='654' u='c' c='_ZN5boost4json14key_value_pairC1ENS0_8pilferedINS0_5valueEEES4_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/value_stack.ipp' l='353' u='c' c='_ZN5boost4json11value_stack7releaseEv'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/value.hpp' l='179'>/** Pilfer constructor.

        The value is constructed by acquiring ownership
        of the contents of `other` using pilfer semantics.
        This is more efficient than move construction, when
        it is known that the moved-from object will be
        immediately destroyed afterwards.

        @par Complexity
        Constant.

        @par Exception Safety
        No-throw guarantee.

        @param other The value to pilfer. After pilfer
        construction, `other` is not in a usable state
        and may only be destroyed.

        @see @ref pilfer,
            &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0308r0.html&quot;&gt;
                Valueless Variants Considered Harmful&lt;/a&gt;
    */</doc>
