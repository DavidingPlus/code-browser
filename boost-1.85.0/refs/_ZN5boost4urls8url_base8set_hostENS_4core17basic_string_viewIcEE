<dec f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='922' type='boost::urls::url_base &amp; boost::urls::url_base::set_host(core::string_view s)'/>
<use f='boost-1.85.0/libs/url/include/boost/url/url.hpp' l='438' u='c' c='_ZN5boost4urls3url8set_hostENS_4core17basic_string_viewIcEE'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='847'>/** Set the host

        Depending on the contents of the passed
        string, this function sets the host:

        @li If the string is a valid IPv4 address,
        then the host is set to the address.
        The host type is @ref host_type::ipv4.

        @li If the string is a valid IPv6 address
        enclosed in square brackets, then the
        host is set to that address.
        The host type is @ref host_type::ipv6.

        @li If the string is a valid IPvFuture
        address enclosed in square brackets, then
        the host is set to that address.
        The host type is @ref host_type::ipvfuture.

        @li Otherwise, the host name is set to
        the string, which may be empty.
        Reserved characters in the string are
        percent-escaped in the result.
        The host type is @ref host_type::name.

        In all cases, when this function returns,
        the URL contains an authority.

        @par Example
        @code
        assert( url( &quot;http://www.example.com&quot; ).set_host( &quot;127.0.0.1&quot; ).buffer() == &quot;http://127.0.0.1&quot; );
        @endcode

        @par Postconditions
        @code
        this-&gt;has_authority() == true
        @endcode

        @par Complexity
        Linear in `this-&gt;size() + s.size()`.

        @par Exception Safety
        Strong guarantee.
        Calls to allocate may throw.

        @param s The string to set.

        @par BNF
        @code
        host        = IP-literal / IPv4address / reg-name

        IP-literal  = &quot;[&quot; ( IPv6address / IPvFuture  ) &quot;]&quot;

        reg-name    = *( unreserved / pct-encoded / &quot;-&quot; / &quot;.&quot;)
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://en.wikipedia.org/wiki/IPv4&quot;
            &gt;IPv4 (Wikipedia)&lt;/a&gt;
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4291&quot;
            &gt;IP Version 6 Addressing Architecture (rfc4291)&lt;/a&gt;
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2&quot;&gt;
            3.2.2. Host (rfc3986)&lt;/a&gt;

        @see
            @ref set_encoded_host,
            @ref set_encoded_host_address,
            @ref set_encoded_host_name,
            @ref set_host_address,
            @ref set_host_ipv4,
            @ref set_host_ipv6,
            @ref set_host_ipvfuture,
            @ref set_host_name.
    */</doc>
<use f='boost-1.85.0/libs/url/include/boost/url/static_url.hpp' l='374' u='c' c='_ZN5boost4urls10static_url8set_hostENS_4core17basic_string_viewIcEE'/>
<def f='boost-1.85.0/libs/url/src/url_base.cpp' l='608' ll='658' type='boost::urls::url_base &amp; boost::urls::url_base::set_host(core::string_view s)'/>
<doc f='boost-1.85.0/libs/url/src/url_base.cpp' l='579'>/*
host_type       host_type()                 // ipv4, ipv6, ipvfuture, name

std::string     host()                      // return encoded_host().decode()
pct_string_view encoded_host()              // return host part, as-is
std::string     host_address()              // return encoded_host_address().decode()
pct_string_view encoded_host_address()      // ipv4, ipv6, ipvfut, or encoded name, no brackets

ipv4_address    host_ipv4_address()         // return ipv4_address or {}
ipv6_address    host_ipv6_address()         // return ipv6_address or {}
core::string_view     host_ipvfuture()            // return ipvfuture or {}
std::string     host_name()                 // return decoded name or &quot;&quot;
pct_string_view encoded_host_name()         // return encoded host name or &quot;&quot;

--------------------------------------------------

set_host( core::string_view )                     // set host part from plain text
set_encoded_host( pct_string_view )         // set host part from encoded text
set_host_address( core::string_view )             // set host from ipv4, ipv6, ipvfut, or plain reg-name string
set_encoded_host_address( pct_string_view ) // set host from ipv4, ipv6, ipvfut, or encoded reg-name string

set_host_ipv4( ipv4_address )               // set ipv4
set_host_ipv6( ipv6_address )               // set ipv6
set_host_ipvfuture( core::string_view )           // set ipvfuture
set_host_name( core::string_view )                // set name from plain
set_encoded_host_name( pct_string_view )    // set name from encoded
*/

// set host part from plain text</doc>
