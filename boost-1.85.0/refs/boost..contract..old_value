<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='166'/>
<def f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='482' ll='551'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='549' c='_ZN5boost8contract8null_oldEv'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='600' c='_ZN5boost8contract11old_pointerC1EPNS0_8virtual_ERKNS0_9old_valueE'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='671' c='_ZN5boost8contract8make_oldERKNS0_9old_valueE'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='674' c='_ZN5boost8contract8make_oldEPNS0_8virtual_ERKNS0_9old_valueE'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='690' c='_ZN5boost8contract8null_oldEv'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='718' c='_ZN5boost8contract8make_oldERKNS0_9old_valueE'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='750' c='_ZN5boost8contract8make_oldEPNS0_8virtual_ERKNS0_9old_valueE'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/detail/inlined/old.hpp' l='19' c='_ZN5boost8contract8null_oldEv'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/detail/inlined/old.hpp' l='19' c='_ZN5boost8contract8null_oldEv'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/detail/inlined/old.hpp' l='22' c='_ZN5boost8contract8make_oldERKNS0_9old_valueE'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/detail/inlined/old.hpp' l='27' c='_ZN5boost8contract8make_oldEPNS0_8virtual_ERKNS0_9old_valueE'/>
<size>16</size>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='468'>/**
Convert user-specified expressions to old values.

This class is usually only implicitly used by this library and it does not
explicitly appear in user code.

On older compilers that cannot correctly deduce the
@c boost::contract::is_old_value_copyable trait used in the declaration of this
class, programmers can manually specialize that trait to make sure that only old
value types that are copyable are actually copied.

@see    @RefSect{extras.old_value_requirements__templates_,
        Old Value Requirements}
*/</doc>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/old.hpp' l='482'>// Copyable (as *). </doc>
<fun r='_ZN5boost8contract9old_valueC1ERKT_PNS_9enable_ifINS0_21is_old_value_copyableIS2_EEvE4typeE'/>
<fun r='_ZN5boost8contract9old_valueC1ERKT_PNS_10disable_ifINS0_21is_old_value_copyableIS2_EEvE4typeE'/>
<fun r='_ZN5boost8contract9old_valueC1Ev'/>
<mbr r='boost::contract::old_value::untyped_copy_' o='0' t='boost::shared_ptr&lt;void&gt;'/>
