<dec f='boost-1.85.0/libs/log/include/boost/log/utility/ipc/reliable_message_queue.hpp' l='714' type='static void boost::log::ipc::reliable_message_queue::remove(const boost::log::ipc::object_name &amp; name)'/>
<def f='boost-1.85.0/libs/log/src/posix/ipc_reliable_message_queue.cpp' l='1015' ll='1018' macro='1' type='static void boost::log::ipc::reliable_message_queue::remove(const boost::log::ipc::object_name &amp; name)'/>
<doc f='boost-1.85.0/libs/log/include/boost/log/utility/ipc/reliable_message_queue.hpp' l='695'>/*!
     * The method frees system-wide resources, associated with the interprocess queue with the supplied name.
     * The queue referred to by the specified name must not be opened in any process at the point of this call.
     * After this call succeeds a new queue with the specified name can be created.
     *
     * This call can be useful to recover from an earlier process misbehavior (e.g. a crash without properly
     * closing the message queue). In this case resources allocated for the interprocess queue may remain
     * allocated after the last process closed the queue, which in turn may prevent creating a new queue with
     * the same name. By calling this method before creating a queue the application can attempt to ensure
     * it starts with a clean slate.
     *
     * On some platforms resources associated with the queue are automatically reclaimed by the operating system
     * when the last process using those resources terminates (even if it terminates abnormally). On these
     * platforms this call may be a no-op. However, portable code should still call this method at appropriate
     * places to ensure compatibility with other platforms and future library versions, which may change implementation
     * of the queue.
     *
     * \param name Name of the message queue to be removed.
     */</doc>
