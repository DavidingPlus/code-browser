<def f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='480' ll='484' type='bool boost::urls::url_view_base::has_authority() const'/>
<use f='boost-1.85.0/libs/url/src/detail/pattern.cpp' l='258' u='c' c='_ZNK5boost4urls6detail7pattern5applyERNS0_8url_baseERKNS1_11format_argsE'/>
<use f='boost-1.85.0/libs/url/src/detail/pattern.cpp' l='290' u='c' c='_ZNK5boost4urls6detail7pattern5applyERNS0_8url_baseERKNS1_11format_argsE'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='433'>/** Return true if an authority is present

        This function returns true if the url
        contains an authority. The presence of
        an authority is denoted by a double
        slash (&quot;//&quot;) at the beginning or after
        the scheme.

        @par Example
        @code
        assert( url_view( &quot;http://www.example.com/index.htm&quot; ).has_authority() );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        authority       = [ userinfo &quot;@&quot; ] host [ &quot;:&quot; port ]

        URI             = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ]

        absolute-URI    = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ]

        URI-reference   = URI / relative-ref

        relative-ref    = relative-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ]

        hier-part       = &quot;//&quot; authority path-abempty
                        ; (more...)

        relative-part   = &quot;//&quot; authority path-abempty
                        ; (more...)

        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2&quot;
            &gt;3.2. Authority (rfc3986)&lt;/a&gt;

        @see
            @ref authority,
            @ref encoded_authority.
    */</doc>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='180' u='c' c='_ZN5boost4urls8url_base13remove_schemeEv'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='316' u='c' c='_ZN5boost4urls8url_base16remove_authorityEv'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1044' u='c' c='_ZN5boost4urls8url_base17set_path_absoluteEb'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1115' u='c' c='_ZN5boost4urls8url_base8set_pathENS_4core17basic_string_viewIcEE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1131' u='c' c='_ZN5boost4urls8url_base8set_pathENS_4core17basic_string_viewIcEE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1229' u='c' c='_ZN5boost4urls8url_base16set_encoded_pathENS0_15pct_string_viewE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1245' u='c' c='_ZN5boost4urls8url_base16set_encoded_pathENS0_15pct_string_viewE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1252' u='c' c='_ZN5boost4urls8url_base16set_encoded_pathENS0_15pct_string_viewE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1570' u='c' c='_ZN5boost4urls8url_base7resolveERKNS0_13url_view_baseE'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1762' u='c' c='_ZN5boost4urls8url_base14normalize_pathEv'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1777' u='c' c='_ZN5boost4urls8url_base14normalize_pathEv'/>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='2386' u='c' c='_ZN5boost4urls8url_base13edit_segmentsERKNS0_6detail18segments_iter_implES5_ONS2_17any_segments_iterEi'/>
<use f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='153' u='c' c='_ZNK5boost4urls13url_view_base9authorityEv'/>
<use f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='680' u='c' c='_ZNK5boost4urls13url_view_base7compareERKS1_'/>
<use f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='681' u='c' c='_ZNK5boost4urls13url_view_base7compareERKS1_'/>
<use f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='685' u='c' c='_ZNK5boost4urls13url_view_base7compareERKS1_'/>
