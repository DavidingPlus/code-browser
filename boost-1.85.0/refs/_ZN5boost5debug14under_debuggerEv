<dec f='boost-1.85.0/libs/test/include/boost/test/debug.hpp' l='54' type='bool boost::debug::under_debugger()'/>
<def f='boost-1.85.0/libs/test/include/boost/test/impl/debug.ipp' l='647' ll='706' type='bool boost::debug::under_debugger()'/>
<use f='boost-1.85.0/libs/test/include/boost/test/impl/debug.ipp' l='823' u='c' c='_ZN5boost5debug15attach_debuggerEb'/>
<doc f='boost-1.85.0/libs/test/include/boost/test/impl/debug.ipp' l='643'>// ************************************************************************** //
// **************  check if program is running under debugger  ************** //
// ************************************************************************** //</doc>
<doc f='boost-1.85.0/libs/test/include/boost/test/debug.hpp' l='35'>/// @defgroup DebuggerInterface Debugger and debug C Runtime portable interfaces
/// @{
/// These interfaces are intended to be used by application to:
/// - check if we are running under debugger
/// - attach the debugger to itself
///
/// Unfortunately these actions differ widely between different debuggers available in a field. These interface present generalized standard form of
/// performing these actions. Implementation depends a lot on the environment application is running in and thus there are several custom implementations
/// supported by the Boost.Test
///
/// In addition here you find interfaces for memory leaks detection and reporting.
///
/// All these interfaces are defined in namespace boost::debug

// ************************************************************************** //
/// Checks if programs runs under debugger

/// @returns true if current process is under debugger. False otherwise
// ************************************************************************** //</doc>
<use f='boost-1.85.0/libs/test/include/boost/test/impl/execution_monitor.ipp' l='1311' u='c' c='_ZN5boost17execution_monitor7executeERKNS_8functionIFivEEE'/>
