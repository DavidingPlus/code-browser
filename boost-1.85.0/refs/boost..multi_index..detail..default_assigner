<def f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/hash_index_node.hpp' l='164' ll='167'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/hash_index_node.hpp' l='274' c='_ZN5boost11multi_index6detail21hashed_index_node_algIT_NS1_17hashed_unique_tagEE6unlinkENS3_7pointerE'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/hash_index_node.hpp' l='442' c='_ZN5boost11multi_index6detail21hashed_index_node_algIT_NS1_21hashed_non_unique_tagEE6unlinkENS3_7pointerE'/>
<size>1</size>
<doc f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/hash_index_node.hpp' l='157'>/* Boost.MultiIndex requires machinery to reverse unlink operations. A simple
 * way to make a pointer-manipulation function undoable is to templatize
 * its internal pointer assignments with a functor that, besides doing the
 * assignment, keeps track of the original pointer values and can later undo
 * the operations in reverse order.
 */</doc>
<fun r='_ZN5boost11multi_index6detail16default_assignerclERT_RKS3_'/>
