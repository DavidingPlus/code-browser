<dec f='include/unicode/uniset.h' l='1030' type='static int32_t icu_66::UnicodeSet::matchRest(const icu_66::Replaceable &amp; text, int32_t start, int32_t limit, const icu_66::UnicodeString &amp; s)'/>
<doc f='include/unicode/uniset.h' l='1008'>/**
     * Returns the longest match for s in text at the given position.
     * If limit &gt; start then match forward from start+1 to limit
     * matching all characters except s.charAt(0).  If limit &lt; start,
     * go backward starting from start-1 matching all characters
     * except s.charAt(s.length()-1).  This method assumes that the
     * first character, text.charAt(start), matches s, so it does not
     * check it.
     * @param text the text to match
     * @param start the first character to match.  In the forward
     * direction, text.charAt(start) is matched against s.charAt(0).
     * In the reverse direction, it is matched against
     * s.charAt(s.length()-1).
     * @param limit the limit offset for matching, either last+1 in
     * the forward direction, or last-1 in the reverse direction,
     * where last is the index of the last character to match.
     * @param s
     * @return If part of s matches up to the limit, return |limit -
     * start|.  If all of s matches before reaching the limit, return
     * s.length().  If there is a mismatch between s and text, return
     * 0
     */</doc>
