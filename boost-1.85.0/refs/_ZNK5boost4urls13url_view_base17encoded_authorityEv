<dec f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='552' type='boost::urls::pct_string_view boost::urls::url_view_base::encoded_authority() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='518'>/** Return the authority.

        If present, this function returns a
        string representing the authority (which
        may be empty).
        Otherwise it returns an empty string.
        The returned string may contain
        percent escapes.

        @par Example
        @code
        assert( url_view( &quot;file://Network%20Drive/My%2DFiles&quot; ).encoded_authority() == &quot;Network%20Drive&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        authority   = [ userinfo &quot;@&quot; ] host [ &quot;:&quot; port ]
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2&quot;
            &gt;3.2. Authority (rfc3986)&lt;/a&gt;

        @see
            @ref authority,
            @ref has_authority.
    */</doc>
<use f='boost-1.85.0/libs/url/src/url_base.cpp' l='1575' u='c' c='_ZN5boost4urls8url_base7resolveERKNS0_13url_view_baseE'/>
<use f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='152' u='c' c='_ZNK5boost4urls13url_view_base9authorityEv'/>
<def f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='177' ll='195' type='boost::urls::pct_string_view boost::urls::url_view_base::encoded_authority() const'/>
