<use f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1412' u='c' c='_ZNK5boost4urls13url_view_base7zone_idEOT_'/>
<dec f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1451' type='boost::urls::pct_string_view boost::urls::url_view_base::encoded_zone_id() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1416'>/** Return the IPv6 Zone ID

        If the host type is @ref host_type::ipv6,
        this function returns the Zone ID as
        a string. Otherwise an empty string is returned.
        The returned string may contain
        percent escapes.

        @par Example
        @code
        assert( url_view( &quot;http://[fe80::1%25eth0]/&quot; ).encoded_zone_id() == &quot;eth0&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        host        = IP-literal / IPv4address / reg-name

        IP-literal = &quot;[&quot; ( IPv6address / IPv6addrz / IPvFuture  ) &quot;]&quot;

        ZoneID = 1*( unreserved / pct-encoded )

        IPv6addrz = IPv6address &quot;%25&quot; ZoneID
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc6874&quot;
            &gt;Representing IPv6 Zone Identifiers in Address Literals and Uniform Resource Identifiers&lt;/a&gt;
    */</doc>
<def f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='422' ll='438' type='boost::urls::pct_string_view boost::urls::url_view_base::encoded_zone_id() const'/>
