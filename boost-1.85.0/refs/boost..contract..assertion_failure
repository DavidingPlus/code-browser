<inh f='include/c++/9/bits/exception.h' l='60' c='std::exception'/>
<inh f='boost-1.85.0/libs/contract/include/boost/contract/core/exception.hpp' l='49' c='boost::contract::exception'/>
<def f='boost-1.85.0/libs/contract/include/boost/contract/core/exception.hpp' l='137' ll='219'/>
<use f='boost-1.85.0/libs/contract/include/boost/contract/detail/inlined/core/exception.hpp' l='116' c='_ZN5boost8contract10exception_15default_handlerEv'/>
<size>72</size>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/core/exception.hpp' l='116'>/**
Exception typically used to report a contract assertion failure.

This exception is thrown by code expanded by @RefMacro{BOOST_CONTRACT_ASSERT}
(but it can also be thrown by user code programmed manually without that macro).
This exception is typically used to report contract assertion failures because
it contains detailed information about the file name, line number, and source
code of the asserted condition (so it can be used by this library to provide
detailed error messages when handling contract assertion failures).

However, any other exception can be used to report a contract assertion failure
(including user-defined exceptions).
This library will call the appropriate contract failure handler function
(@RefFunc{boost::contract::precondition_failure}, etc.) when this or any other
exception is thrown while checking contracts (by default, these failure handler
functions print an error message to @c std::cerr and terminate the program, but
they can be customized to take any other action).

@see    @RefSect{advanced.throw_on_failures__and__noexcept__, Throw on Failure},
        @RefSect{extras.no_macros__and_no_variadic_macros_, No Macros}
*/</doc>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/core/exception.hpp' l='137'>// Copy (as str, etc.).</doc>
<fun r='_ZN5boost8contract17assertion_failureC1EPKcmS3_'/>
<fun r='_ZN5boost8contract17assertion_failureC1EPKc'/>
<fun r='_ZN5boost8contract17assertion_failureD1Ev'/>
<fun r='_ZNK5boost8contract17assertion_failure4whatEv'/>
<fun r='_ZNK5boost8contract17assertion_failure4fileEv'/>
<fun r='_ZNK5boost8contract17assertion_failure4lineEv'/>
<fun r='_ZNK5boost8contract17assertion_failure4codeEv'/>
<fun r='_ZN5boost8contract17assertion_failure4initEv'/>
<mbr r='boost::contract::assertion_failure::file_' o='128' t='const char *'/>
<mbr r='boost::contract::assertion_failure::line_' o='192' t='unsigned long'/>
<mbr r='boost::contract::assertion_failure::code_' o='256' t='const char *'/>
<mbr r='boost::contract::assertion_failure::what_' o='320' t='std::string'/>
<fun r='_ZN5boost8contract17assertion_failureC1EPKcmS3_'/>
<fun r='_ZN5boost8contract17assertion_failureC1EPKc'/>
<fun r='_ZN5boost8contract17assertion_failureD1Ev'/>
<fun r='_ZNK5boost8contract17assertion_failure4whatEv'/>
<fun r='_ZNK5boost8contract17assertion_failure4fileEv'/>
<fun r='_ZNK5boost8contract17assertion_failure4lineEv'/>
<fun r='_ZNK5boost8contract17assertion_failure4codeEv'/>
<fun r='_ZN5boost8contract17assertion_failure4initEv'/>
