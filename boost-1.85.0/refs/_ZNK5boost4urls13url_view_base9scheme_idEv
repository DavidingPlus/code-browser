<dec f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='425' type='urls::scheme boost::urls::url_view_base::scheme_id() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='378'>/** Return the scheme

        This function returns a value which
        depends on the scheme in the url:

        @li If the scheme is a well-known
        scheme, corresponding value from
        the enumeration @ref urls::scheme
        is returned.

        @li If a scheme is present but is not
        a well-known scheme, the value
        returned is @ref urls::scheme::unknown.

        @li Otherwise, if the scheme is absent
        the value returned is
        @ref urls::scheme::none.

        @par Example
        @code
        assert( url_view( &quot;wss://www.example.com/crypto.cgi&quot; ).scheme_id() == scheme::wss );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        URI             = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ] [ &quot;#&quot; fragment ]

        absolute-URI    = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ]

        scheme          = ALPHA *( ALPHA / DIGIT / &quot;+&quot; / &quot;-&quot; / &quot;.&quot; )
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.1&quot;
            &gt;3.1. Scheme (rfc3986)&lt;/a&gt;

        @see
            @ref has_scheme,
            @ref scheme.
    */</doc>
<def f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='134' ll='139' type='urls::scheme boost::urls::url_view_base::scheme_id() const'/>
