<use f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='34' u='w' c='_ZN5boost19vector_property_mapC1ERKT0_'/>
<use f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='39' u='w' c='_ZN5boost19vector_property_mapC1EjRKT0_'/>
<use f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='44' u='c' c='_ZN5boost19vector_property_map13storage_beginEv'/>
<use f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='49' u='c' c='_ZN5boost19vector_property_map11storage_endEv'/>
<use f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='54' u='c' c='_ZNK5boost19vector_property_map13storage_beginEv'/>
<use f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='59' u='c' c='_ZNK5boost19vector_property_map11storage_endEv'/>
<use f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='72' u='c' c='_ZNK5boost19vector_property_mapixERKNS_15property_traitsIT0_E8key_typeE'/>
<use f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='73' u='c' c='_ZNK5boost19vector_property_mapixERKNS_15property_traitsIT0_E8key_typeE'/>
<use f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='75' c='_ZNK5boost19vector_property_mapixERKNS_15property_traitsIT0_E8key_typeE'/>
<dec f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='84' type='shared_ptr&lt;std::vector&lt;T&gt;&gt;'/>
<doc f='boost-1.85.0/libs/property_map/include/boost/property_map/vector_property_map.hpp' l='78'>// Conceptually, we have a vector of infinite size. For practical 
        // purposes, we start with an empty vector and grow it as needed.
        // Note that we cannot store pointer to vector here -- we cannot
        // store pointer to data, because if copy of property map resizes
        // the vector, the pointer to data will be invalidated. 
        // I wonder if class &apos;pmap_ref&apos; is simply needed.</doc>
