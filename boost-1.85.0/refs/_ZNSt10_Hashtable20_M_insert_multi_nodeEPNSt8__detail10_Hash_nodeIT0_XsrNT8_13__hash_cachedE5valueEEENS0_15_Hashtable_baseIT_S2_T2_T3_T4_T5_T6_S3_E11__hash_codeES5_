<dec f='include/c++/9/bits/hashtable.h' l='716' type='std::_Hashtable::iterator std::_Hashtable::_M_insert_multi_node(std::_Hashtable::__node_type * __hint, std::_Hashtable::__hash_code __code, std::_Hashtable::__node_type * __n)'/>
<use f='include/c++/9/bits/hashtable.h' l='1725' u='c' c='_ZNSt10_Hashtable10_M_emplaceENSt8__detail15_Hashtable_baseIT_T0_T2_T3_T4_T5_T6_T8_E14const_iteratorESt17integral_constantIbLb0EEDpOTL0__'/>
<def f='include/c++/9/bits/hashtable.h' l='1768' ll='1829' type='std::_Hashtable::iterator std::_Hashtable::_M_insert_multi_node(std::_Hashtable::__node_type * __hint, std::_Hashtable::__hash_code __code, std::_Hashtable::__node_type * __node)'/>
<use f='include/c++/9/bits/hashtable.h' l='1876' u='c' c='_ZNSt10_Hashtable9_M_insertENSt8__detail15_Hashtable_baseIT_T0_T2_T3_T4_T5_T6_T8_E14const_iteratorEOTL0__RKTL0_0_St17integral_constantIbLb0EE'/>
<doc f='include/c++/9/bits/hashtable.h' l='713'>// Insert node with hash code __code. Take ownership of the node,
      // deallocate it on exception.</doc>
<doc f='include/c++/9/bits/hashtable.h' l='1766'>// Insert node, in bucket bkt if no rehash (assumes no element with its key
  // already present). Take ownership of the node, deallocate it on exception.</doc>
