<def f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='132' ll='1026'/>
<use f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='139' c='_ZN5boost4json13stream_parserC1ERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='142' c='_ZN5boost4json13stream_parseraSERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='143' c='_ZN5boost4json13stream_parseraSERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='213' c='_ZN5boost4json13stream_parserC1Ev'/>
<use f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='263' c='_ZN5boost4json13stream_parserC1ENS0_11storage_ptrE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='299' c='_ZN5boost4json13stream_parserC1ENS0_11storage_ptrERKNS0_13parse_optionsERAT__h'/>
<use f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='392' c='_ZN5boost4json13stream_parserC1ENS0_11storage_ptrERKNS0_13parse_optionsERAT__hm'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/parse.ipp' l='75' c='_ZN5boost4json5parseERSiRNS_6system10error_codeENS0_11storage_ptrERKNS0_13parse_optionsE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/value.ipp' l='436' c='_ZN5boost4jsonrsERSiRNS0_5valueE'/>
<size>272</size>
<doc f='boost-1.85.0/libs/json/include/boost/json/stream_parser.hpp' l='27'>/** A DOM parser for JSON text contained in multiple buffers.

    This class is used to parse a JSON text contained in a
    series of one or more character buffers, into a
    @ref value container. It implements a
    &lt;a href=&quot;https://en.wikipedia.org/wiki/Streaming_algorithm&quot;&gt;
        &lt;em&gt;streaming algorithm&lt;/em&gt;&lt;/a&gt;, allowing these
    parsing strategies:

    @li Parse a JSON file a piece at a time.

    @li Parse incoming JSON text as it arrives,
        one buffer at a time.

    @li Parse with bounded resource consumption
        per cycle.

    @par Usage

    To use the parser first construct it, then optionally
    call @ref reset to specify a @ref storage_ptr to use
    for the resulting @ref value. Then call @ref write
    one or more times to parse a single, complete JSON text.
    Call @ref done to determine if the parse has completed.
    To indicate there are no more buffers, call @ref finish.
    If the parse is successful, call @ref release to take
    ownership of the value:

    @code
    stream_parser p;                                // construct a parser
    p.write( &quot;[1,2&quot; );                              // parse some of a JSON text
    p.write( &quot;,3,4]&quot; );                             // parse the rest of the JSON text
    assert( p.done() );                             // we have a complete JSON text
    value jv = p.release();                         // take ownership of the value
    @endcode

    @par Extra Data

    When the character buffer provided as input contains
    additional data that is not part of the complete
    JSON text, an error is returned. The @ref write_some
    function is an alternative which allows the parse
    to finish early, without consuming all the characters
    in the buffer. This allows parsing of a buffer
    containing multiple individual JSON texts or containing
    different protocol data:
    @code
    stream_parser p;                                // construct a parser
    std::size_t n;                                  // number of characters used
    n = p.write_some( &quot;[1,2&quot; );                     // parse some of a JSON text
    assert( n == 4 );                               // all characters consumed
    n = p.write_some( &quot;,3,4] null&quot; );               // parse the remainder of the JSON text
    assert( n == 6 );                               // only some characters consumed
    assert( p.done() );                             // we have a complete JSON text
    value jv = p.release();                         // take ownership of the value
    @endcode

    @par Temporary Storage

    The parser may dynamically allocate temporary
    storage as needed to accommodate the nesting level
    of the JSON text being parsed. Temporary storage is
    first obtained from an optional, caller-owned
    buffer specified upon construction. When that
    is exhausted, the next allocation uses the
    `boost::container::pmr::memory_resource` passed to the constructor; if
    no such argument is specified, the default memory
    resource is used. Temporary storage is freed only
    when the parser is destroyed; The performance of
    parsing multiple JSON texts may be improved by reusing
    the same parser instance.
\n
    It is important to note that the `boost::container::pmr::memory_resource`
    supplied upon construction is used for temporary storage only, and not for
    allocating the elements which make up the parsed value. That other memory
    resource is optionally supplied in each call to @ref reset.

    @par Duplicate Keys

    If there are object elements with duplicate keys;
    that is, if multiple elements in an object have
    keys that compare equal, only the last equivalent
    element will be inserted.

    @par Non-Standard JSON

    The @ref parse_options structure optionally
    provided upon construction is used to customize
    some parameters of the parser, including which
    non-standard JSON extensions should be allowed.
    A default-constructed parse options allows only
    standard JSON.

    @par Thread Safety

    Distinct instances may be accessed concurrently.
    Non-const member functions of a shared instance
    may not be called concurrently with any other
    member functions of that instance.

    @see
        @ref parse,
        @ref parser,
        @ref parse_options,
*/</doc>
<mbr r='boost::json::stream_parser::p_' o='0' t='basic_parser&lt;detail::handler&gt;'/>
<fun r='_ZN5boost4json13stream_parserC1ERKS1_'/>
<fun r='_ZN5boost4json13stream_parseraSERKS1_'/>
<fun r='_ZN5boost4json13stream_parserD1Ev'/>
<fun r='_ZN5boost4json13stream_parserC1ENS0_11storage_ptrERKNS0_13parse_optionsEPhm'/>
<fun r='_ZN5boost4json13stream_parserC1Ev'/>
<fun r='_ZN5boost4json13stream_parserC1ENS0_11storage_ptrERKNS0_13parse_optionsE'/>
<fun r='_ZN5boost4json13stream_parserC1ENS0_11storage_ptrE'/>
<fun r='_ZN5boost4json13stream_parserC1ENS0_11storage_ptrERKNS0_13parse_optionsERAT__h'/>
<fun r='_ZN5boost4json13stream_parserC1ENS0_11storage_ptrERKNS0_13parse_optionsERAT__hm'/>
<fun r='_ZN5boost4json13stream_parser5resetENS0_11storage_ptrE'/>
<fun r='_ZNK5boost4json13stream_parser4doneEv'/>
<fun r='_ZN5boost4json13stream_parser10write_someEPKcmRNS_6system10error_codeE'/>
<fun r='_ZN5boost4json13stream_parser10write_someEPKcmRSt10error_code'/>
<fun r='_ZN5boost4json13stream_parser10write_someEPKcm'/>
<fun r='_ZN5boost4json13stream_parser10write_someENS_4core17basic_string_viewIcEERNS_6system10error_codeE'/>
<fun r='_ZN5boost4json13stream_parser10write_someENS_4core17basic_string_viewIcEERSt10error_code'/>
<fun r='_ZN5boost4json13stream_parser10write_someENS_4core17basic_string_viewIcEE'/>
<fun r='_ZN5boost4json13stream_parser5writeEPKcmRNS_6system10error_codeE'/>
<fun r='_ZN5boost4json13stream_parser5writeEPKcmRSt10error_code'/>
<fun r='_ZN5boost4json13stream_parser5writeEPKcm'/>
<fun r='_ZN5boost4json13stream_parser5writeENS_4core17basic_string_viewIcEERNS_6system10error_codeE'/>
<fun r='_ZN5boost4json13stream_parser5writeENS_4core17basic_string_viewIcEERSt10error_code'/>
<fun r='_ZN5boost4json13stream_parser5writeENS_4core17basic_string_viewIcEE'/>
<fun r='_ZN5boost4json13stream_parser6finishERNS_6system10error_codeE'/>
<fun r='_ZN5boost4json13stream_parser6finishERSt10error_code'/>
<fun r='_ZN5boost4json13stream_parser6finishEv'/>
<fun r='_ZN5boost4json13stream_parser7releaseEv'/>
<fun r='_ZN5boost4json13stream_parserC1ENS0_11storage_ptrERKNS0_13parse_optionsEPhm'/>
<fun r='_ZN5boost4json13stream_parserC1ENS0_11storage_ptrERKNS0_13parse_optionsE'/>
<fun r='_ZN5boost4json13stream_parser5resetENS0_11storage_ptrE'/>
<fun r='_ZN5boost4json13stream_parser10write_someEPKcmRNS_6system10error_codeE'/>
<fun r='_ZN5boost4json13stream_parser10write_someEPKcmRSt10error_code'/>
<fun r='_ZN5boost4json13stream_parser10write_someEPKcm'/>
<fun r='_ZN5boost4json13stream_parser5writeEPKcmRNS_6system10error_codeE'/>
<fun r='_ZN5boost4json13stream_parser5writeEPKcmRSt10error_code'/>
<fun r='_ZN5boost4json13stream_parser5writeEPKcm'/>
<fun r='_ZN5boost4json13stream_parser6finishERNS_6system10error_codeE'/>
<fun r='_ZN5boost4json13stream_parser6finishEv'/>
<fun r='_ZN5boost4json13stream_parser6finishERSt10error_code'/>
<fun r='_ZN5boost4json13stream_parser7releaseEv'/>
