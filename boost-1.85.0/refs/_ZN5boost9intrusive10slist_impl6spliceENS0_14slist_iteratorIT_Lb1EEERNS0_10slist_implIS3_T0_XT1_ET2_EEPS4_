<def f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='1370' ll='1371' type='void boost::intrusive::slist_impl::splice(boost::intrusive::slist_impl::const_iterator it, slist_impl&lt;ValueTraits, SizeType, BoolFlags, HeaderHolder&gt; &amp; x, boost::intrusive::slist_impl::const_iterator * l = 0)'/>
<doc f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='1349'>//! &lt;b&gt;Requires&lt;/b&gt;: it is an iterator to an element in *this.
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: Transfers all the elements of list x to this list, before the
   //! the element pointed by it. No destructors or copy constructors are called.
   //!
   //! &lt;b&gt;Returns&lt;/b&gt;: Nothing.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: Nothing.
   //!
   //! &lt;b&gt;Complexity&lt;/b&gt;: Linear to the elements contained in x plus linear to
   //!   the elements before it.
   //!   Linear to the elements before it if cache_last&lt;&gt; option is true.
   //!   Constant-time if cache_last&lt;&gt; option is true and it == end().
   //!
   //! &lt;b&gt;Note&lt;/b&gt;: Iterators of values obtained from list x now point to elements of this
   //! list. Iterators of this list and all the references are not invalidated.
   //!
   //! &lt;b&gt;Additional note&lt;/b&gt;: If the optional parameter &quot;l&quot; is provided, it will be
   //!   assigned to the last spliced element or prev if x is empty.
   //!   This iterator can be used as new &quot;prev&quot; iterator for a new splice_after call.
   //!   that will splice new values after the previously spliced values.</doc>
