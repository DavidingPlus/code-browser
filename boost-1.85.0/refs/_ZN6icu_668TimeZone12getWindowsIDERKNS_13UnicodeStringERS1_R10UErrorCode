<dec f='include/unicode/timezone.h' l='407' type='static icu_66::UnicodeString &amp; icu_66::TimeZone::getWindowsID(const icu_66::UnicodeString &amp; id, icu_66::UnicodeString &amp; winid, UErrorCode &amp; status)'/>
<doc f='include/unicode/timezone.h' l='385'>/**
    * Converts a system time zone ID to an equivalent Windows time zone ID. For example,
    * Windows time zone ID &quot;Pacific Standard Time&quot; is returned for input &quot;America/Los_Angeles&quot;.
    *
    * &lt;p&gt;There are system time zones that cannot be mapped to Windows zones. When the input
    * system time zone ID is unknown or unmappable to a Windows time zone, then the result will be
    * empty, but the operation itself remains successful (no error status set on return).
    *
    * &lt;p&gt;This implementation utilizes &lt;a href=&quot;http://unicode.org/cldr/charts/supplemental/zone_tzid.html&quot;&gt;
    * Zone-Tzid mapping data&lt;/a&gt;. The mapping data is updated time to time. To get the latest changes,
    * please read the ICU user guide section &lt;a href=&quot;http://userguide.icu-project.org/datetime/timezone#TOC-Updating-the-Time-Zone-Data&quot;&gt;
    * Updating the Time Zone Data&lt;/a&gt;.
    *
    * @param id        A system time zone ID.
    * @param winid     Receives a Windows time zone ID. When the input system time zone ID is unknown
    *                  or unmappable to a Windows time zone ID, then an empty string is set on return.
    * @param status    Receives the status.
    * @return          A reference to the result (&lt;code&gt;winid&lt;/code&gt;).
    * @see getIDForWindowsID
    *
    * @stable ICU 52
    */</doc>
