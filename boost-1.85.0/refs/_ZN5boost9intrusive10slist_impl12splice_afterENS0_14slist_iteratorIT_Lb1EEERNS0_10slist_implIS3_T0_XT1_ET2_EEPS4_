<def f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='1254' ll='1278' type='void boost::intrusive::slist_impl::splice_after(boost::intrusive::slist_impl::const_iterator prev, slist_impl&lt;ValueTraits, SizeType, BoolFlags, HeaderHolder&gt; &amp; x, boost::intrusive::slist_impl::const_iterator * l = 0)'/>
<doc f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='1233'>//! &lt;b&gt;Requires&lt;/b&gt;: prev must point to an element contained by this list or
   //!   to the before_begin() element
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: Transfers all the elements of list x to this list, after the
   //! the element pointed by prev. No destructors or copy constructors are called.
   //!
   //! &lt;b&gt;Returns&lt;/b&gt;: Nothing.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: Nothing.
   //!
   //! &lt;b&gt;Complexity&lt;/b&gt;: In general, linear to the elements contained in x.
   //!   Constant-time if cache_last&lt;&gt; option is true and also constant-time if
   //!   linear&lt;&gt; option is true &quot;this&quot; is empty and &quot;l&quot; is not used.
   //!
   //! &lt;b&gt;Note&lt;/b&gt;: Iterators of values obtained from list x now point to elements of this
   //! list. Iterators of this list and all the references are not invalidated.
   //!
   //! &lt;b&gt;Additional note&lt;/b&gt;: If the optional parameter &quot;l&quot; is provided, it will be
   //!   assigned to the last spliced element or prev if x is empty.
   //!   This iterator can be used as new &quot;prev&quot; iterator for a new splice_after call.
   //!   that will splice new values after the previously spliced values.</doc>
