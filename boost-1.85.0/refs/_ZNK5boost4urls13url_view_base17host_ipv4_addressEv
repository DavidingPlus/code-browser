<dec f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1210' type='boost::urls::ipv4_address boost::urls::url_view_base::host_ipv4_address() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='1173'>/** Return the host IPv4 address

        If the host type is @ref host_type::ipv4,
        this function returns the address as
        a value of type @ref ipv4_address.
        Otherwise, if the host type is not an IPv4
        address, it returns a default-constructed
        value which is equal to the unspecified
        address &quot;0.0.0.0&quot;.

        @par Example
        @code
        assert( url_view( &quot;http://127.0.0.1/index.htm?user=win95&quot; ).host_ipv4_address() == ipv4_address( &quot;127.0.0.1&quot; ) );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        IPv4address = dec-octet &quot;.&quot; dec-octet &quot;.&quot; dec-octet &quot;.&quot; dec-octet

        dec-octet   = DIGIT                 ; 0-9
                    / %x31-39 DIGIT         ; 10-99
                    / &quot;1&quot; 2DIGIT            ; 100-199
                    / &quot;2&quot; %x30-34 DIGIT     ; 200-249
                    / &quot;25&quot; %x30-35          ; 250-255
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2&quot;
            &gt;3.2.2. Host (rfc3986)&lt;/a&gt;
    */</doc>
<def f='boost-1.85.0/libs/url/src/url_view_base.cpp' l='367' ll='378' type='urls::ipv4_address boost::urls::url_view_base::host_ipv4_address() const'/>
