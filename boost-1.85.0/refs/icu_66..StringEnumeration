<use f='include/unicode/uenum.h' l='174' c='uenum_openFromStringEnumeration_66'/>
<inh f='include/unicode/uobject.h' l='223' c='icu_66::UObject'/>
<def f='include/unicode/strenum.h' l='61' ll='274'/>
<use f='include/unicode/strenum.h' l='81' c='_ZNK6icu_6617StringEnumeration5cloneEv'/>
<use f='include/unicode/strenum.h' l='202' c='_ZNK6icu_6617StringEnumerationeqERKS0_'/>
<use f='include/unicode/strenum.h' l='210' c='_ZNK6icu_6617StringEnumerationneERKS0_'/>
<use f='include/unicode/locid.h' l='579' c='_ZNK6icu_666Locale14createKeywordsER10UErrorCode'/>
<use f='include/unicode/locid.h' l='590' c='_ZNK6icu_666Locale21createUnicodeKeywordsER10UErrorCode'/>
<use f='include/unicode/locid.h' l='1204' c='_ZNK6icu_666Locale11getKeywordsET0_R10UErrorCode'/>
<use f='include/unicode/locid.h' l='1221' c='_ZNK6icu_666Locale18getUnicodeKeywordsET0_R10UErrorCode'/>
<use f='include/unicode/brkiter.h' l='578' c='_ZN6icu_6613BreakIterator19getAvailableLocalesEv'/>
<size>120</size>
<doc f='include/unicode/strenum.h' l='29'>/**
 * Base class for &apos;pure&apos; C++ implementations of uenum api.  Adds a
 * method that returns the next UnicodeString since in C++ this can
 * be a common storage format for strings.
 *
 * &lt;p&gt;The model is that the enumeration is over strings maintained by
 * a &apos;service.&apos;  At any point, the service might change, invalidating
 * the enumerator (though this is expected to be rare).  The iterator
 * returns an error if this has occurred.  Lack of the error is no
 * guarantee that the service didn&apos;t change immediately after the
 * call, so the returned string still might not be &apos;valid&apos; on
 * subsequent use.&lt;/p&gt;
 *
 * &lt;p&gt;Strings may take the form of const char*, const char16_t*, or const
 * UnicodeString*.  The type you get is determine by the variant of
 * &apos;next&apos; that you call.  In general the StringEnumeration is
 * optimized for one of these types, but all StringEnumerations can
 * return all types.  Returned strings are each terminated with a NUL.
 * Depending on the service data, they might also include embedded NUL
 * characters, so API is provided to optionally return the true
 * length, counting the embedded NULs but not counting the terminating
 * NUL.&lt;/p&gt;
 *
 * &lt;p&gt;The pointers returned by next, unext, and snext become invalid
 * upon any subsequent call to the enumeration&apos;s destructor, next,
 * unext, snext, or reset.&lt;/p&gt;
 *
 * ICU 2.8 adds some default implementations and helper functions
 * for subclasses.
 *
 * @stable ICU 2.4 
 */</doc>
<fun r='_ZN6icu_6617StringEnumerationD1Ev'/>
<fun r='_ZNK6icu_6617StringEnumeration5cloneEv'/>
<fun r='_ZNK6icu_6617StringEnumeration5countER10UErrorCode'/>
<fun r='_ZN6icu_6617StringEnumeration4nextEPiR10UErrorCode'/>
<fun r='_ZN6icu_6617StringEnumeration5unextEPiR10UErrorCode'/>
<fun r='_ZN6icu_6617StringEnumeration5snextER10UErrorCode'/>
<fun r='_ZN6icu_6617StringEnumeration5resetER10UErrorCode'/>
<fun r='_ZNK6icu_6617StringEnumerationeqERKS0_'/>
<fun r='_ZNK6icu_6617StringEnumerationneERKS0_'/>
<mbr r='icu_66::StringEnumeration::unistr' o='64' t='icu_66::UnicodeString'/>
<mbr r='icu_66::StringEnumeration::charsBuffer' o='576' t='char[32]'/>
<mbr r='icu_66::StringEnumeration::chars' o='832' t='char *'/>
<mbr r='icu_66::StringEnumeration::charsCapacity' o='896' t='int32_t'/>
<fun r='_ZN6icu_6617StringEnumerationC1Ev'/>
<fun r='_ZN6icu_6617StringEnumeration19ensureCharsCapacityEiR10UErrorCode'/>
<fun r='_ZN6icu_6617StringEnumeration8setCharsEPKciR10UErrorCode'/>
<use f='include/unicode/coll.h' l='733' c='_ZN6icu_668Collator19getAvailableLocalesEv'/>
<use f='include/unicode/coll.h' l='744' c='_ZN6icu_668Collator11getKeywordsER10UErrorCode'/>
<use f='include/unicode/coll.h' l='757' c='_ZN6icu_668Collator16getKeywordValuesEPKcR10UErrorCode'/>
<use f='include/unicode/coll.h' l='775' c='_ZN6icu_668Collator25getKeywordValuesForLocaleEPKcRKNS_6LocaleEaR10UErrorCode'/>
<size>120</size>
<use f='include/unicode/timezone.h' l='196' c='_ZN6icu_668TimeZone27createTimeZoneIDEnumerationE19USystemTimeZoneTypePKcPKiR10UErrorCode'/>
<use f='include/unicode/timezone.h' l='209' c='_ZN6icu_668TimeZone17createEnumerationEv'/>
<use f='include/unicode/timezone.h' l='228' c='_ZN6icu_668TimeZone17createEnumerationEi'/>
<use f='include/unicode/timezone.h' l='240' c='_ZN6icu_668TimeZone17createEnumerationEPKc'/>
<use f='include/unicode/calendar.h' l='404' c='_ZN6icu_668Calendar25getKeywordValuesForLocaleEPKcRKNS_6LocaleEaR10UErrorCode'/>
<use f='include/unicode/calendar.h' l='2346' c='_ZN6icu_668Calendar19getAvailableLocalesEv'/>
<size>120</size>
<use f='include/unicode/measunit.h' l='145' c='_ZN6icu_6611MeasureUnit17getAvailableTypesER10UErrorCode'/>
<use f='include/unicode/numfmt.h' l='886' c='_ZN6icu_6612NumberFormat19getAvailableLocalesEv'/>
<use f='include/unicode/tznames.h' l='192' c='_ZNK6icu_6613TimeZoneNames23getAvailableMetaZoneIDsER10UErrorCode'/>
<use f='include/unicode/tznames.h' l='201' c='_ZNK6icu_6613TimeZoneNames23getAvailableMetaZoneIDsERKNS_13UnicodeStringER10UErrorCode'/>
<use f='include/unicode/numsys.h' l='116' c='_ZN6icu_6615NumberingSystem17getAvailableNamesER10UErrorCode'/>
<size>120</size>
