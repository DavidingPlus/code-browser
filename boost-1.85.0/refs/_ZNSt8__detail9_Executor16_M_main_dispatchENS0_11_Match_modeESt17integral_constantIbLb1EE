<dec f='include/c++/9/bits/regex_executor.h' l='152' type='bool std::__detail::_Executor::_M_main_dispatch(std::__detail::_Executor::_Match_mode __match_mode, std::__detail::_Executor::__dfs )'/>
<def f='include/c++/9/bits/regex_executor.tcc' l='79' ll='89' type='bool std::__detail::_Executor::_M_main_dispatch(std::__detail::_Executor::_Match_mode __match_mode, std::__detail::_Executor::__dfs )'/>
<doc f='include/c++/9/bits/regex_executor.tcc' l='56'>// The _M_main function operates in different modes, DFS mode or BFS mode,
  // indicated by template parameter __dfs_mode, and dispatches to one of the
  // _M_main_dispatch overloads.
  //
  // ------------------------------------------------------------
  //
  // DFS mode:
  //
  // It applies a Depth-First-Search (aka backtracking) on given NFA and input
  // string.
  // At the very beginning the executor stands in the start state, then it
  // tries every possible state transition in current state recursively. Some
  // state transitions consume input string, say, a single-char-matcher or a
  // back-reference matcher; some don&apos;t, like assertion or other anchor nodes.
  // When the input is exhausted and/or the current state is an accepting
  // state, the whole executor returns true.
  //
  // TODO: This approach is exponentially slow for certain input.
  //       Try to compile the NFA to a DFA.
  //
  // Time complexity: \Omega(match_length), O(2^(_M_nfa.size()))
  // Space complexity: \theta(match_results.size() + match_length)
  //</doc>
