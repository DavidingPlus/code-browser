<dec f='include/unicode/normlzr.h' l='292' type='static UNormalizationCheckResult icu_66::Normalizer::quickCheck(const icu_66::UnicodeString &amp; source, UNormalizationMode mode, UErrorCode &amp; status)'/>
<def f='include/unicode/normlzr.h' l='784' ll='789' type='static UNormalizationCheckResult icu_66::Normalizer::quickCheck(const icu_66::UnicodeString &amp; source, UNormalizationMode mode, UErrorCode &amp; status)'/>
<doc f='include/unicode/normlzr.h' l='271'>/**
   * Performing quick check on a string, to quickly determine if the string is
   * in a particular normalization format.
   * This is a wrapper for unorm_quickCheck(), using a UnicodeString.
   *
   * Three types of result can be returned UNORM_YES, UNORM_NO or
   * UNORM_MAYBE. Result UNORM_YES indicates that the argument
   * string is in the desired normalized format, UNORM_NO determines that
   * argument string is not in the desired normalized format. A
   * UNORM_MAYBE result indicates that a more thorough check is required,
   * the user may have to put the string in its normalized form and compare the
   * results.
   * @param source       string for determining if it is in a normalized format
   * @param mode         normalization format
   * @param status A reference to a UErrorCode to receive any errors
   * @return UNORM_YES, UNORM_NO or UNORM_MAYBE
   *
   * @see isNormalized
   * @deprecated ICU 56 Use Normalizer2 instead.
   */</doc>
