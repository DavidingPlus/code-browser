<dec f='boost-1.85.0/libs/test/include/boost/test/debug.hpp' l='129' type='void boost::debug::break_memory_alloc(long mem_alloc_order_num)'/>
<def f='boost-1.85.0/libs/test/include/boost/test/impl/debug.ipp' l='1033' ll='1043' type='void boost::debug::break_memory_alloc(long mem_alloc_order_num)'/>
<doc f='boost-1.85.0/libs/test/include/boost/test/impl/debug.ipp' l='1026'>//____________________________________________________________________________//

// ************************************************************************** //
// **************      cause program to break execution in     ************** //
// **************     debugger at specific allocation point    ************** //
// ************************************************************************** //</doc>
<doc f='boost-1.85.0/libs/test/include/boost/test/debug.hpp' l='120'>// ************************************************************************** //
/// Causes program to break execution in debugger at specific allocation point

/// On some platforms/memory managers (at the moment only on Windows/Visual Studio) one can tell a C Runtime to break
/// on specific memory allocation. This can be used in combination with memory leak detection (which reports leaked memory
/// allocation number) to locate the place where leak initiated.
/// @param[in] mem_alloc_order_num Specific memory allocation number
// ************************************************************************** //</doc>
<use f='boost-1.85.0/libs/test/include/boost/test/impl/framework.ipp' l='1200' u='c' c='_ZN5boost9unit_test9framework4initEPFPNS0_10test_suiteEiPPcEiS5_'/>
