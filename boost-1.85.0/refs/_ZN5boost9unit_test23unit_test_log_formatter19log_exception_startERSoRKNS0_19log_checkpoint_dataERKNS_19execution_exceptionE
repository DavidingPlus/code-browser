<dec f='boost-1.85.0/libs/test/include/boost/test/unit_test_log_formatter.hpp' l='203' type='void boost::unit_test::unit_test_log_formatter::log_exception_start(std::ostream &amp; os, const boost::unit_test::log_checkpoint_data &amp; lcd, const boost::execution_exception &amp; ex)'/>
<ovr f='boost-1.85.0/libs/test/include/boost/test/impl/compiler_log_formatter.ipp' l='142' c='_ZN5boost9unit_test6output22compiler_log_formatter19log_exception_startERSoRKNS0_19log_checkpoint_dataERKNS_19execution_exceptionE'/>
<doc f='boost-1.85.0/libs/test/include/boost/test/unit_test_log_formatter.hpp' l='185'>// @}

    // @name Uncaught exception report

    /// Invoked when Unit Test Framework detects uncaught exception
    ///
    /// The framwork calls this function when an uncaught exception it detected.
    /// This call is followed by context information:
    /// - one call to @c entry_context_start,
    /// - as many calls to @c log_entry_context as there are context entries
    /// - one call to @c entry_context_finish
    ///
    /// The logging of the exception information is finilized by a call to @c log_exception_finish.
    ///
    /// @param[in] os   output stream to write a messages into
    /// @param[in] lcd  information about the last checkpoint before the exception was triggered
    /// @param[in] ex   information about the caught exception
    /// @see log_exception_finish</doc>
<ovr f='boost-1.85.0/libs/test/include/boost/test/impl/junit_log_formatter.ipp' l='596' c='_ZN5boost9unit_test6output19junit_log_formatter19log_exception_startERSoRKNS0_19log_checkpoint_dataERKNS_19execution_exceptionE'/>
<use f='boost-1.85.0/libs/test/include/boost/test/impl/unit_test_log.ipp' l='376' u='c' c='_ZN5boost9unit_test15unit_test_log_t16exception_caughtERKNS_19execution_exceptionE'/>
<ovr f='boost-1.85.0/libs/test/include/boost/test/impl/xml_log_formatter.ipp' l='120' c='_ZN5boost9unit_test6output17xml_log_formatter19log_exception_startERSoRKNS0_19log_checkpoint_dataERKNS_19execution_exceptionE'/>
