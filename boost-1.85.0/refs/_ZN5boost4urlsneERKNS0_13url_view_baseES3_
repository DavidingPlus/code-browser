<def f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='2473' ll='2480' type='bool boost::urls::operator!=(const boost::urls::url_view_base &amp; u0, const boost::urls::url_view_base &amp; u1)'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_view_base.hpp' l='2422'>/** Return the result of comparing two URLs

        The URLs are compared component by
        component as if they were first
        normalized.

        @par Example
        @code
        url_view u0( &quot;http://www.a.com/index.htm&quot; );
        url_view u1( &quot;http://www.b.com/index.htm&quot; );
        assert( u0 != u1 );
        @endcode

        @par Effects
        @code
        url a(u0);
        a.normalize();
        url b(u1);
        b.normalize();
        return std::make_tuple(
                   a.scheme(),
                   a.user(),
                   a.password(),
                   a.host(),
                   a.port(),
                   a.path(),
                   a.query(),
                   a.fragment()) !=
               std::make_tuple(
                   b.scheme(),
                   b.user(),
                   b.password(),
                   b.host(),
                   b.port(),
                   b.path(),
                   b.query(),
                   b.fragment());
        @endcode

        @par Complexity
        Linear in `min( u0.size(), u1.size() )`

        @par Exception Safety
        Throws nothing

        @return `true` if `u0 != u1`

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-6.2.2&quot;
            &gt;6.2.2 Syntax-Based Normalization (rfc3986)&lt;/a&gt;
    */</doc>
