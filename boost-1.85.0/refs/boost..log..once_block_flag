<def f='boost-1.85.0/libs/log/include/boost/log/utility/once_block.hpp' l='50' ll='62'/>
<use f='boost-1.85.0/libs/log/include/boost/log/utility/once_block.hpp' l='76'/>
<use f='boost-1.85.0/libs/log/include/boost/log/utility/once_block.hpp' l='79' c='_ZN5boost3log12v2s_mt_posix3aux17once_block_sentryC1ERNS1_15once_block_flagE'/>
<use f='boost-1.85.0/libs/log/include/boost/log/detail/singleton.hpp' l='43' macro='1' c='_ZN5boost3log12v2s_mt_posix3aux14lazy_singleton3getEv'/>
<size>1</size>
<doc f='boost-1.85.0/libs/log/include/boost/log/utility/once_block.hpp' l='32'>/*!
 * \brief A flag to detect if a code block has already been executed.
 *
 * This structure should be used in conjunction with the \c BOOST_LOG_ONCE_BLOCK_FLAG
 * macro. Usage example:
 *
 * &lt;code&gt;
 * once_block_flag flag = BOOST_LOG_ONCE_BLOCK_INIT;
 *
 * void foo()
 * {
 *     BOOST_LOG_ONCE_BLOCK_FLAG(flag)
 *     {
 *         puts(&quot;Hello, world once!&quot;);
 *     }
 * }
 * &lt;/code&gt;
 */</doc>
<mbr r='boost::log::once_block_flag::status' o='0' t='unsigned char'/>
<use f='boost-1.85.0/libs/log/include/boost/log/utility/type_dispatch/static_type_dispatcher.hpp' l='177' macro='1' c='_ZN5boost3log12v2s_mt_posix3aux24type_sequence_dispatcher19get_dispatching_mapEv'/>
<size>1</size>
<use f='boost-1.85.0/libs/log/src/once_block.cpp' l='412' c='_ZNK5boost3log12v2s_mt_posix3aux17once_block_sentry16enter_once_blockEv'/>
<size>1</size>
<use f='boost-1.85.0/libs/log/src/thread_id.cpp' l='210' macro='1' c='_ZN5boost3log12v2s_mt_posix3aux11this_thread6get_idEv'/>
<size>1</size>
