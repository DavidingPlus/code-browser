<dec f='include/unicode/unistr.h' l='1803' type='UBool icu_66::UnicodeString::hasMoreChar32Than(int32_t start, int32_t length, int32_t number) const'/>
<doc f='include/unicode/unistr.h' l='1779'>/**
   * Check if the length char16_t code units of the string
   * contain more Unicode code points than a certain number.
   * This is more efficient than counting all code points in this part of the string
   * and comparing that number with a threshold.
   * This function may not need to scan the string at all if the length
   * falls within a certain range, and
   * never needs to count more than &apos;number+1&apos; code points.
   * Logically equivalent to (countChar32(start, length)&gt;number).
   * A Unicode code point may occupy either one or two char16_t code units.
   *
   * @param start the index of the first code unit to check (0 for the entire string)
   * @param length the number of char16_t code units to check
   *               (use INT32_MAX for the entire string; remember that start/length
   *                values are pinned)
   * @param number The number of code points in the (sub)string is compared against
   *               the &apos;number&apos; parameter.
   * @return Boolean value for whether the string contains more Unicode code points
   *         than &apos;number&apos;. Same as (u_countChar32(s, length)&gt;number).
   * @see countChar32
   * @see u_strHasMoreChar32Than
   * @stable ICU 2.4
   */</doc>
