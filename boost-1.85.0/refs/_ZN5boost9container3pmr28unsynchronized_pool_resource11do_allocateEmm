<dec f='boost-1.85.0/libs/container/include/boost/container/pmr/unsynchronized_pool_resource.hpp' l='137' type='void * boost::container::pmr::unsynchronized_pool_resource::do_allocate(std::size_t bytes, std::size_t alignment)'/>
<inh f='boost-1.85.0/libs/container/include/boost/container/pmr/memory_resource.hpp' l='95' c='_ZN5boost9container3pmr15memory_resource11do_allocateEmm'/>
<def f='boost-1.85.0/libs/container/src/unsynchronized_pool_resource.cpp' l='51' ll='52' type='void * boost::container::pmr::unsynchronized_pool_resource::do_allocate(std::size_t bytes, std::size_t alignment)'/>
<doc f='boost-1.85.0/libs/container/src/unsynchronized_pool_resource.cpp' l='51'>//virtual</doc>
<doc f='boost-1.85.0/libs/container/include/boost/container/pmr/unsynchronized_pool_resource.hpp' l='126'>//! &lt;b&gt;Returns&lt;/b&gt;: A pointer to allocated storage with a size of at least `bytes`.
   //!   The size and alignment of the allocated memory shall meet the requirements for
   //!   a class derived from `memory_resource`.
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: If the pool selected for a block of size bytes is unable to
   //!   satisfy the memory request from its own internal data structures, it will call
   //!   `upstream_resource()-&gt;allocate()` to obtain more memory. If `bytes` is larger
   //!   than that which the largest pool can handle, then memory will be allocated
   //!   using `upstream_resource()-&gt;allocate()`.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: Nothing unless `upstream_resource()-&gt;allocate()` throws.</doc>
