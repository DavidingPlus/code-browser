<def f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='282' ll='297' type='void boost::intrusive::slist_impl::slist_impl&lt;ValueTraits, SizeType, BoolFlags, HeaderHolder&gt;(boost::intrusive::slist_impl::node_ptr f, boost::intrusive::slist_impl::node_ptr before_l, boost::intrusive::slist_impl::size_type n, const boost::intrusive::slist_impl::value_traits &amp; v_traits = boost::intrusive::slist_impl::value_traits())'/>
<doc f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='265'>///@cond

   //! &lt;b&gt;Requires&lt;/b&gt;: f and before_l belong to another slist.
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: Transfers the range [f, before_l] to this
   //!   list, after the element pointed by prev_pos.
   //!   No destructors or copy constructors are called.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: Nothing.
   //!
   //! &lt;b&gt;Complexity&lt;/b&gt;: Linear to the number of elements transferred
   //!   if constant_time_size is true. Constant-time otherwise.
   //!
   //! &lt;b&gt;Note&lt;/b&gt;: Iterators of values obtained from list x now point to elements of this
   //!   list. Iterators of this list and all the references are not invalidated.
   //!
   //! &lt;b&gt;Warning&lt;/b&gt;: Experimental function, don&apos;t use it!</doc>
