<use f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='707' u='c' c='_ZNK5boost4urls14authority_view4hostEOT_'/>
<dec f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='744' type='boost::urls::pct_string_view boost::urls::authority_view::encoded_host() const'/>
<def f='boost-1.85.0/libs/url/src/authority_view.cpp' l='190' ll='195' type='boost::urls::pct_string_view boost::urls::authority_view::encoded_host() const'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='383' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='384' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<doc f='boost-1.85.0/libs/url/src/authority_view.cpp' l='175'>/*
host_type       host_type()                 // ipv4, ipv6, ipvfuture, name

std::string     host()                      // return encoded_host().decode()
pct_string_view encoded_host()              // return host part, as-is
std::string     host_address()              // return encoded_host_address().decode()
pct_string_view encoded_host_address()      // ipv4, ipv6, ipvfut, or encoded name, no brackets

ipv4_address    host_ipv4_address()         // return ipv4_address or {}
ipv6_address    host_ipv6_address()         // return ipv6_address or {}
core::string_view     host_ipvfuture()            // return ipvfuture or {}
std::string     host_name()                 // return decoded name or &quot;&quot;
pct_string_view encoded_host_name()         // return encoded host name or &quot;&quot;
*/</doc>
<doc f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='711'>/** Return the host

        This function returns the host portion
        of the authority as a string, or the
        empty string if there is no authority.
        The returned string may contain
        percent escapes.

        @par Example
        @code
        assert( url_view( &quot;https://www%2droot.example.com/&quot; ).encoded_host() == &quot;www%2droot.example.com&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        host        = IP-literal / IPv4address / reg-name

        IP-literal  = &quot;[&quot; ( IPv6address / IPvFuture  ) &quot;]&quot;

        reg-name    = *( unreserved / pct-encoded / &quot;-&quot; / &quot;.&quot;)
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2&quot;
            &gt;3.2.2. Host (rfc3986)&lt;/a&gt;
    */</doc>
