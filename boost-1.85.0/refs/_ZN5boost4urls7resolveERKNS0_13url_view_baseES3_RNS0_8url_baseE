<dec f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='2753' type='system::result&lt;void&gt; boost::urls::resolve(const boost::urls::url_view_base &amp; base, const boost::urls::url_view_base &amp; ref, boost::urls::url_base &amp; dest)'/>
<def f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='2902' ll='2912' type='system::result&lt;void&gt; boost::urls::resolve(const boost::urls::url_view_base &amp; base, const boost::urls::url_view_base &amp; ref, boost::urls::url_base &amp; dest)'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='2811'>/** Resolve a URL reference against a base URL

    This function attempts to resolve a URL
    reference `ref` against the base URL `base`
    in a manner similar to that of a web browser
    resolving an anchor tag.

    The base URL must satisfy the &lt;em&gt;URI&lt;/em&gt;
    grammar. In other words, it must contain
    a scheme.

    Relative references are only usable when
    in the context of a base absolute URI.
    This process of resolving a relative
    &lt;em&gt;reference&lt;/em&gt; within the context of
    a &lt;em&gt;base&lt;/em&gt; URI is defined in detail
    in rfc3986 (see below).

    The resolution process works as if the
    relative reference is appended to the base
    URI and the result is normalized.

    Given the input base URL, this function
    resolves the relative reference
    as if performing the following steps:

    @li Ensure the base URI has at least a scheme
    @li Normalizing the reference path
    @li Merge base and reference paths
    @li Normalize the merged path

    This function places the result of the
    resolution into `dest`, which can be
    any of the url containers that inherit
    from @ref url_base.

    If an error occurs, the contents of
    `dest` is unspecified and `ec` is set.

    @note Abnormal hrefs where the number of &quot;..&quot;
    segments exceeds the number of segments in
    the base path are handled by including the
    unmatched &quot;..&quot; segments in the result, as described
    in &lt;a href=&quot;https://www.rfc-editor.org/errata/eid4547&quot;
    &gt;Errata 4547&lt;/a&gt;.

    @par Example
    @code
    url dest;
    system::error_code ec;

    resolve(&quot;/one/two/three&quot;, &quot;four&quot;, dest, ec);
    assert( dest.str() == &quot;/one/two/four&quot; );

    resolve(&quot;http://example.com/&quot;, &quot;/one&quot;, dest, ec);
    assert( dest.str() == &quot;http://example.com/one&quot; );

    resolve(&quot;http://example.com/one&quot;, &quot;/two&quot;, dest, ec);
    assert( dest.str() == &quot;http://example.com/two&quot; );

    resolve(&quot;http://a/b/c/d;p?q&quot;, &quot;g#s&quot;, dest, ec);
    assert( dest.str() == &quot;http://a/b/c/g#s&quot; );
    @endcode

    @par BNF
    @code
    absolute-URI  = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ]
    @endcode

    @par Exception Safety
    Basic guarantee.
    Calls to allocate may throw.

    @return An empty @ref result upon success,
    otherwise an error code if `!base.has_scheme()`.

    @param base The base URL to resolve against.

    @param ref The URL reference to resolve.

    @param dest The container where the result
    is written, upon success.

    @par Specification
    &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-5&quot;
        &gt;5. Reference Resolution (rfc3986)&lt;/a&gt;

    @see
        @ref url,
        @ref url_view.
*/</doc>
