<dec f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='1566' type='boost::urls::url_base &amp; boost::urls::url_base::set_port(core::string_view s)'/>
<use f='boost-1.85.0/libs/url/include/boost/url/url.hpp' l='458' u='c' c='_ZN5boost4urls3url8set_portENS_4core17basic_string_viewIcEE'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='1525'>/** Set the port

        This port is set to the string, which
        must contain only digits or be empty.
        An empty port string is distinct from
        having no port.

        @par Example
        @code
        assert( url( &quot;http://www.example.com&quot; ).set_port( &quot;8080&quot; ).authority().buffer() == &quot;www.example.com:8080&quot; );
        @endcode

        @par Postconditions
        @code
        this-&gt;has_port() == true &amp;&amp; this-&gt;port_number() == n &amp;&amp; this-&gt;port() == std::to_string(n)
        @endcode

        @par Exception Safety
        Strong guarantee.
        Calls to allocate may throw.
        Exceptions thrown on invalid input.

        @throw system_error
        `s` does not contain a valid port.

        @param s The port string to set.

        @par BNF
        @code
        port          = *DIGIT
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.3&quot;&gt;
            3.2.3. Port (rfc3986)&lt;/a&gt;

        @see
            @ref remove_port,
            @ref set_port.
    */</doc>
<use f='boost-1.85.0/libs/url/include/boost/url/static_url.hpp' l='394' u='c' c='_ZN5boost4urls10static_url8set_portENS_4core17basic_string_viewIcEE'/>
<def f='boost-1.85.0/libs/url/src/url_base.cpp' l='959' ll='977' type='boost::urls::url_base &amp; boost::urls::url_base::set_port(core::string_view s)'/>
