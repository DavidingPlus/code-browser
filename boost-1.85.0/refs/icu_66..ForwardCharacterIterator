<inh f='include/unicode/uobject.h' l='223' c='icu_66::UObject'/>
<def f='include/unicode/chariter.h' l='94' ll='190'/>
<use f='include/unicode/chariter.h' l='117' c='_ZNK6icu_6624ForwardCharacterIteratoreqERKS0_'/>
<use f='include/unicode/chariter.h' l='129' c='_ZNK6icu_6624ForwardCharacterIteratorneERKS0_'/>
<use f='include/unicode/chariter.h' l='183' c='_ZN6icu_6624ForwardCharacterIteratorC1ERKS0_'/>
<use f='include/unicode/chariter.h' l='189' c='_ZN6icu_6624ForwardCharacterIteratoraSERKS0_'/>
<use f='include/unicode/chariter.h' l='189' c='_ZN6icu_6624ForwardCharacterIteratoraSERKS0_'/>
<ovr f='include/unicode/chariter.h' l='361' c='icu_66::CharacterIterator'/>
<use f='include/unicode/chariter.h' l='361'/>
<use f='include/unicode/chariter.h' l='696' c='_ZNK6icu_6624ForwardCharacterIteratorneERKS0_'/>
<use f='include/unicode/uchriter.h' l='122' c='_ZNK6icu_6622UCharCharacterIteratoreqERKNS_24ForwardCharacterIteratorE'/>
<use f='include/unicode/schriter.h' l='127' c='_ZNK6icu_6623StringCharacterIteratoreqERKNS_24ForwardCharacterIteratorE'/>
<size>8</size>
<doc f='include/unicode/chariter.h' l='27'>/**
 * Abstract class that defines an API for forward-only iteration
 * on text objects.
 * This is a minimal interface for iteration without random access
 * or backwards iteration. It is especially useful for wrapping
 * streams with converters into an object for collation or
 * normalization.
 *
 * &lt;p&gt;Characters can be accessed in two ways: as code units or as
 * code points.
 * Unicode code points are 21-bit integers and are the scalar values
 * of Unicode characters. ICU uses the type UChar32 for them.
 * Unicode code units are the storage units of a given
 * Unicode/UCS Transformation Format (a character encoding scheme).
 * With UTF-16, all code points can be represented with either one
 * or two code units (&quot;surrogates&quot;).
 * String storage is typically based on code units, while properties
 * of characters are typically determined using code point values.
 * Some processes may be designed to work with sequences of code units,
 * or it may be known that all characters that are important to an
 * algorithm can be represented with single code units.
 * Other processes will need to use the code point access functions.&lt;/p&gt;
 *
 * &lt;p&gt;ForwardCharacterIterator provides nextPostInc() to access
 * a code unit and advance an internal position into the text object,
 * similar to a &lt;code&gt;return text[position++]&lt;/code&gt;.&lt;br&gt;
 * It provides next32PostInc() to access a code point and advance an internal
 * position.&lt;/p&gt;
 *
 * &lt;p&gt;next32PostInc() assumes that the current position is that of
 * the beginning of a code point, i.e., of its first code unit.
 * After next32PostInc(), this will be true again.
 * In general, access to code units and code points in the same
 * iteration loop should not be mixed. In UTF-16, if the current position
 * is on a second code unit (Low Surrogate), then only that code unit
 * is returned even by next32PostInc().&lt;/p&gt;
 *
 * &lt;p&gt;For iteration with either function, there are two ways to
 * check for the end of the iteration. When there are no more
 * characters in the text object:
 * &lt;ul&gt;
 * &lt;li&gt;The hasNext() function returns FALSE.&lt;/li&gt;
 * &lt;li&gt;nextPostInc() and next32PostInc() return DONE
 *     when one attempts to read beyond the end of the text object.&lt;/li&gt;
 * &lt;/ul&gt;
 *
 * Example:
 * \code 
 * void function1(ForwardCharacterIterator &amp;it) {
 *     UChar32 c;
 *     while(it.hasNext()) {
 *         c=it.next32PostInc();
 *         // use c
 *     }
 * }
 *
 * void function1(ForwardCharacterIterator &amp;it) {
 *     char16_t c;
 *     while((c=it.nextPostInc())!=ForwardCharacterIterator::DONE) {
 *         // use c
 *      }
 *  }
 * \endcode
 * &lt;/p&gt;
 *
 * @stable ICU 2.0
 */</doc>
<fun r='_ZN6icu_6624ForwardCharacterIteratorD1Ev'/>
<fun r='_ZNK6icu_6624ForwardCharacterIteratoreqERKS0_'/>
<fun r='_ZNK6icu_6624ForwardCharacterIteratorneERKS0_'/>
<fun r='_ZNK6icu_6624ForwardCharacterIterator8hashCodeEv'/>
<fun r='_ZNK6icu_6624ForwardCharacterIterator17getDynamicClassIDEv'/>
<fun r='_ZN6icu_6624ForwardCharacterIterator11nextPostIncEv'/>
<fun r='_ZN6icu_6624ForwardCharacterIterator13next32PostIncEv'/>
<fun r='_ZN6icu_6624ForwardCharacterIterator7hasNextEv'/>
<fun r='_ZN6icu_6624ForwardCharacterIteratorC1Ev'/>
<fun r='_ZN6icu_6624ForwardCharacterIteratorC1ERKS0_'/>
<fun r='_ZN6icu_6624ForwardCharacterIteratoraSERKS0_'/>
<fun r='_ZNK6icu_6624ForwardCharacterIteratorneERKS0_'/>
