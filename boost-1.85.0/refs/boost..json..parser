<def f='boost-1.85.0/libs/json/include/boost/json/parser.hpp' l='113' ll='824'/>
<use f='boost-1.85.0/libs/json/include/boost/json/parser.hpp' l='120' c='_ZN5boost4json6parserC1ERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/parser.hpp' l='123' c='_ZN5boost4json6parseraSERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/parser.hpp' l='124' c='_ZN5boost4json6parseraSERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/parser.hpp' l='194' c='_ZN5boost4json6parserC1Ev'/>
<use f='boost-1.85.0/libs/json/include/boost/json/parser.hpp' l='244' c='_ZN5boost4json6parserC1ENS0_11storage_ptrE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/parser.hpp' l='280' c='_ZN5boost4json6parserC1ENS0_11storage_ptrERKNS0_13parse_optionsERAT__h'/>
<use f='boost-1.85.0/libs/json/include/boost/json/parser.hpp' l='373' c='_ZN5boost4json6parserC1ENS0_11storage_ptrERKNS0_13parse_optionsERAT__hm'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/parse.ipp' l='32' c='_ZN5boost4json5parseENS_4core17basic_string_viewIcEERNS_6system10error_codeENS0_11storage_ptrERKNS0_13parse_optionsE'/>
<size>272</size>
<doc f='boost-1.85.0/libs/json/include/boost/json/parser.hpp' l='26'>/** A DOM parser for JSON contained in a single buffer.

    This class is used to parse a JSON text contained in a
    single character buffer, into a @ref value container.

    @par Usage

    To use the parser first construct it, then optionally
    call @ref reset to specify a @ref storage_ptr to use
    for the resulting @ref value. Then call @ref write
    to parse a character buffer containing a complete
    JSON text. If the parse is successful, call @ref release
    to take ownership of the value:
    @code
    parser p;                                       // construct a parser
    size_t n = p.write( &quot;[1,2,3]&quot; );                // parse a complete JSON text
    assert( n == 7 );                               // all characters consumed
    value jv = p.release();                         // take ownership of the value
    @endcode

    @par Extra Data

    When the character buffer provided as input contains
    additional data that is not part of the complete
    JSON text, an error is returned. The @ref write_some
    function is an alternative which allows the parse
    to finish early, without consuming all the characters
    in the buffer. This allows parsing of a buffer
    containing multiple individual JSON texts or containing
    different protocol data:
    @code
    parser p;                                       // construct a parser
    size_t n = p.write_some( &quot;[1,2,3] null&quot; );      // parse a complete JSON text
    assert( n == 8 );                               // only some characters consumed
    value jv = p.release();                         // take ownership of the value
    @endcode

    @par Temporary Storage

    The parser may dynamically allocate temporary
    storage as needed to accommodate the nesting level
    of the JSON text being parsed. Temporary storage is
    first obtained from an optional, caller-owned
    buffer specified upon construction. When that
    is exhausted, the next allocation uses the
    `boost::container::pmr::memory_resource` passed to the constructor; if
    no such argument is specified, the default memory
    resource is used. Temporary storage is freed only
    when the parser is destroyed; The performance of
    parsing multiple JSON texts may be improved by reusing
    the same parser instance.
\n
    It is important to note that the `boost::container::pmr::memory_resource`
    supplied upon construction is used for temporary
    storage only, and not for allocating the elements
    which make up the parsed value. That other memory
    resource is optionally supplied in each call
    to @ref reset.

    @par Duplicate Keys

    If there are object elements with duplicate keys;
    that is, if multiple elements in an object have
    keys that compare equal, only the last equivalent
    element will be inserted.

    @par Non-Standard JSON

    The @ref parse_options structure optionally
    provided upon construction is used to customize
    some parameters of the parser, including which
    non-standard JSON extensions should be allowed.
    A default-constructed parse options allows only
    standard JSON.

    @par Thread Safety

    Distinct instances may be accessed concurrently.
    Non-const member functions of a shared instance
    may not be called concurrently with any other
    member functions of that instance.

    @see
        @ref parse,
        @ref parse_options,
        @ref stream_parser.
*/</doc>
<mbr r='boost::json::parser::p_' o='0' t='basic_parser&lt;detail::handler&gt;'/>
<fun r='_ZN5boost4json6parserC1ERKS1_'/>
<fun r='_ZN5boost4json6parseraSERKS1_'/>
<fun r='_ZN5boost4json6parserD1Ev'/>
<fun r='_ZN5boost4json6parserC1ENS0_11storage_ptrERKNS0_13parse_optionsEPhm'/>
<fun r='_ZN5boost4json6parserC1Ev'/>
<fun r='_ZN5boost4json6parserC1ENS0_11storage_ptrERKNS0_13parse_optionsE'/>
<fun r='_ZN5boost4json6parserC1ENS0_11storage_ptrE'/>
<fun r='_ZN5boost4json6parserC1ENS0_11storage_ptrERKNS0_13parse_optionsERAT__h'/>
<fun r='_ZN5boost4json6parserC1ENS0_11storage_ptrERKNS0_13parse_optionsERAT__hm'/>
<fun r='_ZN5boost4json6parser5resetENS0_11storage_ptrE'/>
<fun r='_ZN5boost4json6parser10write_someEPKcmRNS_6system10error_codeE'/>
<fun r='_ZN5boost4json6parser10write_someEPKcmRSt10error_code'/>
<fun r='_ZN5boost4json6parser10write_someEPKcm'/>
<fun r='_ZN5boost4json6parser10write_someENS_4core17basic_string_viewIcEERNS_6system10error_codeE'/>
<fun r='_ZN5boost4json6parser10write_someENS_4core17basic_string_viewIcEERSt10error_code'/>
<fun r='_ZN5boost4json6parser10write_someENS_4core17basic_string_viewIcEE'/>
<fun r='_ZN5boost4json6parser5writeEPKcmRNS_6system10error_codeE'/>
<fun r='_ZN5boost4json6parser5writeEPKcmRSt10error_code'/>
<fun r='_ZN5boost4json6parser5writeEPKcm'/>
<fun r='_ZN5boost4json6parser5writeENS_4core17basic_string_viewIcEERNS_6system10error_codeE'/>
<fun r='_ZN5boost4json6parser5writeENS_4core17basic_string_viewIcEERSt10error_code'/>
<fun r='_ZN5boost4json6parser5writeENS_4core17basic_string_viewIcEE'/>
<fun r='_ZN5boost4json6parser7releaseEv'/>
<fun r='_ZN5boost4json6parserC1ENS0_11storage_ptrERKNS0_13parse_optionsEPhm'/>
<fun r='_ZN5boost4json6parserC1ENS0_11storage_ptrERKNS0_13parse_optionsE'/>
<fun r='_ZN5boost4json6parser5resetENS0_11storage_ptrE'/>
<fun r='_ZN5boost4json6parser10write_someEPKcmRNS_6system10error_codeE'/>
<fun r='_ZN5boost4json6parser10write_someEPKcmRSt10error_code'/>
<fun r='_ZN5boost4json6parser10write_someEPKcm'/>
<fun r='_ZN5boost4json6parser5writeEPKcmRNS_6system10error_codeE'/>
<fun r='_ZN5boost4json6parser5writeEPKcmRSt10error_code'/>
<fun r='_ZN5boost4json6parser5writeEPKcm'/>
<fun r='_ZN5boost4json6parser7releaseEv'/>
