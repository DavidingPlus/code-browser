<inh f='include/unicode/uobject.h' l='223' c='icu_66::UObject'/>
<def f='include/unicode/normalizer2.h' l='85' ll='490'/>
<use f='include/unicode/normalizer2.h' l='104' c='_ZN6icu_6611Normalizer214getNFCInstanceER10UErrorCode'/>
<use f='include/unicode/normalizer2.h' l='118' c='_ZN6icu_6611Normalizer214getNFDInstanceER10UErrorCode'/>
<use f='include/unicode/normalizer2.h' l='132' c='_ZN6icu_6611Normalizer215getNFKCInstanceER10UErrorCode'/>
<use f='include/unicode/normalizer2.h' l='146' c='_ZN6icu_6611Normalizer215getNFKDInstanceER10UErrorCode'/>
<use f='include/unicode/normalizer2.h' l='160' c='_ZN6icu_6611Normalizer223getNFKCCasefoldInstanceER10UErrorCode'/>
<use f='include/unicode/normalizer2.h' l='184' c='_ZN6icu_6611Normalizer211getInstanceEPKcS2_19UNormalization2ModeR10UErrorCode'/>
<ovr f='include/unicode/normalizer2.h' l='503' c='icu_66::FilteredNormalizer2'/>
<use f='include/unicode/normalizer2.h' l='503'/>
<use f='include/unicode/normalizer2.h' l='515' c='_ZN6icu_6619FilteredNormalizer2C1ERKNS_11Normalizer2ERKNS_10UnicodeSetE'/>
<use f='include/unicode/normalizer2.h' l='769'/>
<use f='include/unicode/normlzr.h' l='759'/>
<size>8</size>
<doc f='include/unicode/normalizer2.h' l='42'>/**
 * Unicode normalization functionality for standard Unicode normalization or
 * for using custom mapping tables.
 * All instances of this class are unmodifiable/immutable.
 * Instances returned by getInstance() are singletons that must not be deleted by the caller.
 * The Normalizer2 class is not intended for public subclassing.
 *
 * The primary functions are to produce a normalized string and to detect whether
 * a string is already normalized.
 * The most commonly used normalization forms are those defined in
 * http://www.unicode.org/unicode/reports/tr15/
 * However, this API supports additional normalization forms for specialized purposes.
 * For example, NFKC_Casefold is provided via getInstance(&quot;nfkc_cf&quot;, COMPOSE)
 * and can be used in implementations of UTS #46.
 *
 * Not only are the standard compose and decompose modes supplied,
 * but additional modes are provided as documented in the Mode enum.
 *
 * Some of the functions in this class identify normalization boundaries.
 * At a normalization boundary, the portions of the string
 * before it and starting from it do not interact and can be handled independently.
 *
 * The spanQuickCheckYes() stops at a normalization boundary.
 * When the goal is a normalized string, then the text before the boundary
 * can be copied, and the remainder can be processed with normalizeSecondAndAppend().
 *
 * The hasBoundaryBefore(), hasBoundaryAfter() and isInert() functions test whether
 * a character is guaranteed to be at a normalization boundary,
 * regardless of context.
 * This is used for moving from one normalization boundary to the next
 * or preceding boundary, and for performing iterative normalization.
 *
 * Iterative normalization is useful when only a small portion of a
 * longer string needs to be processed.
 * For example, in ICU, iterative normalization is used by the NormalizationTransliterator
 * (to avoid replacing already-normalized text) and ucol_nextSortKeyPart()
 * (to process only the substring for which sort key bytes are computed).
 *
 * The set of normalization boundaries returned by these functions may not be
 * complete: There may be more boundaries that could be returned.
 * Different functions may return different boundaries.
 * @stable ICU 4.4
 */</doc>
<fun r='_ZN6icu_6611Normalizer2D1Ev'/>
<fun r='_ZN6icu_6611Normalizer214getNFCInstanceER10UErrorCode'/>
<fun r='_ZN6icu_6611Normalizer214getNFDInstanceER10UErrorCode'/>
<fun r='_ZN6icu_6611Normalizer215getNFKCInstanceER10UErrorCode'/>
<fun r='_ZN6icu_6611Normalizer215getNFKDInstanceER10UErrorCode'/>
<fun r='_ZN6icu_6611Normalizer223getNFKCCasefoldInstanceER10UErrorCode'/>
<fun r='_ZN6icu_6611Normalizer211getInstanceEPKcS2_19UNormalization2ModeR10UErrorCode'/>
<fun r='_ZNK6icu_6611Normalizer29normalizeERKNS_13UnicodeStringER10UErrorCode'/>
<fun r='_ZNK6icu_6611Normalizer29normalizeERKNS_13UnicodeStringERS1_R10UErrorCode'/>
<fun r='_ZNK6icu_6611Normalizer213normalizeUTF8EjNS_11StringPieceERNS_8ByteSinkEPNS_5EditsER10UErrorCode'/>
<fun r='_ZNK6icu_6611Normalizer224normalizeSecondAndAppendERNS_13UnicodeStringERKS1_R10UErrorCode'/>
<fun r='_ZNK6icu_6611Normalizer26appendERNS_13UnicodeStringERKS1_R10UErrorCode'/>
<fun r='_ZNK6icu_6611Normalizer216getDecompositionEiRNS_13UnicodeStringE'/>
<fun r='_ZNK6icu_6611Normalizer219getRawDecompositionEiRNS_13UnicodeStringE'/>
<fun r='_ZNK6icu_6611Normalizer211composePairEii'/>
<fun r='_ZNK6icu_6611Normalizer217getCombiningClassEi'/>
<fun r='_ZNK6icu_6611Normalizer212isNormalizedERKNS_13UnicodeStringER10UErrorCode'/>
<fun r='_ZNK6icu_6611Normalizer216isNormalizedUTF8ENS_11StringPieceER10UErrorCode'/>
<fun r='_ZNK6icu_6611Normalizer210quickCheckERKNS_13UnicodeStringER10UErrorCode'/>
<fun r='_ZNK6icu_6611Normalizer217spanQuickCheckYesERKNS_13UnicodeStringER10UErrorCode'/>
<fun r='_ZNK6icu_6611Normalizer217hasBoundaryBeforeEi'/>
<fun r='_ZNK6icu_6611Normalizer216hasBoundaryAfterEi'/>
<fun r='_ZNK6icu_6611Normalizer27isInertEi'/>
