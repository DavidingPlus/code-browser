<def f='boost-1.85.0/libs/json/include/boost/json/value.hpp' l='2026' ll='2032' type='const boost::json::object * boost::json::value::if_object() const'/>
<use f='boost-1.85.0/libs/json/include/boost/json/detail/value_to.hpp' l='103' u='c' c='_ZN5boost4json6detail13value_to_implENS1_21object_conversion_tagENS0_16try_value_to_tagINS0_6objectEEERKNS0_5valueERKT_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/detail/value_to.hpp' l='214' u='c' c='_ZN5boost4json6detail13value_to_implENS1_23map_like_conversion_tagENS0_16try_value_to_tagIT_EERKNS0_5valueERKT0_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/detail/value_to.hpp' l='408' u='c' c='_ZN5boost4json6detail13value_to_implENS1_30described_class_conversion_tagENS0_16try_value_to_tagIT_EERKNS0_5valueERKT0_'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/value.hpp' l='2007'>/** Return an @ref object pointer if this is an object, else return `nullptr`

        If `this-&gt;kind() == kind::object`, returns a pointer
        to the underlying object. Otherwise, returns `nullptr`.

        @par Example
        The return value is used in both a boolean context and
        to assign a variable:
        @code
        if( auto p = jv.if_object() )
            return *p;
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        No-throw guarantee.
    */</doc>
