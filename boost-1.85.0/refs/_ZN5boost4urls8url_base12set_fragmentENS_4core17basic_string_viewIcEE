<dec f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='2435' type='boost::urls::url_base &amp; boost::urls::url_base::set_fragment(core::string_view s)'/>
<use f='boost-1.85.0/libs/url/include/boost/url/url.hpp' l='483' u='c' c='_ZN5boost4urls3url12set_fragmentENS_4core17basic_string_viewIcEE'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='2393'>/** Set the fragment.

        This function sets the fragment to the
        specified string, which may be empty.
        An empty fragment is distinct from
        having no fragment.
        Reserved characters in the string are
        percent-escaped in the result.

        @par Example
        @code
        assert( url(&quot;?first=john&amp;last=doe&quot; ).set_encoded_fragment( &quot;john doe&quot; ).encoded_fragment() == &quot;john%20doe&quot; );
        @endcode

        @par Postconditions
        @code
        this-&gt;has_fragment() == true &amp;&amp; this-&gt;fragment() == s
        @endcode

        @par Complexity
        Linear in `this-&gt;size() + s.size()`.

        @par Exception Safety
        Strong guarantee.
        Calls to allocate may throw.

        @param s The string to set.

        @par BNF
        @code
        fragment    = *( pchar / &quot;/&quot; / &quot;?&quot; )
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.5&quot;
            &gt;3.5.  Fragment&lt;/a&gt;

        @see
            @ref remove_fragment,
            @ref set_encoded_fragment.
    */</doc>
<use f='boost-1.85.0/libs/url/include/boost/url/static_url.hpp' l='415' u='c' c='_ZN5boost4urls10static_url12set_fragmentENS_4core17basic_string_viewIcEE'/>
<def f='boost-1.85.0/libs/url/src/url_base.cpp' l='1481' ll='1502' type='boost::urls::url_base &amp; boost::urls::url_base::set_fragment(core::string_view s)'/>
