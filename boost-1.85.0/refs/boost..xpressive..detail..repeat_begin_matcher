<inh f='boost-1.85.0/libs/xpressive/include/boost/xpressive/detail/core/quant_style.hpp' l='48' c='boost::xpressive::detail::quant_style'/>
<def f='boost-1.85.0/libs/xpressive/include/boost/xpressive/detail/core/matcher/repeat_begin_matcher.hpp' l='32' ll='65'/>
<use f='boost-1.85.0/libs/xpressive/include/boost/xpressive/detail/core/peeker.hpp' l='132' c='_ZN5boost9xpressive6detail16xpression_peeker6acceptERKNS1_20repeat_begin_matcherE'/>
<use f='boost-1.85.0/libs/xpressive/include/boost/xpressive/detail/core/linker.hpp' l='176' c='_ZN5boost9xpressive6detail16xpression_linker6acceptERKNS1_20repeat_begin_matcherEPKv'/>
<use f='boost-1.85.0/libs/xpressive/include/boost/xpressive/detail/static/transforms/as_quantifier.hpp' l='201' c='_ZNK5boost9xpressive14grammar_detail26as_default_quantifier_impl4implclENNS2_4implITL0__TL0_0_TL0_1_EE10expr_paramENS9_11state_paramENS9_10data_paramE'/>
<use f='boost-1.85.0/libs/xpressive/include/boost/xpressive/detail/static/transforms/as_quantifier.hpp' l='287'/>
<size>4</size>
<doc f='boost-1.85.0/libs/xpressive/include/boost/xpressive/detail/core/matcher/repeat_begin_matcher.hpp' l='23'>//
    // Note: here is the variable-width xpression quantifier. It always
    // matches at least once, so if the min is 0, it is the responsibility
    // of the parser to make it alternate with an epsilon matcher.
    //

    ///////////////////////////////////////////////////////////////////////////////
    // repeat_begin_matcher
    //</doc>
<mbr r='boost::xpressive::detail::repeat_begin_matcher::mark_number_' o='0' t='int'/>
<fun r='_ZN5boost9xpressive6detail20repeat_begin_matcherC1Ei'/>
<fun r='_ZNK5boost9xpressive6detail20repeat_begin_matcher5matchERNS1_11match_stateIT_EERKT0_'/>
