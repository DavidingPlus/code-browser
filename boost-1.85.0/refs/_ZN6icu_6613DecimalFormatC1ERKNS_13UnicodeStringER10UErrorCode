<dec f='include/unicode/decimfmt.h' l='713' type='void icu_66::DecimalFormat::DecimalFormat(const icu_66::UnicodeString &amp; pattern, UErrorCode &amp; status)'/>
<doc f='include/unicode/decimfmt.h' l='696'>/**
     * Create a DecimalFormat from the given pattern and the symbols
     * for the default locale. This is a convenient way to obtain a
     * DecimalFormat when internationalization is not the main concern.
     * &lt;P&gt;
     * To obtain standard formats for a given locale, use the factory methods
     * on NumberFormat such as createInstance. These factories will
     * return the most appropriate sub-class of NumberFormat for a given
     * locale.
     * &lt;p&gt;
     * &lt;strong&gt;NOTE:&lt;/strong&gt; New users are strongly encouraged to use
     * #icu::number::NumberFormatter instead of DecimalFormat.
     * @param pattern   A non-localized pattern string.
     * @param status    Output param set to success/failure code. If the
     *                  pattern is invalid this will be set to a failure code.
     * @stable ICU 2.0
     */</doc>
