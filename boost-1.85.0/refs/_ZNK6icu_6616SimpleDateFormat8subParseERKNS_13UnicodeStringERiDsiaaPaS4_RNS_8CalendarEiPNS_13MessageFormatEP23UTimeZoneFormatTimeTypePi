<dec f='include/unicode/smpdtfmt.h' l='1422' type='int32_t icu_66::SimpleDateFormat::subParse(const icu_66::UnicodeString &amp; text, int32_t &amp; start, char16_t ch, int32_t count, UBool obeyCount, UBool allowNegative, UBool * ambiguousYear, int32_t &amp; saveHebrewMonth, icu_66::Calendar &amp; cal, int32_t patLoc, icu_66::MessageFormat * numericLeapMonthFormatter, UTimeZoneFormatTimeType * tzTimeType, int32_t * dayPeriod = __null) const'/>
<doc f='include/unicode/smpdtfmt.h' l='1402'>/**
     * Private member function that converts the parsed date strings into
     * timeFields. Returns -start (for ParsePosition) if failed.
     * @param text the time text to be parsed.
     * @param start where to start parsing.
     * @param ch the pattern character for the date field text to be parsed.
     * @param count the count of a pattern character.
     * @param obeyCount if true then the count is strictly obeyed.
     * @param allowNegative
     * @param ambiguousYear If true then the two-digit year == the default start year.
     * @param saveHebrewMonth Used to hang onto month until year is known.
     * @param cal a Calendar set to the date and time to be formatted
     *            into a date/time string.
     * @param patLoc
     * @param numericLeapMonthFormatter If non-null, used to parse numeric leap months.
     * @param tzTimeType the type of parsed time zone - standard, daylight or unknown (output).
     *      This parameter can be NULL if caller does not need the information.
     * @return the new start position if matching succeeded; a negative number
     * indicating matching failure, otherwise.
     */</doc>
