<dec f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='976' type='core::string_view boost::urls::authority_view::host_ipvfuture() const'/>
<def f='boost-1.85.0/libs/url/src/authority_view.cpp' l='260' ll='273' type='core::string_view boost::urls::authority_view::host_ipvfuture() const'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='946'>/** Return the host IPvFuture address

        If the host type is @ref host_type::ipvfuture,
        this function returns the address as
        a string.
        Otherwise, if the host type is not an
        IPvFuture address, it returns an
        empty string.

        @par Example
        @code
        assert( url_view( &quot;http://[v1fe.d:9]/index.htm&quot; ).host_ipvfuture() == &quot;v1fe.d:9&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        IPvFuture  = &quot;v&quot; 1*HEXDIG &quot;.&quot; 1*( unreserved / sub-delims / &quot;:&quot; )
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.2&quot;
            &gt;3.2.2. Host (rfc3986)&lt;/a&gt;
    */</doc>
