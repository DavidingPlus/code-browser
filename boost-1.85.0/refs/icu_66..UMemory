<def f='include/unicode/uobject.h' l='115' ll='205'/>
<ovr f='include/unicode/uobject.h' l='223' c='icu_66::UObject'/>
<use f='include/unicode/uobject.h' l='223'/>
<ovr f='include/unicode/stringpiece.h' l='60' c='icu_66::StringPiece'/>
<use f='include/unicode/stringpiece.h' l='60'/>
<ovr f='include/unicode/bytestream.h' l='53' c='icu_66::ByteSink'/>
<use f='include/unicode/bytestream.h' l='53'/>
<size>1</size>
<doc f='include/unicode/uobject.h' l='100'>/**
 * UMemory is the common ICU base class.
 * All other ICU C++ classes are derived from UMemory (starting with ICU 2.4).
 *
 * This is primarily to make it possible and simple to override the
 * C++ memory management by adding new/delete operators to this base class.
 *
 * To override ALL ICU memory management, including that from plain C code,
 * replace the allocation functions declared in cmemory.h
 *
 * UMemory does not contain any virtual functions.
 * Common &quot;boilerplate&quot; functions are defined in UObject.
 *
 * @stable ICU 2.4
 */</doc>
<fun r='_ZN6icu_667UMemorynwEm'/>
<fun r='_ZN6icu_667UMemorynaEm'/>
<fun r='_ZN6icu_667UMemorydlEPv'/>
<fun r='_ZN6icu_667UMemorydaEPv'/>
<fun r='_ZN6icu_667UMemorynwEmPv'/>
<fun r='_ZN6icu_667UMemorydlEPvS1_'/>
<ovr f='include/unicode/locid.h' l='1026' c='icu_66::Locale::RangeIterator'/>
<use f='include/unicode/locid.h' l='1026'/>
<ovr f='include/unicode/locid.h' l='1062' c='icu_66::Locale::ConvertingIterator'/>
<use f='include/unicode/locid.h' l='1062'/>
<size>1</size>
<ovr f='include/unicode/tznames.h' l='310' c='icu_66::TimeZoneNames::MatchInfoCollection'/>
<use f='include/unicode/tznames.h' l='310'/>
<ovr f='include/unicode/smpdtfmt.h' l='1616' c='icu_66::SimpleDateFormat::NSOverride'/>
<use f='include/unicode/smpdtfmt.h' l='1616'/>
<size>1</size>
