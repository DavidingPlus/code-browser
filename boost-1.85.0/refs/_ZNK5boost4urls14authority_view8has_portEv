<dec f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='1099' type='bool boost::urls::authority_view::has_port() const'/>
<def f='boost-1.85.0/libs/url/src/authority_view.cpp' l='291' ll='301' type='bool boost::urls::authority_view::has_port() const'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='388' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='389' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='393' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<doc f='boost-1.85.0/libs/url/src/authority_view.cpp' l='285'>//------------------------------------------------
//
// Port
//
//------------------------------------------------</doc>
<doc f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='1066'>/** Return true if a port is present

        This function returns true if an
        authority is present and contains a port.

        @par Example
        @code
        assert( url_view( &quot;wss://www.example.com:443&quot; ).has_port() );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        authority   = [ userinfo &quot;@&quot; ] host [ &quot;:&quot; port ]

        port        = *DIGIT
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.3&quot;
            &gt;3.2.3. Port (rfc3986)&lt;/a&gt;

        @see
            @ref encoded_host_and_port,
            @ref port,
            @ref port_number.
    */</doc>
