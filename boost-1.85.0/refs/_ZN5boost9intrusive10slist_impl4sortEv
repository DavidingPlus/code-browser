<def f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='1505' ll='1506' type='void boost::intrusive::slist_impl::sort()'/>
<doc f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='1489'>//! &lt;b&gt;Requires&lt;/b&gt;: p must be a comparison function that induces a strict weak
   //!   ordering and both *this and x must be sorted according to that ordering
   //!   The lists x and *this must be distinct.
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: This function removes all of x&apos;s elements and inserts them
   //!   in order into *this. The merge is stable; that is, if an element from *this is
   //!   equivalent to one from x, then the element from *this will precede the one from x.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: If value_traits::node_traits::node
   //!   constructor throws (this does not happen with predefined Boost.Intrusive hooks)
   //!   or operator&lt; throws. Basic guarantee.
   //!
   //! &lt;b&gt;Complexity&lt;/b&gt;: This function is linear time: it performs at most
   //!   size() + x.size() - 1 comparisons.
   //!
   //! &lt;b&gt;Note&lt;/b&gt;: Iterators and references are not invalidated.</doc>
