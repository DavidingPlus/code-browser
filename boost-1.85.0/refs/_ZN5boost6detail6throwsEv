<def f='boost-1.85.0/libs/system/include/boost/system/detail/throws.hpp' l='36' ll='48' type='system::error_code * boost::detail::throws()'/>
<use f='boost-1.85.0/libs/system/include/boost/system/detail/throws.hpp' l='54' u='c' c='_ZN5boost6throwsEv'/>
<doc f='boost-1.85.0/libs/system/include/boost/system/detail/throws.hpp' l='28'>//  Misuse of the error_code object is turned into a noisy failure by
//  poisoning the reference. This particular implementation doesn&apos;t
//  produce warnings or errors from popular compilers, is very efficient
//  (as determined by inspecting generated code), and does not suffer
//  from order of initialization problems. In practice, it also seems
//  cause user function error handling implementation errors to be detected
//  very early in the development cycle.</doc>
