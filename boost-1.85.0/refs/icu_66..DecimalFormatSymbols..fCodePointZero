<use f='include/unicode/dcfmtsym.h' l='400' u='r' c='_ZNK6icu_6620DecimalFormatSymbols16getCodePointZeroEv'/>
<dec f='include/unicode/dcfmtsym.h' l='482' type='UChar32'/>
<use f='include/unicode/dcfmtsym.h' l='554' u='w' c='_ZN6icu_6620DecimalFormatSymbols9setSymbolENS0_19ENumberFormatSymbolERKNS_13UnicodeStringEa'/>
<use f='include/unicode/dcfmtsym.h' l='560' u='w' c='_ZN6icu_6620DecimalFormatSymbols9setSymbolENS0_19ENumberFormatSymbolERKNS_13UnicodeStringEa'/>
<use f='include/unicode/dcfmtsym.h' l='563' u='w' c='_ZN6icu_6620DecimalFormatSymbols9setSymbolENS0_19ENumberFormatSymbolERKNS_13UnicodeStringEa'/>
<offset>14912</offset>
<doc f='include/unicode/dcfmtsym.h' l='468'>/**
     * Dealing with code points is faster than dealing with strings when formatting. Because of
     * this, we maintain a value containing the zero code point that is used whenever digitStrings
     * represents a sequence of ten code points in order.
     *
     * &lt;p&gt;If the value stored here is positive, it means that the code point stored in this value
     * corresponds to the digitStrings array, and codePointZero can be used instead of the
     * digitStrings array for the purposes of efficient formatting; if -1, then digitStrings does
     * *not* contain a sequence of code points, and it must be used directly.
     *
     * &lt;p&gt;It is assumed that codePointZero always shadows the value in digitStrings. codePointZero
     * should never be set directly; rather, it should be updated only when digitStrings mutates.
     * That is, the flow of information is digitStrings -&gt; codePointZero, not the other way.
     */</doc>
