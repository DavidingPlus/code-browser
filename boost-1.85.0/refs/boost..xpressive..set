<def f='boost-1.85.0/libs/xpressive/include/boost/xpressive/regex_primitives.hpp' l='513' type='const detail::set_initializer_type'/>
<use f='boost-1.85.0/libs/xpressive/include/boost/xpressive/regex_primitives.hpp' l='901' u='r' c='_ZN5boost9xpressive6detail30ignore_unused_regex_primitivesEv'/>
<doc f='boost-1.85.0/libs/xpressive/include/boost/xpressive/regex_primitives.hpp' l='498'>///////////////////////////////////////////////////////////////////////////////
/// \brief Used to create character sets.
///
/// There are two ways to create character sets with the &apos;set&apos; identifier. The
/// easiest is to create a comma-separated list of the characters in the set,
/// as in (set= &apos;a&apos;,&apos;b&apos;,&apos;c&apos;). This set will match &apos;a&apos;, &apos;b&apos;, or &apos;c&apos;. The other
/// way is to define the set as an argument to the set subscript operator.
/// For instance, set[ &apos;a&apos; | range(&apos;b&apos;,&apos;c&apos;) | digit ] will match an &apos;a&apos;, &apos;b&apos;,
/// &apos;c&apos; or a digit character.
///
/// To complement a set, apply the &apos;~&apos; operator. For instance, ~(set= &apos;a&apos;,&apos;b&apos;,&apos;c&apos;)
/// will match any character that is not an &apos;a&apos;, &apos;b&apos;, or &apos;c&apos;.
///
/// Sets can be composed of other, possibly complemented, sets. For instance,
/// set[ ~digit | ~(set= &apos;a&apos;,&apos;b&apos;,&apos;c&apos;) ].</doc>
