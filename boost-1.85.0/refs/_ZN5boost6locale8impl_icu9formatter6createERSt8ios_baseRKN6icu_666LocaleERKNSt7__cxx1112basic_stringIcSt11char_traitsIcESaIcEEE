<dec f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.hpp' l='67' type='static std::unique_ptr&lt;formatter&lt;CharType&gt;&gt; boost::locale::impl_icu::formatter::create(std::ios_base &amp; ios, const icu::Locale &amp; locale, const std::string &amp; encoding)'/>
<def f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.cpp' l='338' ll='448' type='static std::unique_ptr&lt;formatter&lt;CharType&gt;&gt; boost::locale::impl_icu::formatter::create(std::ios_base &amp; ios, const icu::Locale &amp; locale, const std::string &amp; encoding)'/>
<doc f='boost-1.85.0/libs/locale/src/boost/locale/icu/formatter.hpp' l='48'>/// Get formatter for the current state of ios_base -- flags and locale,
        /// NULL may be returned if an invalid combination of flags is provided or this type
        /// of formatting is not supported by locale.
        ///
        /// Note: formatter is cached. If \a ios is not changed (no flags or locale changed)
        /// the formatter would remain the same. Otherwise it would be rebuild and cached
        /// for future use. It is useful for saving time for generation
        /// of multiple values with same locale.
        ///
        /// For example this code will create a new spelling formatter only once:
        ///
        /// \code
        ///     std::cout &lt;&lt; as::spellout;
        ///     for(int i=1;i&lt;=10;i++)
        ///         std::cout &lt;&lt; i &lt;&lt; std::endl;
        /// \endcode
        ///
        ///</doc>
