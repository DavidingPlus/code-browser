<inh f='include/unicode/calendar.h' l='187' c='icu_66::Calendar'/>
<def f='include/unicode/gregocal.h' l='153' ll='775'/>
<use f='include/unicode/gregocal.h' l='292' c='_ZN6icu_6617GregorianCalendarC1ERKS0_'/>
<use f='include/unicode/gregocal.h' l='299' c='_ZN6icu_6617GregorianCalendaraSERKS0_'/>
<use f='include/unicode/gregocal.h' l='299' c='_ZN6icu_6617GregorianCalendaraSERKS0_'/>
<use f='include/unicode/gregocal.h' l='306' c='_ZNK6icu_6617GregorianCalendar5cloneEv'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/icu/date_time.cpp' l='168' c='_ZNK5boost6locale8impl_icu13calendar_impl10get_optionENS0_17abstract_calendar20calendar_option_typeE'/>
<size>656</size>
<doc f='include/unicode/gregocal.h' l='44'>/** 
 * Concrete class which provides the standard calendar used by most of the world.
 * &lt;P&gt;
 * The standard (Gregorian) calendar has 2 eras, BC and AD.
 * &lt;P&gt;
 * This implementation handles a single discontinuity, which corresponds by default to
 * the date the Gregorian calendar was originally instituted (October 15, 1582). Not all
 * countries adopted the Gregorian calendar then, so this cutover date may be changed by
 * the caller.
 * &lt;P&gt;
 * Prior to the institution of the Gregorian Calendar, New Year&apos;s Day was March 25. To
 * avoid confusion, this Calendar always uses January 1. A manual adjustment may be made
 * if desired for dates that are prior to the Gregorian changeover and which fall
 * between January 1 and March 24.
 *
 * &lt;p&gt;Values calculated for the &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; field range from 1 to
 * 53.  Week 1 for a year is the first week that contains at least
 * &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; days from that year.  It thus
 * depends on the values of &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt;,
 * &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt;, and the day of the week of January 1.
 * Weeks between week 1 of one year and week 1 of the following year are
 * numbered sequentially from 2 to 52 or 53 (as needed).
 *
 * &lt;p&gt;For example, January 1, 1998 was a Thursday.  If
 * &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and
 * &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4 (these are the values
 * reflecting ISO 8601 and many national standards), then week 1 of 1998 starts
 * on December 29, 1997, and ends on January 4, 1998.  If, however,
 * &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;SUNDAY&lt;/code&gt;, then week 1 of 1998
 * starts on January 4, 1998, and ends on January 10, 1998; the first three days
 * of 1998 then are part of week 53 of 1997.
 *
 * &lt;p&gt;Example for using GregorianCalendar:
 * &lt;pre&gt;
 * \code
 *     // get the supported ids for GMT-08:00 (Pacific Standard Time)
 *     UErrorCode success = U_ZERO_ERROR;
 *     const StringEnumeration *ids = TimeZone::createEnumeration(-8 * 60 * 60 * 1000);
 *     // if no ids were returned, something is wrong. get out.
 *     if (ids == 0 || ids-&gt;count(success) == 0) {
 *         return;
 *     }
 *
 *     // begin output
 *     cout &lt;&lt; &quot;Current Time&quot; &lt;&lt; endl;
 *
 *     // create a Pacific Standard Time time zone
 *     SimpleTimeZone* pdt = new SimpleTimeZone(-8 * 60 * 60 * 1000, ids-&gt;unext(NULL, success)));
 *
 *     // set up rules for daylight savings time
 *     pdt-&gt;setStartRule(UCAL_MARCH, 1, UCAL_SUNDAY, 2 * 60 * 60 * 1000);
 *     pdt-&gt;setEndRule(UCAL_NOVEMBER, 2, UCAL_SUNDAY, 2 * 60 * 60 * 1000);
 *
 *     // create a GregorianCalendar with the Pacific Daylight time zone
 *     // and the current date and time
 *     Calendar* calendar = new GregorianCalendar( pdt, success );
 *
 *     // print out a bunch of interesting things
 *     cout &lt;&lt; &quot;ERA: &quot; &lt;&lt; calendar-&gt;get( UCAL_ERA, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;YEAR: &quot; &lt;&lt; calendar-&gt;get( UCAL_YEAR, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;MONTH: &quot; &lt;&lt; calendar-&gt;get( UCAL_MONTH, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;WEEK_OF_YEAR: &quot; &lt;&lt; calendar-&gt;get( UCAL_WEEK_OF_YEAR, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;WEEK_OF_MONTH: &quot; &lt;&lt; calendar-&gt;get( UCAL_WEEK_OF_MONTH, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DATE: &quot; &lt;&lt; calendar-&gt;get( UCAL_DATE, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DAY_OF_MONTH: &quot; &lt;&lt; calendar-&gt;get( UCAL_DAY_OF_MONTH, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DAY_OF_YEAR: &quot; &lt;&lt; calendar-&gt;get( UCAL_DAY_OF_YEAR, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DAY_OF_WEEK: &quot; &lt;&lt; calendar-&gt;get( UCAL_DAY_OF_WEEK, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DAY_OF_WEEK_IN_MONTH: &quot; &lt;&lt; calendar-&gt;get( UCAL_DAY_OF_WEEK_IN_MONTH, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;AM_PM: &quot; &lt;&lt; calendar-&gt;get( UCAL_AM_PM, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;HOUR: &quot; &lt;&lt; calendar-&gt;get( UCAL_HOUR, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;HOUR_OF_DAY: &quot; &lt;&lt; calendar-&gt;get( UCAL_HOUR_OF_DAY, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;MINUTE: &quot; &lt;&lt; calendar-&gt;get( UCAL_MINUTE, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;SECOND: &quot; &lt;&lt; calendar-&gt;get( UCAL_SECOND, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;MILLISECOND: &quot; &lt;&lt; calendar-&gt;get( UCAL_MILLISECOND, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;ZONE_OFFSET: &quot; &lt;&lt; (calendar-&gt;get( UCAL_ZONE_OFFSET, success )/(60*60*1000)) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DST_OFFSET: &quot; &lt;&lt; (calendar-&gt;get( UCAL_DST_OFFSET, success )/(60*60*1000)) &lt;&lt; endl;
 *
 *     cout &lt;&lt; &quot;Current Time, with hour reset to 3&quot; &lt;&lt; endl;
 *     calendar-&gt;clear(UCAL_HOUR_OF_DAY); // so doesn&apos;t override
 *     calendar-&gt;set(UCAL_HOUR, 3);
 *     cout &lt;&lt; &quot;ERA: &quot; &lt;&lt; calendar-&gt;get( UCAL_ERA, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;YEAR: &quot; &lt;&lt; calendar-&gt;get( UCAL_YEAR, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;MONTH: &quot; &lt;&lt; calendar-&gt;get( UCAL_MONTH, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;WEEK_OF_YEAR: &quot; &lt;&lt; calendar-&gt;get( UCAL_WEEK_OF_YEAR, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;WEEK_OF_MONTH: &quot; &lt;&lt; calendar-&gt;get( UCAL_WEEK_OF_MONTH, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DATE: &quot; &lt;&lt; calendar-&gt;get( UCAL_DATE, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DAY_OF_MONTH: &quot; &lt;&lt; calendar-&gt;get( UCAL_DAY_OF_MONTH, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DAY_OF_YEAR: &quot; &lt;&lt; calendar-&gt;get( UCAL_DAY_OF_YEAR, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DAY_OF_WEEK: &quot; &lt;&lt; calendar-&gt;get( UCAL_DAY_OF_WEEK, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;DAY_OF_WEEK_IN_MONTH: &quot; &lt;&lt; calendar-&gt;get( UCAL_DAY_OF_WEEK_IN_MONTH, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;AM_PM: &quot; &lt;&lt; calendar-&gt;get( UCAL_AM_PM, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;HOUR: &quot; &lt;&lt; calendar-&gt;get( UCAL_HOUR, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;HOUR_OF_DAY: &quot; &lt;&lt; calendar-&gt;get( UCAL_HOUR_OF_DAY, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;MINUTE: &quot; &lt;&lt; calendar-&gt;get( UCAL_MINUTE, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;SECOND: &quot; &lt;&lt; calendar-&gt;get( UCAL_SECOND, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;MILLISECOND: &quot; &lt;&lt; calendar-&gt;get( UCAL_MILLISECOND, success ) &lt;&lt; endl;
 *     cout &lt;&lt; &quot;ZONE_OFFSET: &quot; &lt;&lt; (calendar-&gt;get( UCAL_ZONE_OFFSET, success )/(60*60*1000)) &lt;&lt; endl; // in hours
 *     cout &lt;&lt; &quot;DST_OFFSET: &quot; &lt;&lt; (calendar-&gt;get( UCAL_DST_OFFSET, success )/(60*60*1000)) &lt;&lt; endl; // in hours
 *
 *     if (U_FAILURE(success)) {
 *         cout &lt;&lt; &quot;An error occured. success=&quot; &lt;&lt; u_errorName(success) &lt;&lt; endl;
 *     }
 *
 *     delete ids;
 *     delete calendar; // also deletes pdt
 * \endcode
 * &lt;/pre&gt;
 * @stable ICU 2.0
 */</doc>
<fun r='_ZN6icu_6617GregorianCalendarC1ER10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendarC1EPNS_8TimeZoneER10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendarC1ERKNS_8TimeZoneER10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendarC1ERKNS_6LocaleER10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendarC1EPNS_8TimeZoneERKNS_6LocaleER10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendarC1ERKNS_8TimeZoneERKNS_6LocaleER10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendarC1EiiiR10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendarC1EiiiiiR10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendarC1EiiiiiiR10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendarD1Ev'/>
<fun r='_ZN6icu_6617GregorianCalendarC1ERKS0_'/>
<fun r='_ZN6icu_6617GregorianCalendaraSERKS0_'/>
<fun r='_ZNK6icu_6617GregorianCalendar5cloneEv'/>
<fun r='_ZN6icu_6617GregorianCalendar18setGregorianChangeEdR10UErrorCode'/>
<fun r='_ZNK6icu_6617GregorianCalendar18getGregorianChangeEv'/>
<fun r='_ZNK6icu_6617GregorianCalendar10isLeapYearEi'/>
<fun r='_ZNK6icu_6617GregorianCalendar14isEquivalentToERKNS_8CalendarE'/>
<fun r='_ZN6icu_6617GregorianCalendar4rollENS_8Calendar11EDateFieldsEiR10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendar4rollE19UCalendarDateFieldsiR10UErrorCode'/>
<fun r='_ZNK6icu_6617GregorianCalendar16getActualMinimumENS_8Calendar11EDateFieldsE'/>
<fun r='_ZNK6icu_6617GregorianCalendar16getActualMinimumENS_8Calendar11EDateFieldsER10UErrorCode'/>
<fun r='_ZNK6icu_6617GregorianCalendar16getActualMinimumE19UCalendarDateFieldsR10UErrorCode'/>
<fun r='_ZNK6icu_6617GregorianCalendar16getActualMaximumENS_8Calendar11EDateFieldsE'/>
<fun r='_ZNK6icu_6617GregorianCalendar16getActualMaximumE19UCalendarDateFieldsR10UErrorCode'/>
<fun r='_ZNK6icu_6617GregorianCalendar14inDaylightTimeER10UErrorCode'/>
<fun r='_ZNK6icu_6617GregorianCalendar17getDynamicClassIDEv'/>
<fun r='_ZN6icu_6617GregorianCalendar16getStaticClassIDEv'/>
<fun r='_ZNK6icu_6617GregorianCalendar7getTypeEv'/>
<fun r='_ZN6icu_6617GregorianCalendarC1Ev'/>
<fun r='_ZNK6icu_6617GregorianCalendar14internalGetEraEv'/>
<fun r='_ZNK6icu_6617GregorianCalendar23handleComputeMonthStartEiia'/>
<fun r='_ZN6icu_6617GregorianCalendar22handleComputeJulianDayE19UCalendarDateFields'/>
<fun r='_ZNK6icu_6617GregorianCalendar20handleGetMonthLengthEii'/>
<fun r='_ZNK6icu_6617GregorianCalendar19handleGetYearLengthEi'/>
<fun r='_ZNK6icu_6617GregorianCalendar11monthLengthEi'/>
<fun r='_ZNK6icu_6617GregorianCalendar11monthLengthEii'/>
<fun r='_ZNK6icu_6617GregorianCalendar10yearLengthEi'/>
<fun r='_ZNK6icu_6617GregorianCalendar10yearLengthEv'/>
<fun r='_ZN6icu_6617GregorianCalendar13pinDayOfMonthEv'/>
<fun r='_ZN6icu_6617GregorianCalendar11getEpochDayER10UErrorCode'/>
<fun r='_ZNK6icu_6617GregorianCalendar14handleGetLimitE19UCalendarDateFieldsNS_8Calendar10ELimitTypeE'/>
<fun r='_ZN6icu_6617GregorianCalendar21handleGetExtendedYearEv'/>
<fun r='_ZN6icu_6617GregorianCalendar35handleGetExtendedYearFromWeekFieldsEii'/>
<fun r='_ZN6icu_6617GregorianCalendar19handleComputeFieldsEiR10UErrorCode'/>
<fun r='_ZN6icu_6617GregorianCalendar22computeJulianDayOfYearEaiRa'/>
<fun r='_ZNK6icu_6617GregorianCalendar14validateFieldsEv'/>
<fun r='_ZNK6icu_6617GregorianCalendar11boundsCheckEi19UCalendarDateFields'/>
<fun r='_ZN6icu_6617GregorianCalendar14aggregateStampEii'/>
<mbr r='icu_66::GregorianCalendar::fGregorianCutover' o='4928' t='UDate'/>
<mbr r='icu_66::GregorianCalendar::fCutoverJulianDay' o='4992' t='int32_t'/>
<mbr r='icu_66::GregorianCalendar::fNormalizedGregorianCutover' o='5056' t='UDate'/>
<mbr r='icu_66::GregorianCalendar::fGregorianCutoverYear' o='5120' t='int32_t'/>
<mbr r='icu_66::GregorianCalendar::fGregorianCutoverJulianDay' o='5152' t='int32_t'/>
<fun r='_ZN6icu_6617GregorianCalendar17millisToJulianDayEd'/>
<fun r='_ZN6icu_6617GregorianCalendar17julianDayToMillisEd'/>
<mbr r='icu_66::GregorianCalendar::fIsGregorian' o='5184' t='UBool'/>
<mbr r='icu_66::GregorianCalendar::fInvertGregorian' o='5192' t='UBool'/>
<fun r='_ZNK6icu_6617GregorianCalendar18haveDefaultCenturyEv'/>
<fun r='_ZNK6icu_6617GregorianCalendar19defaultCenturyStartEv'/>
<fun r='_ZNK6icu_6617GregorianCalendar23defaultCenturyStartYearEv'/>
