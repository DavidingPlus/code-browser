<inh f='boost-1.85.0/libs/container/include/boost/container/pmr/memory_resource.hpp' l='31' c='boost::container::pmr::memory_resource'/>
<def f='boost-1.85.0/libs/json/include/boost/json/static_resource.hpp' l='68' ll='223'/>
<use f='boost-1.85.0/libs/json/include/boost/json/static_resource.hpp' l='81' c='_ZN5boost4json15static_resourceC1ERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/static_resource.hpp' l='84' c='_ZN5boost4json15static_resourceaSERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/static_resource.hpp' l='85' c='_ZN5boost4json15static_resourceaSERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/static_resource.hpp' l='147' c='_ZN5boost4json15static_resourceC1ERAT__h'/>
<use f='boost-1.85.0/libs/json/include/boost/json/static_resource.hpp' l='167' c='_ZN5boost4json15static_resourceC1ERAT__hm'/>
<use f='boost-1.85.0/libs/json/include/boost/json/static_resource.hpp' l='231'/>
<size>32</size>
<doc f='boost-1.85.0/libs/json/include/boost/json/static_resource.hpp' l='29'>/** A resource using a caller-owned buffer, with a trivial deallocate

    This memory resource is a special-purpose resource
    that releases allocated memory only when the resource
    is destroyed (or when @ref release is called).
    It has a trivial deallocate function; that is, the
    metafunction @ref is_deallocate_trivial returns `true`.
\n
    The resource is constructed from a caller-owned buffer
    from which subsequent calls to allocate are apportioned.
    When a memory request cannot be satisfied from the
    free bytes remaining in the buffer, the allocation
    request fails with the exception `std::bad_alloc`.
\n
    @par Example

    This parses a JSON text into a value which uses a local
    stack buffer, then prints the result.

    @code

    unsigned char buf[ 4000 ];
    static_resource mr( buf );

    // Parse the string, using our memory resource
    value const jv = parse( &quot;[1,2,3]&quot;, &amp;mr );

    // Print the JSON
    std::cout &lt;&lt; jv;

    @endcode

    @par Thread Safety
    Members of the same instance may not be
    called concurrently.

    @see
        https://en.wikipedia.org/wiki/Region-based_memory_management
*/</doc>
<mbr r='boost::json::static_resource::p_' o='64' t='void *'/>
<mbr r='boost::json::static_resource::n_' o='128' t='std::size_t'/>
<mbr r='boost::json::static_resource::size_' o='192' t='std::size_t'/>
<fun r='_ZN5boost4json15static_resourceC1ERKS1_'/>
<fun r='_ZN5boost4json15static_resourceaSERKS1_'/>
<fun r='_ZN5boost4json15static_resourceC1EPhm'/>
<fun r='_ZN5boost4json15static_resourceC1ERAT__h'/>
<fun r='_ZN5boost4json15static_resourceC1ERAT__hm'/>
<fun r='_ZN5boost4json15static_resource7releaseEv'/>
<fun r='_ZN5boost4json15static_resource11do_allocateEmm'/>
<fun r='_ZN5boost4json15static_resource13do_deallocateEPvmm'/>
<fun r='_ZNK5boost4json15static_resource11do_is_equalERKNS_9container3pmr15memory_resourceE'/>
<fun r='_ZN5boost4json15static_resourceC1EPhm'/>
<fun r='_ZN5boost4json15static_resource7releaseEv'/>
<fun r='_ZN5boost4json15static_resource11do_allocateEmm'/>
<fun r='_ZN5boost4json15static_resource13do_deallocateEPvmm'/>
<fun r='_ZNK5boost4json15static_resource11do_is_equalERKNS_9container3pmr15memory_resourceE'/>
