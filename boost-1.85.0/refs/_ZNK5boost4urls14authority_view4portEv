<dec f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='1134' type='core::string_view boost::urls::authority_view::port() const'/>
<def f='boost-1.85.0/libs/url/src/authority_view.cpp' l='303' ll='312' type='core::string_view boost::urls::authority_view::port() const'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='396' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<use f='boost-1.85.0/libs/url/src/authority_view.cpp' l='397' u='c' c='_ZNK5boost4urls14authority_view7compareERKS1_'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/authority_view.hpp' l='1101'>/** Return the port

        If present, this function returns a
        string representing the port (which
        may be empty).
        Otherwise it returns an empty string.

        @par Example
        @code
        assert( url_view( &quot;http://localhost.com:8080&quot; ).port() == &quot;8080&quot; );
        @endcode

        @par Complexity
        Constant.

        @par Exception Safety
        Throws nothing.

        @par BNF
        @code
        port        = *DIGIT
        @endcode

        @par Specification
        @li &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-3.2.3&quot;
            &gt;3.2.3. Port (rfc3986)&lt;/a&gt;

        @see
            @ref encoded_host_and_port,
            @ref has_port,
            @ref port_number.
    */</doc>
