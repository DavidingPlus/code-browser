<def f='boost-1.85.0/libs/atomic/include/boost/atomic/detail/extra_fp_ops_generic.hpp' l='50' ll='91'/>
<def f='boost-1.85.0/libs/atomic/include/boost/atomic/detail/extra_fp_ops_generic.hpp' l='96' ll='121'/>
<use f='boost-1.85.0/libs/atomic/include/boost/atomic/detail/extra_fp_ops_generic.hpp' l='128'/>
<use f='boost-1.85.0/libs/atomic/include/boost/atomic/detail/extra_fp_ops_generic.hpp' l='130'/>
<doc f='boost-1.85.0/libs/atomic/include/boost/atomic/detail/extra_fp_ops_generic.hpp' l='95'>//! Negate implementation for IEEE 754 / IEC 559 floating point types. We leverage the fact that the sign bit is the most significant bit in the value.</doc>
<fun r='_ZN5boost7atomics6detail23extra_fp_negate_generic12fetch_negateERVNT_12storage_typeENS_12memory_orderE'/>
<fun r='_ZN5boost7atomics6detail23extra_fp_negate_generic6negateERVNT_12storage_typeENS_12memory_orderE'/>
<fun r='_ZN5boost7atomics6detail23extra_fp_negate_generic13opaque_negateERVNT_12storage_typeENS_12memory_orderE'/>
<smbr r='boost::atomics::detail::extra_fp_negate_generic{type-parameter-0-0,type-parameter-0-1,Size,true}::sign_mask' t='const boost::atomics::detail::extra_fp_negate_generic&lt;type-parameter-0-0, type-parameter-0-1, Size, true&gt;::storage_type'/>
<fun r='_ZN5boost7atomics6detail23extra_fp_negate_genericIT_T0_XT1_ELb1EE12fetch_negateERVNS3_12storage_typeENS_12memory_orderE'/>
<fun r='_ZN5boost7atomics6detail23extra_fp_negate_genericIT_T0_XT1_ELb1EE6negateERVNS3_12storage_typeENS_12memory_orderE'/>
<fun r='_ZN5boost7atomics6detail23extra_fp_negate_genericIT_T0_XT1_ELb1EE13opaque_negateERVNS3_12storage_typeENS_12memory_orderE'/>
