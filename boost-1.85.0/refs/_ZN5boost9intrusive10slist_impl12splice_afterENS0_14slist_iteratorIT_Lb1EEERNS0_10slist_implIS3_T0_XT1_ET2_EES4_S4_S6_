<def f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='1337' ll='1347' type='void boost::intrusive::slist_impl::splice_after(boost::intrusive::slist_impl::const_iterator prev_pos, slist_impl&lt;ValueTraits, SizeType, BoolFlags, HeaderHolder&gt; &amp; x, boost::intrusive::slist_impl::const_iterator before_f, boost::intrusive::slist_impl::const_iterator before_l, boost::intrusive::slist_impl::size_type n)'/>
<doc f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='1323'>//! &lt;b&gt;Requires&lt;/b&gt;: prev_pos must be a dereferenceable iterator in *this or be
   //!   before_begin(), and before_f and before_l belong to x and
   //!   ++before_f != x.end() &amp;&amp; before_l != x.end() and
   //!   n == distance(before_f, before_l).
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: Transfers the range (before_f, before_l] from list x to this
   //!   list, after the element pointed by p. No destructors or copy constructors are called.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: Nothing.
   //!
   //! &lt;b&gt;Complexity&lt;/b&gt;: Constant time.
   //!
   //! &lt;b&gt;Note&lt;/b&gt;: Iterators of values obtained from list x now point to elements of this
   //!   list. Iterators of this list and all the references are not invalidated.</doc>
