<def f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='1904' ll='1918' type='void boost::intrusive::slist_impl::incorporate_after(boost::intrusive::slist_impl::const_iterator prev_pos, boost::intrusive::slist_impl::node_ptr f, boost::intrusive::slist_impl::node_ptr before_l, boost::intrusive::slist_impl::size_type n)'/>
<doc f='boost-1.85.0/libs/intrusive/include/boost/intrusive/slist.hpp' l='1888'>//! &lt;b&gt;Requires&lt;/b&gt;: prev_pos must be a dereferenceable iterator in *this or be
   //!   before_begin(), and f and before_l belong to another slist.
   //!   n == distance(f, before_l) + 1.
   //!
   //! &lt;b&gt;Effects&lt;/b&gt;: Transfers the range [f, before_l] to this
   //!   list, after the element pointed by prev_pos.
   //!   No destructors or copy constructors are called.
   //!
   //! &lt;b&gt;Throws&lt;/b&gt;: Nothing.
   //!
   //! &lt;b&gt;Complexity&lt;/b&gt;: Constant time.
   //!
   //! &lt;b&gt;Note&lt;/b&gt;: Iterators of values obtained from the list that owned f and before_l now
   //!   point to elements of this list. Iterators of this list and all the references are not invalidated.
   //!
   //! &lt;b&gt;Warning&lt;/b&gt;: Experimental function, don&apos;t use it!</doc>
