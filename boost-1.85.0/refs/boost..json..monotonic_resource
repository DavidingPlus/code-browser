<inh f='boost-1.85.0/libs/container/include/boost/container/pmr/memory_resource.hpp' l='31' c='boost::container::pmr::memory_resource'/>
<def f='boost-1.85.0/libs/json/include/boost/json/monotonic_resource.hpp' l='87' ll='339'/>
<use f='boost-1.85.0/libs/json/include/boost/json/monotonic_resource.hpp' l='117' c='_ZN5boost4json18monotonic_resourceC1ERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/monotonic_resource.hpp' l='120' c='_ZN5boost4json18monotonic_resourceaSERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/monotonic_resource.hpp' l='121' c='_ZN5boost4json18monotonic_resourceaSERKS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/monotonic_resource.hpp' l='252' c='_ZN5boost4json18monotonic_resourceC1ERAT__hNS0_11storage_ptrE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/monotonic_resource.hpp' l='277' c='_ZN5boost4json18monotonic_resourceC1ERAT__hmNS0_11storage_ptrE'/>
<use f='boost-1.85.0/libs/json/include/boost/json/monotonic_resource.hpp' l='347'/>
<size>64</size>
<doc f='boost-1.85.0/libs/json/include/boost/json/monotonic_resource.hpp' l='32'>/** A dynamically allocating resource with a trivial deallocate

    This memory resource is a special-purpose resource
    that releases allocated memory only when the resource
    is destroyed (or when @ref release is called).
    It has a trivial deallocate function; that is, the
    metafunction @ref is_deallocate_trivial returns `true`.
\n
    The resource can be constructed with an initial buffer.
    If there is no initial buffer, or if the buffer is
    exhausted, subsequent dynamic allocations are made from
    the system heap. The size of buffers obtained in this
    fashion follow a geometric progression.
\n
    The purpose of this resource is to optimize the use
    case for performing many allocations, followed by
    deallocating everything at once. This is precisely the
    pattern of memory allocation which occurs when parsing:
    allocation is performed for each parsed element, and
    when the the resulting @ref value is no longer needed,
    the entire structure is destroyed. However, it is not
    suited for modifying the value after parsing is
    complete; reallocations waste memory, since the
    older buffer is not reclaimed until the resource
    is destroyed.

    @par Example

    This parses a JSON text into a value which uses a local
    stack buffer, then prints the result.

    @code

    unsigned char buf[ 4000 ];
    monotonic_resource mr( buf );

    // Parse the string, using our memory resource
    auto const jv = parse( &quot;[1,2,3]&quot;, &amp;mr );

    // Print the JSON
    std::cout &lt;&lt; jv;

    @endcode

    @note The total amount of memory dynamically
    allocated is monotonically increasing; That is,
    it never decreases.

    @par Thread Safety
    Members of the same instance may not be
    called concurrently.

    @see
        https://en.wikipedia.org/wiki/Region-based_memory_management
*/</doc>
<mbr r='boost::json::monotonic_resource::buffer_' o='64' t='boost::json::monotonic_resource::block_base'/>
<mbr r='boost::json::monotonic_resource::head_' o='320' t='boost::json::monotonic_resource::block_base *'/>
<mbr r='boost::json::monotonic_resource::next_size_' o='384' t='std::size_t'/>
<mbr r='boost::json::monotonic_resource::upstream_' o='448' t='boost::json::storage_ptr'/>
<smbr r='boost::json::monotonic_resource::min_size_' t='const std::size_t'/>
<fun r='_ZN5boost4json18monotonic_resource8max_sizeEv'/>
<fun r='_ZN5boost4json18monotonic_resource10round_pow2Em'/>
<fun r='_ZN5boost4json18monotonic_resource9next_pow2Em'/>
<fun r='_ZN5boost4json18monotonic_resourceC1ERKS1_'/>
<fun r='_ZN5boost4json18monotonic_resourceaSERKS1_'/>
<fun r='_ZN5boost4json18monotonic_resourceD1Ev'/>
<fun r='_ZN5boost4json18monotonic_resourceC1EmNS0_11storage_ptrE'/>
<fun r='_ZN5boost4json18monotonic_resourceC1EPhmNS0_11storage_ptrE'/>
<fun r='_ZN5boost4json18monotonic_resourceC1ERAT__hNS0_11storage_ptrE'/>
<fun r='_ZN5boost4json18monotonic_resourceC1ERAT__hmNS0_11storage_ptrE'/>
<fun r='_ZN5boost4json18monotonic_resource7releaseEv'/>
<fun r='_ZN5boost4json18monotonic_resource11do_allocateEmm'/>
<fun r='_ZN5boost4json18monotonic_resource13do_deallocateEPvmm'/>
<fun r='_ZNK5boost4json18monotonic_resource11do_is_equalERKNS_9container3pmr15memory_resourceE'/>
<fun r='_ZN5boost4json18monotonic_resource8max_sizeEv'/>
<fun r='_ZN5boost4json18monotonic_resource10round_pow2Em'/>
<fun r='_ZN5boost4json18monotonic_resource9next_pow2Em'/>
<fun r='_ZN5boost4json18monotonic_resourceD1Ev'/>
<fun r='_ZN5boost4json18monotonic_resourceC1EmNS0_11storage_ptrE'/>
<fun r='_ZN5boost4json18monotonic_resourceC1EPhmNS0_11storage_ptrE'/>
<fun r='_ZN5boost4json18monotonic_resource7releaseEv'/>
<fun r='_ZN5boost4json18monotonic_resource11do_allocateEmm'/>
<fun r='_ZN5boost4json18monotonic_resource13do_deallocateEPvmm'/>
<fun r='_ZNK5boost4json18monotonic_resource11do_is_equalERKNS_9container3pmr15memory_resourceE'/>
