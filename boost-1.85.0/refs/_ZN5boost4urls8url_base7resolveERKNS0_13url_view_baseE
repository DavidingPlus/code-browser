<dec f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='2748' type='system::result&lt;void&gt; boost::urls::url_base::resolve(const boost::urls::url_view_base &amp; ref)'/>
<use f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='2911' u='c' c='_ZN5boost4urls7resolveERKNS0_13url_view_baseES3_RNS0_8url_baseE'/>
<doc f='boost-1.85.0/libs/url/include/boost/url/url_base.hpp' l='2661'>/** Resolve a URL reference against this base URL

        This function attempts to resolve a URL
        reference `ref` against this base URL
        in a manner similar to that of a web browser
        resolving an anchor tag.

        This URL must satisfy the &lt;em&gt;URI&lt;/em&gt;
        grammar. In other words, it must contain
        a scheme.

        Relative references are only usable when
        in the context of a base absolute URI.
        This process of resolving a relative
        &lt;em&gt;reference&lt;/em&gt; within the context of
        a &lt;em&gt;base&lt;/em&gt; URI is defined in detail
        in rfc3986 (see below).

        The resolution process works as if the
        relative reference is appended to the base
        URI and the result is normalized.

        Given the input base URL, this function
        resolves the relative reference
        as if performing the following steps:

        @li Ensure the base URI has at least a scheme
        @li Normalizing the reference path
        @li Merge base and reference paths
        @li Normalize the merged path

        This function places the result of the
        resolution into this URL in place.

        If an error occurs, the contents of
        this URL are unspecified and a @ref result
        with an `system::error_code` is returned.

        @note Abnormal hrefs where the number of &quot;..&quot;
        segments exceeds the number of segments in
        the base path are handled by including the
        unmatched &quot;..&quot; segments in the result, as described
        in &lt;a href=&quot;https://www.rfc-editor.org/errata/eid4547&quot;
        &gt;Errata 4547&lt;/a&gt;.

        @par Example
        @code
        url base1( &quot;/one/two/three&quot; );
        base1.resolve(&quot;four&quot;);
        assert( base1.buffer() == &quot;/one/two/four&quot; );

        url base2( &quot;http://example.com/&quot; )
        base2.resolve(&quot;/one&quot;);
        assert( base2.buffer() == &quot;http://example.com/one&quot; );

        url base3( &quot;http://example.com/one&quot; );
        base3.resolve(&quot;/two&quot;);
        assert( base3.buffer() == &quot;http://example.com/two&quot; );

        url base4( &quot;http://a/b/c/d;p?q&quot; );
        base4.resolve(&quot;g#s&quot;);
        assert( base4.buffer() == &quot;http://a/b/c/g#s&quot; );
        @endcode

        @par BNF
        @code
        absolute-URI  = scheme &quot;:&quot; hier-part [ &quot;?&quot; query ]
        @endcode

        @par Exception Safety
        Basic guarantee.
        Calls to allocate may throw.

        @return An empty @ref result upon success,
        otherwise an error code if `!base.has_scheme()`.

        @param ref The URL reference to resolve.

        @par Specification
        &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc3986#section-5&quot;
            &gt;5. Reference Resolution (rfc3986)&lt;/a&gt;

        @see
            @ref url,
            @ref url_view.
    */</doc>
<def f='boost-1.85.0/libs/url/src/url_base.cpp' l='1538' ll='1655' type='system::result&lt;void&gt; boost::urls::url_base::resolve(const boost::urls::url_view_base &amp; ref)'/>
<doc f='boost-1.85.0/libs/url/src/url_base.cpp' l='1532'>//------------------------------------------------
//
// Resolution
//
//------------------------------------------------</doc>
