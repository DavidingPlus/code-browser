<def f='boost-1.85.0/libs/asio/include/boost/asio/handler_continuation_hook.hpp' l='46' ll='49' type='bool boost::asio::asio_handler_is_continuation()'/>
<doc f='boost-1.85.0/libs/asio/include/boost/asio/handler_continuation_hook.hpp' l='26'>/**
 * Asynchronous operations may represent a continuation of the asynchronous
 * control flow associated with the current handler. The implementation can use
 * this knowledge to optimise scheduling of the handler.
 *
 * Implement asio_handler_is_continuation for your own handlers to indicate
 * when a handler represents a continuation.
 *
 * The default implementation of the continuation hook returns &lt;tt&gt;false&lt;/tt&gt;.
 *
 * @par Example
 * @code
 * class my_handler;
 *
 * bool asio_handler_is_continuation(my_handler* context)
 * {
 *   return true;
 * }
 * @endcode
 */</doc>
