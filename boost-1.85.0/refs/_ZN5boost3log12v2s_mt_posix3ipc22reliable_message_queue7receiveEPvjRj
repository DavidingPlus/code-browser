<def f='boost-1.85.0/libs/log/include/boost/log/utility/ipc/reliable_message_queue.hpp' l='551' ll='557' type='boost::log::ipc::reliable_message_queue::operation_result boost::log::ipc::reliable_message_queue::receive(void * buffer, boost::log::ipc::reliable_message_queue::size_type buffer_size, boost::log::ipc::reliable_message_queue::size_type &amp; message_size)'/>
<doc f='boost-1.85.0/libs/log/include/boost/log/utility/ipc/reliable_message_queue.hpp' l='532'>/*!
     * The method takes a message from the associated message queue. When the object is in
     * running state and the queue is empty, the method blocks. The blocking is interrupted
     * when &lt;tt&gt;stop_local()&lt;/tt&gt; is called, in which case the method returns \c operation_result::aborted.
     * When the object is already in the stopped state and the queue is empty, the method
     * does not block but returns immediately with return value \c operation_result::aborted.
     *
     * Concurrent calls to &lt;tt&gt;send()&lt;/tt&gt;, &lt;tt&gt;try_send()&lt;/tt&gt;, &lt;tt&gt;receive()&lt;/tt&gt;,
     * &lt;tt&gt;try_receive()&lt;/tt&gt;, &lt;tt&gt;stop_local()&lt;/tt&gt;, and &lt;tt&gt;clear()&lt;/tt&gt; are allowed.
     *
     * \pre &lt;tt&gt;is_open() == true&lt;/tt&gt;
     *
     * \param buffer The memory buffer to store the received message in.
     * \param buffer_size The size of the buffer, in bytes.
     * \param message_size Receives the size of the received message, in bytes.
     *
     * \retval operation_result::succeeded if the operation is successful
     * \retval operation_result::aborted if the call was interrupted by &lt;tt&gt;stop_local()&lt;/tt&gt;
     */</doc>
