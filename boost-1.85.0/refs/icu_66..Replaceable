<inh f='include/unicode/uobject.h' l='223' c='icu_66::UObject'/>
<def f='include/unicode/rep.h' l='77' ll='241'/>
<use f='include/unicode/rep.h' l='203' c='_ZNK6icu_6611Replaceable5cloneEv'/>
<ovr f='include/unicode/unistr.h' l='294' c='icu_66::UnicodeString'/>
<use f='include/unicode/unistr.h' l='294'/>
<use f='include/unicode/uiter.h' l='703' c='uiter_setReplaceable_66'/>
<size>8</size>
<doc f='include/unicode/rep.h' l='34'>/**
 * &lt;code&gt;Replaceable&lt;/code&gt; is an abstract base class representing a
 * string of characters that supports the replacement of a range of
 * itself with a new string of characters.  It is used by APIs that
 * change a piece of text while retaining metadata.  Metadata is data
 * other than the Unicode characters returned by char32At().  One
 * example of metadata is style attributes; another is an edit
 * history, marking each character with an author and revision number.
 *
 * &lt;p&gt;An implicit aspect of the &lt;code&gt;Replaceable&lt;/code&gt; API is that
 * during a replace operation, new characters take on the metadata of
 * the old characters.  For example, if the string &quot;the &lt;b&gt;bold&lt;/b&gt;
 * font&quot; has range (4, 8) replaced with &quot;strong&quot;, then it becomes &quot;the
 * &lt;b&gt;strong&lt;/b&gt; font&quot;.
 *
 * &lt;p&gt;&lt;code&gt;Replaceable&lt;/code&gt; specifies ranges using a start
 * offset and a limit offset.  The range of characters thus specified
 * includes the characters at offset start..limit-1.  That is, the
 * start offset is inclusive, and the limit offset is exclusive.
 *
 * &lt;p&gt;&lt;code&gt;Replaceable&lt;/code&gt; also includes API to access characters
 * in the string: &lt;code&gt;length()&lt;/code&gt;, &lt;code&gt;charAt()&lt;/code&gt;,
 * &lt;code&gt;char32At()&lt;/code&gt;, and &lt;code&gt;extractBetween()&lt;/code&gt;.
 *
 * &lt;p&gt;For a subclass to support metadata, typical behavior of
 * &lt;code&gt;replace()&lt;/code&gt; is the following:
 * &lt;ul&gt;
 *   &lt;li&gt;Set the metadata of the new text to the metadata of the first
 *   character replaced&lt;/li&gt;
 *   &lt;li&gt;If no characters are replaced, use the metadata of the
 *   previous character&lt;/li&gt;
 *   &lt;li&gt;If there is no previous character (i.e. start == 0), use the
 *   following character&lt;/li&gt;
 *   &lt;li&gt;If there is no following character (i.e. the replaceable was
 *   empty), use default metadata.&lt;br&gt;
 *   &lt;li&gt;If the code point U+FFFF is seen, it should be interpreted as
 *   a special marker having no metadata&lt;li&gt;
 *   &lt;/li&gt;
 * &lt;/ul&gt;
 * If this is not the behavior, the subclass should document any differences.
 * @author Alan Liu
 * @stable ICU 2.0
 */</doc>
<fun r='_ZN6icu_6611ReplaceableD1Ev'/>
<fun r='_ZNK6icu_6611Replaceable6lengthEv'/>
<fun r='_ZNK6icu_6611Replaceable6charAtEi'/>
<fun r='_ZNK6icu_6611Replaceable8char32AtEi'/>
<fun r='_ZNK6icu_6611Replaceable14extractBetweenEiiRNS_13UnicodeStringE'/>
<fun r='_ZN6icu_6611Replaceable20handleReplaceBetweenEiiRKNS_13UnicodeStringE'/>
<fun r='_ZN6icu_6611Replaceable4copyEiii'/>
<fun r='_ZNK6icu_6611Replaceable11hasMetaDataEv'/>
<fun r='_ZNK6icu_6611Replaceable5cloneEv'/>
<fun r='_ZN6icu_6611ReplaceableC1Ev'/>
<fun r='_ZNK6icu_6611Replaceable9getLengthEv'/>
<fun r='_ZNK6icu_6611Replaceable9getCharAtEi'/>
<fun r='_ZNK6icu_6611Replaceable11getChar32AtEi'/>
<fun r='_ZN6icu_6611ReplaceableC1Ev'/>
<fun r='_ZNK6icu_6611Replaceable6lengthEv'/>
<fun r='_ZNK6icu_6611Replaceable6charAtEi'/>
<fun r='_ZNK6icu_6611Replaceable8char32AtEi'/>
<use f='include/unicode/utext.h' l='294' c='utext_openReplaceable_66'/>
<size>8</size>
<use f='include/unicode/unimatch.h' l='126' c='_ZN6icu_6614UnicodeMatcher7matchesERKNS_11ReplaceableERiia'/>
<use f='include/unicode/unifilt.h' l='102' c='_ZN6icu_6613UnicodeFilter7matchesERKNS_11ReplaceableERiia'/>
<use f='include/unicode/uniset.h' l='1002' c='_ZN6icu_6610UnicodeSet7matchesERKNS_11ReplaceableERiia'/>
<use f='include/unicode/uniset.h' l='1030' c='_ZN6icu_6610UnicodeSet9matchRestERKNS_11ReplaceableEiiRKNS_13UnicodeStringE'/>
<size>8</size>
