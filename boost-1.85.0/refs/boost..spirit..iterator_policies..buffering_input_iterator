<use f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/iterators/multi_pass_fwd.hpp' l='50'/>
<def f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/iterators/detail/buffering_input_iterator_policy.hpp' l='30' ll='124'/>
<size>1</size>
<doc f='boost-1.85.0/libs/spirit/include/boost/spirit/home/support/iterators/detail/buffering_input_iterator_policy.hpp' l='18'>///////////////////////////////////////////////////////////////////////////
    //  class input_iterator
    //
    //  Implementation of the InputPolicy used by multi_pass, this is different 
    //  from the input_iterator policy only as it is buffering the last input
    //  character to allow returning it by reference. This is needed for
    //  wrapping iterators not buffering the last item (such as the 
    //  std::istreambuf_iterator). Unfortunately there is no way to 
    //  automatically figure this out at compile time.
    // 
    //  The buffering_input_iterator encapsulates an input iterator of type T
    ///////////////////////////////////////////////////////////////////////////</doc>
