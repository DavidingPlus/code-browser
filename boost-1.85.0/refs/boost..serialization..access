<use f='boost-1.85.0/libs/core/include/boost/core/serialization.hpp' l='89'/>
<use f='boost-1.85.0/libs/unordered/include/boost/unordered/detail/serialization_version.hpp' l='39'/>
<use f='boost-1.85.0/libs/unordered/include/boost/unordered/detail/fca.hpp' l='293'/>
<use f='boost-1.85.0/libs/unordered/include/boost/unordered/detail/implementation.hpp' l='1064'/>
<use f='boost-1.85.0/libs/unordered/include/boost/unordered/detail/implementation.hpp' l='1167'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/bucket_array.hpp' l='196'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/index_node_base.hpp' l='75'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index/detail/serialization_version.hpp' l='42'/>
<use f='boost-1.85.0/libs/multi_index/include/boost/multi_index_container.hpp' l='1108'/>
<def f='boost-1.85.0/libs/serialization/include/boost/serialization/access.hpp' l='49' ll='140'/>
<size>1</size>
<doc f='boost-1.85.0/libs/serialization/include/boost/serialization/access.hpp' l='44'>// use an &quot;accessor class so that we can use:
// &quot;friend class boost::serialization::access;&quot;
// in any serialized class to permit clean, safe access to private class members
// by the serialization system</doc>
<fun r='_ZN5boost13serialization6access11member_saveERT_RT0_j'/>
<fun r='_ZN5boost13serialization6access11member_loadERT_RT0_j'/>
<fun r='_ZN5boost13serialization6access9serializeERT_RT0_j'/>
<fun r='_ZN5boost13serialization6access7destroyEPKT_'/>
<fun r='_ZN5boost13serialization6access9constructEPT_'/>
<fun r='_ZN5boost13serialization6access14cast_referenceERT0_'/>
<fun r='_ZN5boost13serialization6access12cast_pointerEPT0_'/>
