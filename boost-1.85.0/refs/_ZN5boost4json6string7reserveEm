<def f='boost-1.85.0/libs/json/include/boost/json/string.hpp' l='1473' ll='1479' type='void boost::json::string::reserve(std::size_t new_capacity)'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/string.ipp' l='367' u='c' c='_ZN5boost4json6string6resizeEmc'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/value_stack.ipp' l='423' u='c' c='_ZN5boost4json11value_stack11push_stringENS_4core17basic_string_viewIcEE'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/string.hpp' l='1444'>/** Increase the capacity to at least a certain amount.

        This increases the capacity of the array to a value
        that is greater than or equal to `new_capacity`. If
        `new_capacity &gt; capacity()`, new memory is
        allocated. Otherwise, the call has no effect.
        The number of elements and therefore the
        @ref size() of the container is not changed.

        @par Complexity

        At most, linear in @ref size().

        @par Exception Safety

        Strong guarantee.
        Calls to `memory_resource::allocate` may throw.

        @note

        If new memory is allocated, all iterators including
        any past-the-end iterators, and all references to
        the elements are invalidated. Otherwise, no
        iterators or references are invalidated.

        @param new_capacity The new capacity of the array.

        @throw `boost::system::system_error` `new_capacity &gt; max_size()`.
    */</doc>
