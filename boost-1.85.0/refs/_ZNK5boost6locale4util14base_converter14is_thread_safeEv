<def f='boost-1.85.0/libs/locale/include/boost/locale/util.hpp' l='91' type='bool boost::locale::util::base_converter::is_thread_safe() const'/>
<ovr f='boost-1.85.0/libs/locale/src/boost/locale/icu/codecvt.cpp' l='30' c='_ZNK5boost6locale8impl_icu15uconv_converter14is_thread_safeEv'/>
<doc f='boost-1.85.0/libs/locale/include/boost/locale/util.hpp' l='84'>/// Returns true if calling the functions from_unicode, to_unicode, and max_len is thread safe.
            ///
            /// Rule of thumb: if this class&apos; implementation uses simple tables that are unchanged
            /// or is purely algorithmic like UTF-8 - so it does not share any mutable bit for
            /// independent to_unicode, from_unicode calls, you may set it to true, otherwise,
            /// for example if you use iconv_t descriptor or UConverter as conversion object return false,
            /// and this object will be cloned for each use.</doc>
<ovr f='boost-1.85.0/libs/locale/src/boost/locale/shared/iconv_codecvt.cpp' l='59' c='_ZNK5boost6locale19mb2_iconv_converter14is_thread_safeEv'/>
<ovr f='boost-1.85.0/libs/locale/src/boost/locale/util/codecvt_converter.cpp' l='35' c='_ZNK5boost6locale4util14utf8_converter14is_thread_safeEv'/>
<ovr f='boost-1.85.0/libs/locale/src/boost/locale/util/codecvt_converter.cpp' l='137' c='_ZNK5boost6locale4util16simple_converter14is_thread_safeEv'/>
<use f='boost-1.85.0/libs/locale/src/boost/locale/util/codecvt_converter.cpp' l='266' u='c' c='_ZN5boost6locale4utilL17do_create_codecvtERKSt6localeSt10unique_ptrINS1_14base_converterESt14default_deleteIS6_EE'/>
