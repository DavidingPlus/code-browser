<def f='boost-1.85.0/libs/contract/include/boost/contract/core/exception.hpp' l='703' ll='709' type='void boost::contract::except_failure(boost::contract::from where)'/>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/core/exception.hpp' l='683'>/**
Call failure handler for exception guarantees.

This is often called only internally by this library.

@b Throws:  This can throw in case programmers specify a failure handler that
            throws exceptions on contract assertion failures (not the default),
            however:

@warning    When this failure handler is called there is already an active
            exception (the one that caused the exception guarantees to be
            checked in the first place).
            Therefore, programming this failure handler to throw yet another
            exception will force C++ to automatically terminate the program.

@param where Operation that failed the contract assertion.

@see    @RefSect{advanced.throw_on_failures__and__noexcept__, Throw on Failure},
        @RefSect{tutorial.exception_guarantees, Exception Guarantees}
*/</doc>
<doc f='boost-1.85.0/libs/contract/include/boost/contract/core/exception.hpp' l='703'>/* can throw */</doc>
