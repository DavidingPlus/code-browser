<def f='boost-1.85.0/libs/json/include/boost/json/string.hpp' l='205' ll='210' type='void boost::json::string::string(pilfered&lt;boost::json::string&gt; other)'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/string.ipp' l='391' u='c' c='_ZN5boost4json6string4swapERS1_'/>
<use f='boost-1.85.0/libs/json/include/boost/json/impl/string.ipp' l='393' u='c' c='_ZN5boost4json6string4swapERS1_'/>
<doc f='boost-1.85.0/libs/json/include/boost/json/string.hpp' l='183'>/** Pilfer constructor.

        The string is constructed by acquiring ownership
        of the contents of `other` using pilfer semantics.
        This is more efficient than move construction, when
        it is known that the moved-from object will be
        immediately destroyed afterwards.

        @par Complexity
        Constant.

        @par Exception Safety
        No-throw guarantee.

        @param other The value to pilfer. After pilfer
        construction, `other` is not in a usable state
        and may only be destroyed.

        @see @ref pilfer,
            &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0308r0.html&quot;&gt;
                Valueless Variants Considered Harmful&lt;/a&gt;
    */</doc>
